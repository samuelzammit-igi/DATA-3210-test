{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v7.json", "dbt_version": "1.3.4", "generated_at": "2023-12-05T14:40:09.444075Z", "invocation_id": "d37c680b-5868-4a38-8196-12b69bfaa8eb", "env": {}, "project_id": "0cce4bac34a25f8ddd8fa7ec1d7b6721", "user_id": "448db350-d3bc-4b16-8f6a-7e7bd984e0f9", "send_anonymous_usage_stats": true, "adapter_type": "synapse"}, "nodes": {"model.iginsure.dmn_activity_date_ranges": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.iginsure.dmn_policy_part"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["InwardPremium"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "domain", "dmn_activity_date_ranges"], "unique_id": "model.iginsure.dmn_activity_date_ranges", "raw_code": "{{ config(\r\n    tags=['InwardPremium'],\r\n    materialized='table'\r\n) }}\r\n\r\nwith\r\n\r\ndmn_policy_part as (\r\n    select * from {{ ref('dmn_policy_part') }}\r\n),\r\n\r\nranked_activities_for_date as (\r\n    select\r\n        policy_id,\r\n        activity_id,\r\n        activity_written_timestamp,\r\n        activity_notes,\r\n        row_number() over (\r\n            partition by policy_id, cast(activity_written_timestamp as Date)\r\n            order by activity_id desc\r\n        ) as rank\r\n    from\r\n        dmn_policy_part\r\n    where\r\n        activity_written_timestamp is not null\r\n        and written_account_period is not null\r\n),\r\n\r\nmax_activities_for_date as (\r\n    select\r\n        policy_id,\r\n        activity_id,\r\n        cast(activity_written_timestamp as Date) as activity_written_date\r\n    from\r\n        ranked_activities_for_date\r\n    where\r\n        rank = 1\r\n),\r\n\r\nactivity_notes_for_date as (\r\n    select \r\n        policy_id,\r\n        cast(activity_written_timestamp as Date) as activity_written_date,\r\n        string_agg(activity_notes, '\\n ') within group (order by activity_written_timestamp) as activity_notes\r\n    from\r\n        ranked_activities_for_date\r\n    group by\r\n        policy_id,\r\n        activity_written_timestamp\r\n\r\n),\r\n\r\ndate_ranges as (\r\n    select\r\n        policy_id,\r\n        activity_id,\r\n        activity_written_date as active_from_date,\r\n        lead(activity_written_date) over (partition by policy_id order by activity_written_date) as active_until_date\r\n    from\r\n        max_activities_for_date\r\n),\r\n\r\nranked_activities_for_period as (\r\n    select\r\n        policy_id,\r\n        activity_id,\r\n        --written_account_period_aus,\r\n        written_account_period,\r\n        row_number() over (\r\n            partition by policy_id, written_account_period\r\n            order by activity_id desc\r\n        ) as rank\r\n\r\n    from\r\n        dmn_policy_part\r\n    where\r\n        activity_written_timestamp is not null\r\n        and written_account_period is not null\r\n),\r\n\r\nmax_activities_for_period as (\r\n    select\r\n        policy_id,\r\n        activity_id,\r\n        written_account_period\r\n    from\r\n        ranked_activities_for_period\r\n    where\r\n        rank = 1\r\n),\r\n\r\n\r\nperiod_ranges as (\r\n    select\r\n        policy_id,\r\n        activity_id,\r\n        written_account_period as active_from_period,\r\n        lead(written_account_period) over (partition by policy_id order by written_account_period) as active_until_period\r\n    from\r\n        max_activities_for_period\r\n),\r\n\r\nactivity_ranges as (\r\n    select\r\n        dmn_policy_part.policy_reference,\r\n        dmn_policy_part.policy_id,\r\n        dmn_policy_part.activity_id,\r\n        dmn_policy_part.line_division as division,\r\n        dmn_policy_part.line_subdivision as subdivision,\r\n        dmn_policy_part.line_producing_office as producing_office,\r\n        dmn_policy_part.activity_state,\r\n        dmn_policy_part.policy_state,\r\n        dmn_policy_part.activity_state_is_active,\r\n        dmn_policy_part.activity_created,\r\n        dmn_policy_part.activity_placement_code,\r\n        dmn_policy_part.activity_placement_mop,\r\n        dmn_policy_part.section_class,\r\n        dmn_policy_part.line_product_name as product_name,\r\n        dmn_policy_part.product_segregation_name,\r\n        dmn_policy_part.segmentation,\r\n        dmn_policy_part.budget_segmentation,\r\n        dmn_policy_part.sub_class_segmentation,\r\n        dmn_policy_part.producer_source_group_name,\r\n        dmn_policy_part.line_producer as producer,\r\n        dmn_policy_part.producer_group_name,\r\n        dmn_policy_part.activity_type_of_insurance,\r\n        dmn_policy_part.coverage_description,\r\n        dmn_policy_part.coverage_code,\r\n        dmn_policy_part.line_territory,\r\n        dmn_policy_part.line_domicile,\r\n        dmn_policy_part.line_region as region,\r\n        dmn_policy_part.US_NonUS as region_Split,\r\n        dmn_policy_part.mis_uw_year,\r\n        dmn_policy_part.uw_year,\r\n        dmn_policy_part.insured,\r\n        dmn_policy_part.reassured,\r\n        dmn_policy_part.file_handler,\r\n        dmn_policy_part.underwriter,\r\n        dmn_policy_part.recommended_underwriter,\r\n        dmn_policy_part.admin_file_handler,\r\n        dmn_policy_part.operator_id,\r\n        dmn_policy_part.policy_inception,\r\n        dmn_policy_part.policy_expiry,\r\n        dmn_policy_part.policy_expiry_reported,\r\n        dmn_policy_part.New_vs_Renwal,\r\n        activity_notes_for_date.activity_notes,\r\n\r\n        dmn_policy_part.written_account_period,\r\n        dmn_policy_part.written_account_period / 100 as written_year,\r\n        dmn_policy_part.written_account_period % 100 as written_month,\r\n        dmn_policy_part.activity_period_from,\r\n        dmn_policy_part.activity_period_to,\r\n        date_ranges.active_from_date,\r\n        date_ranges.active_until_date,\r\n        period_ranges.active_from_period,\r\n        period_ranges.active_until_period\r\n\r\n    from\r\n        dmn_policy_part\r\n        left join date_ranges on\r\n            dmn_policy_part.policy_id = date_ranges.policy_id\r\n            and dmn_policy_part.activity_id = date_ranges.activity_id\r\n        left join activity_notes_for_date on\r\n            date_ranges.policy_id = activity_notes_for_date.policy_id\r\n            and date_ranges.active_from_date = activity_notes_for_date.activity_written_date\r\n        left join period_ranges on\r\n            dmn_policy_part.policy_id = period_ranges.policy_id\r\n            and dmn_policy_part.activity_id = period_ranges.activity_id\r\n   \r\n    where\r\n        date_ranges.active_from_date is not null\r\n        or period_ranges.active_from_period is not null\r\n)\r\n\r\nselect * from activity_ranges", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "domain\\dmn_activity_date_ranges.sql", "original_file_path": "models\\domain\\dmn_activity_date_ranges.sql", "name": "dmn_activity_date_ranges", "alias": "dmn_activity_date_ranges", "checksum": {"name": "sha256", "checksum": "681c56d9e6d6916bf5348c210982a662b63306563d01003443c0d2a38c101a78"}, "tags": ["InwardPremium"], "refs": [["dmn_policy_part"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": "iginsure://models\\domain\\domain.yml", "compiled_path": "target\\compiled\\iginsure\\models\\domain\\dmn_activity_date_ranges.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "docs": {"show": false}, "tags": ["InwardPremium"], "materialized": "table"}, "created_at": 1701786801.1889272, "compiled_code": "\n\nwith\n\ndmn_policy_part as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"dmn_policy_part\"\n),\n\nranked_activities_for_date as (\n    select\n        policy_id,\n        activity_id,\n        activity_written_timestamp,\n        activity_notes,\n        row_number() over (\n            partition by policy_id, cast(activity_written_timestamp as Date)\n            order by activity_id desc\n        ) as rank\n    from\n        dmn_policy_part\n    where\n        activity_written_timestamp is not null\n        and written_account_period is not null\n),\n\nmax_activities_for_date as (\n    select\n        policy_id,\n        activity_id,\n        cast(activity_written_timestamp as Date) as activity_written_date\n    from\n        ranked_activities_for_date\n    where\n        rank = 1\n),\n\nactivity_notes_for_date as (\n    select \n        policy_id,\n        cast(activity_written_timestamp as Date) as activity_written_date,\n        string_agg(activity_notes, '\\n ') within group (order by activity_written_timestamp) as activity_notes\n    from\n        ranked_activities_for_date\n    group by\n        policy_id,\n        activity_written_timestamp\n\n),\n\ndate_ranges as (\n    select\n        policy_id,\n        activity_id,\n        activity_written_date as active_from_date,\n        lead(activity_written_date) over (partition by policy_id order by activity_written_date) as active_until_date\n    from\n        max_activities_for_date\n),\n\nranked_activities_for_period as (\n    select\n        policy_id,\n        activity_id,\n        --written_account_period_aus,\n        written_account_period,\n        row_number() over (\n            partition by policy_id, written_account_period\n            order by activity_id desc\n        ) as rank\n\n    from\n        dmn_policy_part\n    where\n        activity_written_timestamp is not null\n        and written_account_period is not null\n),\n\nmax_activities_for_period as (\n    select\n        policy_id,\n        activity_id,\n        written_account_period\n    from\n        ranked_activities_for_period\n    where\n        rank = 1\n),\n\n\nperiod_ranges as (\n    select\n        policy_id,\n        activity_id,\n        written_account_period as active_from_period,\n        lead(written_account_period) over (partition by policy_id order by written_account_period) as active_until_period\n    from\n        max_activities_for_period\n),\n\nactivity_ranges as (\n    select\n        dmn_policy_part.policy_reference,\n        dmn_policy_part.policy_id,\n        dmn_policy_part.activity_id,\n        dmn_policy_part.line_division as division,\n        dmn_policy_part.line_subdivision as subdivision,\n        dmn_policy_part.line_producing_office as producing_office,\n        dmn_policy_part.activity_state,\n        dmn_policy_part.policy_state,\n        dmn_policy_part.activity_state_is_active,\n        dmn_policy_part.activity_created,\n        dmn_policy_part.activity_placement_code,\n        dmn_policy_part.activity_placement_mop,\n        dmn_policy_part.section_class,\n        dmn_policy_part.line_product_name as product_name,\n        dmn_policy_part.product_segregation_name,\n        dmn_policy_part.segmentation,\n        dmn_policy_part.budget_segmentation,\n        dmn_policy_part.sub_class_segmentation,\n        dmn_policy_part.producer_source_group_name,\n        dmn_policy_part.line_producer as producer,\n        dmn_policy_part.producer_group_name,\n        dmn_policy_part.activity_type_of_insurance,\n        dmn_policy_part.coverage_description,\n        dmn_policy_part.coverage_code,\n        dmn_policy_part.line_territory,\n        dmn_policy_part.line_domicile,\n        dmn_policy_part.line_region as region,\n        dmn_policy_part.US_NonUS as region_Split,\n        dmn_policy_part.mis_uw_year,\n        dmn_policy_part.uw_year,\n        dmn_policy_part.insured,\n        dmn_policy_part.reassured,\n        dmn_policy_part.file_handler,\n        dmn_policy_part.underwriter,\n        dmn_policy_part.recommended_underwriter,\n        dmn_policy_part.admin_file_handler,\n        dmn_policy_part.operator_id,\n        dmn_policy_part.policy_inception,\n        dmn_policy_part.policy_expiry,\n        dmn_policy_part.policy_expiry_reported,\n        dmn_policy_part.New_vs_Renwal,\n        activity_notes_for_date.activity_notes,\n\n        dmn_policy_part.written_account_period,\n        dmn_policy_part.written_account_period / 100 as written_year,\n        dmn_policy_part.written_account_period % 100 as written_month,\n        dmn_policy_part.activity_period_from,\n        dmn_policy_part.activity_period_to,\n        date_ranges.active_from_date,\n        date_ranges.active_until_date,\n        period_ranges.active_from_period,\n        period_ranges.active_until_period\n\n    from\n        dmn_policy_part\n        left join date_ranges on\n            dmn_policy_part.policy_id = date_ranges.policy_id\n            and dmn_policy_part.activity_id = date_ranges.activity_id\n        left join activity_notes_for_date on\n            date_ranges.policy_id = activity_notes_for_date.policy_id\n            and date_ranges.active_from_date = activity_notes_for_date.activity_written_date\n        left join period_ranges on\n            dmn_policy_part.policy_id = period_ranges.policy_id\n            and dmn_policy_part.activity_id = period_ranges.activity_id\n   \n    where\n        date_ranges.active_from_date is not null\n        or period_ranges.active_from_period is not null\n)\n\nselect * from activity_ranges", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"dmn_activity_date_ranges\""}, "model.iginsure.dmn_claim": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.iginsure.scd_claim", "model.iginsure.scd_claim_section", "model.iginsure.scd_claim_movement", "model.iginsure.scd_type_of_event", "model.iginsure.scd_type_of_event_type", "model.iginsure.scd_type_of_rag", "model.iginsure.scd_zone_country", "model.iginsure.stg_contact", "model.iginsure.scd_type_of_loss", "model.iginsure.stg_entity_instance_states", "model.iginsure.scd_currency", "model.iginsure.scd_account_period", "model.iginsure.stg_claim_dates", "model.iginsure.stg_claimgroup_linkedclaims"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "domain", "dmn_claim"], "unique_id": "model.iginsure.dmn_claim", "raw_code": "with \r\n\r\nclaim as (\r\n    select * from {{ ref('scd_claim') }} where _valid_to is null\r\n),\r\n\r\nclaim_section as (\r\n    select * from {{ ref('scd_claim_section') }} where _valid_to is null\r\n),\r\n\r\nclaim_movement as (\r\n    select * from {{ ref('scd_claim_movement') }} where _valid_to is null\r\n),\r\n\r\ntype_of_event as (\r\n    select * from {{ ref('scd_type_of_event') }} where _valid_to is null\r\n),\r\n\r\ntype_of_event_type as (\r\n    select * from {{ ref('scd_type_of_event_type') }} where _valid_to is null\r\n),\r\n\r\ntype_of_rag as (\r\n    select * from {{ ref('scd_type_of_rag') }} where _valid_to is null\r\n),\r\n\r\nzone_country as (\r\n    select * from {{ ref('scd_zone_country') }} where _valid_to is null\r\n),\r\n\r\nstg_contact as (\r\n    select * from {{ ref('stg_contact') }}\r\n),\r\n\r\ntype_of_loss as (\r\n    select * from {{ ref('scd_type_of_loss') }} where _valid_to is null\r\n),\r\n\r\nstg_entity_instance_states as (\r\n    select * from {{ ref('stg_entity_instance_states') }} where entity_type = 'Claim Movement' \r\n),\r\n\r\ncurrency as (\r\n    select * from {{ ref('scd_currency') }} where _valid_to is null\r\n),\r\n\r\naccount_period as (\r\n    select * from {{ ref('scd_account_period') }} where _valid_to is null\r\n),\r\n\r\nclaim_dates as (\r\n    select * from {{ ref('stg_claim_dates') }}\r\n),\r\n\r\nlinked_claim as (\r\n    select * from {{ref('stg_claimgroup_linkedclaims')}}\r\n),\r\n\r\ndmn_inward_claim as(\r\n    select\r\n        claim.lClaimKey as claim_id,\r\n        claim.lPolicykey as policy_id,\r\n        claim.lPolicyLineKey as policy_line_id,\r\n        claim.lPolicyActivityKey as policy_activity_id,\r\n        claim_section.lClaimSectionKey as claim_section_id,\r\n        claim_movement.lClaimMovementKey as claim_movement_id,\r\n        claim.sClaimReference as claim_reference,\r\n        claim.sUCR as ucr,\r\n        claim.sClaimDescription as claim_description,\r\n        claim.sPoliceIncidentReference as police_incident_ref,\r\n        claim.dtLossFROM as date_of_loss_from,\r\n        claim.DTREPORTED as date_notified,\r\n        type_of_event.SEVENTCODE as event_code,\r\n        type_of_event.SEVENTDESC as event_description,\r\n        type_of_event_type.sTypeofEventDescr as event_type,\r\n        torag.sTypeofRAGDescr as rag,\r\n        claim.dClaimPotential as claim_potential,\r\n        loss_country.sCountry as loss_location_country,\r\n        claim.dtClosed as closed_date,\r\n        case when claim.bInlitigation = 0 then 'NO' else 'YES' end as inlitigation,\r\n        adjuster_contact.contact_reference as adjustor,\r\n        type_of_loss.STYPEOFLOSS as type_of_loss,\r\n        claim.dtLastReviewed as last_reviewed,\r\n        claim.nAccidentYear as accident_year,\r\n        claim_state.entity_state as claim_status,\r\n        claim_handler_contact.contact_reference as claim_handler,\r\n        claim.bBureauClaim as bureau_claim,\r\n        claim.dtNextReviewed as review_date,\r\n        currency.sCcy as section_orig_currency,\r\n        account_period.lAccountPeriodKey as account_period_id,\r\n        account_period.nYearPeriod as account_period,\r\n        case\r\n            when claim_movement_state.entity_state in ('Authorised', 'Paid')\r\n            then claim_movement.dTotalResChangeAuthOrigShare\r\n            else 0\r\n        end as os_orig,\r\n        case\r\n            when claim_movement_state.entity_state in ('Authorised', 'Paid')\r\n            then \r\n                case\r\n                    when claim_movement.ltypeofmovementkey in(18,2000001,2000025,2000021,16)\r\n                    then -1 * (claim_movement.dPaidThisTimeOrigShare)\r\n                    else (claim_movement.dPaidThisTimeOrigShare)\r\n                end \r\n            else 0\r\n        end as paid_orig,\r\n        claim_movement.dPayROEOrig as paid_roe,\r\n        claim_movement_state.entity_state as claim_movement_status,\r\n        case\r\n            when claim_movement.lTransactionTypeKey = 15 /*Indemnity*/\r\n            then 'indemnity'\r\n            else 'expense'\r\n        end as section_type,\r\n       claim.nYearOfAccount,\r\n       claim_dates.LastOSDate,\r\n       claim_dates.LastPaidDate,\r\n       claim_dates.InitialOSDate,\r\n       case when lc.parent_claim_reference is null then claim.sclaimreference else lc.parent_claim_reference end parent_claim_reference\r\n    from\r\n        claim\r\n        inner join claim_section on \r\n            claim.lClaimKey = claim_section.lClaimKey\r\n        inner join claim_dates on \r\n            claim.lClaimKey = claim_dates.lClaimKey\r\n        inner join claim_movement on \r\n            claim_section.lClaimSectionKey = claim_movement.lClaimSectionKey \r\n        inner join account_period on \r\n            claim_movement.lAccountPeriodKey = account_period.lAccountPeriodKey\r\n        left join type_of_event on \r\n            claim.lEventKey = type_of_event.LEVENTKEY\r\n        left join type_of_event_type on \r\n            claim.lTypeofEventType = type_of_event_type.lTypeofEventKey\r\n        left join type_of_rag torag on \r\n            claim.lTypeOfRAGKey = torag.lTypeOfRAGKey\r\n        left join zone_country loss_country on \r\n            claim.lLossLocationCountryKey = loss_country.lCountryKey\r\n        left join stg_contact as adjuster_contact on \r\n            claim.lExternalAdjusterContactKey = adjuster_contact.contact_id\r\n        left join type_of_loss on\r\n            claim.lTypeOfLossKey = type_of_loss.LTYPEOFLOSSKEY\r\n        left join stg_entity_instance_states as claim_state on \r\n            claim.lClaimKey = claim_state.instance_id\r\n            and claim_state.entity_type = 'Claim'\r\n        left join stg_contact as claim_handler_contact on \r\n            claim.lClaimHandlerKey = claim_handler_contact.contact_id\r\n        left join currency on \r\n            claim_section.lReserveCcyOrigKey = currency.lCurrencyKey\r\n        left join stg_entity_instance_states as claim_movement_state on \r\n            claim_movement.lClaimMovementKey = claim_movement_state.instance_id\r\n        left join linked_claim lc on claim.lclaimkey = lc.claim_id\r\n            \r\n)\r\n\r\nselect * from dmn_inward_claim", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "domain\\dmn_claim.sql", "original_file_path": "models\\domain\\dmn_claim.sql", "name": "dmn_claim", "alias": "dmn_claim", "checksum": {"name": "sha256", "checksum": "0c9e1928e6e7cb381859edd209e9bc881ae280485773d9f12b11b5ebc122d9b1"}, "tags": [], "refs": [["scd_claim"], ["scd_claim_section"], ["scd_claim_movement"], ["scd_type_of_event"], ["scd_type_of_event_type"], ["scd_type_of_rag"], ["scd_zone_country"], ["stg_contact"], ["scd_type_of_loss"], ["stg_entity_instance_states"], ["scd_currency"], ["scd_account_period"], ["stg_claim_dates"], ["stg_claimgroup_linkedclaims"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": "iginsure://models\\domain\\domain.yml", "compiled_path": "target\\compiled\\iginsure\\models\\domain\\dmn_claim.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "docs": {"show": false}}, "created_at": 1701786801.1939735, "compiled_code": "with \n\nclaim as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"scd_claim\" where _valid_to is null\n),\n\nclaim_section as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"scd_claim_section\" where _valid_to is null\n),\n\nclaim_movement as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"scd_claim_movement\" where _valid_to is null\n),\n\ntype_of_event as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"scd_type_of_event\" where _valid_to is null\n),\n\ntype_of_event_type as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"scd_type_of_event_type\" where _valid_to is null\n),\n\ntype_of_rag as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"scd_type_of_rag\" where _valid_to is null\n),\n\nzone_country as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"scd_zone_country\" where _valid_to is null\n),\n\nstg_contact as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"stg_contact\"\n),\n\ntype_of_loss as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"scd_type_of_loss\" where _valid_to is null\n),\n\nstg_entity_instance_states as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"stg_entity_instance_states\" where entity_type = 'Claim Movement' \n),\n\ncurrency as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"scd_currency\" where _valid_to is null\n),\n\naccount_period as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"scd_account_period\" where _valid_to is null\n),\n\nclaim_dates as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"stg_claim_dates\"\n),\n\nlinked_claim as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"stg_claimgroup_linkedclaims\"\n),\n\ndmn_inward_claim as(\n    select\n        claim.lClaimKey as claim_id,\n        claim.lPolicykey as policy_id,\n        claim.lPolicyLineKey as policy_line_id,\n        claim.lPolicyActivityKey as policy_activity_id,\n        claim_section.lClaimSectionKey as claim_section_id,\n        claim_movement.lClaimMovementKey as claim_movement_id,\n        claim.sClaimReference as claim_reference,\n        claim.sUCR as ucr,\n        claim.sClaimDescription as claim_description,\n        claim.sPoliceIncidentReference as police_incident_ref,\n        claim.dtLossFROM as date_of_loss_from,\n        claim.DTREPORTED as date_notified,\n        type_of_event.SEVENTCODE as event_code,\n        type_of_event.SEVENTDESC as event_description,\n        type_of_event_type.sTypeofEventDescr as event_type,\n        torag.sTypeofRAGDescr as rag,\n        claim.dClaimPotential as claim_potential,\n        loss_country.sCountry as loss_location_country,\n        claim.dtClosed as closed_date,\n        case when claim.bInlitigation = 0 then 'NO' else 'YES' end as inlitigation,\n        adjuster_contact.contact_reference as adjustor,\n        type_of_loss.STYPEOFLOSS as type_of_loss,\n        claim.dtLastReviewed as last_reviewed,\n        claim.nAccidentYear as accident_year,\n        claim_state.entity_state as claim_status,\n        claim_handler_contact.contact_reference as claim_handler,\n        claim.bBureauClaim as bureau_claim,\n        claim.dtNextReviewed as review_date,\n        currency.sCcy as section_orig_currency,\n        account_period.lAccountPeriodKey as account_period_id,\n        account_period.nYearPeriod as account_period,\n        case\n            when claim_movement_state.entity_state in ('Authorised', 'Paid')\n            then claim_movement.dTotalResChangeAuthOrigShare\n            else 0\n        end as os_orig,\n        case\n            when claim_movement_state.entity_state in ('Authorised', 'Paid')\n            then \n                case\n                    when claim_movement.ltypeofmovementkey in(18,2000001,2000025,2000021,16)\n                    then -1 * (claim_movement.dPaidThisTimeOrigShare)\n                    else (claim_movement.dPaidThisTimeOrigShare)\n                end \n            else 0\n        end as paid_orig,\n        claim_movement.dPayROEOrig as paid_roe,\n        claim_movement_state.entity_state as claim_movement_status,\n        case\n            when claim_movement.lTransactionTypeKey = 15 /*Indemnity*/\n            then 'indemnity'\n            else 'expense'\n        end as section_type,\n       claim.nYearOfAccount,\n       claim_dates.LastOSDate,\n       claim_dates.LastPaidDate,\n       claim_dates.InitialOSDate,\n       case when lc.parent_claim_reference is null then claim.sclaimreference else lc.parent_claim_reference end parent_claim_reference\n    from\n        claim\n        inner join claim_section on \n            claim.lClaimKey = claim_section.lClaimKey\n        inner join claim_dates on \n            claim.lClaimKey = claim_dates.lClaimKey\n        inner join claim_movement on \n            claim_section.lClaimSectionKey = claim_movement.lClaimSectionKey \n        inner join account_period on \n            claim_movement.lAccountPeriodKey = account_period.lAccountPeriodKey\n        left join type_of_event on \n            claim.lEventKey = type_of_event.LEVENTKEY\n        left join type_of_event_type on \n            claim.lTypeofEventType = type_of_event_type.lTypeofEventKey\n        left join type_of_rag torag on \n            claim.lTypeOfRAGKey = torag.lTypeOfRAGKey\n        left join zone_country loss_country on \n            claim.lLossLocationCountryKey = loss_country.lCountryKey\n        left join stg_contact as adjuster_contact on \n            claim.lExternalAdjusterContactKey = adjuster_contact.contact_id\n        left join type_of_loss on\n            claim.lTypeOfLossKey = type_of_loss.LTYPEOFLOSSKEY\n        left join stg_entity_instance_states as claim_state on \n            claim.lClaimKey = claim_state.instance_id\n            and claim_state.entity_type = 'Claim'\n        left join stg_contact as claim_handler_contact on \n            claim.lClaimHandlerKey = claim_handler_contact.contact_id\n        left join currency on \n            claim_section.lReserveCcyOrigKey = currency.lCurrencyKey\n        left join stg_entity_instance_states as claim_movement_state on \n            claim_movement.lClaimMovementKey = claim_movement_state.instance_id\n        left join linked_claim lc on claim.lclaimkey = lc.claim_id\n            \n)\n\nselect * from dmn_inward_claim", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"dmn_claim\""}, "model.iginsure.dmn_claim_amounts": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.iginsure.stg_inward_claims_amounts", "model.iginsure.stg_outward_claims_amounts", "model.iginsure.dmn_policy"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["Claims"], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "domain", "dmn_claim_amounts"], "unique_id": "model.iginsure.dmn_claim_amounts", "raw_code": "{{ config(\r\n    tags=['Claims']\r\n) }}\r\n\r\nwith\r\nInward_claims as (\r\n    select * from {{ ref('stg_inward_claims_amounts') }}\r\n),\r\n\r\nOutward_claims as (\r\n    select * from {{ ref('stg_outward_claims_amounts') }}\r\n),\r\n\r\n/*policy as (\r\n    select * from {{ ref('dmn_policy') }}\r\n),*/\r\n\r\n\r\nIW_OW_Claims as (\r\n    select * from Inward_claims\r\n    union all\r\n    select * from Outward_claims\r\n)\r\n\r\n\r\nselect * from IW_OW_Claims\r\n\r\n/*,\r\n\r\nfinal as (\r\n    select \r\n        iw_ow.sclaimreference as ClaimReference,\r\n        p.sReference as PolicyRef,\r\n        iw_ow.sCcy as OrgCcy,\r\n        iw_ow.RIRef,\r\n        case when (iw_ow.RIRef='' or iw_ow.RIRef=NULL) then TotalOSOrg else 0 end as InwardOSOrg,\r\n        case when (iw_ow.RIRef='' or iw_ow.RIRef=NULL) then TotalPytsRcptsOrg else 0 end as InwardPaidOrg,\r\n        case when (iw_ow.RIRef='' or iw_ow.RIRef=NULL) then TotalIncurredOrgCcy else 0 end as InwardIncurredOrg,\r\n        case when (left(iw_ow.RIRef,1)='9' or left(iw_ow.RIRef,2)='OF' or left(iw_ow.RIRef,2)='FT') then TotalOSOrg else 0 end as FACOSOrg,\r\n        case when (left(iw_ow.RIRef,1)='9' or left(iw_ow.RIRef,2)='OF' or left(iw_ow.RIRef,2)='FT') then TotalPytsRcptsOrg else 0 end as FACPaidOrg,\r\n        case when (left(iw_ow.RIRef,1)='9' or left(iw_ow.RIRef,2)='OF' or left(iw_ow.RIRef,2)='FT') then TotalIncurredOrgCcy else 0 end as FACIncurredOrg,\r\n        case when (left(iw_ow.RIRef,1)='7' or left(iw_ow.RIRef,2)='OQ' or left(iw_ow.RIRef,2)='OS') then TotalOSOrg else 0 end as QSOSOrg,\r\n        case when (left(iw_ow.RIRef,1)='7' or left(iw_ow.RIRef,2)='OQ' or left(iw_ow.RIRef,2)='OS') then TotalPytsRcptsOrg else 0 end as QSPaidOrg,\r\n        case when (left(iw_ow.RIRef,1)='7' or left(iw_ow.RIRef,2)='OQ' or left(iw_ow.RIRef,2)='OS')then TotalIncurredOrgCcy else 0 end as QSIncurredOrg,\r\n        case when (iw_ow.RIRef='' or iw_ow.RIRef=NULL) then TotalOsAcCcy else 0 end as InwardOSAcc,\r\n        case when (iw_ow.RIRef='' or iw_ow.RIRef=NULL) then TotalPytsRcptsACCcy else 0 end as InwardPaidAcc,\r\n        case when (iw_ow.RIRef='' or iw_ow.RIRef=NULL) then TotalIncurredACCcy else 0 end as InwardIncurredAcc,\r\n        case when (left(iw_ow.RIRef,1)='9' or left(iw_ow.RIRef,2)='OF' or left(iw_ow.RIRef,2)='FT') then TotalOsAcCcy else 0 end as FACOSAcc,\r\n        case when (left(iw_ow.RIRef,1)='9' or left(iw_ow.RIRef,2)='OF' or left(iw_ow.RIRef,2)='FT') then TotalPytsRcptsACCcy else 0 end as FACPaidAcc,\r\n        case when (left(iw_ow.RIRef,1)='9' or left(iw_ow.RIRef,2)='OF' or left(iw_ow.RIRef,2)='FT') then TotalIncurredACCcy else 0 end as FACIncurredAcc,\r\n        case when (left(iw_ow.RIRef,1)='7' or left(iw_ow.RIRef,2)='OQ' or left(iw_ow.RIRef,2)='OS') then TotalOsAcCcy else 0 end as QSOSAcc,\r\n        case when (left(iw_ow.RIRef,1)='7' or left(iw_ow.RIRef,2)='OQ' or left(iw_ow.RIRef,2)='OS') then TotalPytsRcptsACCcy else 0 end as QSPaidAcc,\r\n        case when (left(iw_ow.RIRef,1)='7' or left(iw_ow.RIRef,2)='OQ' or left(iw_ow.RIRef,2)='OS') then TotalIncurredACCcy else 0 end as QSIncurredAcc,\r\n        \r\n        --QS Acc Exp/Ind\r\n        case when (left(iw_ow.RIRef,1)='7' or left(iw_ow.RIRef,2)='OQ' or left(iw_ow.RIRef,2)='OS') then LastOSAmountACCcyExpense else 0 end as QSLastOSAcccyExpense,\r\n        case when (left(iw_ow.RIRef,1)='7' or left(iw_ow.RIRef,2)='OQ' or left(iw_ow.RIRef,2)='OS') then LastPytsRcptsAmountACCcyExpense else 0 end as QSLastPaidAcccyExpense,\r\n        case when (left(iw_ow.RIRef,1)='7' or left(iw_ow.RIRef,2)='OQ' or left(iw_ow.RIRef,2)='OS') then LastIncurredACCcyExpense else 0 end as QSLastIncAcccyExpense,        \r\n        case when (left(iw_ow.RIRef,1)='7' or left(iw_ow.RIRef,2)='OQ' or left(iw_ow.RIRef,2)='OS') then LastOSAmountACCcyIND else 0 end as QSLastOSAcccyIND,\r\n        case when (left(iw_ow.RIRef,1)='7' or left(iw_ow.RIRef,2)='OQ' or left(iw_ow.RIRef,2)='OS') then LastPytsRcptsAmountACCcyIND else 0 end as QSLastPaidAcccyIND,\r\n        case when (left(iw_ow.RIRef,1)='7' or left(iw_ow.RIRef,2)='OQ' or left(iw_ow.RIRef,2)='OS') then LastIncurredACCcyIND else 0 end as QSLastIncAcccyIND,\r\n\r\n        --FAC Acc Exp/Ind\r\n        case when (left(iw_ow.RIRef,1)='9' or left(iw_ow.RIRef,2)='OF' or left(iw_ow.RIRef,2)='FT') then LastOSAmountACCcyExpense else 0 end as FACLastOSAcccyExpense,\r\n        case when (left(iw_ow.RIRef,1)='9' or left(iw_ow.RIRef,2)='OF' or left(iw_ow.RIRef,2)='FT') then LastPytsRcptsAmountACCcyExpense else 0 end as FACLastPaidAcccyExpense,\r\n        case when (left(iw_ow.RIRef,1)='9' or left(iw_ow.RIRef,2)='OF' or left(iw_ow.RIRef,2)='FT') then LastIncurredACCcyExpense else 0 end as FACLastIncAcccyExpense,\r\n        case when (left(iw_ow.RIRef,1)='9' or left(iw_ow.RIRef,2)='OF' or left(iw_ow.RIRef,2)='FT') then LastOSAmountACCcyIND else 0 end as FACLastOSAcccyIND,\r\n        case when (left(iw_ow.RIRef,1)='9' or left(iw_ow.RIRef,2)='OF' or left(iw_ow.RIRef,2)='FT') then LastPytsRcptsAmountACCcyIND else 0 end as FACLastPaidAcccyIND,\r\n        case when (left(iw_ow.RIRef,1)='9' or left(iw_ow.RIRef,2)='OF' or left(iw_ow.RIRef,2)='FT') then LastIncurredACCcyIND else 0 end as FACLastIncAcccyIND,\r\n\r\n        case when (iw_ow.RIRef='' or iw_ow.RIRef=NULL) then LastOSAmountACCcyExpense else 0 end as InwardOSACCExpense,\r\n        case when (iw_ow.RIRef='' or iw_ow.RIRef=NULL) then LastOSAmountACCcyIND else 0 end as InwardOSACCIND,\r\n        case when (iw_ow.RIRef='' or iw_ow.RIRef=NULL) then LastPytsRcptsAmountACCcyExpense else 0 end as InwardPaidACCExpense,\r\n        case when (iw_ow.RIRef='' or iw_ow.RIRef=NULL) then LastPytsRcptsAmountACCcyIND else 0 end as InwardPaidACCIND,\r\n        case when (iw_ow.RIRef='' or iw_ow.RIRef=NULL) then LastIncurredACCcyExpense else 0 end as InwardIncACCExpense,\r\n        case when (iw_ow.RIRef='' or iw_ow.RIRef=NULL) then LastIncurredACCcyIND else 0 end as InwardIncACCIND\r\n\r\n    from IW_OW_Claims iw_ow\r\n        inner join policy p on iw_ow.lPolicyKey = p.lPolicyKey\r\n)\r\n\r\nselect * from final*/", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "domain\\dmn_claim_amounts.sql", "original_file_path": "models\\domain\\dmn_claim_amounts.sql", "name": "dmn_claim_amounts", "alias": "dmn_claim_amounts", "checksum": {"name": "sha256", "checksum": "5237c765ef414bfa4c86423efcf0c5d5e21ac0c0fbb913c870f454df947944ef"}, "tags": ["Claims"], "refs": [["stg_inward_claims_amounts"], ["stg_outward_claims_amounts"], ["dmn_policy"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\domain\\dmn_claim_amounts.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "tags": ["Claims"]}, "created_at": 1701786800.6762953, "compiled_code": "\n\nwith\nInward_claims as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"stg_inward_claims_amounts\"\n),\n\nOutward_claims as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"stg_outward_claims_amounts\"\n),\n\n/*policy as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"dmn_policy\"\n),*/\n\n\nIW_OW_Claims as (\n    select * from Inward_claims\n    union all\n    select * from Outward_claims\n)\n\n\nselect * from IW_OW_Claims\n\n/*,\n\nfinal as (\n    select \n        iw_ow.sclaimreference as ClaimReference,\n        p.sReference as PolicyRef,\n        iw_ow.sCcy as OrgCcy,\n        iw_ow.RIRef,\n        case when (iw_ow.RIRef='' or iw_ow.RIRef=NULL) then TotalOSOrg else 0 end as InwardOSOrg,\n        case when (iw_ow.RIRef='' or iw_ow.RIRef=NULL) then TotalPytsRcptsOrg else 0 end as InwardPaidOrg,\n        case when (iw_ow.RIRef='' or iw_ow.RIRef=NULL) then TotalIncurredOrgCcy else 0 end as InwardIncurredOrg,\n        case when (left(iw_ow.RIRef,1)='9' or left(iw_ow.RIRef,2)='OF' or left(iw_ow.RIRef,2)='FT') then TotalOSOrg else 0 end as FACOSOrg,\n        case when (left(iw_ow.RIRef,1)='9' or left(iw_ow.RIRef,2)='OF' or left(iw_ow.RIRef,2)='FT') then TotalPytsRcptsOrg else 0 end as FACPaidOrg,\n        case when (left(iw_ow.RIRef,1)='9' or left(iw_ow.RIRef,2)='OF' or left(iw_ow.RIRef,2)='FT') then TotalIncurredOrgCcy else 0 end as FACIncurredOrg,\n        case when (left(iw_ow.RIRef,1)='7' or left(iw_ow.RIRef,2)='OQ' or left(iw_ow.RIRef,2)='OS') then TotalOSOrg else 0 end as QSOSOrg,\n        case when (left(iw_ow.RIRef,1)='7' or left(iw_ow.RIRef,2)='OQ' or left(iw_ow.RIRef,2)='OS') then TotalPytsRcptsOrg else 0 end as QSPaidOrg,\n        case when (left(iw_ow.RIRef,1)='7' or left(iw_ow.RIRef,2)='OQ' or left(iw_ow.RIRef,2)='OS')then TotalIncurredOrgCcy else 0 end as QSIncurredOrg,\n        case when (iw_ow.RIRef='' or iw_ow.RIRef=NULL) then TotalOsAcCcy else 0 end as InwardOSAcc,\n        case when (iw_ow.RIRef='' or iw_ow.RIRef=NULL) then TotalPytsRcptsACCcy else 0 end as InwardPaidAcc,\n        case when (iw_ow.RIRef='' or iw_ow.RIRef=NULL) then TotalIncurredACCcy else 0 end as InwardIncurredAcc,\n        case when (left(iw_ow.RIRef,1)='9' or left(iw_ow.RIRef,2)='OF' or left(iw_ow.RIRef,2)='FT') then TotalOsAcCcy else 0 end as FACOSAcc,\n        case when (left(iw_ow.RIRef,1)='9' or left(iw_ow.RIRef,2)='OF' or left(iw_ow.RIRef,2)='FT') then TotalPytsRcptsACCcy else 0 end as FACPaidAcc,\n        case when (left(iw_ow.RIRef,1)='9' or left(iw_ow.RIRef,2)='OF' or left(iw_ow.RIRef,2)='FT') then TotalIncurredACCcy else 0 end as FACIncurredAcc,\n        case when (left(iw_ow.RIRef,1)='7' or left(iw_ow.RIRef,2)='OQ' or left(iw_ow.RIRef,2)='OS') then TotalOsAcCcy else 0 end as QSOSAcc,\n        case when (left(iw_ow.RIRef,1)='7' or left(iw_ow.RIRef,2)='OQ' or left(iw_ow.RIRef,2)='OS') then TotalPytsRcptsACCcy else 0 end as QSPaidAcc,\n        case when (left(iw_ow.RIRef,1)='7' or left(iw_ow.RIRef,2)='OQ' or left(iw_ow.RIRef,2)='OS') then TotalIncurredACCcy else 0 end as QSIncurredAcc,\n        \n        --QS Acc Exp/Ind\n        case when (left(iw_ow.RIRef,1)='7' or left(iw_ow.RIRef,2)='OQ' or left(iw_ow.RIRef,2)='OS') then LastOSAmountACCcyExpense else 0 end as QSLastOSAcccyExpense,\n        case when (left(iw_ow.RIRef,1)='7' or left(iw_ow.RIRef,2)='OQ' or left(iw_ow.RIRef,2)='OS') then LastPytsRcptsAmountACCcyExpense else 0 end as QSLastPaidAcccyExpense,\n        case when (left(iw_ow.RIRef,1)='7' or left(iw_ow.RIRef,2)='OQ' or left(iw_ow.RIRef,2)='OS') then LastIncurredACCcyExpense else 0 end as QSLastIncAcccyExpense,        \n        case when (left(iw_ow.RIRef,1)='7' or left(iw_ow.RIRef,2)='OQ' or left(iw_ow.RIRef,2)='OS') then LastOSAmountACCcyIND else 0 end as QSLastOSAcccyIND,\n        case when (left(iw_ow.RIRef,1)='7' or left(iw_ow.RIRef,2)='OQ' or left(iw_ow.RIRef,2)='OS') then LastPytsRcptsAmountACCcyIND else 0 end as QSLastPaidAcccyIND,\n        case when (left(iw_ow.RIRef,1)='7' or left(iw_ow.RIRef,2)='OQ' or left(iw_ow.RIRef,2)='OS') then LastIncurredACCcyIND else 0 end as QSLastIncAcccyIND,\n\n        --FAC Acc Exp/Ind\n        case when (left(iw_ow.RIRef,1)='9' or left(iw_ow.RIRef,2)='OF' or left(iw_ow.RIRef,2)='FT') then LastOSAmountACCcyExpense else 0 end as FACLastOSAcccyExpense,\n        case when (left(iw_ow.RIRef,1)='9' or left(iw_ow.RIRef,2)='OF' or left(iw_ow.RIRef,2)='FT') then LastPytsRcptsAmountACCcyExpense else 0 end as FACLastPaidAcccyExpense,\n        case when (left(iw_ow.RIRef,1)='9' or left(iw_ow.RIRef,2)='OF' or left(iw_ow.RIRef,2)='FT') then LastIncurredACCcyExpense else 0 end as FACLastIncAcccyExpense,\n        case when (left(iw_ow.RIRef,1)='9' or left(iw_ow.RIRef,2)='OF' or left(iw_ow.RIRef,2)='FT') then LastOSAmountACCcyIND else 0 end as FACLastOSAcccyIND,\n        case when (left(iw_ow.RIRef,1)='9' or left(iw_ow.RIRef,2)='OF' or left(iw_ow.RIRef,2)='FT') then LastPytsRcptsAmountACCcyIND else 0 end as FACLastPaidAcccyIND,\n        case when (left(iw_ow.RIRef,1)='9' or left(iw_ow.RIRef,2)='OF' or left(iw_ow.RIRef,2)='FT') then LastIncurredACCcyIND else 0 end as FACLastIncAcccyIND,\n\n        case when (iw_ow.RIRef='' or iw_ow.RIRef=NULL) then LastOSAmountACCcyExpense else 0 end as InwardOSACCExpense,\n        case when (iw_ow.RIRef='' or iw_ow.RIRef=NULL) then LastOSAmountACCcyIND else 0 end as InwardOSACCIND,\n        case when (iw_ow.RIRef='' or iw_ow.RIRef=NULL) then LastPytsRcptsAmountACCcyExpense else 0 end as InwardPaidACCExpense,\n        case when (iw_ow.RIRef='' or iw_ow.RIRef=NULL) then LastPytsRcptsAmountACCcyIND else 0 end as InwardPaidACCIND,\n        case when (iw_ow.RIRef='' or iw_ow.RIRef=NULL) then LastIncurredACCcyExpense else 0 end as InwardIncACCExpense,\n        case when (iw_ow.RIRef='' or iw_ow.RIRef=NULL) then LastIncurredACCcyIND else 0 end as InwardIncACCIND\n\n    from IW_OW_Claims iw_ow\n        inner join policy p on iw_ow.lPolicyKey = p.lPolicyKey\n)\n\nselect * from final*/", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"dmn_claim_amounts\""}, "model.iginsure.dmn_claim_section": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.iginsure.scd_claim_section"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "domain", "dmn_claim_section"], "unique_id": "model.iginsure.dmn_claim_section", "raw_code": "with\r\n\r\nclaim_section as (\r\n    select * from {{ ref('scd_claim_section') }} where _valid_to is null\r\n),\r\n\r\nfinal as (\r\n    select\r\n        lClaimSectionKey as claim_section_id,\r\n        lClaimKey as inward_claim_id\r\n    from\r\n        claim_section\r\n)\r\n\r\nselect * from final", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "domain\\dmn_claim_section.sql", "original_file_path": "models\\domain\\dmn_claim_section.sql", "name": "dmn_claim_section", "alias": "dmn_claim_section", "checksum": {"name": "sha256", "checksum": "78ae09a567d720580abb6e4f55a00e82cd3308be7600b2c3f9ee7e2cbc594bdb"}, "tags": [], "refs": [["scd_claim_section"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": "iginsure://models\\domain\\domain.yml", "compiled_path": "target\\compiled\\iginsure\\models\\domain\\dmn_claim_section.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "docs": {"show": false}}, "created_at": 1701786801.1929822, "compiled_code": "with\n\nclaim_section as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"scd_claim_section\" where _valid_to is null\n),\n\nfinal as (\n    select\n        lClaimSectionKey as claim_section_id,\n        lClaimKey as inward_claim_id\n    from\n        claim_section\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"dmn_claim_section\""}, "model.iginsure.dmn_iris_mvmts": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.iginsure.iris.IRIS_INW_GWP_Movemnets", "source.iginsure.dbo.segmentation"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["InwardPremium"], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "domain", "dmn_iris_mvmts"], "unique_id": "model.iginsure.dmn_iris_mvmts", "raw_code": "{{config(\r\n\r\n    tags = ['InwardPremium']\r\n\r\n)}}\r\n\r\n\r\nwith iris_mvmt as (\r\n\r\n    select * from {{source('iris','IRIS_INW_GWP_Movemnets')}}\r\n\r\n),\r\n\r\n\r\nsegmentation as (\r\n    select * from {{ source('dbo', 'segmentation') }}\r\n),\r\n\r\n\r\niris_mvmts_reformated as (SELECT \r\n\t0 as policy_id,\r\n\tCONCAT('iris','_',ROW_NUMBER() OVER (ORDER BY (SELECT 1))) as apr_reference,\r\n\t1 as apr_activity_id,\r\n\tCASE WHEN type_of_monetary_amount in('premium_usd','acq_cost_usd','eio_fees_usd','argo_fees_usd') then apr_amount else 0 end as apr_amount_usd,\r\n\r\n    CASE WHEN type_of_monetary_amount = 'premium_usd' then apr_amount else 0 end as iw_gross,\r\n    CASE WHEN type_of_monetary_amount = 'acq_cost_usd' then apr_amount else 0 end as iw_acq,\r\n\r\n    --original amounts\r\n    CASE WHEN type_of_monetary_amount in('premium_org','acq_cost_org','eio_fees_org','argo_fees_org') then apr_amount else 0 end as apr_amount_org,\r\n    Ccy as apr_org_ccy,\r\n    ROE as apr_roe,\r\n    CASE WHEN type_of_monetary_amount = 'premium_org' then apr_amount else 0 end as iw_gross_org,\r\n    CASE WHEN type_of_monetary_amount = 'acq_cost_org' then apr_amount else 0 end as iw_acq_org,\r\n\r\n\r\n\t-- end of month account period\r\n\teomonth(DATEFROMPARTS(LEFT(AccountPeriod,4),RIGHT(AccountPeriod,2),1)) as apr_entry_date,\r\n\t--NULL as apr_allocation_date,\r\n    NULL as apr_settlement_due_date,\r\n    AccountPeriod as apr_account_period,\r\n\tRIGHT(AccountPeriod,2) as AP_month,\r\n\tLEFT(AccountPeriod,4) as AP_year,\r\n\tCAST(DATEFROMPARTS(LEFT(AccountPeriod,4),RIGHT(AccountPeriod,2),1) as DATE) as AP_Date,\r\n\t--'Paid' as apr_status,\r\n\tCASE\r\n        WHEN type_of_monetary_amount in('premium_org','premium_usd')  THEN 'Gross premium ( + )'\r\n        WHEN type_of_monetary_amount in ('acq_cost_org','acq_cost_usd') THEN 'Brokerage ( - )'\r\n\t\tWHEN type_of_monetary_amount in('eio_fees_org','eio_fees_usd')  THEN 'Agency Fees EIO'\r\n\t\tWHEN type_of_monetary_amount in('argo_fees_org','argo_fees_usd')  THEN 'Intermediary Fees'\r\n    END as type_of_monetary_amount,\r\n    '' As activity_version,\r\n    '' as activity_type,\r\n\t1 as effective_activity_id,\r\n\tCASE\r\n        WHEN Division = 'London' THEN 1 \r\n\t\tWHEN Division = 'Bermuda' THEN 0\r\n    END as activity_division,\r\n    CASE\r\n        WHEN Subdivision = 'JD' THEN 'BER' -- subdivision: combine Jordan and Bermuda\r\n        WHEN Subdivision = 'CS' THEN 'CAS'\r\n        WHEN Subdivision = 'TK' THEN 'TAK'\r\n        WHEN Subdivision = 'LO' THEN 'LON'\r\n        WHEN Subdivision = 'BE' THEN 'BER'\r\n        WHEN Subdivision = 'DU' THEN 'DUB'\r\n        WHEN Subdivision = 'LA' THEN 'LAB'\r\n    END as Subdivision,\r\n\r\n    XFI_Product as product,\r\n\r\n    case\r\n        when XFI_Product in (\r\n            'AVIATION','FINANCIAL INSTITUTIONS','INWARDS PPN','INWARDS XOL','MARINE LIABILITY',\r\n            'MARINE TRADE','POLITICAL VIOLENCE','PORTS & TERMINALS','PROPERTY','CONTINGENCY'\r\n        )\r\n        then XFI_Product\r\n\r\n        when XFI_Product = 'CASUALTY'\r\n        then\r\n            case\r\n                when 'PROFESSIONAL INDEMNITY' = coverage\r\n                and substring(PolicyReference,1,6) <> '600494'\r\n                then 'PROFESSIONAL INDEMNITY' \r\n\r\n                when 'PROFESSIONAL INDEMNITY' = coverage\r\n                and substring(PolicyReference,1,6) = '600494'\r\n                then 'PEN' \r\n\r\n                when REPLACE(coverage,'&amp;','&') in('DIRECTORS & OFFICERS','WARRANTY AND INDEMNITY' , 'PUBLIC OFFERING OF SECURITIES INSURANCE')\r\n                then 'DIRECTORS & OFFICERS'\r\n\r\n                when coverage in ('MEDICAL MALPRACTICE','SURETY BONDS')\r\n                then coverage\r\n\r\n                when 'LEGAL EXPENSES' = coverage\r\n                AND   Subclass like '%BTE%' \r\n                then 'LEGAL EXPENSES BTE'\r\n\r\n                when 'LEGAL EXPENSES' = coverage\r\n                AND   Subclass like '%ATE%' \r\n                then 'LEGAL EXPENSES ATE'\r\n\r\n                else 'CGL'\r\n            end\r\n\r\n        when XFI_Product = 'DOWNSTREAM ENERGY'\r\n        then\r\n            case\r\n                when class in ('POWER GENERATION-CONVENTIONAL','POWER GENERATION-RENEWABLES')\r\n                then 'POWER & RENEWABLES'\r\n                else 'OIL & GAS'\r\n            end\r\n\r\n        when XFI_Product = 'ENGINEERING'\r\n        then\r\n            case\r\n                when coverage in ('INHERENT DEFECTS INSURANCE','INSURANCE BACKED GUARANTEE','INHERENT DEFECTS INSURANCE - BI','INSURANCE BACKED GUARANTEE - BI')\r\n                then 'IDI'\r\n                else 'ENGINEERING'\r\n            end\r\n\r\n        when XFI_Product = 'FORESTRY'\r\n        then 'PROPERTY'\r\n\r\n        when XFI_Product = 'MARINE'\r\n        then 'MARINE CARGO'\r\n\r\n        when XFI_Product = 'UPSTREAM ENERGY'\r\n        then\r\n            case\r\n                when class in ('CAR','EIO CAR')\r\n                then 'UPSTREAM CONSTRUCTION'\r\n                else 'UPSTREAM ENERGY'\r\n            end\r\n\r\n        when XFI_Product = 'MR'\r\n        then 'INWARDS XOL'\r\n    end as activity_SubClassSegmentation,\r\n\r\n\tXFI_Product as product_segregation,\r\n\tCoverage as activity_coverage_description,\r\n\tcoverage_code as activity_coverage_code,\r\n\tclass as activity_section_class,\r\n\tAccountPeriod as activity_written_account_period,\r\n\tPolicyReference as policy_reference,\r\n    '' as activity_source,\r\n    NULL as broker_version_number,\r\n    \r\n    'INWARD' as iw_ow_flag,\r\n    '' as ri_policy,\r\n     Null as ri_policy_inception,\r\n     null as ri_policy_expiry,\r\n     '' as ow_broker,\r\n     '' as ow_broker_major_group,\r\n     '' as ow_security,\r\n\r\n\r\n\r\n\t1 as for_date_activity_id,\r\n\tCASE\r\n        WHEN Division = 'London' THEN 1 \r\n\t\tWHEN Division = 'Bermuda' THEN 0\r\n    END as for_date_division,\r\n\t\r\n    CASE\r\n        WHEN Subdivision = 'JD' THEN 'JOR'\r\n\t    WHEN Subdivision = 'CS' THEN 'CAS'\r\n\t\tWHEN Subdivision = 'TK' THEN 'TAK'\r\n\t\tWHEN Subdivision = 'LO' THEN 'LON'\r\n\t\tWHEN Subdivision = 'BE' THEN 'BER'\r\n\t\tWHEN Subdivision = 'DU' THEN 'DUB'\r\n\t\tWHEN Subdivision = 'LA' THEN 'LAB'\r\n    END as subdivision_day,\r\n\t\r\n\tProducingOffice as ProducingOffice_day,\r\n\tXFI_Product as for_date_product_name,\r\n\tXFI_Product as ProductSegregation_day,\r\n \t\r\n\tcase\r\n        when XFI_Product in (\r\n            'AVIATION','DOWNSTREAM ENERGY','FINANCIAL INSTITUTIONS','FORESTRY','INWARDS PPN',\r\n            'INWARDS XOL','MARINE LIABILITY','MARINE TRADE','MR','POLITICAL VIOLENCE',\r\n            'PORTS & TERMINALS','PROPERTY','UPSTREAM ENERGY','CONTINGENCY'\r\n        )\r\n        then (select distinct [Grouping] from segmentation seg where seg.Product = XFI_Product)\r\n\r\n        when XFI_Product = 'ENGINEERING' and Coverage in ('INHERENT DEFECTS INSURANCE','INSURANCE BACKED GUARANTEE','INHERENT DEFECTS INSURANCE - BI','INSURANCE BACKED GUARANTEE - BI')\r\n        then (select distinct [Grouping] from segmentation seg where seg.Product = XFI_Product and seg.Coverage = unpvt.Coverage)\r\n        \r\n        when XFI_Product = 'ENGINEERING' and Coverage not in ('INHERENT DEFECTS INSURANCE','INSURANCE BACKED GUARANTEE','INHERENT DEFECTS INSURANCE - BI','INSURANCE BACKED GUARANTEE - BI')\r\n        then (select distinct [Grouping] from segmentation seg where seg.Product = XFI_Product and seg.Coverage not in ('INHERENT DEFECTS INSURANCE','INSURANCE BACKED GUARANTEE','INHERENT DEFECTS INSURANCE - BI','INSURANCE BACKED GUARANTEE - BI'))\r\n\r\n        when XFI_Product = 'CASUALTY'\r\n        then (select distinct [Grouping] from segmentation seg where seg.Product = XFI_Product and seg.Coverage = unpvt.Coverage)\r\n\r\n        -- this product depends on classfication and we dont have it mapped. And in anycase from XFI side we dont have marinme segmentated\r\n        when XFI_Product = 'MARINE'\r\n        then XFI_Product\r\n    \r\n    end as segmentation_day,\r\n\r\n    case\r\n        when XFI_Product in (\r\n            'AVIATION','FINANCIAL INSTITUTIONS','INWARDS PPN','INWARDS XOL','MARINE LIABILITY','MARINE TRADE',\r\n            'POLITICAL VIOLENCE','PORTS & TERMINALS','PROPERTY','CONTINGENCY'\r\n        )\r\n        then XFI_Product\r\n\r\n        when XFI_Product = 'CASUALTY'\r\n        then\r\n            case\r\n                when 'PROFESSIONAL INDEMNITY' = coverage and \r\n                substring(PolicyReference,1,6) <> '600494'\r\n                then 'PROFESSIONAL INDEMNITY'\r\n\r\n                when 'PROFESSIONAL INDEMNITY'  = coverage and \r\n                substring(PolicyReference,1,6) = '600494'\r\n                then 'PEN'\r\n\r\n                when REPLACE(coverage,'&amp;','&') in ('DIRECTORS & OFFICERS','WARRANTY AND INDEMNITY','PUBLIC OFFERING OF SECURITIES INSURANCE')\r\n                then 'DIRECTORS & OFFICERS'\r\n                when REPLACE(coverage,'&amp;','&') in ('DIRECTORS & OFFICERS','WARRANTY AND INDEMNITY','PUBLIC OFFERING OF SECURITIES INSURANCE')\r\n                then 'DIRECTORS & OFFICERS'\r\n\r\n                when coverage in('MEDICAL MALPRACTICE')\r\n                then coverage\r\n                \r\n                when 'LEGAL EXPENSES' = coverage\r\n                AND   Subclass like '%BTE%' \r\n                then 'LEGAL EXPENSES BTE'\r\n\r\n                when 'LEGAL EXPENSES'  = coverage\r\n                AND   Subclass like '%ATE%' \r\n                then 'LEGAL EXPENSES ATE'\r\n\r\n                when 'SURETY BONDS'  = coverage\r\n                then 'FINANCIAL INSTITUTIONS'\r\n                \r\n                else 'CGL'\r\n            end\r\n\r\n        when XFI_Product = 'DOWNSTREAM ENERGY'\r\n        then\r\n            case\r\n                when class in ('POWER GENERATION-CONVENTIONAL','POWER GENERATION-RENEWABLES')\r\n                then 'POWER & RENEWABLES'\r\n                else 'OIL & GAS'\r\n            end\r\n\r\n        when XFI_Product = 'ENGINEERING'\r\n        then\r\n            case\r\n                when coverage in ('INHERENT DEFECTS INSURANCE','INSURANCE BACKED GUARANTEE','INHERENT DEFECTS INSURANCE - BI','INSURANCE BACKED GUARANTEE - BI')\r\n                then 'IDI'\r\n                else 'ENGINEERING'\r\n            end\r\n\r\n        when XFI_Product = 'FORESTRY'\r\n        then 'PROPERTY'\r\n\r\n        when XFI_Product = 'MARINE'\r\n        then 'MARINE CARGO'\r\n\r\n        when XFI_Product = 'UPSTREAM ENERGY'\r\n        then\r\n            case\r\n                when class in ('CAR','EIO CAR')\r\n                then 'UPSTREAM CONSTRUCTION'\r\n                else 'UPSTREAM ENERGY'\r\n            end\r\n\r\n        when XFI_Product = 'MR'\r\n        then 'INWARDS XOL'\r\n    end as BudgetSegmentation_day,\r\n\t\r\n    case\r\n        when XFI_Product in (\r\n            'AVIATION','FINANCIAL INSTITUTIONS','INWARDS PPN','INWARDS XOL','MARINE LIABILITY',\r\n            'MARINE TRADE','POLITICAL VIOLENCE','PORTS & TERMINALS','PROPERTY','CONTINGENCY'\r\n        )\r\n        then XFI_Product\r\n\r\n        when XFI_Product = 'CASUALTY'\r\n        then\r\n            case\r\n                when 'PROFESSIONAL INDEMNITY' = coverage\r\n                and substring(PolicyReference,1,6) <> '600494'\r\n                then 'PROFESSIONAL INDEMNITY' \r\n\r\n                when 'PROFESSIONAL INDEMNITY' = coverage\r\n                and substring(PolicyReference,1,6) = '600494'\r\n                then 'PEN' \r\n\r\n                when REPLACE(coverage,'&amp;','&') in('DIRECTORS & OFFICERS','WARRANTY AND INDEMNITY' , 'PUBLIC OFFERING OF SECURITIES INSURANCE')\r\n                then 'DIRECTORS & OFFICERS'\r\n\r\n                when coverage in ('MEDICAL MALPRACTICE','SURETY BONDS')\r\n                then coverage\r\n\r\n                when 'LEGAL EXPENSES' = coverage\r\n                AND   Subclass like '%BTE%' \r\n                then 'LEGAL EXPENSES BTE'\r\n\r\n                when 'LEGAL EXPENSES' = coverage\r\n                AND   Subclass like '%ATE%' \r\n                then 'LEGAL EXPENSES ATE'\r\n\r\n                else 'CGL'\r\n            end\r\n\r\n        when XFI_Product = 'DOWNSTREAM ENERGY'\r\n        then\r\n            case\r\n                when class in ('POWER GENERATION-CONVENTIONAL','POWER GENERATION-RENEWABLES')\r\n                then 'POWER & RENEWABLES'\r\n                else 'OIL & GAS'\r\n            end\r\n\r\n        when XFI_Product = 'ENGINEERING'\r\n        then\r\n            case\r\n                when coverage in ('INHERENT DEFECTS INSURANCE','INSURANCE BACKED GUARANTEE','INHERENT DEFECTS INSURANCE - BI','INSURANCE BACKED GUARANTEE - BI')\r\n                then 'IDI'\r\n                else 'ENGINEERING'\r\n            end\r\n\r\n        when XFI_Product = 'FORESTRY'\r\n        then 'PROPERTY'\r\n\r\n        when XFI_Product = 'MARINE'\r\n        then 'MARINE CARGO'\r\n\r\n        when XFI_Product = 'UPSTREAM ENERGY'\r\n        then\r\n            case\r\n                when class in ('CAR','EIO CAR')\r\n                then 'UPSTREAM CONSTRUCTION'\r\n                else 'UPSTREAM ENERGY'\r\n            end\r\n\r\n        when XFI_Product = 'MR'\r\n        then 'INWARDS XOL'\r\n    end as SubClassSegmentation_day,\r\n\r\n\tclass as Class_day,\r\n\tproducer_source as ProducerSource_day,\r\n\tproducer as producer_day,\r\n\tProducerGroup as ProducerGroup_day,\r\n\t'' as InsuranceType_day,\r\n\tCoverage as coverageDesc_day,\r\n\tcoverage_code as CoverageCode_day,\r\n\tTerritory as territory_day,\r\n\tDomicileCountry as domicile_day,\r\n\tRegion as region_day,\r\n\tMISUWY as MISUWY_day,\r\n\tUWY as UWY_day,\r\n\tASSURED as insured_day,\r\n\tREASSURED as reassured_day,\r\n\tFILE_HANDLER as FileHandler_day,\r\n\tUNDERWRITER as underwriter_day,\r\n\tREC_UWR as RecUnderwriter_day,\r\n\tADMIN_FILE_HANDLER as AdminFileHandler_day,\r\n\t'' as OperatorId_day,\r\n\t'' as activity_notes_day,\r\n\r\n    PolicyInceptionDate as for_date_policy_inception,\r\n\r\n    PolicyExpiryDate as for_date_policy_expiry,\r\n    PolicyExpiryDate as for_date_policy_expiry_reported,\r\n    '' as for_date_New_vs_Renwal,\r\n\r\n\t1 as for_period_activity_id,\r\n\r\n\tCASE\r\n        WHEN Division = 'London' THEN 1\r\n        WHEN Division = 'Bermuda' THEN 0\r\n    END as for_period_division,\r\n\t\r\n\tCASE\r\n        WHEN Subdivision = 'JD' THEN 'BER' -- subdivision: combine Jordan and Bermuda\r\n\t    WHEN Subdivision = 'CS' THEN 'CAS'\r\n\t\tWHEN Subdivision = 'TK' THEN 'TAK'\r\n\t\tWHEN Subdivision = 'LO' THEN 'LON'\r\n\t\tWHEN Subdivision = 'BE' THEN 'BER'\r\n\t\tWHEN Subdivision = 'DU' THEN 'DUB'\r\n\t\tWHEN Subdivision = 'LA' THEN 'LAB'\r\n    END as for_period_subdivision,\r\n\r\n\tProducingOffice as ProducingOffice_month,\r\n\t\r\n\tXFI_Product as for_period_product_name,\r\n\r\n\tXFI_Product as ProductSegregation_month,\r\n\r\n        case\r\n            when XFI_Product in (\r\n                'AVIATION','DOWNSTREAM ENERGY','FINANCIAL INSTITUTIONS','FORESTRY','INWARDS PPN',\r\n                'INWARDS XOL','MARINE LIABILITY','MARINE TRADE','MR','POLITICAL VIOLENCE',\r\n                'PORTS & TERMINALS','PROPERTY','UPSTREAM ENERGY','CONTINGENCY'\r\n            )\r\n            then (select distinct [Grouping] from segmentation seg where seg.Product = XFI_Product)\r\n\r\n            when XFI_Product = 'ENGINEERING' and Coverage in ('INHERENT DEFECTS INSURANCE','INSURANCE BACKED GUARANTEE','INHERENT DEFECTS INSURANCE - BI','INSURANCE BACKED GUARANTEE - BI')\r\n            then (select distinct [Grouping] from segmentation seg where seg.Product = XFI_Product and seg.Coverage = unpvt.Coverage)\r\n            \r\n\t\t\twhen XFI_Product = 'ENGINEERING' and Coverage not in ('INHERENT DEFECTS INSURANCE','INSURANCE BACKED GUARANTEE','INHERENT DEFECTS INSURANCE - BI','INSURANCE BACKED GUARANTEE - BI')\r\n            then (select distinct [Grouping] from segmentation seg where seg.Product = XFI_Product and seg.Coverage not in ('INHERENT DEFECTS INSURANCE','INSURANCE BACKED GUARANTEE','INHERENT DEFECTS INSURANCE - BI','INSURANCE BACKED GUARANTEE - BI'))\r\n\r\n            when XFI_Product = 'CASUALTY'\r\n            then (select distinct [Grouping] from segmentation seg where seg.Product = XFI_Product and seg.Coverage = unpvt.Coverage)\r\n\r\n\t\t\t-- this product depends on classfication and we dont have it mapped. And in anycase from XFI side we dont have marinme segmentated\r\n            when XFI_Product = 'MARINE'\r\n            then XFI_Product\r\n        \r\n\t\tend as segmentation_month,\r\n\r\n\t  case\r\n            when XFI_Product in (\r\n                'AVIATION','FINANCIAL INSTITUTIONS','INWARDS PPN','INWARDS XOL','MARINE LIABILITY','MARINE TRADE',\r\n                'POLITICAL VIOLENCE','PORTS & TERMINALS','PROPERTY','CONTINGENCY'\r\n            )\r\n            then XFI_Product\r\n\r\n            when XFI_Product = 'CASUALTY'\r\n            then\r\n                case\r\n                    when 'PROFESSIONAL INDEMNITY' = coverage and \r\n                    substring(PolicyReference,1,6) <> '600494'\r\n                    then 'PROFESSIONAL INDEMNITY'\r\n\r\n                    when 'PROFESSIONAL INDEMNITY'  = coverage and \r\n                    substring(PolicyReference,1,6) = '600494'\r\n                    then 'PEN'\r\n\r\n                    when REPLACE(coverage,'&amp;','&') in ('DIRECTORS & OFFICERS','WARRANTY AND INDEMNITY','PUBLIC OFFERING OF SECURITIES INSURANCE')\r\n                    then 'DIRECTORS & OFFICERS'\r\n                    when REPLACE(coverage,'&amp;','&') in ('DIRECTORS & OFFICERS','WARRANTY AND INDEMNITY','PUBLIC OFFERING OF SECURITIES INSURANCE')\r\n                    then 'DIRECTORS & OFFICERS'\r\n\r\n                    when coverage in('MEDICAL MALPRACTICE')\r\n                    then coverage\r\n                    \r\n                    when 'LEGAL EXPENSES' = coverage\r\n                    AND   Subclass like '%BTE%' \r\n                    then 'LEGAL EXPENSES BTE'\r\n\r\n                    when 'LEGAL EXPENSES'  = coverage\r\n                    AND   Subclass like '%ATE%' \r\n                    then 'LEGAL EXPENSES ATE'\r\n\r\n                    when 'SURETY BONDS'  = coverage\r\n                    then 'FINANCIAL INSTITUTIONS'\r\n                    \r\n                    else 'CGL'\r\n                end\r\n\r\n            when XFI_Product = 'DOWNSTREAM ENERGY'\r\n            then\r\n                case\r\n                    when class in ('POWER GENERATION-CONVENTIONAL','POWER GENERATION-RENEWABLES')\r\n                    then 'POWER & RENEWABLES'\r\n                    else 'OIL & GAS'\r\n                end\r\n\r\n            when XFI_Product = 'ENGINEERING'\r\n            then\r\n                case\r\n                    when coverage in ('INHERENT DEFECTS INSURANCE','INSURANCE BACKED GUARANTEE','INHERENT DEFECTS INSURANCE - BI','INSURANCE BACKED GUARANTEE - BI')\r\n                    then 'IDI'\r\n                    else 'ENGINEERING'\r\n                end\r\n\r\n            when XFI_Product = 'FORESTRY'\r\n            then 'PROPERTY'\r\n\r\n            when XFI_Product = 'MARINE'\r\n            then 'MARINE CARGO'\r\n\r\n            when XFI_Product = 'UPSTREAM ENERGY'\r\n            then\r\n                case\r\n                    when class in ('CAR','EIO CAR')\r\n                    then 'UPSTREAM CONSTRUCTION'\r\n                    else 'UPSTREAM ENERGY'\r\n                end\r\n\r\n            when XFI_Product = 'MR'\r\n            then 'INWARDS XOL'\r\n        end as BudgetSegmentation_month,\r\n\t\r\n\t case\r\n            when XFI_Product in (\r\n                'AVIATION','FINANCIAL INSTITUTIONS','INWARDS PPN','INWARDS XOL','MARINE LIABILITY',\r\n                'MARINE TRADE','POLITICAL VIOLENCE','PORTS & TERMINALS','PROPERTY','CONTINGENCY'\r\n            )\r\n            then XFI_Product\r\n\r\n            when XFI_Product = 'CASUALTY'\r\n            then\r\n                case\r\n                    when 'PROFESSIONAL INDEMNITY' = coverage\r\n                    and substring(PolicyReference,1,6) <> '600494'\r\n                    then 'PROFESSIONAL INDEMNITY' \r\n\r\n                    when 'PROFESSIONAL INDEMNITY' = coverage\r\n                    and substring(PolicyReference,1,6) = '600494'\r\n                    then 'PEN' \r\n\r\n                    when REPLACE(coverage,'&amp;','&') in('DIRECTORS & OFFICERS','WARRANTY AND INDEMNITY' , 'PUBLIC OFFERING OF SECURITIES INSURANCE')\r\n                    then 'DIRECTORS & OFFICERS'\r\n\r\n                    when coverage in ('MEDICAL MALPRACTICE','SURETY BONDS')\r\n                    then coverage\r\n\r\n                    when 'LEGAL EXPENSES' = coverage\r\n                    AND   Subclass like '%BTE%' \r\n                    then 'LEGAL EXPENSES BTE'\r\n\r\n                    when 'LEGAL EXPENSES' = coverage\r\n                    AND   Subclass like '%ATE%' \r\n                    then 'LEGAL EXPENSES ATE'\r\n\r\n                    else 'CGL'\r\n                end\r\n\r\n            when XFI_Product = 'DOWNSTREAM ENERGY'\r\n            then\r\n                case\r\n                    when class in ('POWER GENERATION-CONVENTIONAL','POWER GENERATION-RENEWABLES')\r\n                    then 'POWER & RENEWABLES'\r\n                    else 'OIL & GAS'\r\n                end\r\n\r\n            when XFI_Product = 'ENGINEERING'\r\n            then\r\n                case\r\n                    when coverage in ('INHERENT DEFECTS INSURANCE','INSURANCE BACKED GUARANTEE','INHERENT DEFECTS INSURANCE - BI','INSURANCE BACKED GUARANTEE - BI')\r\n                    then 'IDI'\r\n                    else 'ENGINEERING'\r\n                end\r\n\r\n            when XFI_Product = 'FORESTRY'\r\n            then 'PROPERTY'\r\n\r\n            when XFI_Product = 'MARINE'\r\n            then 'MARINE CARGO'\r\n\r\n            when XFI_Product = 'UPSTREAM ENERGY'\r\n            then\r\n                case\r\n                    when class in ('CAR','EIO CAR')\r\n                    then 'UPSTREAM CONSTRUCTION'\r\n                    else 'UPSTREAM ENERGY'\r\n                end\r\n\r\n            when XFI_Product = 'MR'\r\n            then 'INWARDS XOL'\r\n        end as SubClassSegmentation_month,\r\n\r\n\tclass as class_month,\r\n\r\n\tproducer_source as ProducerSource_month,\r\n\r\n\tproducer as producer_month,\r\n\r\n    ProducerGroup as ProducerGroup_month,\r\n\r\n\t'' as InsuranceType_month,\r\n\r\n\t-- map it with what we have in xfi\r\n\tCoverage as CoverageDesc_month,\r\n\r\n\tcoverage_code as CoverageCode_month,\r\n\r\n\tTerritory as territory_month,\r\n\r\n\tDomicileCountry as domicile_month,\r\n\r\n\tRegion as region_month,\r\n    region as region_split_month,\r\n\r\n\t-- from mar 2020 allcore\r\n\tMISUWY as MISUWY_month,\r\n\t\r\n\tUWY as UWY_month,\r\n\r\n\tASSURED as insured_month,\r\n\r\n\tREASSURED as reassured_month,\r\n\r\n\tFILE_HANDLER as FileHandler_month,\r\n\r\n\tUNDERWRITER as underwriter_month,\r\n\r\n\tREC_UWR as RecUnderwriter_month,\r\n\r\n\tADMIN_FILE_HANDLER as AdminFileHandler_month,\r\n\r\n\t'' as OperatorId_month,\r\n\r\n\t'' as activity_notes_period,\r\n\r\n    PolicyInceptionDate as for_period_policy_inception,\r\n\r\n    PolicyExpiryDate as for_period_policy_expiry,\r\n\r\n   PolicyExpiryDate as for_period_policy_expiry_reported,\r\n\r\n   '' as for_period_New_vs_Renwal\r\n\r\n\tFROM( \r\n        SELECT\r\n            PolicyReference,\r\n            PolicyInceptionDate,\r\n            PolicyExpiryDate,\r\n            IRIS_Product,\r\n            XFI_Product,\r\n            Ccy,\r\n            ROE,\r\n            Division,\r\n            Subdivision,\r\n            ProducerCode,\r\n            Producer,\r\n            ProducerGroupCode,\r\n            ProducerGroup,\r\n            ProducingOffice,\r\n            Class,\r\n            Coverage,\r\n            Subclass,\r\n            Territory,\r\n            DomicileCountry,\r\n            Region,\r\n            Major_Region,\r\n            GWP_Org as premium_org,\r\n            GWP_AccCcy as premium_usd,\r\n            ACQCOSTBOOKED_Org as acq_cost_org,\r\n            ACQCOSTBOOKED_AccCcy as acq_cost_usd,\r\n            --AGENCYFEESBOOKED_Org,\r\n            --AGENCYFEESBOOKED_AccCcy as agency_fees_usd,\r\n            EIOAGENCYFEESBOOKED_Org as eio_fees_org,\r\n            EIOAGENCYFEESBOOKED_AccCcy as eio_fees_usd,\r\n            ARGOFEESBOOKED_Org as argo_fees_org,\r\n            ARGOFEESBOOKED_AccCcy as argo_fees_usd,\r\n            AccountPeriod,\r\n            MISUWY,\r\n            UWY,\r\n            ASSURED,\r\n            REASSURED,\r\n            FILE_HANDLER,\r\n            UNDERWRITER,\r\n            REC_UWR,\r\n            ADMIN_FILE_HANDLER,\r\n            coverage_code,\r\n            producer_source\r\n        FROM iris_mvmt\r\n\t) p\r\n\r\n\tUNPIVOT (apr_amount FOR type_of_monetary_amount in (premium_org, premium_usd, acq_cost_org, acq_cost_usd, eio_fees_org, eio_fees_usd, argo_fees_org, argo_fees_usd)) as unpvt\r\n\r\n\tWHERE apr_amount <> 0\r\n    \r\n)\r\n\r\nSELECT * FROM iris_mvmts_reformated", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "domain\\dmn_iris_mvmts.sql", "original_file_path": "models\\domain\\dmn_iris_mvmts.sql", "name": "dmn_iris_mvmts", "alias": "dmn_iris_mvmts", "checksum": {"name": "sha256", "checksum": "514d2e794b745141a8b15c02d89e5031438af9b5aeba38723444f7b099eaf857"}, "tags": ["InwardPremium"], "refs": [], "sources": [["iris", "IRIS_INW_GWP_Movemnets"], ["dbo", "segmentation"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\domain\\dmn_iris_mvmts.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "tags": ["InwardPremium"]}, "created_at": 1701786800.6817222, "compiled_code": "\n\n\nwith iris_mvmt as (\n\n    select * from \"IGI_PROD_DW\".\"iris\".\"IRIS_INW_GWP_Movemnets\"\n\n),\n\n\nsegmentation as (\n    select * from \"IGI_PROD_DW\".\"dbo\".\"Segmentation\"\n),\n\n\niris_mvmts_reformated as (SELECT \n\t0 as policy_id,\n\tCONCAT('iris','_',ROW_NUMBER() OVER (ORDER BY (SELECT 1))) as apr_reference,\n\t1 as apr_activity_id,\n\tCASE WHEN type_of_monetary_amount in('premium_usd','acq_cost_usd','eio_fees_usd','argo_fees_usd') then apr_amount else 0 end as apr_amount_usd,\n\n    CASE WHEN type_of_monetary_amount = 'premium_usd' then apr_amount else 0 end as iw_gross,\n    CASE WHEN type_of_monetary_amount = 'acq_cost_usd' then apr_amount else 0 end as iw_acq,\n\n    --original amounts\n    CASE WHEN type_of_monetary_amount in('premium_org','acq_cost_org','eio_fees_org','argo_fees_org') then apr_amount else 0 end as apr_amount_org,\n    Ccy as apr_org_ccy,\n    ROE as apr_roe,\n    CASE WHEN type_of_monetary_amount = 'premium_org' then apr_amount else 0 end as iw_gross_org,\n    CASE WHEN type_of_monetary_amount = 'acq_cost_org' then apr_amount else 0 end as iw_acq_org,\n\n\n\t-- end of month account period\n\teomonth(DATEFROMPARTS(LEFT(AccountPeriod,4),RIGHT(AccountPeriod,2),1)) as apr_entry_date,\n\t--NULL as apr_allocation_date,\n    NULL as apr_settlement_due_date,\n    AccountPeriod as apr_account_period,\n\tRIGHT(AccountPeriod,2) as AP_month,\n\tLEFT(AccountPeriod,4) as AP_year,\n\tCAST(DATEFROMPARTS(LEFT(AccountPeriod,4),RIGHT(AccountPeriod,2),1) as DATE) as AP_Date,\n\t--'Paid' as apr_status,\n\tCASE\n        WHEN type_of_monetary_amount in('premium_org','premium_usd')  THEN 'Gross premium ( + )'\n        WHEN type_of_monetary_amount in ('acq_cost_org','acq_cost_usd') THEN 'Brokerage ( - )'\n\t\tWHEN type_of_monetary_amount in('eio_fees_org','eio_fees_usd')  THEN 'Agency Fees EIO'\n\t\tWHEN type_of_monetary_amount in('argo_fees_org','argo_fees_usd')  THEN 'Intermediary Fees'\n    END as type_of_monetary_amount,\n    '' As activity_version,\n    '' as activity_type,\n\t1 as effective_activity_id,\n\tCASE\n        WHEN Division = 'London' THEN 1 \n\t\tWHEN Division = 'Bermuda' THEN 0\n    END as activity_division,\n    CASE\n        WHEN Subdivision = 'JD' THEN 'BER' -- subdivision: combine Jordan and Bermuda\n        WHEN Subdivision = 'CS' THEN 'CAS'\n        WHEN Subdivision = 'TK' THEN 'TAK'\n        WHEN Subdivision = 'LO' THEN 'LON'\n        WHEN Subdivision = 'BE' THEN 'BER'\n        WHEN Subdivision = 'DU' THEN 'DUB'\n        WHEN Subdivision = 'LA' THEN 'LAB'\n    END as Subdivision,\n\n    XFI_Product as product,\n\n    case\n        when XFI_Product in (\n            'AVIATION','FINANCIAL INSTITUTIONS','INWARDS PPN','INWARDS XOL','MARINE LIABILITY',\n            'MARINE TRADE','POLITICAL VIOLENCE','PORTS & TERMINALS','PROPERTY','CONTINGENCY'\n        )\n        then XFI_Product\n\n        when XFI_Product = 'CASUALTY'\n        then\n            case\n                when 'PROFESSIONAL INDEMNITY' = coverage\n                and substring(PolicyReference,1,6) <> '600494'\n                then 'PROFESSIONAL INDEMNITY' \n\n                when 'PROFESSIONAL INDEMNITY' = coverage\n                and substring(PolicyReference,1,6) = '600494'\n                then 'PEN' \n\n                when REPLACE(coverage,'&amp;','&') in('DIRECTORS & OFFICERS','WARRANTY AND INDEMNITY' , 'PUBLIC OFFERING OF SECURITIES INSURANCE')\n                then 'DIRECTORS & OFFICERS'\n\n                when coverage in ('MEDICAL MALPRACTICE','SURETY BONDS')\n                then coverage\n\n                when 'LEGAL EXPENSES' = coverage\n                AND   Subclass like '%BTE%' \n                then 'LEGAL EXPENSES BTE'\n\n                when 'LEGAL EXPENSES' = coverage\n                AND   Subclass like '%ATE%' \n                then 'LEGAL EXPENSES ATE'\n\n                else 'CGL'\n            end\n\n        when XFI_Product = 'DOWNSTREAM ENERGY'\n        then\n            case\n                when class in ('POWER GENERATION-CONVENTIONAL','POWER GENERATION-RENEWABLES')\n                then 'POWER & RENEWABLES'\n                else 'OIL & GAS'\n            end\n\n        when XFI_Product = 'ENGINEERING'\n        then\n            case\n                when coverage in ('INHERENT DEFECTS INSURANCE','INSURANCE BACKED GUARANTEE','INHERENT DEFECTS INSURANCE - BI','INSURANCE BACKED GUARANTEE - BI')\n                then 'IDI'\n                else 'ENGINEERING'\n            end\n\n        when XFI_Product = 'FORESTRY'\n        then 'PROPERTY'\n\n        when XFI_Product = 'MARINE'\n        then 'MARINE CARGO'\n\n        when XFI_Product = 'UPSTREAM ENERGY'\n        then\n            case\n                when class in ('CAR','EIO CAR')\n                then 'UPSTREAM CONSTRUCTION'\n                else 'UPSTREAM ENERGY'\n            end\n\n        when XFI_Product = 'MR'\n        then 'INWARDS XOL'\n    end as activity_SubClassSegmentation,\n\n\tXFI_Product as product_segregation,\n\tCoverage as activity_coverage_description,\n\tcoverage_code as activity_coverage_code,\n\tclass as activity_section_class,\n\tAccountPeriod as activity_written_account_period,\n\tPolicyReference as policy_reference,\n    '' as activity_source,\n    NULL as broker_version_number,\n    \n    'INWARD' as iw_ow_flag,\n    '' as ri_policy,\n     Null as ri_policy_inception,\n     null as ri_policy_expiry,\n     '' as ow_broker,\n     '' as ow_broker_major_group,\n     '' as ow_security,\n\n\n\n\t1 as for_date_activity_id,\n\tCASE\n        WHEN Division = 'London' THEN 1 \n\t\tWHEN Division = 'Bermuda' THEN 0\n    END as for_date_division,\n\t\n    CASE\n        WHEN Subdivision = 'JD' THEN 'JOR'\n\t    WHEN Subdivision = 'CS' THEN 'CAS'\n\t\tWHEN Subdivision = 'TK' THEN 'TAK'\n\t\tWHEN Subdivision = 'LO' THEN 'LON'\n\t\tWHEN Subdivision = 'BE' THEN 'BER'\n\t\tWHEN Subdivision = 'DU' THEN 'DUB'\n\t\tWHEN Subdivision = 'LA' THEN 'LAB'\n    END as subdivision_day,\n\t\n\tProducingOffice as ProducingOffice_day,\n\tXFI_Product as for_date_product_name,\n\tXFI_Product as ProductSegregation_day,\n \t\n\tcase\n        when XFI_Product in (\n            'AVIATION','DOWNSTREAM ENERGY','FINANCIAL INSTITUTIONS','FORESTRY','INWARDS PPN',\n            'INWARDS XOL','MARINE LIABILITY','MARINE TRADE','MR','POLITICAL VIOLENCE',\n            'PORTS & TERMINALS','PROPERTY','UPSTREAM ENERGY','CONTINGENCY'\n        )\n        then (select distinct [Grouping] from segmentation seg where seg.Product = XFI_Product)\n\n        when XFI_Product = 'ENGINEERING' and Coverage in ('INHERENT DEFECTS INSURANCE','INSURANCE BACKED GUARANTEE','INHERENT DEFECTS INSURANCE - BI','INSURANCE BACKED GUARANTEE - BI')\n        then (select distinct [Grouping] from segmentation seg where seg.Product = XFI_Product and seg.Coverage = unpvt.Coverage)\n        \n        when XFI_Product = 'ENGINEERING' and Coverage not in ('INHERENT DEFECTS INSURANCE','INSURANCE BACKED GUARANTEE','INHERENT DEFECTS INSURANCE - BI','INSURANCE BACKED GUARANTEE - BI')\n        then (select distinct [Grouping] from segmentation seg where seg.Product = XFI_Product and seg.Coverage not in ('INHERENT DEFECTS INSURANCE','INSURANCE BACKED GUARANTEE','INHERENT DEFECTS INSURANCE - BI','INSURANCE BACKED GUARANTEE - BI'))\n\n        when XFI_Product = 'CASUALTY'\n        then (select distinct [Grouping] from segmentation seg where seg.Product = XFI_Product and seg.Coverage = unpvt.Coverage)\n\n        -- this product depends on classfication and we dont have it mapped. And in anycase from XFI side we dont have marinme segmentated\n        when XFI_Product = 'MARINE'\n        then XFI_Product\n    \n    end as segmentation_day,\n\n    case\n        when XFI_Product in (\n            'AVIATION','FINANCIAL INSTITUTIONS','INWARDS PPN','INWARDS XOL','MARINE LIABILITY','MARINE TRADE',\n            'POLITICAL VIOLENCE','PORTS & TERMINALS','PROPERTY','CONTINGENCY'\n        )\n        then XFI_Product\n\n        when XFI_Product = 'CASUALTY'\n        then\n            case\n                when 'PROFESSIONAL INDEMNITY' = coverage and \n                substring(PolicyReference,1,6) <> '600494'\n                then 'PROFESSIONAL INDEMNITY'\n\n                when 'PROFESSIONAL INDEMNITY'  = coverage and \n                substring(PolicyReference,1,6) = '600494'\n                then 'PEN'\n\n                when REPLACE(coverage,'&amp;','&') in ('DIRECTORS & OFFICERS','WARRANTY AND INDEMNITY','PUBLIC OFFERING OF SECURITIES INSURANCE')\n                then 'DIRECTORS & OFFICERS'\n                when REPLACE(coverage,'&amp;','&') in ('DIRECTORS & OFFICERS','WARRANTY AND INDEMNITY','PUBLIC OFFERING OF SECURITIES INSURANCE')\n                then 'DIRECTORS & OFFICERS'\n\n                when coverage in('MEDICAL MALPRACTICE')\n                then coverage\n                \n                when 'LEGAL EXPENSES' = coverage\n                AND   Subclass like '%BTE%' \n                then 'LEGAL EXPENSES BTE'\n\n                when 'LEGAL EXPENSES'  = coverage\n                AND   Subclass like '%ATE%' \n                then 'LEGAL EXPENSES ATE'\n\n                when 'SURETY BONDS'  = coverage\n                then 'FINANCIAL INSTITUTIONS'\n                \n                else 'CGL'\n            end\n\n        when XFI_Product = 'DOWNSTREAM ENERGY'\n        then\n            case\n                when class in ('POWER GENERATION-CONVENTIONAL','POWER GENERATION-RENEWABLES')\n                then 'POWER & RENEWABLES'\n                else 'OIL & GAS'\n            end\n\n        when XFI_Product = 'ENGINEERING'\n        then\n            case\n                when coverage in ('INHERENT DEFECTS INSURANCE','INSURANCE BACKED GUARANTEE','INHERENT DEFECTS INSURANCE - BI','INSURANCE BACKED GUARANTEE - BI')\n                then 'IDI'\n                else 'ENGINEERING'\n            end\n\n        when XFI_Product = 'FORESTRY'\n        then 'PROPERTY'\n\n        when XFI_Product = 'MARINE'\n        then 'MARINE CARGO'\n\n        when XFI_Product = 'UPSTREAM ENERGY'\n        then\n            case\n                when class in ('CAR','EIO CAR')\n                then 'UPSTREAM CONSTRUCTION'\n                else 'UPSTREAM ENERGY'\n            end\n\n        when XFI_Product = 'MR'\n        then 'INWARDS XOL'\n    end as BudgetSegmentation_day,\n\t\n    case\n        when XFI_Product in (\n            'AVIATION','FINANCIAL INSTITUTIONS','INWARDS PPN','INWARDS XOL','MARINE LIABILITY',\n            'MARINE TRADE','POLITICAL VIOLENCE','PORTS & TERMINALS','PROPERTY','CONTINGENCY'\n        )\n        then XFI_Product\n\n        when XFI_Product = 'CASUALTY'\n        then\n            case\n                when 'PROFESSIONAL INDEMNITY' = coverage\n                and substring(PolicyReference,1,6) <> '600494'\n                then 'PROFESSIONAL INDEMNITY' \n\n                when 'PROFESSIONAL INDEMNITY' = coverage\n                and substring(PolicyReference,1,6) = '600494'\n                then 'PEN' \n\n                when REPLACE(coverage,'&amp;','&') in('DIRECTORS & OFFICERS','WARRANTY AND INDEMNITY' , 'PUBLIC OFFERING OF SECURITIES INSURANCE')\n                then 'DIRECTORS & OFFICERS'\n\n                when coverage in ('MEDICAL MALPRACTICE','SURETY BONDS')\n                then coverage\n\n                when 'LEGAL EXPENSES' = coverage\n                AND   Subclass like '%BTE%' \n                then 'LEGAL EXPENSES BTE'\n\n                when 'LEGAL EXPENSES' = coverage\n                AND   Subclass like '%ATE%' \n                then 'LEGAL EXPENSES ATE'\n\n                else 'CGL'\n            end\n\n        when XFI_Product = 'DOWNSTREAM ENERGY'\n        then\n            case\n                when class in ('POWER GENERATION-CONVENTIONAL','POWER GENERATION-RENEWABLES')\n                then 'POWER & RENEWABLES'\n                else 'OIL & GAS'\n            end\n\n        when XFI_Product = 'ENGINEERING'\n        then\n            case\n                when coverage in ('INHERENT DEFECTS INSURANCE','INSURANCE BACKED GUARANTEE','INHERENT DEFECTS INSURANCE - BI','INSURANCE BACKED GUARANTEE - BI')\n                then 'IDI'\n                else 'ENGINEERING'\n            end\n\n        when XFI_Product = 'FORESTRY'\n        then 'PROPERTY'\n\n        when XFI_Product = 'MARINE'\n        then 'MARINE CARGO'\n\n        when XFI_Product = 'UPSTREAM ENERGY'\n        then\n            case\n                when class in ('CAR','EIO CAR')\n                then 'UPSTREAM CONSTRUCTION'\n                else 'UPSTREAM ENERGY'\n            end\n\n        when XFI_Product = 'MR'\n        then 'INWARDS XOL'\n    end as SubClassSegmentation_day,\n\n\tclass as Class_day,\n\tproducer_source as ProducerSource_day,\n\tproducer as producer_day,\n\tProducerGroup as ProducerGroup_day,\n\t'' as InsuranceType_day,\n\tCoverage as coverageDesc_day,\n\tcoverage_code as CoverageCode_day,\n\tTerritory as territory_day,\n\tDomicileCountry as domicile_day,\n\tRegion as region_day,\n\tMISUWY as MISUWY_day,\n\tUWY as UWY_day,\n\tASSURED as insured_day,\n\tREASSURED as reassured_day,\n\tFILE_HANDLER as FileHandler_day,\n\tUNDERWRITER as underwriter_day,\n\tREC_UWR as RecUnderwriter_day,\n\tADMIN_FILE_HANDLER as AdminFileHandler_day,\n\t'' as OperatorId_day,\n\t'' as activity_notes_day,\n\n    PolicyInceptionDate as for_date_policy_inception,\n\n    PolicyExpiryDate as for_date_policy_expiry,\n    PolicyExpiryDate as for_date_policy_expiry_reported,\n    '' as for_date_New_vs_Renwal,\n\n\t1 as for_period_activity_id,\n\n\tCASE\n        WHEN Division = 'London' THEN 1\n        WHEN Division = 'Bermuda' THEN 0\n    END as for_period_division,\n\t\n\tCASE\n        WHEN Subdivision = 'JD' THEN 'BER' -- subdivision: combine Jordan and Bermuda\n\t    WHEN Subdivision = 'CS' THEN 'CAS'\n\t\tWHEN Subdivision = 'TK' THEN 'TAK'\n\t\tWHEN Subdivision = 'LO' THEN 'LON'\n\t\tWHEN Subdivision = 'BE' THEN 'BER'\n\t\tWHEN Subdivision = 'DU' THEN 'DUB'\n\t\tWHEN Subdivision = 'LA' THEN 'LAB'\n    END as for_period_subdivision,\n\n\tProducingOffice as ProducingOffice_month,\n\t\n\tXFI_Product as for_period_product_name,\n\n\tXFI_Product as ProductSegregation_month,\n\n        case\n            when XFI_Product in (\n                'AVIATION','DOWNSTREAM ENERGY','FINANCIAL INSTITUTIONS','FORESTRY','INWARDS PPN',\n                'INWARDS XOL','MARINE LIABILITY','MARINE TRADE','MR','POLITICAL VIOLENCE',\n                'PORTS & TERMINALS','PROPERTY','UPSTREAM ENERGY','CONTINGENCY'\n            )\n            then (select distinct [Grouping] from segmentation seg where seg.Product = XFI_Product)\n\n            when XFI_Product = 'ENGINEERING' and Coverage in ('INHERENT DEFECTS INSURANCE','INSURANCE BACKED GUARANTEE','INHERENT DEFECTS INSURANCE - BI','INSURANCE BACKED GUARANTEE - BI')\n            then (select distinct [Grouping] from segmentation seg where seg.Product = XFI_Product and seg.Coverage = unpvt.Coverage)\n            \n\t\t\twhen XFI_Product = 'ENGINEERING' and Coverage not in ('INHERENT DEFECTS INSURANCE','INSURANCE BACKED GUARANTEE','INHERENT DEFECTS INSURANCE - BI','INSURANCE BACKED GUARANTEE - BI')\n            then (select distinct [Grouping] from segmentation seg where seg.Product = XFI_Product and seg.Coverage not in ('INHERENT DEFECTS INSURANCE','INSURANCE BACKED GUARANTEE','INHERENT DEFECTS INSURANCE - BI','INSURANCE BACKED GUARANTEE - BI'))\n\n            when XFI_Product = 'CASUALTY'\n            then (select distinct [Grouping] from segmentation seg where seg.Product = XFI_Product and seg.Coverage = unpvt.Coverage)\n\n\t\t\t-- this product depends on classfication and we dont have it mapped. And in anycase from XFI side we dont have marinme segmentated\n            when XFI_Product = 'MARINE'\n            then XFI_Product\n        \n\t\tend as segmentation_month,\n\n\t  case\n            when XFI_Product in (\n                'AVIATION','FINANCIAL INSTITUTIONS','INWARDS PPN','INWARDS XOL','MARINE LIABILITY','MARINE TRADE',\n                'POLITICAL VIOLENCE','PORTS & TERMINALS','PROPERTY','CONTINGENCY'\n            )\n            then XFI_Product\n\n            when XFI_Product = 'CASUALTY'\n            then\n                case\n                    when 'PROFESSIONAL INDEMNITY' = coverage and \n                    substring(PolicyReference,1,6) <> '600494'\n                    then 'PROFESSIONAL INDEMNITY'\n\n                    when 'PROFESSIONAL INDEMNITY'  = coverage and \n                    substring(PolicyReference,1,6) = '600494'\n                    then 'PEN'\n\n                    when REPLACE(coverage,'&amp;','&') in ('DIRECTORS & OFFICERS','WARRANTY AND INDEMNITY','PUBLIC OFFERING OF SECURITIES INSURANCE')\n                    then 'DIRECTORS & OFFICERS'\n                    when REPLACE(coverage,'&amp;','&') in ('DIRECTORS & OFFICERS','WARRANTY AND INDEMNITY','PUBLIC OFFERING OF SECURITIES INSURANCE')\n                    then 'DIRECTORS & OFFICERS'\n\n                    when coverage in('MEDICAL MALPRACTICE')\n                    then coverage\n                    \n                    when 'LEGAL EXPENSES' = coverage\n                    AND   Subclass like '%BTE%' \n                    then 'LEGAL EXPENSES BTE'\n\n                    when 'LEGAL EXPENSES'  = coverage\n                    AND   Subclass like '%ATE%' \n                    then 'LEGAL EXPENSES ATE'\n\n                    when 'SURETY BONDS'  = coverage\n                    then 'FINANCIAL INSTITUTIONS'\n                    \n                    else 'CGL'\n                end\n\n            when XFI_Product = 'DOWNSTREAM ENERGY'\n            then\n                case\n                    when class in ('POWER GENERATION-CONVENTIONAL','POWER GENERATION-RENEWABLES')\n                    then 'POWER & RENEWABLES'\n                    else 'OIL & GAS'\n                end\n\n            when XFI_Product = 'ENGINEERING'\n            then\n                case\n                    when coverage in ('INHERENT DEFECTS INSURANCE','INSURANCE BACKED GUARANTEE','INHERENT DEFECTS INSURANCE - BI','INSURANCE BACKED GUARANTEE - BI')\n                    then 'IDI'\n                    else 'ENGINEERING'\n                end\n\n            when XFI_Product = 'FORESTRY'\n            then 'PROPERTY'\n\n            when XFI_Product = 'MARINE'\n            then 'MARINE CARGO'\n\n            when XFI_Product = 'UPSTREAM ENERGY'\n            then\n                case\n                    when class in ('CAR','EIO CAR')\n                    then 'UPSTREAM CONSTRUCTION'\n                    else 'UPSTREAM ENERGY'\n                end\n\n            when XFI_Product = 'MR'\n            then 'INWARDS XOL'\n        end as BudgetSegmentation_month,\n\t\n\t case\n            when XFI_Product in (\n                'AVIATION','FINANCIAL INSTITUTIONS','INWARDS PPN','INWARDS XOL','MARINE LIABILITY',\n                'MARINE TRADE','POLITICAL VIOLENCE','PORTS & TERMINALS','PROPERTY','CONTINGENCY'\n            )\n            then XFI_Product\n\n            when XFI_Product = 'CASUALTY'\n            then\n                case\n                    when 'PROFESSIONAL INDEMNITY' = coverage\n                    and substring(PolicyReference,1,6) <> '600494'\n                    then 'PROFESSIONAL INDEMNITY' \n\n                    when 'PROFESSIONAL INDEMNITY' = coverage\n                    and substring(PolicyReference,1,6) = '600494'\n                    then 'PEN' \n\n                    when REPLACE(coverage,'&amp;','&') in('DIRECTORS & OFFICERS','WARRANTY AND INDEMNITY' , 'PUBLIC OFFERING OF SECURITIES INSURANCE')\n                    then 'DIRECTORS & OFFICERS'\n\n                    when coverage in ('MEDICAL MALPRACTICE','SURETY BONDS')\n                    then coverage\n\n                    when 'LEGAL EXPENSES' = coverage\n                    AND   Subclass like '%BTE%' \n                    then 'LEGAL EXPENSES BTE'\n\n                    when 'LEGAL EXPENSES' = coverage\n                    AND   Subclass like '%ATE%' \n                    then 'LEGAL EXPENSES ATE'\n\n                    else 'CGL'\n                end\n\n            when XFI_Product = 'DOWNSTREAM ENERGY'\n            then\n                case\n                    when class in ('POWER GENERATION-CONVENTIONAL','POWER GENERATION-RENEWABLES')\n                    then 'POWER & RENEWABLES'\n                    else 'OIL & GAS'\n                end\n\n            when XFI_Product = 'ENGINEERING'\n            then\n                case\n                    when coverage in ('INHERENT DEFECTS INSURANCE','INSURANCE BACKED GUARANTEE','INHERENT DEFECTS INSURANCE - BI','INSURANCE BACKED GUARANTEE - BI')\n                    then 'IDI'\n                    else 'ENGINEERING'\n                end\n\n            when XFI_Product = 'FORESTRY'\n            then 'PROPERTY'\n\n            when XFI_Product = 'MARINE'\n            then 'MARINE CARGO'\n\n            when XFI_Product = 'UPSTREAM ENERGY'\n            then\n                case\n                    when class in ('CAR','EIO CAR')\n                    then 'UPSTREAM CONSTRUCTION'\n                    else 'UPSTREAM ENERGY'\n                end\n\n            when XFI_Product = 'MR'\n            then 'INWARDS XOL'\n        end as SubClassSegmentation_month,\n\n\tclass as class_month,\n\n\tproducer_source as ProducerSource_month,\n\n\tproducer as producer_month,\n\n    ProducerGroup as ProducerGroup_month,\n\n\t'' as InsuranceType_month,\n\n\t-- map it with what we have in xfi\n\tCoverage as CoverageDesc_month,\n\n\tcoverage_code as CoverageCode_month,\n\n\tTerritory as territory_month,\n\n\tDomicileCountry as domicile_month,\n\n\tRegion as region_month,\n    region as region_split_month,\n\n\t-- from mar 2020 allcore\n\tMISUWY as MISUWY_month,\n\t\n\tUWY as UWY_month,\n\n\tASSURED as insured_month,\n\n\tREASSURED as reassured_month,\n\n\tFILE_HANDLER as FileHandler_month,\n\n\tUNDERWRITER as underwriter_month,\n\n\tREC_UWR as RecUnderwriter_month,\n\n\tADMIN_FILE_HANDLER as AdminFileHandler_month,\n\n\t'' as OperatorId_month,\n\n\t'' as activity_notes_period,\n\n    PolicyInceptionDate as for_period_policy_inception,\n\n    PolicyExpiryDate as for_period_policy_expiry,\n\n   PolicyExpiryDate as for_period_policy_expiry_reported,\n\n   '' as for_period_New_vs_Renwal\n\n\tFROM( \n        SELECT\n            PolicyReference,\n            PolicyInceptionDate,\n            PolicyExpiryDate,\n            IRIS_Product,\n            XFI_Product,\n            Ccy,\n            ROE,\n            Division,\n            Subdivision,\n            ProducerCode,\n            Producer,\n            ProducerGroupCode,\n            ProducerGroup,\n            ProducingOffice,\n            Class,\n            Coverage,\n            Subclass,\n            Territory,\n            DomicileCountry,\n            Region,\n            Major_Region,\n            GWP_Org as premium_org,\n            GWP_AccCcy as premium_usd,\n            ACQCOSTBOOKED_Org as acq_cost_org,\n            ACQCOSTBOOKED_AccCcy as acq_cost_usd,\n            --AGENCYFEESBOOKED_Org,\n            --AGENCYFEESBOOKED_AccCcy as agency_fees_usd,\n            EIOAGENCYFEESBOOKED_Org as eio_fees_org,\n            EIOAGENCYFEESBOOKED_AccCcy as eio_fees_usd,\n            ARGOFEESBOOKED_Org as argo_fees_org,\n            ARGOFEESBOOKED_AccCcy as argo_fees_usd,\n            AccountPeriod,\n            MISUWY,\n            UWY,\n            ASSURED,\n            REASSURED,\n            FILE_HANDLER,\n            UNDERWRITER,\n            REC_UWR,\n            ADMIN_FILE_HANDLER,\n            coverage_code,\n            producer_source\n        FROM iris_mvmt\n\t) p\n\n\tUNPIVOT (apr_amount FOR type_of_monetary_amount in (premium_org, premium_usd, acq_cost_org, acq_cost_usd, eio_fees_org, eio_fees_usd, argo_fees_org, argo_fees_usd)) as unpvt\n\n\tWHERE apr_amount <> 0\n    \n)\n\nSELECT * FROM iris_mvmts_reformated", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"dmn_iris_mvmts\""}, "model.iginsure.dmn_journal_pairs": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.iginsure.stg_journal_line_items", "model.iginsure.stg_journal_pairs", "model.iginsure.stg_journal_activities"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "domain", "dmn_journal_pairs"], "unique_id": "model.iginsure.dmn_journal_pairs", "raw_code": "with\r\n\r\nstg_journal_line_items as (\r\n    select * from {{ ref('stg_journal_line_items') }}\r\n),\r\n\r\nstg_journal_pairs as (\r\n    select * from {{ ref('stg_journal_pairs') }}\r\n),\r\n\r\nstg_journal_activities as (\r\n    select * from {{ ref('stg_journal_activities') }}\r\n),\r\n\r\npaired_line_items as (\r\n    select\r\n        credit.journal_pair_id,\r\n        credit.original_currency,\r\n        credit.original_roe,\r\n        abs(credit.original_amount) as original_amount,\r\n        credit.reporting_currency,\r\n        abs(credit.reporting_amount) as reporting_amount,\r\n        credit.account_number as credit_account_number,\r\n        credit.account_type as credit_account_type,\r\n        credit.account_description as credit_account_description,\r\n        debit.account_number as debit_account_number,\r\n        debit.account_type as debit_account_type,\r\n        debit.account_description as debit_account_description\r\n\r\n    from\r\n        stg_journal_line_items as credit\r\n        inner join stg_journal_line_items as debit on\r\n            credit.journal_pair_id = debit.journal_pair_id\r\n            and credit.debit_credit = 'Credit'\r\n            and debit.debit_credit = 'Debit'\r\n),\r\n\r\njournal_pairs as (\r\n    select\r\n        stg_journal_pairs.journal_pair_id,\r\n        stg_journal_pairs.journal_activity_id,\r\n        stg_journal_activities.journal_entry_date,\r\n        stg_journal_activities.journal_source_entity_type,\r\n        stg_journal_activities.journal_source_instance_id,\r\n        stg_journal_activities.journal_template_description,\r\n        stg_journal_pairs.account_period,\r\n        stg_journal_pairs.roe_date,\r\n        stg_journal_pairs.journal_pair_entity_type,\r\n        stg_journal_pairs.journal_pair_instance_id,\r\n        stg_journal_pairs.group_by_entity_type,\r\n        stg_journal_pairs.description,\r\n        stg_journal_pairs.division,\r\n        stg_journal_pairs.subdivision,\r\n        paired_line_items.original_currency,\r\n        paired_line_items.original_roe,\r\n        paired_line_items.original_amount,\r\n        paired_line_items.reporting_currency,\r\n        paired_line_items.reporting_amount,\r\n        paired_line_items.credit_account_number,\r\n        paired_line_items.credit_account_type,\r\n        paired_line_items.credit_account_description,\r\n        paired_line_items.debit_account_number,\r\n        paired_line_items.debit_account_type,\r\n        paired_line_items.debit_account_description\r\n\r\n    from\r\n        stg_journal_pairs\r\n        inner join paired_line_items on\r\n            stg_journal_pairs.journal_pair_id = paired_line_items.journal_pair_id\r\n        inner join stg_journal_activities on\r\n            stg_journal_pairs.journal_activity_id = stg_journal_activities.journal_activity_id\r\n)\r\n\r\nselect * from journal_pairs", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "domain\\dmn_journal_pairs.sql", "original_file_path": "models\\domain\\dmn_journal_pairs.sql", "name": "dmn_journal_pairs", "alias": "dmn_journal_pairs", "checksum": {"name": "sha256", "checksum": "6f8830a65f34b6e1ad1c1a1173e22399ab331a66525f57ee9319598cfaa1d43e"}, "tags": [], "refs": [["stg_journal_line_items"], ["stg_journal_pairs"], ["stg_journal_activities"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": "iginsure://models\\domain\\domain.yml", "compiled_path": "target\\compiled\\iginsure\\models\\domain\\dmn_journal_pairs.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "docs": {"show": false}}, "created_at": 1701786801.1959767, "compiled_code": "with\n\nstg_journal_line_items as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"stg_journal_line_items\"\n),\n\nstg_journal_pairs as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"stg_journal_pairs\"\n),\n\nstg_journal_activities as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"stg_journal_activities\"\n),\n\npaired_line_items as (\n    select\n        credit.journal_pair_id,\n        credit.original_currency,\n        credit.original_roe,\n        abs(credit.original_amount) as original_amount,\n        credit.reporting_currency,\n        abs(credit.reporting_amount) as reporting_amount,\n        credit.account_number as credit_account_number,\n        credit.account_type as credit_account_type,\n        credit.account_description as credit_account_description,\n        debit.account_number as debit_account_number,\n        debit.account_type as debit_account_type,\n        debit.account_description as debit_account_description\n\n    from\n        stg_journal_line_items as credit\n        inner join stg_journal_line_items as debit on\n            credit.journal_pair_id = debit.journal_pair_id\n            and credit.debit_credit = 'Credit'\n            and debit.debit_credit = 'Debit'\n),\n\njournal_pairs as (\n    select\n        stg_journal_pairs.journal_pair_id,\n        stg_journal_pairs.journal_activity_id,\n        stg_journal_activities.journal_entry_date,\n        stg_journal_activities.journal_source_entity_type,\n        stg_journal_activities.journal_source_instance_id,\n        stg_journal_activities.journal_template_description,\n        stg_journal_pairs.account_period,\n        stg_journal_pairs.roe_date,\n        stg_journal_pairs.journal_pair_entity_type,\n        stg_journal_pairs.journal_pair_instance_id,\n        stg_journal_pairs.group_by_entity_type,\n        stg_journal_pairs.description,\n        stg_journal_pairs.division,\n        stg_journal_pairs.subdivision,\n        paired_line_items.original_currency,\n        paired_line_items.original_roe,\n        paired_line_items.original_amount,\n        paired_line_items.reporting_currency,\n        paired_line_items.reporting_amount,\n        paired_line_items.credit_account_number,\n        paired_line_items.credit_account_type,\n        paired_line_items.credit_account_description,\n        paired_line_items.debit_account_number,\n        paired_line_items.debit_account_type,\n        paired_line_items.debit_account_description\n\n    from\n        stg_journal_pairs\n        inner join paired_line_items on\n            stg_journal_pairs.journal_pair_id = paired_line_items.journal_pair_id\n        inner join stg_journal_activities on\n            stg_journal_pairs.journal_activity_id = stg_journal_activities.journal_activity_id\n)\n\nselect * from journal_pairs", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"dmn_journal_pairs\""}, "model.iginsure.dmn_master_declaration_attributes": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.iginsure.scd_policy", "model.iginsure.scd_policy_activity", "model.iginsure.scd_policy_line", "model.iginsure.scd_type_of_placement"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "domain", "dmn_master_declaration_attributes"], "unique_id": "model.iginsure.dmn_master_declaration_attributes", "raw_code": "with\r\npolicy as (\r\n    select * from {{ ref(\"scd_policy\") }} where _valid_to is null\r\n),\r\n\r\npolicy_activity as (\r\n    select * from {{ ref(\"scd_policy_activity\") }} where _valid_to is null\r\n),\r\n\r\npolicy_line as (\r\n    select * from {{ ref(\"scd_policy_line\") }} where _valid_to is null\r\n),\r\n\r\ntype_of_placement as (\r\n    select * from {{ ref(\"scd_type_of_placement\") }} where _valid_to is null\r\n),\r\n\r\nmaster_declaration_attributes as (\r\n    select\r\n        policy.lPolicyKey as policy_id,\r\n        declaration_policy.lPolicyKey as declaration_policy_id,\r\n        declaration_policy_activity.lPolicyActivityKey as declaration_policy_activity_id,\r\n        master_policy.lPolicyKey as master_policy_id,\r\n        master_policy_activity.lPolicyActivityKey as master_policy_activity_id,\r\n        master_policy.nPeriodFromYear as master_uw_year,\r\n        master_policy_line.dtUWyear as master_mis_uw_year\r\n    from\r\n        policy\r\n        inner join policy as declaration_policy on\r\n            policy.lMasterPolicyKey = declaration_policy.lPolicyKey\r\n        inner join policy as master_policy on\r\n            declaration_policy.lMasterPolicyKey = master_policy.lPolicyKey\r\n        inner join policy_activity as declaration_policy_activity on\r\n            declaration_policy.lActivePolicyActivityKey = declaration_policy_activity.lPolicyActivityKey\r\n        inner join policy_line as declaration_policy_line on\r\n            declaration_policy_activity.lPolicyActivityKey = declaration_policy_line.lPolicyActivityKey\r\n        inner join policy_activity as master_policy_activity on\r\n            master_policy.lActivePolicyActivityKey = master_policy_activity.lPolicyActivityKey\r\n        inner join policy_line as master_policy_line on\r\n            master_policy_activity.lPolicyActivityKey = master_policy_line.lPolicyActivityKey\r\n        inner join type_of_placement on\r\n            declaration_policy_activity.lTypeOfPlacementKey = type_of_placement.lTypeOfPlacementKey\r\n    where\r\n        type_of_placement.sMOP = 'Declaration'\r\n        and declaration_policy.bIsSequence = 0\r\n)\r\n\r\nselect * from master_declaration_attributes", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "domain\\dmn_master_declaration_attributes.sql", "original_file_path": "models\\domain\\dmn_master_declaration_attributes.sql", "name": "dmn_master_declaration_attributes", "alias": "dmn_master_declaration_attributes", "checksum": {"name": "sha256", "checksum": "d06e1295c797f36aa47e7883db0e6ba863c1649a6938a78004325909e8eb639e"}, "tags": [], "refs": [["scd_policy"], ["scd_policy_activity"], ["scd_policy_line"], ["scd_type_of_placement"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": "iginsure://models\\domain\\domain.yml", "compiled_path": "target\\compiled\\iginsure\\models\\domain\\dmn_master_declaration_attributes.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "docs": {"show": false}}, "created_at": 1701786801.1969764, "compiled_code": "with\npolicy as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"scd_policy\" where _valid_to is null\n),\n\npolicy_activity as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"scd_policy_activity\" where _valid_to is null\n),\n\npolicy_line as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"scd_policy_line\" where _valid_to is null\n),\n\ntype_of_placement as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"scd_type_of_placement\" where _valid_to is null\n),\n\nmaster_declaration_attributes as (\n    select\n        policy.lPolicyKey as policy_id,\n        declaration_policy.lPolicyKey as declaration_policy_id,\n        declaration_policy_activity.lPolicyActivityKey as declaration_policy_activity_id,\n        master_policy.lPolicyKey as master_policy_id,\n        master_policy_activity.lPolicyActivityKey as master_policy_activity_id,\n        master_policy.nPeriodFromYear as master_uw_year,\n        master_policy_line.dtUWyear as master_mis_uw_year\n    from\n        policy\n        inner join policy as declaration_policy on\n            policy.lMasterPolicyKey = declaration_policy.lPolicyKey\n        inner join policy as master_policy on\n            declaration_policy.lMasterPolicyKey = master_policy.lPolicyKey\n        inner join policy_activity as declaration_policy_activity on\n            declaration_policy.lActivePolicyActivityKey = declaration_policy_activity.lPolicyActivityKey\n        inner join policy_line as declaration_policy_line on\n            declaration_policy_activity.lPolicyActivityKey = declaration_policy_line.lPolicyActivityKey\n        inner join policy_activity as master_policy_activity on\n            master_policy.lActivePolicyActivityKey = master_policy_activity.lPolicyActivityKey\n        inner join policy_line as master_policy_line on\n            master_policy_activity.lPolicyActivityKey = master_policy_line.lPolicyActivityKey\n        inner join type_of_placement on\n            declaration_policy_activity.lTypeOfPlacementKey = type_of_placement.lTypeOfPlacementKey\n    where\n        type_of_placement.sMOP = 'Declaration'\n        and declaration_policy.bIsSequence = 0\n)\n\nselect * from master_declaration_attributes", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"dmn_master_declaration_attributes\""}, "model.iginsure.dmn_policy": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.iginsure.scd_policy", "model.iginsure.dmn_master_declaration_attributes"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["InwardPremium"], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "domain", "dmn_policy"], "unique_id": "model.iginsure.dmn_policy", "raw_code": "{{\r\n    config(tags=['InwardPremium'])\r\n}}\r\n\r\nwith\r\n\r\npolicy as (\r\n    select * from {{ ref('scd_policy') }} where _valid_to is null\r\n),\r\n\r\nmaster_declaration_attributes as (\r\n    select * from {{ ref('dmn_master_declaration_attributes') }}\r\n),\r\n\r\nattributed_policy as (\r\n    select\r\n        policy.*,\r\n        m_d_attributes.declaration_policy_id,\r\n        m_d_attributes.declaration_policy_activity_id,\r\n        m_d_attributes.master_policy_id,\r\n        m_d_attributes.master_policy_activity_id,\r\n        m_d_attributes.master_uw_year,\r\n        m_d_attributes.master_mis_uw_year\r\n    from\r\n        policy\r\n        left join master_declaration_attributes as m_d_attributes on\r\n            policy.lPolicyKey = m_d_attributes.policy_id\r\n)\r\n\r\nselect * from attributed_policy", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "domain\\dmn_policy.sql", "original_file_path": "models\\domain\\dmn_policy.sql", "name": "dmn_policy", "alias": "dmn_policy", "checksum": {"name": "sha256", "checksum": "600aa043a307b98bbfcacd177e85a50a4544c1059cbe1ca2db28c3a4eea53067"}, "tags": ["InwardPremium"], "refs": [["scd_policy"], ["dmn_master_declaration_attributes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": "iginsure://models\\domain\\domain.yml", "compiled_path": "target\\compiled\\iginsure\\models\\domain\\dmn_policy.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "docs": {"show": false}, "tags": ["InwardPremium"]}, "created_at": 1701786801.2060246, "compiled_code": "\n\nwith\n\npolicy as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"scd_policy\" where _valid_to is null\n),\n\nmaster_declaration_attributes as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"dmn_master_declaration_attributes\"\n),\n\nattributed_policy as (\n    select\n        policy.*,\n        m_d_attributes.declaration_policy_id,\n        m_d_attributes.declaration_policy_activity_id,\n        m_d_attributes.master_policy_id,\n        m_d_attributes.master_policy_activity_id,\n        m_d_attributes.master_uw_year,\n        m_d_attributes.master_mis_uw_year\n    from\n        policy\n        left join master_declaration_attributes as m_d_attributes on\n            policy.lPolicyKey = m_d_attributes.policy_id\n)\n\nselect * from attributed_policy", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"dmn_policy\""}, "model.iginsure.dmn_policy_account_periods": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.iginsure.dmn_policy_part", "model.iginsure.stg_account_period"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "domain", "dmn_policy_account_periods"], "unique_id": "model.iginsure.dmn_policy_account_periods", "raw_code": "with\r\n\r\ndmn_policy_part as (\r\n    select * from {{ ref('dmn_policy_part') }}\r\n),\r\n\r\nstg_account_period as (\r\n    select * from {{ ref('stg_account_period') }}\r\n),\r\n\r\nmax_activities as (\r\n    select\r\n        dmn_policy_part.policy_id,\r\n        stg_account_period.period_year_period as account_period,\r\n        stg_account_period.period_year as account_period_year,\r\n        stg_account_period.period_month as account_period_month,\r\n        max(dmn_policy_part.activity_id) as max_activity_id\r\n    from\r\n        dmn_policy_part\r\n        cross join stg_account_period\r\n    where\r\n        dmn_policy_part.activity_state_is_active = 'TRUE'\r\n        and dmn_policy_part.written_account_period <= stg_account_period.period_year_period\r\n    group by\r\n        policy_id,\r\n        period_year_period,\r\n        period_year,\r\n        period_month\r\n),\r\n\r\npolicy_account_periods as (\r\n    select\r\n        max_activities.policy_id,\r\n        max_activities.account_period,\r\n        max_activities.account_period_year,\r\n        max_activities.account_period_month,\r\n        datefromparts(max_activities.account_period_year, max_activities.account_period_month, 1) as month,\r\n        max_activities.max_activity_id,\r\n        dmn_policy_part.line_division as division,\r\n        dmn_policy_part.line_subdivision as subdivision,\r\n        dmn_policy_part.line_producing_office as producing_office,\r\n        dmn_policy_part.line_product_name as product_name,\r\n        dmn_policy_part.line_region as region,\r\n        dmn_policy_part.line_producer as producer,\r\n        dmn_policy_part.activity_state,\r\n        dmn_policy_part.activity_state_is_active,\r\n        dmn_policy_part.activity_period_from,\r\n        dmn_policy_part.activity_period_to,\r\n        dmn_policy_part.product_segregation_name,\r\n        dmn_policy_part.policy_reference,\r\n        dmn_policy_part.coverage_description,\r\n        dmn_policy_part.coverage_code,\r\n        dmn_policy_part.section_class\r\n\r\n\r\n    from\r\n        max_activities\r\n        inner join dmn_policy_part on\r\n            max_activities.max_activity_id = dmn_policy_part.activity_id\r\n)\r\n\r\nselect * from policy_account_periods", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "domain\\dmn_policy_account_periods.sql", "original_file_path": "models\\domain\\dmn_policy_account_periods.sql", "name": "dmn_policy_account_periods", "alias": "dmn_policy_account_periods", "checksum": {"name": "sha256", "checksum": "98d7efe9da351cd305a248f062c588bf89165f5a905b7ec7881cf4d46c7ca81f"}, "tags": [], "refs": [["dmn_policy_part"], ["stg_account_period"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": "iginsure://models\\domain\\domain.yml", "compiled_path": "target\\compiled\\iginsure\\models\\domain\\dmn_policy_account_periods.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "docs": {"show": false}}, "created_at": 1701786801.197976, "compiled_code": "with\n\ndmn_policy_part as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"dmn_policy_part\"\n),\n\nstg_account_period as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"stg_account_period\"\n),\n\nmax_activities as (\n    select\n        dmn_policy_part.policy_id,\n        stg_account_period.period_year_period as account_period,\n        stg_account_period.period_year as account_period_year,\n        stg_account_period.period_month as account_period_month,\n        max(dmn_policy_part.activity_id) as max_activity_id\n    from\n        dmn_policy_part\n        cross join stg_account_period\n    where\n        dmn_policy_part.activity_state_is_active = 'TRUE'\n        and dmn_policy_part.written_account_period <= stg_account_period.period_year_period\n    group by\n        policy_id,\n        period_year_period,\n        period_year,\n        period_month\n),\n\npolicy_account_periods as (\n    select\n        max_activities.policy_id,\n        max_activities.account_period,\n        max_activities.account_period_year,\n        max_activities.account_period_month,\n        datefromparts(max_activities.account_period_year, max_activities.account_period_month, 1) as month,\n        max_activities.max_activity_id,\n        dmn_policy_part.line_division as division,\n        dmn_policy_part.line_subdivision as subdivision,\n        dmn_policy_part.line_producing_office as producing_office,\n        dmn_policy_part.line_product_name as product_name,\n        dmn_policy_part.line_region as region,\n        dmn_policy_part.line_producer as producer,\n        dmn_policy_part.activity_state,\n        dmn_policy_part.activity_state_is_active,\n        dmn_policy_part.activity_period_from,\n        dmn_policy_part.activity_period_to,\n        dmn_policy_part.product_segregation_name,\n        dmn_policy_part.policy_reference,\n        dmn_policy_part.coverage_description,\n        dmn_policy_part.coverage_code,\n        dmn_policy_part.section_class\n\n\n    from\n        max_activities\n        inner join dmn_policy_part on\n            max_activities.max_activity_id = dmn_policy_part.activity_id\n)\n\nselect * from policy_account_periods", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"dmn_policy_account_periods\""}, "model.iginsure.dmn_policy_liability": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.iginsure.scd_policy_liability"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["InwardPremium"], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "domain", "dmn_policy_liability"], "unique_id": "model.iginsure.dmn_policy_liability", "raw_code": "{{\r\n  config(tags=['InwardPremium'])\r\n}}\r\n\r\nwith\r\n\r\npolicy_liability as (\r\n    select * from {{ ref('scd_policy_liability') }} where _valid_to is null\r\n),\r\n\r\nused_fields as (\r\n    select\r\n        lPolicyActivityKey as activity_id,\r\n        lPolicySectionKey as section_id,\r\n        dLiabilityPremiumROE,\r\n        case\r\n            when dVersionGrossThisTime100 is null then 0 else dVersionGrossThisTime100\r\n        end as dVersionGrossThisTime100,\r\n        case\r\n            when dVersionGrossThisTimeShareTT is null then 0 else dVersionGrossThisTimeShareTT\r\n        end as dVersionGrossThisTimeShareTT,\r\n        case\r\n            when dEventLimit100 is null then 0 else dEventLimit100\r\n        end as dEventLimit100,\r\n        dLimitCurrencyROE,\r\n        case\r\n            when dExcessOf is null then 0 else dExcessOf\r\n        end as dExcessOf,\r\n        case\r\n            when dDeductible is null then 0 else dDeductible\r\n        end as dDeductible,\r\n        case\r\n            when dTSI is null then 0 else dTSI\r\n        end as dTSI\r\n    from\r\n        policy_liability\r\n),\r\n\r\ncalculations as (\r\n    select\r\n        activity_id,\r\n        section_id,\r\n        case\r\n            when dLiabilityPremiumROE is null or dLiabilityPremiumROE = 0 then 0\r\n            else (dVersionGrossThisTime100 / dLiabilityPremiumROE)\r\n        end as GrossWritten100,\r\n        case\r\n            when dLiabilityPremiumROE is null or dLiabilityPremiumROE = 0 then 0\r\n            else (dVersionGrossThisTimeShareTT / dLiabilityPremiumROE)\r\n        end as GrossWrittenShare,\r\n        case\r\n            when dLimitCurrencyROE is null or dLimitCurrencyROE = 0 then 0\r\n            else (dEventLimit100 / dLimitCurrencyROE)\r\n        end as EventLimit,\r\n        case\r\n            when dLimitCurrencyROE is null or dLimitCurrencyROE = 0 then 0\r\n            else (dExcessOf / dLimitCurrencyROE)\r\n        end as XSPoint,\r\n        case\r\n            when dLimitCurrencyROE is null or dLimitCurrencyROE = 0 then 0\r\n            else (dDeductible / dLimitCurrencyROE)\r\n        end as Deductible,\r\n        case\r\n            when dLimitCurrencyROE is null or dLimitCurrencyROE = 0 then 0\r\n            else (dTSI / dLimitCurrencyROE)\r\n        end as TotalSumInsured\r\n    from\r\n        used_fields\r\n)\r\n\r\nselect * from calculations", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "domain\\dmn_policy_liability.sql", "original_file_path": "models\\domain\\dmn_policy_liability.sql", "name": "dmn_policy_liability", "alias": "dmn_policy_liability", "checksum": {"name": "sha256", "checksum": "11ae4a61ecf50f320006d07e5c199b56f4b5cfa71f1f28452ad5c289261ba5c1"}, "tags": ["InwardPremium"], "refs": [["scd_policy_liability"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": "iginsure://models\\domain\\domain.yml", "compiled_path": "target\\compiled\\iginsure\\models\\domain\\dmn_policy_liability.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "docs": {"show": false}, "tags": ["InwardPremium"]}, "created_at": 1701786801.198976, "compiled_code": "\n\nwith\n\npolicy_liability as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"scd_policy_liability\" where _valid_to is null\n),\n\nused_fields as (\n    select\n        lPolicyActivityKey as activity_id,\n        lPolicySectionKey as section_id,\n        dLiabilityPremiumROE,\n        case\n            when dVersionGrossThisTime100 is null then 0 else dVersionGrossThisTime100\n        end as dVersionGrossThisTime100,\n        case\n            when dVersionGrossThisTimeShareTT is null then 0 else dVersionGrossThisTimeShareTT\n        end as dVersionGrossThisTimeShareTT,\n        case\n            when dEventLimit100 is null then 0 else dEventLimit100\n        end as dEventLimit100,\n        dLimitCurrencyROE,\n        case\n            when dExcessOf is null then 0 else dExcessOf\n        end as dExcessOf,\n        case\n            when dDeductible is null then 0 else dDeductible\n        end as dDeductible,\n        case\n            when dTSI is null then 0 else dTSI\n        end as dTSI\n    from\n        policy_liability\n),\n\ncalculations as (\n    select\n        activity_id,\n        section_id,\n        case\n            when dLiabilityPremiumROE is null or dLiabilityPremiumROE = 0 then 0\n            else (dVersionGrossThisTime100 / dLiabilityPremiumROE)\n        end as GrossWritten100,\n        case\n            when dLiabilityPremiumROE is null or dLiabilityPremiumROE = 0 then 0\n            else (dVersionGrossThisTimeShareTT / dLiabilityPremiumROE)\n        end as GrossWrittenShare,\n        case\n            when dLimitCurrencyROE is null or dLimitCurrencyROE = 0 then 0\n            else (dEventLimit100 / dLimitCurrencyROE)\n        end as EventLimit,\n        case\n            when dLimitCurrencyROE is null or dLimitCurrencyROE = 0 then 0\n            else (dExcessOf / dLimitCurrencyROE)\n        end as XSPoint,\n        case\n            when dLimitCurrencyROE is null or dLimitCurrencyROE = 0 then 0\n            else (dDeductible / dLimitCurrencyROE)\n        end as Deductible,\n        case\n            when dLimitCurrencyROE is null or dLimitCurrencyROE = 0 then 0\n            else (dTSI / dLimitCurrencyROE)\n        end as TotalSumInsured\n    from\n        used_fields\n)\n\nselect * from calculations", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"dmn_policy_liability\""}, "model.iginsure.dmn_policy_part": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.iginsure.reserving_class_2"], "nodes": ["source.iginsure.dbo.segmentation", "source.iginsure.dbo.security_users", "model.iginsure.dmn_policy", "model.iginsure.scd_policy_activity", "model.iginsure.scd_policy_line", "model.iginsure.scd_type_of_policy_line", "model.iginsure.scd_policy_section", "model.iginsure.scd_type_of_class", "model.iginsure.scd_sub_class", "model.iginsure.scd_type_of_placement", "model.iginsure.stg_entity_instance_states", "model.iginsure.stg_activity_audit_state_transitions", "model.iginsure.scd_type_of_pricing", "model.iginsure.scd_type_of_pricing_time", "model.iginsure.stg_account_periods_closing", "model.iginsure.stg_cancellation_reason_history", "model.iginsure.stg_contra_expiry_history", "model.iginsure.scd_version_audit_trail", "model.iginsure.stg_product", "model.iginsure.scd_type_of_insurance", "model.iginsure.stg_subdivision", "model.iginsure.stg_contact", "model.iginsure.stg_type_of_profit_centre", "model.iginsure.scd_type_of_policy_activity", "model.iginsure.scd_type_of_activity_source", "model.iginsure.stg_country_territory", "model.iginsure.stg_division", "model.iginsure.stg_account_period", "model.iginsure.stg_coverage", "model.iginsure.scd_classification", "model.iginsure.stg_broker_group", "model.iginsure.stg_inception"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["InwardPremium"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "domain", "dmn_policy_part"], "unique_id": "model.iginsure.dmn_policy_part", "raw_code": "{{ config(\r\n    tags=['InwardPremium'],\r\n    materialized='table'\r\n) }}\r\n\r\nwith\r\n\r\npolicy as (\r\n    select * from {{ ref('dmn_policy') }} where _valid_to is null\r\n),\r\n\r\npolicy_activity as (\r\n    select * from {{ ref('scd_policy_activity') }} where _valid_to is null\r\n),\r\n\r\npolicy_line as (\r\n    select * from {{ ref('scd_policy_line') }} where _valid_to is null\r\n),\r\n\r\ntype_of_policy_line as (\r\n    select * from {{ ref('scd_type_of_policy_line') }} where _valid_to is null\r\n),\r\n\r\npolicy_section as (\r\n    select * from {{ ref('scd_policy_section') }} where _valid_to is null\r\n),\r\n\r\ntype_of_class as (\r\n    select * from {{ ref('scd_type_of_class') }} where _valid_to is null\r\n),\r\n\r\nsub_class as (\r\n    select * from {{ ref('scd_sub_class') }} where _valid_to is null\r\n),\r\n\r\ntype_of_placement as (\r\n    select * from {{ ref('scd_type_of_placement') }} where _valid_to is null\r\n),\r\n\r\nstg_entity_instance_states as (\r\n    select * from {{ ref('stg_entity_instance_states') }}\r\n),\r\n\r\naudit_state_transitions_full as (\r\n    select \r\n        *\r\n     from \r\n        {{ ref('stg_activity_audit_state_transitions') }} \r\n),\r\n\r\ntype_of_pricing as (\r\n    select * from {{ ref('scd_type_of_pricing') }} where _valid_to is null\r\n),\r\n\r\ntype_of_pricing_time as (\r\n    select * from {{ ref('scd_type_of_pricing_time') }} where _valid_to is null\r\n),\r\n\r\naccount_period_closing as (\r\n    select * from {{ref('stg_account_periods_closing')}}\r\n),\r\n\r\ncancellation_reason_hist as (\r\n\r\n    select * from \r\n        (select *,row_number() over(partition by lpolicyactivitykey,lTypeOfCancellationReasonKey \r\n                                    order by DTDATEAMENDED ) as changes_ranked \r\n        from {{ref('stg_cancellation_reason_history')}} )final\r\n    where lTypeOfCancellationReasonKey = 2000001 -- NA\r\n    and changes_ranked = 1\r\n\r\n),\r\n\r\n\r\ncontra_hist as (\r\n    select * from {{ref('stg_contra_expiry_history')}} \r\n),\r\n\r\n\r\naudit_state_transitions as (\r\n    select\r\n        LINSTANCEKEY,\r\n        CAST(min(DTTRANSITION) AS DATE) as DTTRANSITION,\r\n        min(DTTRANSITION)  as DTTRANSITION_for_account_period\r\n\r\n    from\r\n        audit_state_transitions_full\r\n    where\r\n        (\r\n            \"LENTITYSTATEMEMBERKEY\" in (\r\n                2153, -- 'Written'\r\n                2220, -- 'Cancellation'\r\n                2204, -- 'Cancelled'\r\n                2533, -- 'Cancelled Adjustment'\r\n                2162, -- 'Cancelled Endorsement'\r\n                2392, -- 'Cancelled Contra'\r\n                2391  -- 'Contra Applied'\r\n            )\r\n            or CAST(\"DTTRANSITION\" AS DATE)  = '2019-03-16' -- Migrated\r\n        )\r\n    group by\r\n        LINSTANCEKEY\r\n),\r\n\r\nversion_audit_trail as (\r\n    select\r\n        LENTITYINSTANCEKEY,\r\n        LPREVIOUSENTITYINSTANCEKEY\r\n    from\r\n        {{ ref('scd_version_audit_trail') }}\r\n    where\r\n        LENTITYKEY = 611 -- Policy Activity\r\n        and _valid_to is null\r\n),\r\n\r\nstg_product as (\r\n    select * from {{ ref('stg_product') }}\r\n),\r\n\r\ntype_of_insurance as (\r\n    select * from {{ ref('scd_type_of_insurance') }} where _valid_to is null\r\n),\r\n\r\nstg_subdivision as (\r\n    select * from {{ ref('stg_subdivision') }}\r\n),\r\n\r\ncontact as (\r\n    select * from {{ ref('stg_contact') }}\r\n),\r\n\r\nstg_type_of_profit_centre as (\r\n    select * from {{ ref('stg_type_of_profit_centre') }}\r\n),\r\n\r\ntype_of_policy_activity as (\r\n    select * from {{ ref('scd_type_of_policy_activity') }}\r\n),\r\n\r\ntype_of_activity_source as (\r\n    select * from {{ ref('scd_type_of_activity_source') }}\r\n),\r\n\r\nstg_country_territory as (\r\n    select * from {{ ref('stg_country_territory') }}\r\n),\r\n\r\nstg_division as (\r\n    select * from {{ ref('stg_division') }}\r\n),\r\n\r\nstg_account_period as (\r\n    select * from {{ ref('stg_account_period') }}\r\n),\r\n\r\nstg_coverage as (\r\n    select * from {{ ref('stg_coverage') }}\r\n),\r\n\r\nsegmentation as (\r\n    select * from {{ source('dbo', 'segmentation') }}\r\n),\r\n\r\nclassification as (\r\n    select * from {{ ref('scd_classification') }} where _valid_to is null\r\n),\r\n\r\nstg_broker_group as (\r\n    select * from {{ ref('stg_broker_group') }}\r\n),\r\n\r\nsecurity_users as(\r\n    select * from {{ source('dbo', 'security_users') }}\r\n),\r\n\r\n\r\ninception_per_account_period as (\r\n\r\n    select * from {{ref('stg_inception')}} \r\n),\r\n\r\n\r\nactivity_operator_id as(\r\n    select \r\n     au.lInstanceKey,au.lSecurityUserKey,su.sFullName\r\n    from \r\n     audit_state_transitions_full as au \r\n     inner join (select \r\n                    inner_AU.LINSTANCEKEY,MIN(inner_AU.DTTRANSITION) MinDTTRANSITION \r\n                 from \r\n                    audit_state_transitions_full inner_au\r\n                 group by  inner_au.LINSTANCEKEY)Min_TransitionDate on au.lInstanceKey = Min_TransitionDate.lInstanceKey and au.DTTRANSITION = Min_TransitionDate.MinDTTRANSITION\r\n\t inner join security_users su on au.lsecurityuserkey = su.lsecurityuserkey\r\n),\r\n\r\nactivity_effective_written_timestamp as (\r\n    select\r\n        version_audit_trail.LENTITYINSTANCEKEY as activity_id,\r\n        version_audit_trail.LPREVIOUSENTITYINSTANCEKEY as previous_activity_id,\r\n        coalesce (\r\n            audit_state_transitions.DTTRANSITION,\r\n            previous_audit_state_transitions.DTTRANSITION\r\n        ) as effective_written_timestamp,\r\n        coalesce (\r\n            audit_state_transitions.DTTRANSITION_for_account_period,\r\n            previous_audit_state_transitions.DTTRANSITION_for_account_period\r\n        ) as effective_written_timestamp_for_ap\r\n\r\n    from\r\n        version_audit_trail\r\n        left join audit_state_transitions on\r\n            version_audit_trail.LENTITYINSTANCEKEY = audit_state_transitions.LINSTANCEKEY\r\n        left join audit_state_transitions as previous_audit_state_transitions on\r\n            version_audit_trail.LPREVIOUSENTITYINSTANCEKEY = previous_audit_state_transitions.LINSTANCEKEY\r\n),\r\n\r\ncorrect_written_account_period as (\r\n\r\nselect * from     \r\n    (select *,ROW_NUMBER() over (partition by activity_ts.activity_id order by ap.date_closed) as ranked\r\n    from \r\n    activity_effective_written_timestamp activity_ts\r\n    inner join account_period_closing ap on \r\n    activity_ts.effective_written_timestamp_for_ap  <= ap.date_closed)final\r\nwhere ranked = 1\r\n\r\n),\r\n\r\npolicy_part as (\r\n    \r\n    SELECT final.*,\r\n           \r\n           COALESCE(inception_per_account_period.inceptiondate,inception_from_policy) as policy_inception,\r\n\r\n                    \r\n            case when final.cancellation_reason_ap is null and final.contra_DTDATEAMENDED is null then final.policy_expiry\r\n                 when final.cancellation_reason_ap is null and final.contra_DTDATEAMENDED is not null then final.policy_expiry_contra\r\n                 when final.cancellation_reason_ap is not null and final.contra_DTDATEAMENDED is null \r\n                      and final.written_account_period < final.cancellation_reason_ap then final.policy_expiry_to\r\n                 else final.policy_expiry end as policy_expiry_reported -- after the NA has changed\r\n           \r\n           FROM \r\n    \r\n    (select\r\n        policy.sReference as policy_reference,\r\n        policy_activity.\"lPolicyKey\" as policy_id,\r\n        policy_line.llinkrenewalpolicykey as renewal_policy_id,\r\n        policy_activity.\"lPolicyActivityKey\" as activity_id,\r\n        policy_activity.\"nversion\" as activity_version,\r\n        type_of_policy_activity.\"sactivity\" as activity_type, \r\n        policy_line.\"lPolicyLineKey\" as line_id,\r\n        policy_section.\"lPolicySectionKey\" as section_id,\r\n        policy_activity.\"sPolicyNo\" as policy_no,\r\n        policy_activity.\"sUMR\" as UMR,\r\n        activity_effective_written_timestamp.previous_activity_id,\r\n        stg_division.division as line_division,\r\n        cancellation_reason_hist.cancellation_reason_ap,\r\n\r\n        type_of_activity_source.sSearchTypeofActivitySourceDescr as activity_source,\r\n        policy_activity.nBrokerVersionNumber as broker_version_number,\r\n\r\n        -- written account period from the  policyactivity itself\r\n       -- written_account_period.period_year_period as written_account_period,\r\n        \r\n        -- account period based on the written timestamp of each activity\r\n        case when written_account_period.period_year_period is null then null\r\n             else isnull(correct_ap.account_period,written_account_period.period_year_period) end as written_account_period,\r\n\r\n        policy_activity.dtPeriodToDisplay as policy_expiry,\r\n\r\n        policy_activity.dtPeriodTo as policy_expiry_to,\r\n\r\n        contra_hist.DTDATEAMENDED as contra_DTDATEAMENDED,\r\n\r\n        contra_hist.Expirydate as policy_expiry_contra,\r\n\r\n        policy.dtPeriodFrom as inception_from_policy,\r\n        \r\n        policy_activity.dtPeriodFrom as inception_from_policy_activity,\r\n\r\n        stg_entity_instance_states.entity_state as activity_state,\r\n        policy_entity_instance_states.entity_state as policy_state,\r\n        sub_class.sSubClassCode as SubClassCode,\r\n        sub_class.sSubClassDescr AS Sub_Class,\r\n        classification.sClassificationDescr as Classification,\r\n        policy.bIsSequence,\r\n\r\n        {{reserving_class_2('policy.sReference','sub_class.sSubClassDescr',' stg_product.product_name',\r\n            ' stg_coverage.coverage_code','type_of_placement.\"sMOP\"','classification.sClassificationDescr')}},\r\n\r\n        case\r\n            when stg_entity_instance_states.entity_state in (\r\n                'Endorsement Setup',\r\n                'Cancelled Endorsement',\r\n                'Cancellation Adjustment',\r\n                'Cancellation Not Required',\r\n                'Pending Contra',\r\n                'Cancelled Contra',\r\n                'Cancelled Adjustment'\r\n            )\r\n            then cast('FALSE' as bit)\r\n            else cast('TRUE' as bit)\r\n        end as activity_state_is_active,\r\n        policy_activity.\"dtCreated\" as activity_created,\r\n        activity_effective_written_timestamp.effective_written_timestamp as activity_written_timestamp,\r\n        policy_activity.\"dtPeriodFrom\" as activity_period_from,\r\n        policy_activity.\"dtPeriodTo\" as   activity_period_to,\r\n        type_of_placement.\"sCode\" as activity_placement_code,\r\n        type_of_placement.\"sMOP\" as activity_placement_mop,\r\n        type_of_class.\"SCLASS\" as section_class,\r\n        stg_product.product_id as line_product_id,\r\n        stg_product.product_name as line_product_name,\r\n        case\r\n            when stg_product.product_id = 2000013 and type_of_class.SCLASS in ('CAR','EIO CAR') then 101\r\n            when stg_product.product_id = 2000013 and type_of_class.SCLASS not in ('CAR','EIO CAR') then 2000013\r\n            when stg_product.product_id = 2000014 and type_of_class.SCLASS not in ('POWER GENERATION-CONVENTIONAL','POWER GENERATION-RENEWABLES') then 102\r\n            when stg_product.product_id = 2000014 and type_of_class.SCLASS in ('POWER GENERATION-CONVENTIONAL','POWER GENERATION-RENEWABLES') then 103\r\n            else stg_product.product_id\r\n        end as product_segregation_id,\r\n        case\r\n            when stg_product.product_name in ('UPSTREAM ENERGY') and type_of_class.SCLASS in ('CAR','EIO CAR') then 'UPSTREAM CONSTRUCTION'\r\n            when stg_product.product_name in ('UPSTREAM ENERGY') and type_of_class.SCLASS not in ('CAR','EIO CAR') then 'UPSTREAM ENERGY'\r\n            when stg_product.product_name in ('DOWNSTREAM ENERGY') and type_of_class.SCLASS in ('POWER GENERATION-CONVENTIONAL','POWER GENERATION-RENEWABLES') then 'POWER & RENEWABLES'\r\n            when stg_product.product_name in ('DOWNSTREAM ENERGY') and type_of_class.SCLASS not in ('POWER GENERATION-CONVENTIONAL','POWER GENERATION-RENEWABLES') then 'OIL & GAS'\r\n            else stg_product.product_name\r\n        end as product_segregation_name,\r\n        zone_country_territory.country as line_territory,\r\n        zone_country_domicile.country as line_domicile,\r\n\r\n        case\r\n            when stg_product.product_name in (\r\n                'AVIATION','DOWNSTREAM ENERGY','FINANCIAL INSTITUTIONS','FORESTRY','INWARDS PPN',\r\n                'INWARDS XOL','MARINE LIABILITY','MARINE TRADE','MR','POLITICAL VIOLENCE',\r\n                'PORTS & TERMINALS','PROPERTY','UPSTREAM ENERGY','CONTINGENCY'\r\n            )\r\n            then (select distinct [Grouping] from segmentation seg where seg.Product = stg_product.product_name)\r\n\r\n            when stg_product.product_name = 'ENGINEERING' and stg_coverage.first_coverage_description in ('INHERENT DEFECTS INSURANCE','INSURANCE BACKED GUARANTEE','INHERENT DEFECTS INSURANCE - BI','INSURANCE BACKED GUARANTEE - BI')\r\n            then (select distinct [Grouping] from segmentation seg where seg.Product = stg_product.product_name and seg.Coverage = stg_coverage.first_coverage_description)\r\n            when stg_product.product_name = 'ENGINEERING' and stg_coverage.second_coverage_description in ('INHERENT DEFECTS INSURANCE','INSURANCE BACKED GUARANTEE','INHERENT DEFECTS INSURANCE - BI','INSURANCE BACKED GUARANTEE - BI')\r\n            then (select distinct [Grouping] from segmentation seg where seg.Product = stg_product.product_name and seg.Coverage = stg_coverage.second_coverage_description)\r\n\r\n            when stg_product.product_name = 'ENGINEERING' and stg_coverage.first_coverage_description not in ('INHERENT DEFECTS INSURANCE','INSURANCE BACKED GUARANTEE','INHERENT DEFECTS INSURANCE - BI','INSURANCE BACKED GUARANTEE - BI')\r\n            then (select distinct [Grouping] from segmentation seg where seg.Product = stg_product.product_name and seg.Coverage not in ('INHERENT DEFECTS INSURANCE','INSURANCE BACKED GUARANTEE','INHERENT DEFECTS INSURANCE - BI','INSURANCE BACKED GUARANTEE - BI'))\r\n            when stg_product.product_name = 'ENGINEERING' and stg_coverage.second_coverage_description not in ('INHERENT DEFECTS INSURANCE','INSURANCE BACKED GUARANTEE','INHERENT DEFECTS INSURANCE - BI','INSURANCE BACKED GUARANTEE - BI')\r\n            then (select distinct [Grouping] from segmentation seg where seg.Product = stg_product.product_name and seg.Coverage not in ('INHERENT DEFECTS INSURANCE','INSURANCE BACKED GUARANTEE','INHERENT DEFECTS INSURANCE - BI','INSURANCE BACKED GUARANTEE - BI'))\r\n\r\n            when stg_product.product_name = 'CASUALTY'\r\n            then (select distinct [Grouping] from segmentation seg where seg.Product = stg_product.product_name and seg.Coverage in (stg_coverage.first_coverage_description, stg_coverage.second_coverage_description))\r\n\r\n            when stg_product.product_name = 'MARINE'\r\n            then (select distinct [Grouping] from segmentation seg where seg.Product = stg_product.product_name and seg.Classification = classification.sClassificationDescr)\r\n        end as segmentation,\r\n\r\n        case\r\n            when stg_product.product_name in (\r\n                'AVIATION','FINANCIAL INSTITUTIONS','INWARDS PPN','INWARDS XOL','MARINE LIABILITY','MARINE TRADE',\r\n                'POLITICAL VIOLENCE','PORTS & TERMINALS','PROPERTY','CONTINGENCY'\r\n            )\r\n            then stg_product.product_name\r\n\r\n            when stg_product.product_name = 'CASUALTY'\r\n            then\r\n                case\r\n                    when 'PROFESSIONAL INDEMNITY' in (stg_coverage.first_coverage_description, stg_coverage.second_coverage_description) and \r\n                    (substring(policy.sReference,1,6) <> '600494' and substring(policy.sReference,1,6) <> '011122' )\r\n                    then 'PROFESSIONAL INDEMNITY'\r\n\r\n                    when 'PROFESSIONAL INDEMNITY' in (stg_coverage.first_coverage_description, stg_coverage.second_coverage_description) and \r\n                    (substring(policy.sReference,1,6) = '600494' or substring(policy.sReference,1,6) = '011122' ) \r\n                    then 'PEN'\r\n                    when stg_coverage.first_coverage_description = 'WARRANTY AND INDEMNITY'\r\n                    then 'WARRANTY & INDEMNITY'\r\n                    when stg_coverage.second_coverage_description = 'WARRANTY AND INDEMNITY'\r\n                    then 'WARRANTY & INDEMNITY'\r\n                    when REPLACE(stg_coverage.first_coverage_description,'&amp;','&') in ('DIRECTORS & OFFICERS','PUBLIC OFFERING OF SECURITIES INSURANCE')\r\n                    then 'DIRECTORS & OFFICERS'\r\n                    when REPLACE(stg_coverage.second_coverage_description,'&amp;','&') in ('DIRECTORS & OFFICERS','PUBLIC OFFERING OF SECURITIES INSURANCE')\r\n                    then 'DIRECTORS & OFFICERS'\r\n\r\n                    when stg_coverage.first_coverage_description in('MEDICAL MALPRACTICE')\r\n                    then stg_coverage.first_coverage_description\r\n                    when stg_coverage.second_coverage_description in('MEDICAL MALPRACTICE')\r\n                    then stg_coverage.second_coverage_description\r\n                    \r\n                    \r\n                    when 'LEGAL EXPENSES' in (stg_coverage.first_coverage_description, stg_coverage.second_coverage_description)\r\n                    AND   sub_class.sSubClassDescr like '%BTE%' \r\n                    then 'LEGAL EXPENSES BTE'\r\n\r\n                    when 'LEGAL EXPENSES' in (stg_coverage.first_coverage_description, stg_coverage.second_coverage_description)\r\n                    AND   sub_class.sSubClassDescr like '%ATE%' \r\n                    then 'LEGAL EXPENSES ATE'\r\n\r\n                    when 'SURETY BONDS' in (stg_coverage.first_coverage_description, stg_coverage.second_coverage_description)\r\n                    then 'FINANCIAL INSTITUTIONS'\r\n                    \r\n                    else 'CGL'\r\n                end\r\n\r\n            when stg_product.product_name = 'DOWNSTREAM ENERGY'\r\n            then\r\n                case\r\n                    when type_of_class.SCLASS in ('POWER GENERATION-CONVENTIONAL','POWER GENERATION-RENEWABLES')\r\n                    then 'POWER & RENEWABLES'\r\n                    else 'OIL & GAS'\r\n                end\r\n\r\n            when stg_product.product_name = 'ENGINEERING'\r\n            then\r\n                case\r\n                    when stg_coverage.first_coverage_description in ('INHERENT DEFECTS INSURANCE','INSURANCE BACKED GUARANTEE','INHERENT DEFECTS INSURANCE - BI','INSURANCE BACKED GUARANTEE - BI')\r\n                    then 'IDI'\r\n                    when stg_coverage.second_coverage_description in ('INHERENT DEFECTS INSURANCE','INSURANCE BACKED GUARANTEE','INHERENT DEFECTS INSURANCE - BI','INSURANCE BACKED GUARANTEE - BI')\r\n                    then 'IDI'\r\n                    else 'ENGINEERING'\r\n                end\r\n\r\n            when stg_product.product_name = 'FORESTRY'\r\n            then 'PROPERTY'\r\n\r\n            when stg_product.product_name = 'MARINE'\r\n            then 'MARINE CARGO'\r\n\r\n            when stg_product.product_name = 'UPSTREAM ENERGY'\r\n            then\r\n                case\r\n                    when type_of_class.SCLASS in ('CAR','EIO CAR')\r\n                    then 'UPSTREAM CONSTRUCTION'\r\n                    else 'UPSTREAM ENERGY'\r\n                end\r\n\r\n            when stg_product.product_name = 'MR'\r\n            then 'INWARDS XOL'\r\n        end as budget_segmentation,\r\n\r\n        case\r\n            when stg_product.product_name in (\r\n                'AVIATION','FINANCIAL INSTITUTIONS','INWARDS PPN','INWARDS XOL','MARINE LIABILITY',\r\n                'MARINE TRADE','POLITICAL VIOLENCE','PORTS & TERMINALS','PROPERTY','CONTINGENCY'\r\n            )\r\n            then stg_product.product_name\r\n\r\n            when stg_product.product_name = 'CASUALTY'\r\n            then\r\n                case\r\n                    when 'PROFESSIONAL INDEMNITY' in (stg_coverage.first_coverage_description, stg_coverage.second_coverage_description) and \r\n                    (substring(policy.sReference,1,6) <> '600494' and substring(policy.sReference,1,6) <> '011122' )\r\n                    then 'PROFESSIONAL INDEMNITY'\r\n\r\n                    when 'PROFESSIONAL INDEMNITY' in (stg_coverage.first_coverage_description, stg_coverage.second_coverage_description) and \r\n                    (substring(policy.sReference,1,6) = '600494' or substring(policy.sReference,1,6) = '011122' ) \r\n                    then 'PEN'\r\n                    when stg_coverage.first_coverage_description = 'WARRANTY AND INDEMNITY'\r\n                    then 'WARRANTY & INDEMNITY'\r\n                    when stg_coverage.second_coverage_description = 'WARRANTY AND INDEMNITY'\r\n                    then 'WARRANTY & INDEMNITY'\r\n                    when REPLACE(stg_coverage.first_coverage_description,'&amp;','&') in('DIRECTORS & OFFICERS', 'PUBLIC OFFERING OF SECURITIES INSURANCE')\r\n                    then 'DIRECTORS & OFFICERS'\r\n                    when REPLACE(stg_coverage.second_coverage_description,'&amp;','&') in('DIRECTORS & OFFICERS','PUBLIC OFFERING OF SECURITIES INSURANCE')\r\n                    then 'DIRECTORS & OFFICERS'\r\n\r\n                    when stg_coverage.first_coverage_description in ('MEDICAL MALPRACTICE','SURETY BONDS')\r\n                    then stg_coverage.first_coverage_description\r\n                    when stg_coverage.second_coverage_description in ('MEDICAL MALPRACTICE','SURETY BONDS')\r\n                    then stg_coverage.second_coverage_description\r\n\r\n                    when 'LEGAL EXPENSES' in (stg_coverage.first_coverage_description, stg_coverage.second_coverage_description)\r\n                    AND   sub_class.sSubClassDescr like '%BTE%' \r\n                    then 'LEGAL EXPENSES BTE'\r\n\r\n                    when 'LEGAL EXPENSES' in (stg_coverage.first_coverage_description, stg_coverage.second_coverage_description)\r\n                    AND   sub_class.sSubClassDescr like '%ATE%' \r\n                    then 'LEGAL EXPENSES ATE'\r\n\r\n                    else 'CGL'\r\n                end\r\n\r\n            when stg_product.product_name = 'DOWNSTREAM ENERGY'\r\n            then\r\n                case\r\n                    when type_of_class.SCLASS in ('POWER GENERATION-CONVENTIONAL','POWER GENERATION-RENEWABLES')\r\n                    then 'POWER & RENEWABLES'\r\n                    else 'OIL & GAS'\r\n                end\r\n\r\n            when stg_product.product_name = 'ENGINEERING'\r\n            then\r\n                case\r\n                    when stg_coverage.first_coverage_description in ('INHERENT DEFECTS INSURANCE','INSURANCE BACKED GUARANTEE','INHERENT DEFECTS INSURANCE - BI','INSURANCE BACKED GUARANTEE - BI')\r\n                    then 'IDI'\r\n                    when stg_coverage.second_coverage_description in ('INHERENT DEFECTS INSURANCE','INSURANCE BACKED GUARANTEE','INHERENT DEFECTS INSURANCE - BI','INSURANCE BACKED GUARANTEE - BI')\r\n                    then 'IDI'\r\n                    else 'ENGINEERING'\r\n                end\r\n\r\n            when stg_product.product_name = 'FORESTRY'\r\n            then 'PROPERTY'\r\n\r\n            when stg_product.product_name = 'MARINE'\r\n            then 'MARINE CARGO'\r\n\r\n            when stg_product.product_name = 'UPSTREAM ENERGY'\r\n            then\r\n                case\r\n                    when type_of_class.SCLASS in ('CAR','EIO CAR')\r\n                    then 'UPSTREAM CONSTRUCTION'\r\n                    else 'UPSTREAM ENERGY'\r\n                end\r\n\r\n            when stg_product.product_name = 'MR'\r\n            then 'INWARDS XOL'\r\n        end as sub_class_segmentation,\r\n\r\n        producer_source_group.broker_major_group_name as producer_source_group_name,\r\n        producer_group.broker_major_group_name as producer_group_name,\r\n        type_of_insurance.\"STYPEOFINSURANCE\" as activity_type_of_insurance,\r\n\r\n        -- subdivision: combine Jordan and Bermuda\r\n        -- if subdivision is Jordan then set to Bermuda\r\n        case \r\n            when stg_subdivision.subdivision = 'JOR' then 'BER'\r\n            else stg_subdivision.subdivision \r\n        end as line_subdivision,\r\n\r\n        producer_contact.contact_reference as line_producer,\r\n        stg_type_of_profit_centre.producing_office as line_producing_office,\r\n        zone_country_territory.territory as territory_territory,\r\n        zone_country_domicile.territory as domecile_territory,\r\n        stg_coverage.coverage_description as coverage_description,\r\n        stg_coverage.coverage_code as coverage_code,\r\n\r\n        case \r\n            when stg_product.product_name in (\r\n                -- Because neither 'UPSTREAM ENERGY' nor 'UPSTREAM ENERGY CONSTRUCTION', can skip above rename logic\r\n                'INWARDS XOL',\r\n                'MR',\r\n                'PROPERTY',\r\n                'POLITICAL VIOLENCE',\r\n                'INWARDS PPN',\r\n                'DOWNSTREAM ENERGY'\r\n            )\r\n            then zone_country_territory.territory\r\n            else\r\n                coalesce(zone_country_domicile.territory, zone_country_territory.territory)\r\n        end as line_region,\r\n\r\n        case \r\n            when stg_product.product_name in (\r\n                -- Because neither 'UPSTREAM ENERGY' nor 'UPSTREAM ENERGY CONSTRUCTION', can skip above rename logic\r\n                'INWARDS XOL',\r\n                'MR',\r\n                'PROPERTY',\r\n                'POLITICAL VIOLENCE',\r\n                'INWARDS PPN',\r\n                'DOWNSTREAM ENERGY'\r\n            )\r\n            then zone_country_territory.country\r\n            else\r\n                coalesce(zone_country_domicile.country, zone_country_territory.country)\r\n        end as region_split,\r\n\r\n        coalesce(policy.master_mis_uw_year, policy_line.dtUWYEAR) as mis_uw_year,\r\n        coalesce(policy.master_uw_year, policy.nPeriodFromYear) as uw_year,\r\n\r\n        insured_contact.contact_reference as insured,\r\n        reassured_contact.contact_reference as reassured,\r\n\r\n        fh_contact.contact_reference as file_handler,\r\n        uw_contact.contact_reference as underwriter,\r\n        rec_uw_contact.contact_reference as recommended_underwriter,\r\n        admin_fh_contact.contact_reference as admin_file_handler,\r\n\r\n        activity_operator_id.sFullName as operator_id,\r\n        policy_activity.sNotes as activity_notes,\r\n        nPeriodFromYear,\r\n        ML_cn.contact_reference AS MarketLeader,\r\n        policy_line.dworkinglinepc AS InforceLine,\r\n\r\n        type_of_policy_line.sTypeofPolicyLineDescr as New_vs_Renwal,\r\n\r\n        policy_line.dSignedLinePc as igi_sgn_line,\r\n        \r\n        -- in the system its stored as a percentage amount(ex : 122.2). divide by 100 to be able to use it in later calculations \r\n        policy_line.dPlanAdequacy/100 as plan_adequacy,\r\n        policy_line.dTechnicalAdequacy/100 as technical_adequacy,\r\n\r\n        policy_line.lModelSequencekey, \r\n\r\n\r\n        type_of_pricing.sPricingType as pricing_type,\r\n        type_of_pricing_time.sPricingTime as pricing_time\r\n\r\n\r\n    from\r\n        policy \r\n        inner join policy_activity on \r\n            policy.\"lpolicykey\" = policy_activity.\"lpolicykey\"\r\n        inner join policy_line on\r\n            policy_activity.\"lPolicyActivityKey\" = policy_line.\"lPolicyActivityKey\"\r\n        inner join policy_section on\r\n            policy_activity.\"lPolicyActivityKey\" = policy_section.\"lPolicyActivityKey\"\r\n        left join type_of_activity_source on\r\n            policy_activity.\"lTypeofActivitySourceKey\" = type_of_activity_source.\"lTypeofActivitySourceKey\"\r\n        inner join type_of_class on\r\n            policy_section.\"lTypeOfClassKey\" = type_of_class.\"LTYPEOFCLASSKEY\"\r\n        inner join type_of_placement on\r\n            policy_activity.\"lTypeOfPlacementKey\" = type_of_placement.\"lTypeOfPlacementKey\"\r\n        left join  sub_class on \r\n            policy_section.\"lSubClassKey\" = sub_class.\"lSubClassKey\"\r\n        inner join stg_product on\r\n            policy_line.\"lProductKey\" = stg_product.product_id\r\n        inner join stg_entity_instance_states on\r\n            policy_activity.\"lPolicyActivityKey\" = stg_entity_instance_states.instance_id\r\n            and stg_entity_instance_states.entity_type = 'Policy Activity'\r\n        inner join stg_entity_instance_states as policy_entity_instance_states on\r\n            policy_activity.\"lPolicyKey\" = policy_entity_instance_states.instance_id\r\n            and policy_entity_instance_states.entity_type = 'Policy'\r\n        left join activity_effective_written_timestamp on\r\n            policy_activity.\"lPolicyActivityKey\" = activity_effective_written_timestamp.activity_id\r\n        inner join type_of_insurance on\r\n            policy_activity.\"lTypeOfInsuranceKey\" = type_of_insurance.\"LTYPEOFINSURANCEKEY\"\r\n        left join type_of_policy_activity on\r\n            policy_activity.\"lTypeOfPolicyActivityKey\" = type_of_policy_activity.\"lTypeOfPolicyActivityKey\"\r\n        inner join stg_subdivision on\r\n            policy_line.lSubDivisionKey = stg_subdivision.subdivision_id\r\n        inner join contact as producer_contact on\r\n            policy_line.lProducerContactKey = producer_contact.contact_id\r\n        inner join stg_type_of_profit_centre on\r\n            policy_line.\"lTypeOfProfitCentreKey\" = stg_type_of_profit_centre.type_of_profit_centre_id\r\n        left join stg_country_territory as zone_country_territory on\r\n            policy_activity.\"lTerritoryKey\" = zone_country_territory.country_id\r\n        left join stg_country_territory as zone_country_domicile on\r\n            policy_activity.\"lInsuredDomicileCountryKey\" = zone_country_domicile.country_id\r\n        left join stg_division on\r\n            policy_line.lDivisionKey = stg_division.division_id\r\n        left join stg_account_period as written_account_period on\r\n            policy_activity.\"lWrittenAccountPeriodKey\" = written_account_period.account_period_id\r\n        left join correct_written_account_period as correct_ap on  \r\n            correct_ap.activity_id = policy_activity.lPolicyActivityKey\r\n        left join stg_coverage on\r\n            policy_section.\"lPolicySectionKey\" = stg_coverage.policy_section_id\r\n        left join classification on\r\n            policy_section.\"lClassificationKey\" = classification.\"lClassificationKey\"\r\n        left join stg_broker_group as producer_source_group on \r\n            policy_line.lBrokerContactKey = producer_source_group.broker_id\r\n        left join stg_broker_group as producer_group on \r\n            policy_line.lProducerContactKey = producer_group.broker_id\r\n        left join contact as insured_contact on\r\n            policy_line.lInsuredContactKey = insured_contact.contact_id\r\n        left join contact as reassured_contact on \r\n            policy_line.lReassuredContactKey = reassured_contact.contact_id\r\n        left join contact as fh_contact on \r\n            policy_line.lFileHandlerContactKey = fh_contact.contact_id\r\n        left join contact as uw_contact on\r\n            policy_line.lUnderWriterContactKey = uw_contact.contact_id\r\n        left join contact as rec_uw_contact on \r\n            policy_line.lRecommendedUWContactKey = rec_uw_contact.contact_id\r\n        left join contact as admin_fh_contact on\r\n            policy_line.lAdminFileHandlerContactKey = admin_fh_contact.contact_id\r\n        left join activity_operator_id on \r\n            policy_activity.lPolicyActivityKey = activity_operator_id.LINSTANCEKEY\r\n        left join Contact ML_cn on\r\n            policy_line.lLeaderContactKey = ML_cn.contact_id\r\n        \r\n        left join type_of_pricing on \r\n            policy_line.lPricingTypekey = type_of_pricing.lTypeOfPricingKey\r\n        left join type_of_pricing_time on \r\n            policy_line.lPricingTimekey = type_of_pricing_time.lTypeOfPricingTimeKey\r\n        left join cancellation_reason_hist on\r\n            cancellation_reason_hist.lpolicyactivitykey = policy_activity.lPolicyActivityKey\r\n        left join contra_hist on\r\n            contra_hist.lpolicyactivitykey = policy_activity.lPolicyActivityKey\r\n        \r\n        left join type_of_policy_line on \r\n            policy_line.lTypeofPolicyLineKey = type_of_policy_line.lTypeofPolicyLineKey    \r\n            \r\n            )final\r\n\r\n            \r\n        left join inception_per_account_period on \r\n            final.policy_id = inception_per_account_period.lpolicyKey and final.written_account_period = inception_per_account_period.accountperiod   \r\n            \r\n),\r\n\r\npolicy_part_final as(\r\n    select *,\r\n    case \r\n        when line_region = 'NORTH AMERICA' and region_split in( 'Canada', 'BRITISH COLUMBIA', 'Greenland') \r\n        then 'CANADA'\r\n        when  line_region = 'NORTH AMERICA' and region_split not in( 'Canada', 'BRITISH COLUMBIA', 'Greenland') \r\n        then 'US'\r\n        else line_region \r\n    end US_NonUS\r\n    from policy_part\r\n)\r\n\r\nselect * from policy_part_final", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "domain\\dmn_policy_part.sql", "original_file_path": "models\\domain\\dmn_policy_part.sql", "name": "dmn_policy_part", "alias": "dmn_policy_part", "checksum": {"name": "sha256", "checksum": "5cd6d1fd1eb29f21066ba0f2d3019efef02888043c5207019673694c02a09f0e"}, "tags": ["InwardPremium"], "refs": [["dmn_policy"], ["scd_policy_activity"], ["scd_policy_line"], ["scd_type_of_policy_line"], ["scd_policy_section"], ["scd_type_of_class"], ["scd_sub_class"], ["scd_type_of_placement"], ["stg_entity_instance_states"], ["stg_activity_audit_state_transitions"], ["scd_type_of_pricing"], ["scd_type_of_pricing_time"], ["stg_account_periods_closing"], ["stg_cancellation_reason_history"], ["stg_contra_expiry_history"], ["scd_version_audit_trail"], ["stg_product"], ["scd_type_of_insurance"], ["stg_subdivision"], ["stg_contact"], ["stg_type_of_profit_centre"], ["scd_type_of_policy_activity"], ["scd_type_of_activity_source"], ["stg_country_territory"], ["stg_division"], ["stg_account_period"], ["stg_coverage"], ["scd_classification"], ["stg_broker_group"], ["stg_inception"]], "sources": [["dbo", "segmentation"], ["dbo", "security_users"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": "iginsure://models\\domain\\domain.yml", "compiled_path": "target\\compiled\\iginsure\\models\\domain\\dmn_policy_part.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "docs": {"show": false}, "tags": ["InwardPremium"], "materialized": "table"}, "created_at": 1701786801.2020297, "compiled_code": "\n\nwith\n\npolicy as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"dmn_policy\" where _valid_to is null\n),\n\npolicy_activity as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"scd_policy_activity\" where _valid_to is null\n),\n\npolicy_line as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"scd_policy_line\" where _valid_to is null\n),\n\ntype_of_policy_line as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"scd_type_of_policy_line\" where _valid_to is null\n),\n\npolicy_section as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"scd_policy_section\" where _valid_to is null\n),\n\ntype_of_class as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"scd_type_of_class\" where _valid_to is null\n),\n\nsub_class as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"scd_sub_class\" where _valid_to is null\n),\n\ntype_of_placement as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"scd_type_of_placement\" where _valid_to is null\n),\n\nstg_entity_instance_states as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"stg_entity_instance_states\"\n),\n\naudit_state_transitions_full as (\n    select \n        *\n     from \n        \"IGI_PROD_DW\".\"dbt_dev\".\"stg_activity_audit_state_transitions\" \n),\n\ntype_of_pricing as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"scd_type_of_pricing\" where _valid_to is null\n),\n\ntype_of_pricing_time as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"scd_type_of_pricing_time\" where _valid_to is null\n),\n\naccount_period_closing as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"stg_account_periods_closing\"\n),\n\ncancellation_reason_hist as (\n\n    select * from \n        (select *,row_number() over(partition by lpolicyactivitykey,lTypeOfCancellationReasonKey \n                                    order by DTDATEAMENDED ) as changes_ranked \n        from \"IGI_PROD_DW\".\"dbt_dev\".\"stg_cancellation_reason_history\" )final\n    where lTypeOfCancellationReasonKey = 2000001 -- NA\n    and changes_ranked = 1\n\n),\n\n\ncontra_hist as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"stg_contra_expiry_history\" \n),\n\n\naudit_state_transitions as (\n    select\n        LINSTANCEKEY,\n        CAST(min(DTTRANSITION) AS DATE) as DTTRANSITION,\n        min(DTTRANSITION)  as DTTRANSITION_for_account_period\n\n    from\n        audit_state_transitions_full\n    where\n        (\n            \"LENTITYSTATEMEMBERKEY\" in (\n                2153, -- 'Written'\n                2220, -- 'Cancellation'\n                2204, -- 'Cancelled'\n                2533, -- 'Cancelled Adjustment'\n                2162, -- 'Cancelled Endorsement'\n                2392, -- 'Cancelled Contra'\n                2391  -- 'Contra Applied'\n            )\n            or CAST(\"DTTRANSITION\" AS DATE)  = '2019-03-16' -- Migrated\n        )\n    group by\n        LINSTANCEKEY\n),\n\nversion_audit_trail as (\n    select\n        LENTITYINSTANCEKEY,\n        LPREVIOUSENTITYINSTANCEKEY\n    from\n        \"IGI_PROD_DW\".\"dbt_dev\".\"scd_version_audit_trail\"\n    where\n        LENTITYKEY = 611 -- Policy Activity\n        and _valid_to is null\n),\n\nstg_product as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"stg_product\"\n),\n\ntype_of_insurance as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"scd_type_of_insurance\" where _valid_to is null\n),\n\nstg_subdivision as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"stg_subdivision\"\n),\n\ncontact as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"stg_contact\"\n),\n\nstg_type_of_profit_centre as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"stg_type_of_profit_centre\"\n),\n\ntype_of_policy_activity as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"scd_type_of_policy_activity\"\n),\n\ntype_of_activity_source as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"scd_type_of_activity_source\"\n),\n\nstg_country_territory as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"stg_country_territory\"\n),\n\nstg_division as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"stg_division\"\n),\n\nstg_account_period as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"stg_account_period\"\n),\n\nstg_coverage as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"stg_coverage\"\n),\n\nsegmentation as (\n    select * from \"IGI_PROD_DW\".\"dbo\".\"Segmentation\"\n),\n\nclassification as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"scd_classification\" where _valid_to is null\n),\n\nstg_broker_group as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"stg_broker_group\"\n),\n\nsecurity_users as(\n    select * from \"IGI_PROD_DW\".\"dbo\".\"securityusers\"\n),\n\n\ninception_per_account_period as (\n\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"stg_inception\" \n),\n\n\nactivity_operator_id as(\n    select \n     au.lInstanceKey,au.lSecurityUserKey,su.sFullName\n    from \n     audit_state_transitions_full as au \n     inner join (select \n                    inner_AU.LINSTANCEKEY,MIN(inner_AU.DTTRANSITION) MinDTTRANSITION \n                 from \n                    audit_state_transitions_full inner_au\n                 group by  inner_au.LINSTANCEKEY)Min_TransitionDate on au.lInstanceKey = Min_TransitionDate.lInstanceKey and au.DTTRANSITION = Min_TransitionDate.MinDTTRANSITION\n\t inner join security_users su on au.lsecurityuserkey = su.lsecurityuserkey\n),\n\nactivity_effective_written_timestamp as (\n    select\n        version_audit_trail.LENTITYINSTANCEKEY as activity_id,\n        version_audit_trail.LPREVIOUSENTITYINSTANCEKEY as previous_activity_id,\n        coalesce (\n            audit_state_transitions.DTTRANSITION,\n            previous_audit_state_transitions.DTTRANSITION\n        ) as effective_written_timestamp,\n        coalesce (\n            audit_state_transitions.DTTRANSITION_for_account_period,\n            previous_audit_state_transitions.DTTRANSITION_for_account_period\n        ) as effective_written_timestamp_for_ap\n\n    from\n        version_audit_trail\n        left join audit_state_transitions on\n            version_audit_trail.LENTITYINSTANCEKEY = audit_state_transitions.LINSTANCEKEY\n        left join audit_state_transitions as previous_audit_state_transitions on\n            version_audit_trail.LPREVIOUSENTITYINSTANCEKEY = previous_audit_state_transitions.LINSTANCEKEY\n),\n\ncorrect_written_account_period as (\n\nselect * from     \n    (select *,ROW_NUMBER() over (partition by activity_ts.activity_id order by ap.date_closed) as ranked\n    from \n    activity_effective_written_timestamp activity_ts\n    inner join account_period_closing ap on \n    activity_ts.effective_written_timestamp_for_ap  <= ap.date_closed)final\nwhere ranked = 1\n\n),\n\npolicy_part as (\n    \n    SELECT final.*,\n           \n           COALESCE(inception_per_account_period.inceptiondate,inception_from_policy) as policy_inception,\n\n                    \n            case when final.cancellation_reason_ap is null and final.contra_DTDATEAMENDED is null then final.policy_expiry\n                 when final.cancellation_reason_ap is null and final.contra_DTDATEAMENDED is not null then final.policy_expiry_contra\n                 when final.cancellation_reason_ap is not null and final.contra_DTDATEAMENDED is null \n                      and final.written_account_period < final.cancellation_reason_ap then final.policy_expiry_to\n                 else final.policy_expiry end as policy_expiry_reported -- after the NA has changed\n           \n           FROM \n    \n    (select\n        policy.sReference as policy_reference,\n        policy_activity.\"lPolicyKey\" as policy_id,\n        policy_line.llinkrenewalpolicykey as renewal_policy_id,\n        policy_activity.\"lPolicyActivityKey\" as activity_id,\n        policy_activity.\"nversion\" as activity_version,\n        type_of_policy_activity.\"sactivity\" as activity_type, \n        policy_line.\"lPolicyLineKey\" as line_id,\n        policy_section.\"lPolicySectionKey\" as section_id,\n        policy_activity.\"sPolicyNo\" as policy_no,\n        policy_activity.\"sUMR\" as UMR,\n        activity_effective_written_timestamp.previous_activity_id,\n        stg_division.division as line_division,\n        cancellation_reason_hist.cancellation_reason_ap,\n\n        type_of_activity_source.sSearchTypeofActivitySourceDescr as activity_source,\n        policy_activity.nBrokerVersionNumber as broker_version_number,\n\n        -- written account period from the  policyactivity itself\n       -- written_account_period.period_year_period as written_account_period,\n        \n        -- account period based on the written timestamp of each activity\n        case when written_account_period.period_year_period is null then null\n             else isnull(correct_ap.account_period,written_account_period.period_year_period) end as written_account_period,\n\n        policy_activity.dtPeriodToDisplay as policy_expiry,\n\n        policy_activity.dtPeriodTo as policy_expiry_to,\n\n        contra_hist.DTDATEAMENDED as contra_DTDATEAMENDED,\n\n        contra_hist.Expirydate as policy_expiry_contra,\n\n        policy.dtPeriodFrom as inception_from_policy,\n        \n        policy_activity.dtPeriodFrom as inception_from_policy_activity,\n\n        stg_entity_instance_states.entity_state as activity_state,\n        policy_entity_instance_states.entity_state as policy_state,\n        sub_class.sSubClassCode as SubClassCode,\n        sub_class.sSubClassDescr AS Sub_Class,\n        classification.sClassificationDescr as Classification,\n        policy.bIsSequence,\n\n        CASE \n    WHEN LEFT(policy.sReference,1) IN ('9', '8') THEN 'Outward'\n    WHEN  stg_product.product_name = 'DOWNSTREAM ENERGY' THEN 'DownstreamEnergy'\n    WHEN  stg_product.product_name = 'UPSTREAM ENERGY' THEN 'UpstreamEnergy'\n    WHEN LEFT(policy.sReference, 6) = '100006' THEN 'K6'\n    WHEN LEFT(policy.sReference, 6) = '600494' THEN 'CasualtyPen' \n    WHEN sub_class.sSubClassDescr IN ('MOTOR WHOLE ACCOUNT', 'MEDICAL EXPENSES XL') THEN 'InwardMedMotorEXP'\n    WHEN  stg_product.product_name = 'INWARDS PPN' THEN 'InwardPPN'\n    WHEN  stg_product.product_name = 'INWARDS XOL' THEN 'InwardXL'\n    WHEN type_of_placement.\"sMOP\" = 'Inwards Reinsurance XOL' THEN 'InwardXL' \n    WHEN type_of_placement.\"sMOP\" = 'Inwards Reinsurance Proportional' THEN 'InwardPPN'\n    WHEN  stg_product.product_name = 'FORESTRY' THEN 'PropertyForestry'\n    WHEN  stg_product.product_name = 'PROPERTY' THEN 'PropertyexForestry'\t\t\t\t\t\n    WHEN  stg_product.product_name = 'PORTS & TERMINALS' THEN 'PortsTerminals'\n    WHEN  stg_product.product_name = 'FINANCIAL INSTITUTIONS' THEN \n        CASE WHEN  stg_coverage.coverage_code IN ('F1','F3', 'PI', 'DO', 'F6') THEN 'FIDOEO'\n        ELSE 'FIBBBCC' END \n    WHEN  stg_product.product_name = 'ENGINEERING' THEN \n        CASE WHEN  stg_coverage.coverage_code IN ('CG', 'CO') THEN 'EngineeringCAR'\n        ELSE \n        CASE WHEN  stg_coverage.coverage_code IN ('EAR PD', 'EAR PD + BI', 'EAR TPL (C.M.)' ,'EAR BI', 'EAR (OCC.)', 'ER', 'TP', 'BI', 'MB')\n        OR ( stg_coverage.coverage_code = 'DS' AND classification.sClassificationDescr IN ('COMMERCE INDUSTRY', 'OIL & GAS'))\n        THEN 'EngineeringEAR'\n        WHEN  stg_coverage.coverage_code IN ('ID','IB') THEN 'EngineeringIDI'\n        WHEN  stg_coverage.coverage_code IN ('DO', 'TE', 'PI', 'PD', 'PR', 'S1', 'OB', 'MM', 'GL', 'WO', 'PL', 'EP', 'G2')\n        THEN 'EngineeringOTHER'\n        ELSE 'EngineeringCAR' END END\n    WHEN  stg_coverage.coverage_code = 'LE' THEN \n        CASE WHEN RIGHT(sub_class.sSubClassDescr, 3) = 'ATE' THEN 'CasualtyATE' \n        ELSE 'CasualtyBTE' END \n    WHEN  stg_product.product_name = 'Casualty' THEN\n        CASE WHEN  stg_coverage.coverage_code = 'DO' THEN 'CasualtyComDO'\n        WHEN  stg_coverage.coverage_code = 'WI' THEN 'CasualtyWI'\n        WHEN  stg_coverage.coverage_code = 'SU' THEN 'Surety'\n        ELSE 'CasualtyOther' END\n    --WHEN  stg_coverage.coverage_code = 'PI' THEN 'CasualtyProf'\n\n    WHEN  stg_product.product_name = 'MARINE LIABILITY' THEN 'MarineLiability'\n    WHEN  stg_product.product_name = 'MARINE TRADE' THEN 'MarineTrade'\n    WHEN  stg_product.product_name = 'MARINE' AND classification.sClassificationDescr = 'MARINE LIABILITY' THEN 'MarineLiability'\n    WHEN  stg_product.product_name = 'MARINE' THEN 'MarineCargo'\n\n    --WHEN  stg_product.product_name = 'Reinsurance' THEN \n    --\tCASE WHEN mop = 'I/W L/S' THEN 'InwardLS' END \n        \n    WHEN  stg_product.product_name = '' OR  stg_product.product_name = 'All' THEN 'Excluded'\n    WHEN  stg_product.product_name = 'POLITICAL VIOLENCE' THEN 'PoliticalViolence'\n    WHEN  stg_product.product_name = 'CONTINGENCY' THEN 'Contingency'\n    ELSE  stg_product.product_name END AS Reserving_Class_2,\n\n        case\n            when stg_entity_instance_states.entity_state in (\n                'Endorsement Setup',\n                'Cancelled Endorsement',\n                'Cancellation Adjustment',\n                'Cancellation Not Required',\n                'Pending Contra',\n                'Cancelled Contra',\n                'Cancelled Adjustment'\n            )\n            then cast('FALSE' as bit)\n            else cast('TRUE' as bit)\n        end as activity_state_is_active,\n        policy_activity.\"dtCreated\" as activity_created,\n        activity_effective_written_timestamp.effective_written_timestamp as activity_written_timestamp,\n        policy_activity.\"dtPeriodFrom\" as activity_period_from,\n        policy_activity.\"dtPeriodTo\" as   activity_period_to,\n        type_of_placement.\"sCode\" as activity_placement_code,\n        type_of_placement.\"sMOP\" as activity_placement_mop,\n        type_of_class.\"SCLASS\" as section_class,\n        stg_product.product_id as line_product_id,\n        stg_product.product_name as line_product_name,\n        case\n            when stg_product.product_id = 2000013 and type_of_class.SCLASS in ('CAR','EIO CAR') then 101\n            when stg_product.product_id = 2000013 and type_of_class.SCLASS not in ('CAR','EIO CAR') then 2000013\n            when stg_product.product_id = 2000014 and type_of_class.SCLASS not in ('POWER GENERATION-CONVENTIONAL','POWER GENERATION-RENEWABLES') then 102\n            when stg_product.product_id = 2000014 and type_of_class.SCLASS in ('POWER GENERATION-CONVENTIONAL','POWER GENERATION-RENEWABLES') then 103\n            else stg_product.product_id\n        end as product_segregation_id,\n        case\n            when stg_product.product_name in ('UPSTREAM ENERGY') and type_of_class.SCLASS in ('CAR','EIO CAR') then 'UPSTREAM CONSTRUCTION'\n            when stg_product.product_name in ('UPSTREAM ENERGY') and type_of_class.SCLASS not in ('CAR','EIO CAR') then 'UPSTREAM ENERGY'\n            when stg_product.product_name in ('DOWNSTREAM ENERGY') and type_of_class.SCLASS in ('POWER GENERATION-CONVENTIONAL','POWER GENERATION-RENEWABLES') then 'POWER & RENEWABLES'\n            when stg_product.product_name in ('DOWNSTREAM ENERGY') and type_of_class.SCLASS not in ('POWER GENERATION-CONVENTIONAL','POWER GENERATION-RENEWABLES') then 'OIL & GAS'\n            else stg_product.product_name\n        end as product_segregation_name,\n        zone_country_territory.country as line_territory,\n        zone_country_domicile.country as line_domicile,\n\n        case\n            when stg_product.product_name in (\n                'AVIATION','DOWNSTREAM ENERGY','FINANCIAL INSTITUTIONS','FORESTRY','INWARDS PPN',\n                'INWARDS XOL','MARINE LIABILITY','MARINE TRADE','MR','POLITICAL VIOLENCE',\n                'PORTS & TERMINALS','PROPERTY','UPSTREAM ENERGY','CONTINGENCY'\n            )\n            then (select distinct [Grouping] from segmentation seg where seg.Product = stg_product.product_name)\n\n            when stg_product.product_name = 'ENGINEERING' and stg_coverage.first_coverage_description in ('INHERENT DEFECTS INSURANCE','INSURANCE BACKED GUARANTEE','INHERENT DEFECTS INSURANCE - BI','INSURANCE BACKED GUARANTEE - BI')\n            then (select distinct [Grouping] from segmentation seg where seg.Product = stg_product.product_name and seg.Coverage = stg_coverage.first_coverage_description)\n            when stg_product.product_name = 'ENGINEERING' and stg_coverage.second_coverage_description in ('INHERENT DEFECTS INSURANCE','INSURANCE BACKED GUARANTEE','INHERENT DEFECTS INSURANCE - BI','INSURANCE BACKED GUARANTEE - BI')\n            then (select distinct [Grouping] from segmentation seg where seg.Product = stg_product.product_name and seg.Coverage = stg_coverage.second_coverage_description)\n\n            when stg_product.product_name = 'ENGINEERING' and stg_coverage.first_coverage_description not in ('INHERENT DEFECTS INSURANCE','INSURANCE BACKED GUARANTEE','INHERENT DEFECTS INSURANCE - BI','INSURANCE BACKED GUARANTEE - BI')\n            then (select distinct [Grouping] from segmentation seg where seg.Product = stg_product.product_name and seg.Coverage not in ('INHERENT DEFECTS INSURANCE','INSURANCE BACKED GUARANTEE','INHERENT DEFECTS INSURANCE - BI','INSURANCE BACKED GUARANTEE - BI'))\n            when stg_product.product_name = 'ENGINEERING' and stg_coverage.second_coverage_description not in ('INHERENT DEFECTS INSURANCE','INSURANCE BACKED GUARANTEE','INHERENT DEFECTS INSURANCE - BI','INSURANCE BACKED GUARANTEE - BI')\n            then (select distinct [Grouping] from segmentation seg where seg.Product = stg_product.product_name and seg.Coverage not in ('INHERENT DEFECTS INSURANCE','INSURANCE BACKED GUARANTEE','INHERENT DEFECTS INSURANCE - BI','INSURANCE BACKED GUARANTEE - BI'))\n\n            when stg_product.product_name = 'CASUALTY'\n            then (select distinct [Grouping] from segmentation seg where seg.Product = stg_product.product_name and seg.Coverage in (stg_coverage.first_coverage_description, stg_coverage.second_coverage_description))\n\n            when stg_product.product_name = 'MARINE'\n            then (select distinct [Grouping] from segmentation seg where seg.Product = stg_product.product_name and seg.Classification = classification.sClassificationDescr)\n        end as segmentation,\n\n        case\n            when stg_product.product_name in (\n                'AVIATION','FINANCIAL INSTITUTIONS','INWARDS PPN','INWARDS XOL','MARINE LIABILITY','MARINE TRADE',\n                'POLITICAL VIOLENCE','PORTS & TERMINALS','PROPERTY','CONTINGENCY'\n            )\n            then stg_product.product_name\n\n            when stg_product.product_name = 'CASUALTY'\n            then\n                case\n                    when 'PROFESSIONAL INDEMNITY' in (stg_coverage.first_coverage_description, stg_coverage.second_coverage_description) and \n                    (substring(policy.sReference,1,6) <> '600494' and substring(policy.sReference,1,6) <> '011122' )\n                    then 'PROFESSIONAL INDEMNITY'\n\n                    when 'PROFESSIONAL INDEMNITY' in (stg_coverage.first_coverage_description, stg_coverage.second_coverage_description) and \n                    (substring(policy.sReference,1,6) = '600494' or substring(policy.sReference,1,6) = '011122' ) \n                    then 'PEN'\n                    when stg_coverage.first_coverage_description = 'WARRANTY AND INDEMNITY'\n                    then 'WARRANTY & INDEMNITY'\n                    when stg_coverage.second_coverage_description = 'WARRANTY AND INDEMNITY'\n                    then 'WARRANTY & INDEMNITY'\n                    when REPLACE(stg_coverage.first_coverage_description,'&amp;','&') in ('DIRECTORS & OFFICERS','PUBLIC OFFERING OF SECURITIES INSURANCE')\n                    then 'DIRECTORS & OFFICERS'\n                    when REPLACE(stg_coverage.second_coverage_description,'&amp;','&') in ('DIRECTORS & OFFICERS','PUBLIC OFFERING OF SECURITIES INSURANCE')\n                    then 'DIRECTORS & OFFICERS'\n\n                    when stg_coverage.first_coverage_description in('MEDICAL MALPRACTICE')\n                    then stg_coverage.first_coverage_description\n                    when stg_coverage.second_coverage_description in('MEDICAL MALPRACTICE')\n                    then stg_coverage.second_coverage_description\n                    \n                    \n                    when 'LEGAL EXPENSES' in (stg_coverage.first_coverage_description, stg_coverage.second_coverage_description)\n                    AND   sub_class.sSubClassDescr like '%BTE%' \n                    then 'LEGAL EXPENSES BTE'\n\n                    when 'LEGAL EXPENSES' in (stg_coverage.first_coverage_description, stg_coverage.second_coverage_description)\n                    AND   sub_class.sSubClassDescr like '%ATE%' \n                    then 'LEGAL EXPENSES ATE'\n\n                    when 'SURETY BONDS' in (stg_coverage.first_coverage_description, stg_coverage.second_coverage_description)\n                    then 'FINANCIAL INSTITUTIONS'\n                    \n                    else 'CGL'\n                end\n\n            when stg_product.product_name = 'DOWNSTREAM ENERGY'\n            then\n                case\n                    when type_of_class.SCLASS in ('POWER GENERATION-CONVENTIONAL','POWER GENERATION-RENEWABLES')\n                    then 'POWER & RENEWABLES'\n                    else 'OIL & GAS'\n                end\n\n            when stg_product.product_name = 'ENGINEERING'\n            then\n                case\n                    when stg_coverage.first_coverage_description in ('INHERENT DEFECTS INSURANCE','INSURANCE BACKED GUARANTEE','INHERENT DEFECTS INSURANCE - BI','INSURANCE BACKED GUARANTEE - BI')\n                    then 'IDI'\n                    when stg_coverage.second_coverage_description in ('INHERENT DEFECTS INSURANCE','INSURANCE BACKED GUARANTEE','INHERENT DEFECTS INSURANCE - BI','INSURANCE BACKED GUARANTEE - BI')\n                    then 'IDI'\n                    else 'ENGINEERING'\n                end\n\n            when stg_product.product_name = 'FORESTRY'\n            then 'PROPERTY'\n\n            when stg_product.product_name = 'MARINE'\n            then 'MARINE CARGO'\n\n            when stg_product.product_name = 'UPSTREAM ENERGY'\n            then\n                case\n                    when type_of_class.SCLASS in ('CAR','EIO CAR')\n                    then 'UPSTREAM CONSTRUCTION'\n                    else 'UPSTREAM ENERGY'\n                end\n\n            when stg_product.product_name = 'MR'\n            then 'INWARDS XOL'\n        end as budget_segmentation,\n\n        case\n            when stg_product.product_name in (\n                'AVIATION','FINANCIAL INSTITUTIONS','INWARDS PPN','INWARDS XOL','MARINE LIABILITY',\n                'MARINE TRADE','POLITICAL VIOLENCE','PORTS & TERMINALS','PROPERTY','CONTINGENCY'\n            )\n            then stg_product.product_name\n\n            when stg_product.product_name = 'CASUALTY'\n            then\n                case\n                    when 'PROFESSIONAL INDEMNITY' in (stg_coverage.first_coverage_description, stg_coverage.second_coverage_description) and \n                    (substring(policy.sReference,1,6) <> '600494' and substring(policy.sReference,1,6) <> '011122' )\n                    then 'PROFESSIONAL INDEMNITY'\n\n                    when 'PROFESSIONAL INDEMNITY' in (stg_coverage.first_coverage_description, stg_coverage.second_coverage_description) and \n                    (substring(policy.sReference,1,6) = '600494' or substring(policy.sReference,1,6) = '011122' ) \n                    then 'PEN'\n                    when stg_coverage.first_coverage_description = 'WARRANTY AND INDEMNITY'\n                    then 'WARRANTY & INDEMNITY'\n                    when stg_coverage.second_coverage_description = 'WARRANTY AND INDEMNITY'\n                    then 'WARRANTY & INDEMNITY'\n                    when REPLACE(stg_coverage.first_coverage_description,'&amp;','&') in('DIRECTORS & OFFICERS', 'PUBLIC OFFERING OF SECURITIES INSURANCE')\n                    then 'DIRECTORS & OFFICERS'\n                    when REPLACE(stg_coverage.second_coverage_description,'&amp;','&') in('DIRECTORS & OFFICERS','PUBLIC OFFERING OF SECURITIES INSURANCE')\n                    then 'DIRECTORS & OFFICERS'\n\n                    when stg_coverage.first_coverage_description in ('MEDICAL MALPRACTICE','SURETY BONDS')\n                    then stg_coverage.first_coverage_description\n                    when stg_coverage.second_coverage_description in ('MEDICAL MALPRACTICE','SURETY BONDS')\n                    then stg_coverage.second_coverage_description\n\n                    when 'LEGAL EXPENSES' in (stg_coverage.first_coverage_description, stg_coverage.second_coverage_description)\n                    AND   sub_class.sSubClassDescr like '%BTE%' \n                    then 'LEGAL EXPENSES BTE'\n\n                    when 'LEGAL EXPENSES' in (stg_coverage.first_coverage_description, stg_coverage.second_coverage_description)\n                    AND   sub_class.sSubClassDescr like '%ATE%' \n                    then 'LEGAL EXPENSES ATE'\n\n                    else 'CGL'\n                end\n\n            when stg_product.product_name = 'DOWNSTREAM ENERGY'\n            then\n                case\n                    when type_of_class.SCLASS in ('POWER GENERATION-CONVENTIONAL','POWER GENERATION-RENEWABLES')\n                    then 'POWER & RENEWABLES'\n                    else 'OIL & GAS'\n                end\n\n            when stg_product.product_name = 'ENGINEERING'\n            then\n                case\n                    when stg_coverage.first_coverage_description in ('INHERENT DEFECTS INSURANCE','INSURANCE BACKED GUARANTEE','INHERENT DEFECTS INSURANCE - BI','INSURANCE BACKED GUARANTEE - BI')\n                    then 'IDI'\n                    when stg_coverage.second_coverage_description in ('INHERENT DEFECTS INSURANCE','INSURANCE BACKED GUARANTEE','INHERENT DEFECTS INSURANCE - BI','INSURANCE BACKED GUARANTEE - BI')\n                    then 'IDI'\n                    else 'ENGINEERING'\n                end\n\n            when stg_product.product_name = 'FORESTRY'\n            then 'PROPERTY'\n\n            when stg_product.product_name = 'MARINE'\n            then 'MARINE CARGO'\n\n            when stg_product.product_name = 'UPSTREAM ENERGY'\n            then\n                case\n                    when type_of_class.SCLASS in ('CAR','EIO CAR')\n                    then 'UPSTREAM CONSTRUCTION'\n                    else 'UPSTREAM ENERGY'\n                end\n\n            when stg_product.product_name = 'MR'\n            then 'INWARDS XOL'\n        end as sub_class_segmentation,\n\n        producer_source_group.broker_major_group_name as producer_source_group_name,\n        producer_group.broker_major_group_name as producer_group_name,\n        type_of_insurance.\"STYPEOFINSURANCE\" as activity_type_of_insurance,\n\n        -- subdivision: combine Jordan and Bermuda\n        -- if subdivision is Jordan then set to Bermuda\n        case \n            when stg_subdivision.subdivision = 'JOR' then 'BER'\n            else stg_subdivision.subdivision \n        end as line_subdivision,\n\n        producer_contact.contact_reference as line_producer,\n        stg_type_of_profit_centre.producing_office as line_producing_office,\n        zone_country_territory.territory as territory_territory,\n        zone_country_domicile.territory as domecile_territory,\n        stg_coverage.coverage_description as coverage_description,\n        stg_coverage.coverage_code as coverage_code,\n\n        case \n            when stg_product.product_name in (\n                -- Because neither 'UPSTREAM ENERGY' nor 'UPSTREAM ENERGY CONSTRUCTION', can skip above rename logic\n                'INWARDS XOL',\n                'MR',\n                'PROPERTY',\n                'POLITICAL VIOLENCE',\n                'INWARDS PPN',\n                'DOWNSTREAM ENERGY'\n            )\n            then zone_country_territory.territory\n            else\n                coalesce(zone_country_domicile.territory, zone_country_territory.territory)\n        end as line_region,\n\n        case \n            when stg_product.product_name in (\n                -- Because neither 'UPSTREAM ENERGY' nor 'UPSTREAM ENERGY CONSTRUCTION', can skip above rename logic\n                'INWARDS XOL',\n                'MR',\n                'PROPERTY',\n                'POLITICAL VIOLENCE',\n                'INWARDS PPN',\n                'DOWNSTREAM ENERGY'\n            )\n            then zone_country_territory.country\n            else\n                coalesce(zone_country_domicile.country, zone_country_territory.country)\n        end as region_split,\n\n        coalesce(policy.master_mis_uw_year, policy_line.dtUWYEAR) as mis_uw_year,\n        coalesce(policy.master_uw_year, policy.nPeriodFromYear) as uw_year,\n\n        insured_contact.contact_reference as insured,\n        reassured_contact.contact_reference as reassured,\n\n        fh_contact.contact_reference as file_handler,\n        uw_contact.contact_reference as underwriter,\n        rec_uw_contact.contact_reference as recommended_underwriter,\n        admin_fh_contact.contact_reference as admin_file_handler,\n\n        activity_operator_id.sFullName as operator_id,\n        policy_activity.sNotes as activity_notes,\n        nPeriodFromYear,\n        ML_cn.contact_reference AS MarketLeader,\n        policy_line.dworkinglinepc AS InforceLine,\n\n        type_of_policy_line.sTypeofPolicyLineDescr as New_vs_Renwal,\n\n        policy_line.dSignedLinePc as igi_sgn_line,\n        \n        -- in the system its stored as a percentage amount(ex : 122.2). divide by 100 to be able to use it in later calculations \n        policy_line.dPlanAdequacy/100 as plan_adequacy,\n        policy_line.dTechnicalAdequacy/100 as technical_adequacy,\n\n        policy_line.lModelSequencekey, \n\n\n        type_of_pricing.sPricingType as pricing_type,\n        type_of_pricing_time.sPricingTime as pricing_time\n\n\n    from\n        policy \n        inner join policy_activity on \n            policy.\"lpolicykey\" = policy_activity.\"lpolicykey\"\n        inner join policy_line on\n            policy_activity.\"lPolicyActivityKey\" = policy_line.\"lPolicyActivityKey\"\n        inner join policy_section on\n            policy_activity.\"lPolicyActivityKey\" = policy_section.\"lPolicyActivityKey\"\n        left join type_of_activity_source on\n            policy_activity.\"lTypeofActivitySourceKey\" = type_of_activity_source.\"lTypeofActivitySourceKey\"\n        inner join type_of_class on\n            policy_section.\"lTypeOfClassKey\" = type_of_class.\"LTYPEOFCLASSKEY\"\n        inner join type_of_placement on\n            policy_activity.\"lTypeOfPlacementKey\" = type_of_placement.\"lTypeOfPlacementKey\"\n        left join  sub_class on \n            policy_section.\"lSubClassKey\" = sub_class.\"lSubClassKey\"\n        inner join stg_product on\n            policy_line.\"lProductKey\" = stg_product.product_id\n        inner join stg_entity_instance_states on\n            policy_activity.\"lPolicyActivityKey\" = stg_entity_instance_states.instance_id\n            and stg_entity_instance_states.entity_type = 'Policy Activity'\n        inner join stg_entity_instance_states as policy_entity_instance_states on\n            policy_activity.\"lPolicyKey\" = policy_entity_instance_states.instance_id\n            and policy_entity_instance_states.entity_type = 'Policy'\n        left join activity_effective_written_timestamp on\n            policy_activity.\"lPolicyActivityKey\" = activity_effective_written_timestamp.activity_id\n        inner join type_of_insurance on\n            policy_activity.\"lTypeOfInsuranceKey\" = type_of_insurance.\"LTYPEOFINSURANCEKEY\"\n        left join type_of_policy_activity on\n            policy_activity.\"lTypeOfPolicyActivityKey\" = type_of_policy_activity.\"lTypeOfPolicyActivityKey\"\n        inner join stg_subdivision on\n            policy_line.lSubDivisionKey = stg_subdivision.subdivision_id\n        inner join contact as producer_contact on\n            policy_line.lProducerContactKey = producer_contact.contact_id\n        inner join stg_type_of_profit_centre on\n            policy_line.\"lTypeOfProfitCentreKey\" = stg_type_of_profit_centre.type_of_profit_centre_id\n        left join stg_country_territory as zone_country_territory on\n            policy_activity.\"lTerritoryKey\" = zone_country_territory.country_id\n        left join stg_country_territory as zone_country_domicile on\n            policy_activity.\"lInsuredDomicileCountryKey\" = zone_country_domicile.country_id\n        left join stg_division on\n            policy_line.lDivisionKey = stg_division.division_id\n        left join stg_account_period as written_account_period on\n            policy_activity.\"lWrittenAccountPeriodKey\" = written_account_period.account_period_id\n        left join correct_written_account_period as correct_ap on  \n            correct_ap.activity_id = policy_activity.lPolicyActivityKey\n        left join stg_coverage on\n            policy_section.\"lPolicySectionKey\" = stg_coverage.policy_section_id\n        left join classification on\n            policy_section.\"lClassificationKey\" = classification.\"lClassificationKey\"\n        left join stg_broker_group as producer_source_group on \n            policy_line.lBrokerContactKey = producer_source_group.broker_id\n        left join stg_broker_group as producer_group on \n            policy_line.lProducerContactKey = producer_group.broker_id\n        left join contact as insured_contact on\n            policy_line.lInsuredContactKey = insured_contact.contact_id\n        left join contact as reassured_contact on \n            policy_line.lReassuredContactKey = reassured_contact.contact_id\n        left join contact as fh_contact on \n            policy_line.lFileHandlerContactKey = fh_contact.contact_id\n        left join contact as uw_contact on\n            policy_line.lUnderWriterContactKey = uw_contact.contact_id\n        left join contact as rec_uw_contact on \n            policy_line.lRecommendedUWContactKey = rec_uw_contact.contact_id\n        left join contact as admin_fh_contact on\n            policy_line.lAdminFileHandlerContactKey = admin_fh_contact.contact_id\n        left join activity_operator_id on \n            policy_activity.lPolicyActivityKey = activity_operator_id.LINSTANCEKEY\n        left join Contact ML_cn on\n            policy_line.lLeaderContactKey = ML_cn.contact_id\n        \n        left join type_of_pricing on \n            policy_line.lPricingTypekey = type_of_pricing.lTypeOfPricingKey\n        left join type_of_pricing_time on \n            policy_line.lPricingTimekey = type_of_pricing_time.lTypeOfPricingTimeKey\n        left join cancellation_reason_hist on\n            cancellation_reason_hist.lpolicyactivitykey = policy_activity.lPolicyActivityKey\n        left join contra_hist on\n            contra_hist.lpolicyactivitykey = policy_activity.lPolicyActivityKey\n        \n        left join type_of_policy_line on \n            policy_line.lTypeofPolicyLineKey = type_of_policy_line.lTypeofPolicyLineKey    \n            \n            )final\n\n            \n        left join inception_per_account_period on \n            final.policy_id = inception_per_account_period.lpolicyKey and final.written_account_period = inception_per_account_period.accountperiod   \n            \n),\n\npolicy_part_final as(\n    select *,\n    case \n        when line_region = 'NORTH AMERICA' and region_split in( 'Canada', 'BRITISH COLUMBIA', 'Greenland') \n        then 'CANADA'\n        when  line_region = 'NORTH AMERICA' and region_split not in( 'Canada', 'BRITISH COLUMBIA', 'Greenland') \n        then 'US'\n        else line_region \n    end US_NonUS\n    from policy_part\n)\n\nselect * from policy_part_final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"dmn_policy_part\""}, "model.iginsure.dmn_product": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.iginsure.stg_product"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["InwardPremium"], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "domain", "dmn_product"], "unique_id": "model.iginsure.dmn_product", "raw_code": "{{\r\n  config(tags=['InwardPremium'])\r\n}}\r\n\r\nwith\r\n\r\nstg_product as (\r\n    select * from {{ ref('stg_product') }}\r\n),\r\n\r\nfinal as (\r\n    select\r\n        product_id,\r\n        product_name,\r\n        product_group_id\r\n    from\r\n        stg_product\r\n)\r\n\r\nselect * from final", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "domain\\dmn_product.sql", "original_file_path": "models\\domain\\dmn_product.sql", "name": "dmn_product", "alias": "dmn_product", "checksum": {"name": "sha256", "checksum": "71eb55f45784210cccff0ab7c1ef20c56c3ca871b4714d314151f2722e92f38c"}, "tags": ["InwardPremium"], "refs": [["stg_product"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": "iginsure://models\\domain\\domain.yml", "compiled_path": "target\\compiled\\iginsure\\models\\domain\\dmn_product.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "docs": {"show": false}, "tags": ["InwardPremium"]}, "created_at": 1701786801.2080302, "compiled_code": "\n\nwith\n\nstg_product as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"stg_product\"\n),\n\nfinal as (\n    select\n        product_id,\n        product_name,\n        product_group_id\n    from\n        stg_product\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"dmn_product\""}, "model.iginsure.dmn_ri_policy_part": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.iginsure.scd_ri_policy", "model.iginsure.scd_ri_activity", "model.iginsure.scd_ri_section", "model.iginsure.scd_ri_section_broker", "model.iginsure.scd_ri_section_broker_security", "model.iginsure.scd_type_of_ri_policy", "model.iginsure.stg_contact", "model.iginsure.stg_broker_group", "model.iginsure.scd_type_of_fronting", "model.iginsure.stg_entity_instance_states", "model.iginsure.scd_type_of_ri_class"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "domain", "dmn_ri_policy_part"], "unique_id": "model.iginsure.dmn_ri_policy_part", "raw_code": "with \r\n\r\nri_policy as (\r\n    select * from {{ ref('scd_ri_policy') }} where _valid_to is null\r\n),\r\n\r\nri_activity as (\r\n    select * from {{ ref('scd_ri_activity') }} where _valid_to is null\r\n),\r\n\r\nri_section as (\r\n    select * from {{ ref('scd_ri_section') }} where _valid_to is null\r\n),\r\n\r\nri_section_broker as (\r\n    select * from {{ ref('scd_ri_section_broker') }} where _valid_to is null\r\n),\r\n\r\nri_section_broker_security as (\r\n    select * from {{ ref('scd_ri_section_broker_security') }} where _valid_to is null\r\n),\r\n\r\ntype_of_ri_policy as (\r\n    select * from {{ ref('scd_type_of_ri_policy') }} where _valid_to is null\r\n),\r\n\r\nstg_contact as (\r\n    select * from {{ ref('stg_contact') }}\r\n),\r\n\r\nstg_broker_group as (\r\n    select * from {{ ref('stg_broker_group') }}\r\n),\r\n\r\ntype_of_fronting as (\r\n    select * from {{ ref('scd_type_of_fronting') }} where _valid_to is null\r\n),\r\n\r\nstg_entity_instance_states as (\r\n    select * from {{ ref('stg_entity_instance_states') }}\r\n),\r\n\r\ntype_of_ri_class as (\r\n    select * from {{ ref('scd_type_of_ri_class') }} where _valid_to is null\r\n),\r\n\r\n\r\nri_policy_part as(\r\n    select \r\n        ri_policy.lRIPolicyKey as ri_policy_id,\r\n        ri_policy.sReference as ri_policy,\r\n        ri_policy.dtPeriodFrom as ri_policy_inception,\r\n        ri_policy.dtPeriodTo as ri_policy_expiry,\r\n        type_of_ri_policy.SCODE as type_of_ri_policy_code,\r\n        type_of_ri_policy.SPOLICYTYPE as type_of_ri_policy,\r\n        ri_activity.lRIActivityKey as ri_activity_id,\r\n        ri_section.lRISectionKey as ri_section_id,\r\n        ri_section.dLimit as ri_pml_usd,\r\n        ri_section.dLimit100 as inward_event_limit_share_usd,\r\n        cast(case when ri_section.dROE = 0 then 0 else ri_section.dEventLimit/ri_section.dROE end as decimal(18,2)) as ri_event_limit_usd,\r\n        cast(case when ri_section.dROE = 0 then 0 else ri_section.dExcess/ri_section.dROE end as decimal(18,2)) AS ri_excess_usd,\r\n        cast(ri_section.dLimit * (ri_section_broker_security.dProportionPc/100) as decimal(18,2)) as participant_exposure,\r\n        type_of_fronting.sFrontingCode as reason_code,\r\n        type_of_fronting.sFrontingDescr as reason_description,\r\n        ri_section_broker.lRISectionBrokerKey as ri_section_broker_id,\r\n        ri_section_broker_security.lRISectionBrokerSecurityKey as ri_section_broker_security_id,\r\n        ow_broker_contact.contact_id as ow_broker_id,\r\n        ow_broker_contact.contact_reference as ow_broker,\r\n        ow_broker_group.broker_major_group_name as ow_broker_major_group,\r\n        year(ri_policy.dtPeriodFrom) as mis_treaty,\r\n        ow_security_contact.contact_reference as ow_security,\r\n        ri_section_broker.dBrokerOrderPc as broker_cession_pc,\r\n        ri_section_broker_security.dProportionPc as security_cession_pc,\r\n        ri_policy_entity_instance_states.entity_state as ri_policy_state,\r\n        ri_activity_entity_instance_states.entity_state as ri_activity_state,\r\n        type_of_ri_class.sTypeofRIClassDescr as type_of_ri_class_description\r\n    from \r\n        ri_policy\r\n        inner join ri_activity on \r\n            ri_policy.lRIPolicyKey = ri_activity.lRIPolicyKey\r\n        inner join ri_section on \r\n            ri_activity.lRIActivityKey = ri_section.lRIActivityKey\r\n        inner join ri_section_broker on \r\n            ri_section.lRISectionKey = ri_section_broker.lRISectionKey\r\n        inner join ri_section_broker_security on \r\n            ri_section_broker.lRISectionBrokerKey = ri_section_broker_security.lRISectionBrokerKey\r\n        inner join type_of_ri_policy on\r\n            ri_activity.lTypeofRIPolicyKey = type_of_ri_policy.lTypeofRIPolicyKey\r\n        left join stg_contact as ow_broker_contact on\r\n            ri_section_broker.lBrokerContactKey = ow_broker_contact.contact_id\r\n        left join stg_broker_group ow_broker_group on \r\n            ri_section_broker.lBrokerContactKey = ow_broker_group.broker_id\r\n        left join stg_contact as ow_security_contact on \r\n            ri_section_broker_security.lSecurityContactKey = ow_security_contact.contact_id\r\n        left join type_of_fronting on \r\n            ri_section.lFrontingKey = type_of_fronting.lFrontingKey\r\n        left join stg_entity_instance_states as ri_policy_entity_instance_states on\r\n            ri_policy.lRIPolicyKey = ri_policy_entity_instance_states.instance_id\r\n            and ri_policy_entity_instance_states.entity_type = 'RI Policy'\r\n        left join stg_entity_instance_states as ri_activity_entity_instance_states on \r\n            ri_activity.lRIActivityKey = ri_activity_entity_instance_states.instance_id\r\n            and ri_activity_entity_instance_states.entity_type = 'RI Activity'\r\n        left join type_of_ri_class on \r\n            ri_section.lTypeofRIClassKey = type_of_ri_class.lTypeofRIClassKey\r\n)\r\n\r\nselect * from ri_policy_part", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "domain\\dmn_ri_policy_part.sql", "original_file_path": "models\\domain\\dmn_ri_policy_part.sql", "name": "dmn_ri_policy_part", "alias": "dmn_ri_policy_part", "checksum": {"name": "sha256", "checksum": "fc90f56d0d07bc53d516951aa8160042c2aa5308ea33403b669a31a1591a53e8"}, "tags": [], "refs": [["scd_ri_policy"], ["scd_ri_activity"], ["scd_ri_section"], ["scd_ri_section_broker"], ["scd_ri_section_broker_security"], ["scd_type_of_ri_policy"], ["stg_contact"], ["stg_broker_group"], ["scd_type_of_fronting"], ["stg_entity_instance_states"], ["scd_type_of_ri_class"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": "iginsure://models\\domain\\domain.yml", "compiled_path": "target\\compiled\\iginsure\\models\\domain\\dmn_ri_policy_part.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "docs": {"show": false}}, "created_at": 1701786801.2090256, "compiled_code": "with \n\nri_policy as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"scd_ri_policy\" where _valid_to is null\n),\n\nri_activity as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"scd_ri_activity\" where _valid_to is null\n),\n\nri_section as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"scd_ri_section\" where _valid_to is null\n),\n\nri_section_broker as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"scd_ri_section_broker\" where _valid_to is null\n),\n\nri_section_broker_security as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"scd_ri_section_broker_security\" where _valid_to is null\n),\n\ntype_of_ri_policy as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"scd_type_of_ri_policy\" where _valid_to is null\n),\n\nstg_contact as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"stg_contact\"\n),\n\nstg_broker_group as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"stg_broker_group\"\n),\n\ntype_of_fronting as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"scd_type_of_fronting\" where _valid_to is null\n),\n\nstg_entity_instance_states as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"stg_entity_instance_states\"\n),\n\ntype_of_ri_class as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"scd_type_of_ri_class\" where _valid_to is null\n),\n\n\nri_policy_part as(\n    select \n        ri_policy.lRIPolicyKey as ri_policy_id,\n        ri_policy.sReference as ri_policy,\n        ri_policy.dtPeriodFrom as ri_policy_inception,\n        ri_policy.dtPeriodTo as ri_policy_expiry,\n        type_of_ri_policy.SCODE as type_of_ri_policy_code,\n        type_of_ri_policy.SPOLICYTYPE as type_of_ri_policy,\n        ri_activity.lRIActivityKey as ri_activity_id,\n        ri_section.lRISectionKey as ri_section_id,\n        ri_section.dLimit as ri_pml_usd,\n        ri_section.dLimit100 as inward_event_limit_share_usd,\n        cast(case when ri_section.dROE = 0 then 0 else ri_section.dEventLimit/ri_section.dROE end as decimal(18,2)) as ri_event_limit_usd,\n        cast(case when ri_section.dROE = 0 then 0 else ri_section.dExcess/ri_section.dROE end as decimal(18,2)) AS ri_excess_usd,\n        cast(ri_section.dLimit * (ri_section_broker_security.dProportionPc/100) as decimal(18,2)) as participant_exposure,\n        type_of_fronting.sFrontingCode as reason_code,\n        type_of_fronting.sFrontingDescr as reason_description,\n        ri_section_broker.lRISectionBrokerKey as ri_section_broker_id,\n        ri_section_broker_security.lRISectionBrokerSecurityKey as ri_section_broker_security_id,\n        ow_broker_contact.contact_id as ow_broker_id,\n        ow_broker_contact.contact_reference as ow_broker,\n        ow_broker_group.broker_major_group_name as ow_broker_major_group,\n        year(ri_policy.dtPeriodFrom) as mis_treaty,\n        ow_security_contact.contact_reference as ow_security,\n        ri_section_broker.dBrokerOrderPc as broker_cession_pc,\n        ri_section_broker_security.dProportionPc as security_cession_pc,\n        ri_policy_entity_instance_states.entity_state as ri_policy_state,\n        ri_activity_entity_instance_states.entity_state as ri_activity_state,\n        type_of_ri_class.sTypeofRIClassDescr as type_of_ri_class_description\n    from \n        ri_policy\n        inner join ri_activity on \n            ri_policy.lRIPolicyKey = ri_activity.lRIPolicyKey\n        inner join ri_section on \n            ri_activity.lRIActivityKey = ri_section.lRIActivityKey\n        inner join ri_section_broker on \n            ri_section.lRISectionKey = ri_section_broker.lRISectionKey\n        inner join ri_section_broker_security on \n            ri_section_broker.lRISectionBrokerKey = ri_section_broker_security.lRISectionBrokerKey\n        inner join type_of_ri_policy on\n            ri_activity.lTypeofRIPolicyKey = type_of_ri_policy.lTypeofRIPolicyKey\n        left join stg_contact as ow_broker_contact on\n            ri_section_broker.lBrokerContactKey = ow_broker_contact.contact_id\n        left join stg_broker_group ow_broker_group on \n            ri_section_broker.lBrokerContactKey = ow_broker_group.broker_id\n        left join stg_contact as ow_security_contact on \n            ri_section_broker_security.lSecurityContactKey = ow_security_contact.contact_id\n        left join type_of_fronting on \n            ri_section.lFrontingKey = type_of_fronting.lFrontingKey\n        left join stg_entity_instance_states as ri_policy_entity_instance_states on\n            ri_policy.lRIPolicyKey = ri_policy_entity_instance_states.instance_id\n            and ri_policy_entity_instance_states.entity_type = 'RI Policy'\n        left join stg_entity_instance_states as ri_activity_entity_instance_states on \n            ri_activity.lRIActivityKey = ri_activity_entity_instance_states.instance_id\n            and ri_activity_entity_instance_states.entity_type = 'RI Activity'\n        left join type_of_ri_class on \n            ri_section.lTypeofRIClassKey = type_of_ri_class.lTypeofRIClassKey\n)\n\nselect * from ri_policy_part", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"dmn_ri_policy_part\""}, "model.iginsure.dmn_uwy_audit": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.iginsure.scd_policy_activity", "model.iginsure.scd_auditheader", "model.iginsure.scd_auditrows", "model.iginsure.scd_auditcolumns", "model.iginsure.scd_policy_line"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "domain", "dmn_uwy_audit"], "unique_id": "model.iginsure.dmn_uwy_audit", "raw_code": "with \r\npolicyactivity as (\r\n    select * from {{ ref('scd_policy_activity') }} where _valid_to is null\r\n),\r\nauditheader as (\r\n    select * from {{ ref('scd_auditheader') }} where _valid_to is null\r\n),\r\n\r\nAUDITROWS as (\r\n    select * from {{ ref('scd_auditrows') }} where _valid_to is null\r\n),\r\nAUDITCOLUMNS as (\r\n    select * from {{ ref('scd_auditcolumns') }} where _valid_to is null\r\n),\r\npolicyline as (\r\n    select * from {{ ref('scd_policy_line') }} where _valid_to is null\r\n),\r\n\r\nPolicy_Activity_Audit as (\r\nselect  PA.LPOLICYKEY 'lpolicyKey',PA.lPolicyActivityKey,DTDATEAMENDED, DOLDVALUE  'UW Year',LAUDITCOLUMNSKEY 'AuditKey'\r\nfrom policyactivity pa \r\nleft join auditheader ah on pa.lPolicyActivityKey = ah.LAUDITOBJECTINSTANCEKEY and ah.LAUDITOBJECTKEY = 611\r\nleft join AUDITROWS ar on ar.LAUDITHEADERKEY = ah.LAUDITHEADERKEY and ar.LAUDITOBJECTKEY =2286\r\nleft join AUDITCOLUMNS ac on ac.LAUDITHEADERKEY =ar.LAUDITHEADERKEY\r\nwhere\r\nLENTITYPROPERTYKEY = 2001379 --dtuwyear\r\n),\r\nPolicy_Activity_Current as (\r\n\tselect pl.lpolicykey 'lpolicyKey',pl.lPolicyActivityKey, getdate() DTDATEAMENDED, dtuwyear 'UW Year',1000000000 'AuditKey'\r\n\tfrom policyline pl\r\n),\r\nPA_UW_List as \r\n(\r\n\tselect * from Policy_Activity_Audit\r\n\r\n\tunion all\r\n\r\n\tselect * from Policy_Activity_Current\r\n)\r\nselect lpolicykey,lpolicyactivitykey,[uw year],  lag(DTDATEAMENDED,1) OVER(partition by lpolicyactivitykey ORDER BY DTDATEAMENDED )  active_from ,\r\ncase when cast(DTDATEAMENDED as date) = cast(GETDATE() as date) then null else DTDATEAMENDED end  active_until,auditkey \r\nfrom  PA_UW_List", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "domain\\dmn_uwy_audit.sql", "original_file_path": "models\\domain\\dmn_uwy_audit.sql", "name": "dmn_uwy_audit", "alias": "dmn_uwy_audit", "checksum": {"name": "sha256", "checksum": "c2eae7f9851075e25b85aa7f95952170c86f86959ca4f35e495d4ce19a4b18d7"}, "tags": [], "refs": [["scd_policy_activity"], ["scd_auditheader"], ["scd_auditrows"], ["scd_auditcolumns"], ["scd_policy_line"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\domain\\dmn_uwy_audit.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null}, "created_at": 1701786800.7244997, "compiled_code": "with \npolicyactivity as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"scd_policy_activity\" where _valid_to is null\n),\nauditheader as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"scd_auditheader\" where _valid_to is null\n),\n\nAUDITROWS as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"scd_auditrows\" where _valid_to is null\n),\nAUDITCOLUMNS as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"scd_auditcolumns\" where _valid_to is null\n),\npolicyline as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"scd_policy_line\" where _valid_to is null\n),\n\nPolicy_Activity_Audit as (\nselect  PA.LPOLICYKEY 'lpolicyKey',PA.lPolicyActivityKey,DTDATEAMENDED, DOLDVALUE  'UW Year',LAUDITCOLUMNSKEY 'AuditKey'\nfrom policyactivity pa \nleft join auditheader ah on pa.lPolicyActivityKey = ah.LAUDITOBJECTINSTANCEKEY and ah.LAUDITOBJECTKEY = 611\nleft join AUDITROWS ar on ar.LAUDITHEADERKEY = ah.LAUDITHEADERKEY and ar.LAUDITOBJECTKEY =2286\nleft join AUDITCOLUMNS ac on ac.LAUDITHEADERKEY =ar.LAUDITHEADERKEY\nwhere\nLENTITYPROPERTYKEY = 2001379 --dtuwyear\n),\nPolicy_Activity_Current as (\n\tselect pl.lpolicykey 'lpolicyKey',pl.lPolicyActivityKey, getdate() DTDATEAMENDED, dtuwyear 'UW Year',1000000000 'AuditKey'\n\tfrom policyline pl\n),\nPA_UW_List as \n(\n\tselect * from Policy_Activity_Audit\n\n\tunion all\n\n\tselect * from Policy_Activity_Current\n)\nselect lpolicykey,lpolicyactivitykey,[uw year],  lag(DTDATEAMENDED,1) OVER(partition by lpolicyactivitykey ORDER BY DTDATEAMENDED )  active_from ,\ncase when cast(DTDATEAMENDED as date) = cast(GETDATE() as date) then null else DTDATEAMENDED end  active_until,auditkey \nfrom  PA_UW_List", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"dmn_uwy_audit\""}, "model.iginsure.provisioned_cmr": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.iginsure.dbo.ClaimsASAT", "model.iginsure.dmn_claim_amounts", "model.iginsure.dmn_claim", "model.iginsure.dmn_policy_part", "model.iginsure.stg_current_account_period"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["Claims"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "index": "HEAP", "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "presentation", "Claim", "provisioned_cmr"], "unique_id": "model.iginsure.provisioned_cmr", "raw_code": "{{\r\n  config(  \r\n    tags=['Claims'],\r\n    index = 'HEAP'\r\n    )\r\n}}\r\n\r\nwith\r\nclaims_financial  as (\r\n    select * from {{ ref('dmn_claim_amounts') }}\r\n),\r\n\r\nclaims_non_financial as (\r\n    select distinct claim_id,parent_claim_reference from {{ ref('dmn_claim') }}\r\n),\r\n\r\npolicy_non_financial as (\r\n    select * from {{ ref('dmn_policy_part') }}\r\n),\r\n\r\nCurrent_account_period as (\r\n    select * from {{ref('stg_current_account_period')}}\r\n),\r\n\r\nPrevious_YTD_Account_Period as (\r\n    select concat(left(AP,4)-1,'12') 'Prev_AP' from Current_account_period\r\n),\r\nClaims_ASAT_YTD as (\r\n    select * from {{ source('dbo', 'ClaimsASAT') }}\r\n    where accountperiod = (select * from Previous_YTD_Account_Period)   \r\n),\r\nClaims_ASAT_Current as (\r\n    select cnf.parent_claim_reference, cf.sCcy,cf.TypeOfRI\r\n    --,pnf.mis_uw_year as MISUWY ,line_product_name as Product,line_subdivision as SubDivision\r\n    ,\r\n    -- OS\r\n    Sum(TotalOSOrg) TotalOSOrg,\tsum(TotalOsAcCcy) TotalOsAcCcy,\tsum(LastOSAmountOrgCcyExpense) TotalOSOrgCcyExp , \tsum(LastOSAmountAcCcyExpense) TotalOSAcCcyExp ,\r\n    sum(LastOSAmountOrgIND) TotalOSOrgCcyIND,\tsum(LastOSAmountACCcyIND) TotalOSACCcyIND,\r\n    --Paid\r\n    sum(TotalPytsRcptsOrg)TotalPaidOrg,\tsum(TotalPytsRcptsAcCcy) TotalPaidAcCcy,sum(LastPytsRcptsAmountOrgExpense) TotalPaidOrgExp, sum(LastPytsRcptsAmountACCcyExpense) TotalPaidACCcyExp,\r\n    sum(LastPytsRcptsAmountOrgIND) TotalPaidOrgIND,\tsum(LastPytsRcptsAmountACCcyIND) TotalPaidACCcyIND,\r\n    -- incurred\r\n    sum(TotalIncurredOrgCcy)TotalIncurredOrgCcy, sum(TotalIncurredACCcy) TotalIncurredACCcy, sum(LastIncurredOrgExpense) TotalIncurredOrgExp, sum(LastIncurredACCcyExpense) TotalIncurredACCcyExp,\r\n    sum(LastIncurredOrgIND) TotalIncurredOrgIND, sum(LastIncurredACCcyIND)  TotalIncurredACCcyIND\r\n\r\n    from claims_financial cf \r\n    left join claims_non_financial cnf on cf.claim_id = cnf.claim_id\r\n    --left join policy_non_financial pnf on cnf.policy_id = pnf.policy_id and cnf.policy_activity_id = pnf.activity_id\r\n\r\n    group by cnf.parent_claim_reference,cf.sCcy,cf.TypeOfRI\r\n    --,pnf.mis_uw_year ,line_product_name ,line_subdivision\r\n)\r\nselect * from  Claims_ASAT_Current", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "presentation\\Claim\\provisioned_cmr.sql", "original_file_path": "models\\presentation\\Claim\\provisioned_cmr.sql", "name": "provisioned_cmr", "alias": "provisioned_cmr", "checksum": {"name": "sha256", "checksum": "c54a8d9fbb93279a7cad8b6198e630db2fb42c76c0c78a34e42f4628000494fc"}, "tags": ["Claims"], "refs": [["dmn_claim_amounts"], ["dmn_claim"], ["dmn_policy_part"], ["stg_current_account_period"]], "sources": [["dbo", "ClaimsASAT"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\presentation\\Claim\\provisioned_cmr.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "materialized": "table", "tags": ["Claims"], "index": "HEAP"}, "created_at": 1701786800.726641, "compiled_code": "\n\nwith\nclaims_financial  as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"dmn_claim_amounts\"\n),\n\nclaims_non_financial as (\n    select distinct claim_id,parent_claim_reference from \"IGI_PROD_DW\".\"dbt_dev\".\"dmn_claim\"\n),\n\npolicy_non_financial as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"dmn_policy_part\"\n),\n\nCurrent_account_period as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"stg_current_account_period\"\n),\n\nPrevious_YTD_Account_Period as (\n    select concat(left(AP,4)-1,'12') 'Prev_AP' from Current_account_period\n),\nClaims_ASAT_YTD as (\n    select * from \"IGI_PROD_DW\".\"dbo\".\"ClaimsASAT\"\n    where accountperiod = (select * from Previous_YTD_Account_Period)   \n),\nClaims_ASAT_Current as (\n    select cnf.parent_claim_reference, cf.sCcy,cf.TypeOfRI\n    --,pnf.mis_uw_year as MISUWY ,line_product_name as Product,line_subdivision as SubDivision\n    ,\n    -- OS\n    Sum(TotalOSOrg) TotalOSOrg,\tsum(TotalOsAcCcy) TotalOsAcCcy,\tsum(LastOSAmountOrgCcyExpense) TotalOSOrgCcyExp , \tsum(LastOSAmountAcCcyExpense) TotalOSAcCcyExp ,\n    sum(LastOSAmountOrgIND) TotalOSOrgCcyIND,\tsum(LastOSAmountACCcyIND) TotalOSACCcyIND,\n    --Paid\n    sum(TotalPytsRcptsOrg)TotalPaidOrg,\tsum(TotalPytsRcptsAcCcy) TotalPaidAcCcy,sum(LastPytsRcptsAmountOrgExpense) TotalPaidOrgExp, sum(LastPytsRcptsAmountACCcyExpense) TotalPaidACCcyExp,\n    sum(LastPytsRcptsAmountOrgIND) TotalPaidOrgIND,\tsum(LastPytsRcptsAmountACCcyIND) TotalPaidACCcyIND,\n    -- incurred\n    sum(TotalIncurredOrgCcy)TotalIncurredOrgCcy, sum(TotalIncurredACCcy) TotalIncurredACCcy, sum(LastIncurredOrgExpense) TotalIncurredOrgExp, sum(LastIncurredACCcyExpense) TotalIncurredACCcyExp,\n    sum(LastIncurredOrgIND) TotalIncurredOrgIND, sum(LastIncurredACCcyIND)  TotalIncurredACCcyIND\n\n    from claims_financial cf \n    left join claims_non_financial cnf on cf.claim_id = cnf.claim_id\n    --left join policy_non_financial pnf on cnf.policy_id = pnf.policy_id and cnf.policy_activity_id = pnf.activity_id\n\n    group by cnf.parent_claim_reference,cf.sCcy,cf.TypeOfRI\n    --,pnf.mis_uw_year ,line_product_name ,line_subdivision\n)\nselect * from  Claims_ASAT_Current", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"provisioned_cmr\""}, "model.iginsure.dim_iw_ow_flag": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.iginsure.premium_data"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "presentation", "dimensions", "dim_iw_ow_flag"], "unique_id": "model.iginsure.dim_iw_ow_flag", "raw_code": "with iw_ow_flags as (\r\n\r\n\r\n    select distinct iw_ow_flag from {{(ref('premium_data'))}}\r\n    where iw_ow_flag is not null\r\n\r\n\r\n)\r\n\r\nselect * from iw_ow_flags", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "presentation\\dimensions\\dim_iw_ow_flag.sql", "original_file_path": "models\\presentation\\dimensions\\dim_iw_ow_flag.sql", "name": "dim_iw_ow_flag", "alias": "dim_iw_ow_flag", "checksum": {"name": "sha256", "checksum": "1c0c2a2f5b39bdaf0aa97426c9d5921cdaf3a87783fdc9f6dcb5b45aee2a1753"}, "tags": [], "refs": [["premium_data"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\presentation\\dimensions\\dim_iw_ow_flag.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "materialized": "table"}, "created_at": 1701786800.7286406, "compiled_code": "with iw_ow_flags as (\n\n\n    select distinct iw_ow_flag from \"IGI_PROD_DW\".\"dbt_dev\".\"premium_data\"\n    where iw_ow_flag is not null\n\n\n)\n\nselect * from iw_ow_flags", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"dim_iw_ow_flag\""}, "model.iginsure.dim_producing_office": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.iginsure.dmn_policy_part"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "presentation", "dimensions", "dim_producing_office"], "unique_id": "model.iginsure.dim_producing_office", "raw_code": "with producing_office_from_source as (\r\n\r\n\r\n    select distinct line_producing_office as producing_office from \r\n    {{ref('dmn_policy_part')}}\r\n\r\n    where line_producing_office is not null and line_producing_office <> 'Not Available'\r\n\r\n)\r\n\r\n\r\nselect * from producing_office_from_source", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "presentation\\dimensions\\dim_producing_office.sql", "original_file_path": "models\\presentation\\dimensions\\dim_producing_office.sql", "name": "dim_producing_office", "alias": "dim_producing_office", "checksum": {"name": "sha256", "checksum": "bb60d2e33fa131d78b6458e313c99a041c3aa6b468a487f95e678ebe67fb7e54"}, "tags": [], "refs": [["dmn_policy_part"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\presentation\\dimensions\\dim_producing_office.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "materialized": "table"}, "created_at": 1701786800.734361, "compiled_code": "with producing_office_from_source as (\n\n\n    select distinct line_producing_office as producing_office from \n    \"IGI_PROD_DW\".\"dbt_dev\".\"dmn_policy_part\"\n\n    where line_producing_office is not null and line_producing_office <> 'Not Available'\n\n)\n\n\nselect * from producing_office_from_source", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"dim_producing_office\""}, "model.iginsure.dim_product": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.iginsure.stg_product"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "presentation", "dimensions", "dim_product"], "unique_id": "model.iginsure.dim_product", "raw_code": "with product_from_source as (\r\n\r\n\r\nselect distinct product_name\r\nfrom {{ref('stg_product')}}\r\n\r\nwhere product_name is not null\r\n\r\n)\r\n\r\nselect * from product_from_source", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "presentation\\dimensions\\dim_product.sql", "original_file_path": "models\\presentation\\dimensions\\dim_product.sql", "name": "dim_product", "alias": "dim_product", "checksum": {"name": "sha256", "checksum": "b861433fd0c43f852a522d0988b56bd381bad0061f5b10ef80e21f8b5feac3df"}, "tags": [], "refs": [["stg_product"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\presentation\\dimensions\\dim_product.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "materialized": "table"}, "created_at": 1701786800.7383735, "compiled_code": "with product_from_source as (\n\n\nselect distinct product_name\nfrom \"IGI_PROD_DW\".\"dbt_dev\".\"stg_product\"\n\nwhere product_name is not null\n\n)\n\nselect * from product_from_source", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"dim_product\""}, "model.iginsure.dim_Product_Subclass_Segmentation": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.iginsure.dmn_policy_part"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "presentation", "dimensions", "dim_Product_Subclass_Segmentation"], "unique_id": "model.iginsure.dim_Product_Subclass_Segmentation", "raw_code": "with product_subclass_segmentation as (\r\n    \r\nSELECT * , CONCAT(line_product_name,',',sub_class_segmentation) AS Product_Subclass_Segm_For_Join\r\n    FROM \r\n    (SELECT DISTINCT line_product_name,sub_class_segmentation \r\n    FROM\r\n    {{ref('dmn_policy_part')}}\r\n\r\n    where ltrim(rtrim(isnull(sub_class_segmentation,''))) <> '')final\r\n\r\n)\r\n\r\n\r\nselect * from product_subclass_segmentation", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "presentation\\dimensions\\dim_Product_Subclass_Segmentation.sql", "original_file_path": "models\\presentation\\dimensions\\dim_Product_Subclass_Segmentation.sql", "name": "dim_Product_Subclass_Segmentation", "alias": "dim_Product_Subclass_Segmentation", "checksum": {"name": "sha256", "checksum": "22c5d89e353bb3458cc238aac139072a5a4fd2c676ad57d1d38f6a874be3c22c"}, "tags": [], "refs": [["dmn_policy_part"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\presentation\\dimensions\\dim_Product_Subclass_Segmentation.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "materialized": "table"}, "created_at": 1701786800.7403746, "compiled_code": "with product_subclass_segmentation as (\n    \nSELECT * , CONCAT(line_product_name,',',sub_class_segmentation) AS Product_Subclass_Segm_For_Join\n    FROM \n    (SELECT DISTINCT line_product_name,sub_class_segmentation \n    FROM\n    \"IGI_PROD_DW\".\"dbt_dev\".\"dmn_policy_part\"\n\n    where ltrim(rtrim(isnull(sub_class_segmentation,''))) <> '')final\n\n)\n\n\nselect * from product_subclass_segmentation", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"dim_Product_Subclass_Segmentation\""}, "model.iginsure.dim_region": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.iginsure.stg_country_territory"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "presentation", "dimensions", "dim_region"], "unique_id": "model.iginsure.dim_region", "raw_code": "with region_from_policy as (\r\n\r\nSELECT distinct territory as region\r\nFROM\r\n{{ref('stg_country_territory')}}\r\nwhere territory is not null\r\n\r\n)\r\n\r\nselect * from region_from_policy", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "presentation\\dimensions\\dim_region.sql", "original_file_path": "models\\presentation\\dimensions\\dim_region.sql", "name": "dim_region", "alias": "dim_region", "checksum": {"name": "sha256", "checksum": "364515864ad1b9cf42f880fe1c8295fb24d10b764931ddc9fcf0262f44bc229c"}, "tags": [], "refs": [["stg_country_territory"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\presentation\\dimensions\\dim_region.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "materialized": "table"}, "created_at": 1701786800.7423735, "compiled_code": "with region_from_policy as (\n\nSELECT distinct territory as region\nFROM\n\"IGI_PROD_DW\".\"dbt_dev\".\"stg_country_territory\"\nwhere territory is not null\n\n)\n\nselect * from region_from_policy", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"dim_region\""}, "model.iginsure.dim_subdivision": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.iginsure.stg_subdivision"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "presentation", "dimensions", "dim_subdivision"], "unique_id": "model.iginsure.dim_subdivision", "raw_code": "with subdivision_from_source AS (\r\n\r\n    select distinct subdivision,subdivision_desc from \r\n    {{ref('stg_subdivision')}}\r\n    where subdivision is not null\r\n\r\n)\r\n\r\nselect * from subdivision_from_source", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "presentation\\dimensions\\dim_subdivision.sql", "original_file_path": "models\\presentation\\dimensions\\dim_subdivision.sql", "name": "dim_subdivision", "alias": "dim_subdivision", "checksum": {"name": "sha256", "checksum": "ccf8b232cfc5f4358727d1368272b15f6f1c7cb85a479007500a7a44c79ee8a0"}, "tags": [], "refs": [["stg_subdivision"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\presentation\\dimensions\\dim_subdivision.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "materialized": "table"}, "created_at": 1701786800.744374, "compiled_code": "with subdivision_from_source AS (\n\n    select distinct subdivision,subdivision_desc from \n    \"IGI_PROD_DW\".\"dbt_dev\".\"stg_subdivision\"\n    where subdivision is not null\n\n)\n\nselect * from subdivision_from_source", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"dim_subdivision\""}, "model.iginsure.dim_sub_class_segmentaion": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.iginsure.dmn_policy_part"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "presentation", "dimensions", "dim_sub_class_segmentaion"], "unique_id": "model.iginsure.dim_sub_class_segmentaion", "raw_code": "with subclass_segementaion_from_policy as (\r\n    \r\nSELECT DISTINCT sub_class_segmentation \r\nFROM\r\n{{ref('dmn_policy_part')}}\r\n\r\nwhere ltrim(rtrim(isnull(sub_class_segmentation,''))) <> ''\r\n\r\n)\r\n\r\n\r\nselect * from subclass_segementaion_from_policy", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "presentation\\dimensions\\dim_sub_class_segmentaion.sql", "original_file_path": "models\\presentation\\dimensions\\dim_sub_class_segmentaion.sql", "name": "dim_sub_class_segmentaion", "alias": "dim_sub_class_segmentaion", "checksum": {"name": "sha256", "checksum": "e4c9df54149b407b5eedfc7135a559219fdcc99c405a23cab4d01687b574f650"}, "tags": [], "refs": [["dmn_policy_part"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\presentation\\dimensions\\dim_sub_class_segmentaion.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "materialized": "table"}, "created_at": 1701786800.7466867, "compiled_code": "with subclass_segementaion_from_policy as (\n    \nSELECT DISTINCT sub_class_segmentation \nFROM\n\"IGI_PROD_DW\".\"dbt_dev\".\"dmn_policy_part\"\n\nwhere ltrim(rtrim(isnull(sub_class_segmentation,''))) <> ''\n\n)\n\n\nselect * from subclass_segementaion_from_policy", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"dim_sub_class_segmentaion\""}, "model.iginsure.premium_data": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.iginsure.dmn_activity_date_ranges", "model.iginsure.dmn_policy_part", "model.iginsure.stg_claim_movement", "model.iginsure.stg_apr", "model.iginsure.dmn_iris_mvmts", "model.iginsure.dmn_ri_policy_part"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["InwardPremium"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "index": "HEAP", "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "presentation", "premium", "premium_data"], "unique_id": "model.iginsure.premium_data", "raw_code": "{{\r\n  config(  \r\n    tags=['InwardPremium'],\r\n    index = 'HEAP'\r\n    )\r\n}}\r\nwith\r\n\r\ndmn_activity_date_ranges as (\r\n    select * from {{ ref('dmn_activity_date_ranges')}}\r\n),\r\n\r\ndmn_policy_part as (\r\n    select * from {{ ref('dmn_policy_part')}}\r\n),\r\n\r\nstg_claim_movement as (\r\n    select * from {{ ref('stg_claim_movement') }}\r\n),\r\n\r\nstg_apr as (\r\n    select * from {{ ref('stg_apr')}}\r\n),\r\n\r\ndmn_iris_mvmts as (\r\n    select * from {{ref('dmn_iris_mvmts')}}\r\n),\r\n\r\ndmn_ri_policy_part as (\r\n    select * from {{ ref('dmn_ri_policy_part') }}\r\n),\r\n\r\napr_policy_line as (\r\n    select\r\n        dmn_policy_part.policy_id,\r\n        0 as ri_section_broker_security_id,\r\n        dmn_policy_part.activity_id as apr_activity_id,\r\n        dmn_policy_part.activity_id as effective_activity_id,\r\n        stg_apr.apr_reference,\r\n        stg_apr.period_year_period,\r\n        stg_apr.period_year,\r\n        stg_apr.period_month,\r\n        cast (stg_apr.entry_date as date) as entry_date,\r\n        cast (\r\n            case\r\n                when stg_apr.entry_date < dmn_policy_part.activity_written_timestamp\r\n                    then dmn_policy_part.activity_written_timestamp\r\n                else stg_apr.entry_date\r\n            end\r\n        as date) as effective_date,\r\n        stg_apr.allocation_date,\r\n        stg_apr.due as settlement_due_date,\r\n        \r\n        stg_apr.base_amount,\r\n\r\n        gross_igi_share_base as gross_premium,\r\n        acq_cost_base as acq,\r\n\r\n        stg_apr.apr_state,\r\n        stg_apr.type_of_monetary_amount,\r\n        'INWARD' as iw_ow_flag,\r\n\r\n        stg_apr.orig_amount,\r\n        stg_apr.currency,\r\n        stg_apr.apr_roe,\r\n        stg_apr.gross_igi_share_org as gross_premium_org,\r\n        stg_apr.acq_cost_org as acq_org\r\n    from\r\n        stg_apr\r\n        inner join dmn_policy_part on\r\n            stg_apr.apr_instance_id = dmn_policy_part.line_id\r\n    where\r\n        stg_apr.apr_entity_type = 'Policy Line'\r\n),\r\n\r\napr_claim_movement as (\r\n    select\r\n        dmn_policy_part.policy_id,\r\n        0 as ri_section_broker_security_id,\r\n        dmn_policy_part.activity_id as apr_activity_id,\r\n        dmn_policy_part.activity_id as effective_activity_id,\r\n        stg_apr.apr_reference,\r\n        stg_apr.period_year_period,\r\n        stg_apr.period_year,\r\n        stg_apr.period_month,\r\n        cast (stg_apr.entry_date as date) as entry_date,\r\n        cast (stg_apr.entry_date as date) as effective_date,\r\n        stg_apr.allocation_date,\r\n        stg_apr.due as settlement_due_date,\r\n        \r\n        stg_apr.base_amount,\r\n\r\n        gross_igi_share_base as gross_premium,\r\n        acq_cost_base as acq,\r\n\r\n        stg_apr.apr_state,\r\n        stg_apr.type_of_monetary_amount,\r\n        'INWARD' as iw_ow_flag,\r\n\r\n        stg_apr.orig_amount,\r\n        stg_apr.currency,\r\n        stg_apr.apr_roe,\r\n        stg_apr.gross_igi_share_org as gross_premium_org,\r\n        stg_apr.acq_cost_org as acq_org\r\n    from\r\n        stg_apr\r\n        inner join stg_claim_movement on\r\n            stg_apr.apr_instance_id = stg_claim_movement.claim_movement_id\r\n        inner join dmn_policy_part on\r\n            stg_claim_movement.policy_activity_id = dmn_policy_part.activity_id\r\n    where\r\n        stg_apr.apr_entity_type = 'Claim Movement'\r\n        and (is_gross_igi_share = 1 or is_acq_cost = 1)\r\n),\r\n\r\napr_fac_movement as (\r\n    select \r\n        dmn_policy_part.policy_id,\r\n        dmn_ri_policy_part.ri_section_broker_security_id,\r\n        dmn_policy_part.activity_id as apr_activity_id,\r\n        dmn_policy_part.activity_id as effective_activity_id,\r\n        stg_apr.apr_reference,\r\n        stg_apr.period_year_period,\r\n        stg_apr.period_year,\r\n        stg_apr.period_month,\r\n        cast (stg_apr.entry_date as date) as entry_date,\r\n        cast (\r\n            case\r\n                when stg_apr.entry_date < dmn_policy_part.activity_written_timestamp\r\n                    then dmn_policy_part.activity_written_timestamp\r\n                else stg_apr.entry_date\r\n            end\r\n        as date) as effective_date,\r\n        stg_apr.allocation_date,\r\n        stg_apr.due as settlement_due_date,\r\n        \r\n        stg_apr.base_amount,\r\n\r\n        gross_igi_share_base as gross_premium,\r\n        acq_cost_base as acq,\r\n\r\n        stg_apr.apr_state,\r\n        stg_apr.type_of_monetary_amount,\r\n        'OF' as iw_ow_flag,\r\n\r\n        stg_apr.orig_amount,\r\n        stg_apr.currency,\r\n        stg_apr.apr_roe,\r\n        stg_apr.gross_igi_share_org as gross_premium_org,\r\n        stg_apr.acq_cost_org as acq_org\r\n    from \r\n     stg_apr\r\n        inner join dmn_policy_part on\r\n            stg_apr.source_instance_id = dmn_policy_part.line_id\r\n            inner join dmn_ri_policy_part on \r\n                stg_apr.apr_instance_id = dmn_ri_policy_part.ri_section_broker_security_id\r\n    where\r\n        stg_apr.apr_type = 'outward_premium'\r\n        and dmn_ri_policy_part.type_of_ri_policy_code = 'OF'\r\n),\r\n\r\napr_fac_obligatory_movement as (\r\n    select \r\n        dmn_policy_part.policy_id,\r\n        dmn_ri_policy_part.ri_section_broker_security_id,\r\n        dmn_policy_part.activity_id as apr_activity_id,\r\n        dmn_policy_part.activity_id as effective_activity_id,\r\n        stg_apr.apr_reference,\r\n        stg_apr.period_year_period,\r\n        stg_apr.period_year,\r\n        stg_apr.period_month,\r\n        cast (stg_apr.entry_date as date) as entry_date,\r\n        cast (\r\n            case\r\n                when stg_apr.entry_date < dmn_policy_part.activity_written_timestamp\r\n                    then dmn_policy_part.activity_written_timestamp\r\n                else stg_apr.entry_date\r\n            end\r\n        as date) as effective_date,\r\n        stg_apr.allocation_date,\r\n        stg_apr.due as settlement_due_date,\r\n\r\n        stg_apr.base_amount,\r\n        \r\n        gross_igi_share_base as gross_premium,\r\n        acq_cost_base as acq,\r\n\r\n        stg_apr.apr_state,\r\n        stg_apr.type_of_monetary_amount,\r\n        'FT' as iw_ow_flag,\r\n\r\n        stg_apr.orig_amount,\r\n        stg_apr.currency,\r\n        stg_apr.apr_roe,\r\n        stg_apr.gross_igi_share_org as gross_premium_org,\r\n        stg_apr.acq_cost_org as acq_org\r\n    from \r\n     stg_apr\r\n        inner join dmn_policy_part on\r\n            stg_apr.source_instance_id = dmn_policy_part.line_id\r\n            inner join dmn_ri_policy_part on \r\n                stg_apr.apr_instance_id = dmn_ri_policy_part.ri_section_broker_security_id\r\n    where\r\n        stg_apr.apr_type = 'outward_premium'\r\n        and dmn_ri_policy_part.type_of_ri_policy_code = 'FT'\r\n),\r\n\r\napr_qs_movement as (\r\n    select \r\n        dmn_policy_part.policy_id,\r\n        dmn_ri_policy_part.ri_section_broker_security_id,\r\n        dmn_policy_part.activity_id as apr_activity_id,\r\n        dmn_policy_part.activity_id as effective_activity_id,\r\n        stg_apr.apr_reference,\r\n        stg_apr.period_year_period,\r\n        stg_apr.period_year,\r\n        stg_apr.period_month,\r\n        cast (stg_apr.entry_date as date) as entry_date,\r\n        cast (\r\n            case\r\n                when stg_apr.entry_date < dmn_policy_part.activity_written_timestamp\r\n                    then dmn_policy_part.activity_written_timestamp\r\n                else stg_apr.entry_date\r\n            end\r\n        as date) as effective_date,\r\n        stg_apr.allocation_date,\r\n        stg_apr.due as settlement_due_date,\r\n\r\n        stg_apr.base_amount,\r\n        \r\n        gross_igi_share_base as gross_premium,\r\n        acq_cost_base as acq,\r\n\r\n        stg_apr.apr_state,\r\n        stg_apr.type_of_monetary_amount,\r\n        'QS' as iw_ow_flag,\r\n\r\n        stg_apr.orig_amount,\r\n        stg_apr.currency,\r\n        stg_apr.apr_roe,\r\n        stg_apr.gross_igi_share_org as gross_premium_org,\r\n        stg_apr.acq_cost_org as acq_org\r\n    from \r\n     stg_apr\r\n        inner join dmn_policy_part on\r\n            stg_apr.source_instance_id = dmn_policy_part.line_id\r\n            inner join dmn_ri_policy_part on \r\n                stg_apr.apr_instance_id = dmn_ri_policy_part.ri_section_broker_security_id\r\n    where\r\n        stg_apr.apr_type = 'outward_premium'\r\n        and dmn_ri_policy_part.type_of_ri_policy_code in ('OQ','OS')\r\n),\r\n\r\napr_records as (\r\n    select * from apr_policy_line\r\n\r\n    union all\r\n\r\n    select * from apr_claim_movement\r\n\r\n    union all \r\n\r\n    select * from apr_fac_movement\r\n\r\n    union all \r\n\r\n    select * from apr_fac_obligatory_movement\r\n\r\n    union all \r\n\r\n    select * from apr_qs_movement\r\n),\r\n\r\npolicy_account_period_activities as (\r\n    select\r\n        apr_records.policy_id as policy_id,\r\n        apr_records.apr_reference,\r\n        apr_records.apr_activity_id,\r\n        apr_records.base_amount as apr_amount_usd,\r\n        apr_records.gross_premium,\r\n        apr_records.acq,\r\n        \r\n        --original amounts\r\n        apr_records.orig_amount as apr_amount_org,\r\n        apr_records.currency as apr_org_ccy,\r\n        apr_records.apr_roe,\r\n        apr_records.gross_premium_org,\r\n        apr_records.acq_org,\r\n        \r\n        apr_records.entry_date as apr_entry_date,\r\n        --apr_records.allocation_date as apr_allocation_date,\r\n        apr_records.settlement_due_date as apr_settlement_due_date,\r\n        apr_records.period_year_period as apr_account_period,\r\n        apr_records.period_month as AP_month,\r\n        apr_records.period_year as AP_year,\r\n        cast(datefromparts(apr_records.period_year,apr_records.period_month ,1) as date) as AP_Date,\r\n        --apr_records.apr_state as apr_status,\r\n        apr_records.type_of_monetary_amount,\r\n\r\n        activity.activity_version,\r\n        activity.activity_type,\r\n        activity.activity_id as effective_activity_id,\r\n        activity.line_division as activity_division,\r\n        activity.line_subdivision as subdivision,\r\n        activity.line_product_name as product,\r\n        activity.sub_class_segmentation as SubClassSegmentation,\r\n        activity.product_segregation_name as product_segregation,\r\n        activity.coverage_description as activity_coverage_description,\r\n        activity.coverage_code as activity_coverage_code,\r\n        activity.section_class as activity_section_class,\r\n        activity.written_account_period as activity_written_account_period,\r\n        activity.policy_reference,\r\n        activity.activity_source,\r\n        activity.broker_version_number,\r\n\r\n        apr_records.iw_ow_flag,\r\n        ri.ri_policy,\r\n        ri.ri_policy_inception,\r\n        ri.ri_policy_expiry,\r\n        ri.ow_broker,\r\n        ri.ow_broker_major_group,\r\n        ri.ow_security,\r\n\r\n        for_date.activity_id as for_date_activity_id,\r\n        for_date.division as for_date_division,\r\n        for_date.subdivision as subdivision_day,\r\n        for_date.producing_office as ProducingOffice_day,\r\n        for_date.product_name as for_date_product_name,\r\n        for_date.product_segregation_name as ProductSegregation_day,\r\n        for_date.segmentation as segmentation_day,\r\n        for_date.budget_segmentation as BudgetSegmentation_day,\r\n        for_date.sub_class_segmentation as SubClassSegmentation_day,\r\n        for_date.section_class as Class_day,\r\n        for_date.producer_source_group_name as ProducerSource_day,\r\n        for_date.producer as producer_day,\r\n        for_date.producer_group_name as ProducerGroup_day,\r\n        for_date.activity_type_of_insurance as InsuranceType_day,\r\n        for_date.coverage_description as coverageDesc_day,\r\n        for_date.coverage_code as  CoverageCode_day,\r\n        for_date.line_territory as territory_day,\r\n        for_date.line_domicile as  domicile_day,\r\n        for_date.region as region_day,\r\n        for_date.mis_uw_year as MISUWY_day,\r\n        for_date.uw_year as UWY_day,\r\n        for_date.insured as insured_day,\r\n        for_date.reassured as reassured_day,\r\n        for_date.file_handler as FileHandler_day,\r\n        for_date.underwriter as  underwriter_day,\r\n        for_date.recommended_underwriter as RecUnderwriter_day,\r\n        for_date.admin_file_handler as AdminFileHandler_day,\r\n        for_date.operator_id as OperatorId_day,\r\n        for_date.activity_notes as activity_notes_day,\r\n        for_date.policy_inception as for_date_policy_inception,\r\n        for_date.policy_expiry as for_date_policy_expiry,\r\n        for_date.policy_expiry_reported as for_date_policy_expiry_reported,\r\n        for_date.New_vs_Renwal as for_date_New_vs_Renwal,\r\n        \r\n        for_period.activity_id as for_period_activity_id,\r\n        for_period.division as for_period_division,\r\n        for_period.subdivision as for_period_subdivision,\r\n        for_period.producing_office as ProducingOffice_month,\r\n        for_period.product_name as for_period_product_name,\r\n        for_period.product_segregation_name as ProductSegregation_month,\r\n        for_period.segmentation as segmentation_month,\r\n        for_period.budget_segmentation as BudgetSegmentation_month,\r\n        for_period.sub_class_segmentation as SubClassSegmentation_month,\r\n        for_period.section_class as class_month,\r\n        for_period.producer_source_group_name as ProducerSource_month,\r\n        for_period.producer as producer_month,\r\n        for_period.producer_group_name as ProducerGroup_month,\r\n        for_period.activity_type_of_insurance as InsuranceType_month,\r\n        for_period.coverage_description as CoverageDesc_month,\r\n        for_period.coverage_code as CoverageCode_month,\r\n        for_period.line_territory as territory_month,\r\n        for_period.line_domicile as  domicile_month,\r\n        for_period.region as region_month,\r\n        for_period.region_split as region_split_month,\r\n        for_period.mis_uw_year as MISUWY_month,\r\n        for_period.uw_year as UWY_month,\r\n        for_period.insured as insured_month,\r\n        for_period.reassured as reassured_month,\r\n        for_period.file_handler as FileHandler_month,\r\n        for_period.underwriter as underwriter_month,\r\n        for_period.recommended_underwriter as RecUnderwriter_month,\r\n        for_period.admin_file_handler as AdminFileHandler_month,\r\n        for_period.operator_id as OperatorId_month,\r\n        for_period.activity_notes as activity_notes_period,\r\n        for_period.policy_inception as for_period_policy_inception,\r\n        for_period.policy_expiry as for_period_policy_expiry,\r\n        for_period.policy_expiry_reported as for_period_policy_expiry_reported,\r\n        for_period.New_vs_Renwal as for_period_New_vs_Renwal\r\n\r\n    from\r\n        apr_records\r\n        inner join dmn_policy_part as activity on\r\n            apr_records.policy_id = activity.policy_id\r\n            and apr_records.effective_activity_id = activity.activity_id\r\n            and activity.written_account_period is not null\r\n        left join dmn_activity_date_ranges as for_date on\r\n            apr_records.policy_id = for_date.policy_id\r\n            and apr_records.effective_date >= for_date.active_from_date\r\n            and apr_records.effective_date < coalesce(for_date.active_until_date, getdate())\r\n        left join dmn_activity_date_ranges as for_period on\r\n            apr_records.policy_id = for_period.policy_id\r\n            and apr_records.period_year_period >= for_period.active_from_period\r\n            and apr_records.period_year_period < coalesce(for_period.active_until_period, 300000)\r\n        --outward\r\n        left join dmn_ri_policy_part ri on \r\n        apr_records.ri_section_broker_security_id = ri.ri_section_broker_security_id\r\n        --and apr_records.iw_ow_flag <> 'INWARD'\r\n\r\n        WHERE  apr_records.period_year_period >=202004\r\n),\r\n\r\n\r\ncombined_premium_data as (\r\n\r\nSELECT *,\r\n    concat(product,',',SubClassSegmentation) as Product_Subclass_Segm_For_Join\r\n FROM \r\n\r\n    (\r\n        \r\n        select * from policy_account_period_activities\r\n\r\n    union all\r\n\r\n        select * from dmn_iris_mvmts\r\n    \r\n    ) final_prem\r\n\r\n)\r\n\r\nselect * from combined_premium_data", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "presentation\\premium\\premium_data.sql", "original_file_path": "models\\presentation\\premium\\premium_data.sql", "name": "premium_data", "alias": "premium_data", "checksum": {"name": "sha256", "checksum": "0a9b12939fcbb0de2fada8806d999398035836fc16e16bd824cc490c8a7cd9e6"}, "tags": ["InwardPremium"], "refs": [["dmn_activity_date_ranges"], ["dmn_policy_part"], ["stg_claim_movement"], ["stg_apr"], ["dmn_iris_mvmts"], ["dmn_ri_policy_part"]], "sources": [], "metrics": [], "description": "A model that encompess all related inward premium data from XFI as of this date.\r\n\r\nIt consideres the gross premium figures (GWP) including RIP and excluding writeoff with the ability to view the state of non-financial info. per day and per accounting period to the level of transaction(APR).\r\n\r\nAny column ends by '_day' reflects the non-financial info. as at that date while if the column ends by '_month' this will be reflecting non-financial info. as at that month (account period).", "columns": {"product": {"name": "product", "description": "Showing product as of XFI", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "product_segregation": {"name": "product_segregation", "description": "Showing product as of XFI in addition to both Downstream energy and construction split", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "activity_written_account_period": {"name": "activity_written_account_period", "description": "Showing to which account period is the activity written", "meta": {}, "data_type": "int", "quote": null, "tags": []}, "for_date_product_name": {"name": "for_date_product_name", "description": "Showing product as of XFI", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "ProductSegregation_day": {"name": "ProductSegregation_day", "description": "Showing product as of XFI in addition to both Downstream energy and Construction split related to latest activity per policy per day", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "region_day": {"name": "region_day", "description": "Showing the territory region in case of those porduct (INWARDS XOL, MR, PROPERTY, POLITICAL VIOLENCE, INWARDS PPN, DOWNSTREAM ENERGY) however showing the domicile region for the remaining products", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "MISUWY_day": {"name": "MISUWY_day", "description": "Reflects 'MIS UW Year' field on the policy line screen which read from policy in case of open market while from master policy in case of facility)", "meta": {}, "data_type": "int", "quote": null, "tags": []}, "UWY_day": {"name": "UWY_day", "description": "Reflects the inception year of the policy in case of open market while  the inception year of the master policy in case of facility", "meta": {}, "data_type": "int", "quote": null, "tags": []}, "ProductSegregation_month": {"name": "ProductSegregation_month", "description": "Showing product as of XFI in addition to both Downstream energy and construction split related to latest activity per policy per day", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "region_month": {"name": "region_month", "description": "Showing the territory region in case of those product (INWARDS XOL, MR, PROPERTY, POLITICAL VIOLENCE, INWARDS PPN, DOWNSTREAM ENERGY) however showing the domicile region for the remaining products", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "MISUWY_month": {"name": "MISUWY_month", "description": "Relfects mis uw year field on the policy line screen (read from policy in case of open market while the master policy in case of facility)", "meta": {}, "data_type": "int", "quote": null, "tags": []}, "UWY_month": {"name": "UWY_month", "description": "Reflects the inception year of the policy in case of open market while  the inception year of the master policy in case of facility", "meta": {}, "data_type": "int", "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "iginsure://models\\sources\\dbo.yml", "compiled_path": "target\\compiled\\iginsure\\models\\presentation\\premium\\premium_data.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "materialized": "table", "tags": ["InwardPremium"], "index": "HEAP"}, "created_at": 1701786801.860055, "compiled_code": "\nwith\n\ndmn_activity_date_ranges as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"dmn_activity_date_ranges\"\n),\n\ndmn_policy_part as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"dmn_policy_part\"\n),\n\nstg_claim_movement as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"stg_claim_movement\"\n),\n\nstg_apr as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"stg_apr\"\n),\n\ndmn_iris_mvmts as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"dmn_iris_mvmts\"\n),\n\ndmn_ri_policy_part as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"dmn_ri_policy_part\"\n),\n\napr_policy_line as (\n    select\n        dmn_policy_part.policy_id,\n        0 as ri_section_broker_security_id,\n        dmn_policy_part.activity_id as apr_activity_id,\n        dmn_policy_part.activity_id as effective_activity_id,\n        stg_apr.apr_reference,\n        stg_apr.period_year_period,\n        stg_apr.period_year,\n        stg_apr.period_month,\n        cast (stg_apr.entry_date as date) as entry_date,\n        cast (\n            case\n                when stg_apr.entry_date < dmn_policy_part.activity_written_timestamp\n                    then dmn_policy_part.activity_written_timestamp\n                else stg_apr.entry_date\n            end\n        as date) as effective_date,\n        stg_apr.allocation_date,\n        stg_apr.due as settlement_due_date,\n        \n        stg_apr.base_amount,\n\n        gross_igi_share_base as gross_premium,\n        acq_cost_base as acq,\n\n        stg_apr.apr_state,\n        stg_apr.type_of_monetary_amount,\n        'INWARD' as iw_ow_flag,\n\n        stg_apr.orig_amount,\n        stg_apr.currency,\n        stg_apr.apr_roe,\n        stg_apr.gross_igi_share_org as gross_premium_org,\n        stg_apr.acq_cost_org as acq_org\n    from\n        stg_apr\n        inner join dmn_policy_part on\n            stg_apr.apr_instance_id = dmn_policy_part.line_id\n    where\n        stg_apr.apr_entity_type = 'Policy Line'\n),\n\napr_claim_movement as (\n    select\n        dmn_policy_part.policy_id,\n        0 as ri_section_broker_security_id,\n        dmn_policy_part.activity_id as apr_activity_id,\n        dmn_policy_part.activity_id as effective_activity_id,\n        stg_apr.apr_reference,\n        stg_apr.period_year_period,\n        stg_apr.period_year,\n        stg_apr.period_month,\n        cast (stg_apr.entry_date as date) as entry_date,\n        cast (stg_apr.entry_date as date) as effective_date,\n        stg_apr.allocation_date,\n        stg_apr.due as settlement_due_date,\n        \n        stg_apr.base_amount,\n\n        gross_igi_share_base as gross_premium,\n        acq_cost_base as acq,\n\n        stg_apr.apr_state,\n        stg_apr.type_of_monetary_amount,\n        'INWARD' as iw_ow_flag,\n\n        stg_apr.orig_amount,\n        stg_apr.currency,\n        stg_apr.apr_roe,\n        stg_apr.gross_igi_share_org as gross_premium_org,\n        stg_apr.acq_cost_org as acq_org\n    from\n        stg_apr\n        inner join stg_claim_movement on\n            stg_apr.apr_instance_id = stg_claim_movement.claim_movement_id\n        inner join dmn_policy_part on\n            stg_claim_movement.policy_activity_id = dmn_policy_part.activity_id\n    where\n        stg_apr.apr_entity_type = 'Claim Movement'\n        and (is_gross_igi_share = 1 or is_acq_cost = 1)\n),\n\napr_fac_movement as (\n    select \n        dmn_policy_part.policy_id,\n        dmn_ri_policy_part.ri_section_broker_security_id,\n        dmn_policy_part.activity_id as apr_activity_id,\n        dmn_policy_part.activity_id as effective_activity_id,\n        stg_apr.apr_reference,\n        stg_apr.period_year_period,\n        stg_apr.period_year,\n        stg_apr.period_month,\n        cast (stg_apr.entry_date as date) as entry_date,\n        cast (\n            case\n                when stg_apr.entry_date < dmn_policy_part.activity_written_timestamp\n                    then dmn_policy_part.activity_written_timestamp\n                else stg_apr.entry_date\n            end\n        as date) as effective_date,\n        stg_apr.allocation_date,\n        stg_apr.due as settlement_due_date,\n        \n        stg_apr.base_amount,\n\n        gross_igi_share_base as gross_premium,\n        acq_cost_base as acq,\n\n        stg_apr.apr_state,\n        stg_apr.type_of_monetary_amount,\n        'OF' as iw_ow_flag,\n\n        stg_apr.orig_amount,\n        stg_apr.currency,\n        stg_apr.apr_roe,\n        stg_apr.gross_igi_share_org as gross_premium_org,\n        stg_apr.acq_cost_org as acq_org\n    from \n     stg_apr\n        inner join dmn_policy_part on\n            stg_apr.source_instance_id = dmn_policy_part.line_id\n            inner join dmn_ri_policy_part on \n                stg_apr.apr_instance_id = dmn_ri_policy_part.ri_section_broker_security_id\n    where\n        stg_apr.apr_type = 'outward_premium'\n        and dmn_ri_policy_part.type_of_ri_policy_code = 'OF'\n),\n\napr_fac_obligatory_movement as (\n    select \n        dmn_policy_part.policy_id,\n        dmn_ri_policy_part.ri_section_broker_security_id,\n        dmn_policy_part.activity_id as apr_activity_id,\n        dmn_policy_part.activity_id as effective_activity_id,\n        stg_apr.apr_reference,\n        stg_apr.period_year_period,\n        stg_apr.period_year,\n        stg_apr.period_month,\n        cast (stg_apr.entry_date as date) as entry_date,\n        cast (\n            case\n                when stg_apr.entry_date < dmn_policy_part.activity_written_timestamp\n                    then dmn_policy_part.activity_written_timestamp\n                else stg_apr.entry_date\n            end\n        as date) as effective_date,\n        stg_apr.allocation_date,\n        stg_apr.due as settlement_due_date,\n\n        stg_apr.base_amount,\n        \n        gross_igi_share_base as gross_premium,\n        acq_cost_base as acq,\n\n        stg_apr.apr_state,\n        stg_apr.type_of_monetary_amount,\n        'FT' as iw_ow_flag,\n\n        stg_apr.orig_amount,\n        stg_apr.currency,\n        stg_apr.apr_roe,\n        stg_apr.gross_igi_share_org as gross_premium_org,\n        stg_apr.acq_cost_org as acq_org\n    from \n     stg_apr\n        inner join dmn_policy_part on\n            stg_apr.source_instance_id = dmn_policy_part.line_id\n            inner join dmn_ri_policy_part on \n                stg_apr.apr_instance_id = dmn_ri_policy_part.ri_section_broker_security_id\n    where\n        stg_apr.apr_type = 'outward_premium'\n        and dmn_ri_policy_part.type_of_ri_policy_code = 'FT'\n),\n\napr_qs_movement as (\n    select \n        dmn_policy_part.policy_id,\n        dmn_ri_policy_part.ri_section_broker_security_id,\n        dmn_policy_part.activity_id as apr_activity_id,\n        dmn_policy_part.activity_id as effective_activity_id,\n        stg_apr.apr_reference,\n        stg_apr.period_year_period,\n        stg_apr.period_year,\n        stg_apr.period_month,\n        cast (stg_apr.entry_date as date) as entry_date,\n        cast (\n            case\n                when stg_apr.entry_date < dmn_policy_part.activity_written_timestamp\n                    then dmn_policy_part.activity_written_timestamp\n                else stg_apr.entry_date\n            end\n        as date) as effective_date,\n        stg_apr.allocation_date,\n        stg_apr.due as settlement_due_date,\n\n        stg_apr.base_amount,\n        \n        gross_igi_share_base as gross_premium,\n        acq_cost_base as acq,\n\n        stg_apr.apr_state,\n        stg_apr.type_of_monetary_amount,\n        'QS' as iw_ow_flag,\n\n        stg_apr.orig_amount,\n        stg_apr.currency,\n        stg_apr.apr_roe,\n        stg_apr.gross_igi_share_org as gross_premium_org,\n        stg_apr.acq_cost_org as acq_org\n    from \n     stg_apr\n        inner join dmn_policy_part on\n            stg_apr.source_instance_id = dmn_policy_part.line_id\n            inner join dmn_ri_policy_part on \n                stg_apr.apr_instance_id = dmn_ri_policy_part.ri_section_broker_security_id\n    where\n        stg_apr.apr_type = 'outward_premium'\n        and dmn_ri_policy_part.type_of_ri_policy_code in ('OQ','OS')\n),\n\napr_records as (\n    select * from apr_policy_line\n\n    union all\n\n    select * from apr_claim_movement\n\n    union all \n\n    select * from apr_fac_movement\n\n    union all \n\n    select * from apr_fac_obligatory_movement\n\n    union all \n\n    select * from apr_qs_movement\n),\n\npolicy_account_period_activities as (\n    select\n        apr_records.policy_id as policy_id,\n        apr_records.apr_reference,\n        apr_records.apr_activity_id,\n        apr_records.base_amount as apr_amount_usd,\n        apr_records.gross_premium,\n        apr_records.acq,\n        \n        --original amounts\n        apr_records.orig_amount as apr_amount_org,\n        apr_records.currency as apr_org_ccy,\n        apr_records.apr_roe,\n        apr_records.gross_premium_org,\n        apr_records.acq_org,\n        \n        apr_records.entry_date as apr_entry_date,\n        --apr_records.allocation_date as apr_allocation_date,\n        apr_records.settlement_due_date as apr_settlement_due_date,\n        apr_records.period_year_period as apr_account_period,\n        apr_records.period_month as AP_month,\n        apr_records.period_year as AP_year,\n        cast(datefromparts(apr_records.period_year,apr_records.period_month ,1) as date) as AP_Date,\n        --apr_records.apr_state as apr_status,\n        apr_records.type_of_monetary_amount,\n\n        activity.activity_version,\n        activity.activity_type,\n        activity.activity_id as effective_activity_id,\n        activity.line_division as activity_division,\n        activity.line_subdivision as subdivision,\n        activity.line_product_name as product,\n        activity.sub_class_segmentation as SubClassSegmentation,\n        activity.product_segregation_name as product_segregation,\n        activity.coverage_description as activity_coverage_description,\n        activity.coverage_code as activity_coverage_code,\n        activity.section_class as activity_section_class,\n        activity.written_account_period as activity_written_account_period,\n        activity.policy_reference,\n        activity.activity_source,\n        activity.broker_version_number,\n\n        apr_records.iw_ow_flag,\n        ri.ri_policy,\n        ri.ri_policy_inception,\n        ri.ri_policy_expiry,\n        ri.ow_broker,\n        ri.ow_broker_major_group,\n        ri.ow_security,\n\n        for_date.activity_id as for_date_activity_id,\n        for_date.division as for_date_division,\n        for_date.subdivision as subdivision_day,\n        for_date.producing_office as ProducingOffice_day,\n        for_date.product_name as for_date_product_name,\n        for_date.product_segregation_name as ProductSegregation_day,\n        for_date.segmentation as segmentation_day,\n        for_date.budget_segmentation as BudgetSegmentation_day,\n        for_date.sub_class_segmentation as SubClassSegmentation_day,\n        for_date.section_class as Class_day,\n        for_date.producer_source_group_name as ProducerSource_day,\n        for_date.producer as producer_day,\n        for_date.producer_group_name as ProducerGroup_day,\n        for_date.activity_type_of_insurance as InsuranceType_day,\n        for_date.coverage_description as coverageDesc_day,\n        for_date.coverage_code as  CoverageCode_day,\n        for_date.line_territory as territory_day,\n        for_date.line_domicile as  domicile_day,\n        for_date.region as region_day,\n        for_date.mis_uw_year as MISUWY_day,\n        for_date.uw_year as UWY_day,\n        for_date.insured as insured_day,\n        for_date.reassured as reassured_day,\n        for_date.file_handler as FileHandler_day,\n        for_date.underwriter as  underwriter_day,\n        for_date.recommended_underwriter as RecUnderwriter_day,\n        for_date.admin_file_handler as AdminFileHandler_day,\n        for_date.operator_id as OperatorId_day,\n        for_date.activity_notes as activity_notes_day,\n        for_date.policy_inception as for_date_policy_inception,\n        for_date.policy_expiry as for_date_policy_expiry,\n        for_date.policy_expiry_reported as for_date_policy_expiry_reported,\n        for_date.New_vs_Renwal as for_date_New_vs_Renwal,\n        \n        for_period.activity_id as for_period_activity_id,\n        for_period.division as for_period_division,\n        for_period.subdivision as for_period_subdivision,\n        for_period.producing_office as ProducingOffice_month,\n        for_period.product_name as for_period_product_name,\n        for_period.product_segregation_name as ProductSegregation_month,\n        for_period.segmentation as segmentation_month,\n        for_period.budget_segmentation as BudgetSegmentation_month,\n        for_period.sub_class_segmentation as SubClassSegmentation_month,\n        for_period.section_class as class_month,\n        for_period.producer_source_group_name as ProducerSource_month,\n        for_period.producer as producer_month,\n        for_period.producer_group_name as ProducerGroup_month,\n        for_period.activity_type_of_insurance as InsuranceType_month,\n        for_period.coverage_description as CoverageDesc_month,\n        for_period.coverage_code as CoverageCode_month,\n        for_period.line_territory as territory_month,\n        for_period.line_domicile as  domicile_month,\n        for_period.region as region_month,\n        for_period.region_split as region_split_month,\n        for_period.mis_uw_year as MISUWY_month,\n        for_period.uw_year as UWY_month,\n        for_period.insured as insured_month,\n        for_period.reassured as reassured_month,\n        for_period.file_handler as FileHandler_month,\n        for_period.underwriter as underwriter_month,\n        for_period.recommended_underwriter as RecUnderwriter_month,\n        for_period.admin_file_handler as AdminFileHandler_month,\n        for_period.operator_id as OperatorId_month,\n        for_period.activity_notes as activity_notes_period,\n        for_period.policy_inception as for_period_policy_inception,\n        for_period.policy_expiry as for_period_policy_expiry,\n        for_period.policy_expiry_reported as for_period_policy_expiry_reported,\n        for_period.New_vs_Renwal as for_period_New_vs_Renwal\n\n    from\n        apr_records\n        inner join dmn_policy_part as activity on\n            apr_records.policy_id = activity.policy_id\n            and apr_records.effective_activity_id = activity.activity_id\n            and activity.written_account_period is not null\n        left join dmn_activity_date_ranges as for_date on\n            apr_records.policy_id = for_date.policy_id\n            and apr_records.effective_date >= for_date.active_from_date\n            and apr_records.effective_date < coalesce(for_date.active_until_date, getdate())\n        left join dmn_activity_date_ranges as for_period on\n            apr_records.policy_id = for_period.policy_id\n            and apr_records.period_year_period >= for_period.active_from_period\n            and apr_records.period_year_period < coalesce(for_period.active_until_period, 300000)\n        --outward\n        left join dmn_ri_policy_part ri on \n        apr_records.ri_section_broker_security_id = ri.ri_section_broker_security_id\n        --and apr_records.iw_ow_flag <> 'INWARD'\n\n        WHERE  apr_records.period_year_period >=202004\n),\n\n\ncombined_premium_data as (\n\nSELECT *,\n    concat(product,',',SubClassSegmentation) as Product_Subclass_Segm_For_Join\n FROM \n\n    (\n        \n        select * from policy_account_period_activities\n\n    union all\n\n        select * from dmn_iris_mvmts\n    \n    ) final_prem\n\n)\n\nselect * from combined_premium_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"premium_data\""}, "model.iginsure.pricing": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.iginsure.pricing_types_unpiv"], "nodes": ["model.iginsure.stg_latest_activity_per_policy", "model.iginsure.stg_latest_activity_per_renewal_policy", "model.iginsure.dmn_claim", "model.iginsure.dmn_policy_part", "model.iginsure.stg_apr"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "presentation", "pricing", "pricing"], "unique_id": "model.iginsure.pricing", "raw_code": "with latest_activity_id as (\r\n\r\n    select * from {{ref('stg_latest_activity_per_policy')}}\r\n\r\n),\r\n\r\n\r\nlatest_activity_id_renewal as (\r\n\r\n\r\n    -- for every renewal policy \r\n    -- in the renewal policy id, get the latest activity\r\n    -- so in the cte , you have the renewal policy id with its latest activity\r\n\r\n    -- the renewal policy id will be the same for all  the acitivtes\r\n\r\n    select * from {{ref('stg_latest_activity_per_renewal_policy')}}\r\n\r\n),\r\n\r\ndmn_inward_claim as (\r\n\r\n    select * from {{ref('dmn_claim')}}\r\n\r\n),\r\n\r\ndmn_policy_part as (\r\n\r\n    -- mapping certain lobs to match with business plan\r\n    select *, case when line_product_name in ('INWARDS PPN','MR','INWARDS XOL') then 'reinsurance'\r\n                   when line_product_name in ('MARINE TRADE','MARINE LIABILITY') then 'marine'\r\n                   when line_product_name = 'FORESTRY' then 'property'\r\n                   when line_product_name = 'FINANCIAL INSTITUTIONS' then 'fi'\r\n                   else lower(line_product_name) end as line_product_name_used\r\n     from {{ref('dmn_policy_part')}} policy_part\r\n\r\n\r\n     where policy_state not in ('Submission','Declined','Quote','NTU','Bound','Submission is Void')\r\n\r\n     and bIsSequence = -1\r\n\r\n),\r\n\r\n\r\nrenewal_policy_latest as (\r\n\r\n    -- get the latest activity related to a renewal policy , so when joining with the policy part ,\r\n        -- the result will have the latest activity per renewal policy\r\n    \r\n    select * \r\n    from dmn_policy_part policy_part\r\n    inner join latest_activity_id_renewal as latest_per_policy on latest_per_policy.latest_activity_id = policy_part.activity_id\r\n\r\n\r\n),\r\n\r\n\r\nstg_apr as (\r\n\r\n    select * from {{ref('stg_apr')}}\r\n\r\n),\r\n\r\n\r\napr_policy_line as (\r\n    select\r\n        dmn_policy_part.policy_id,\r\n        gross_igi_share_base as iw_gross,\r\n        acq_cost_base as iw_acq,\r\n        stg_apr.period_year_period\r\n    from\r\n        stg_apr\r\n        inner join dmn_policy_part on\r\n            stg_apr.apr_instance_id = dmn_policy_part.line_id\r\n            \r\n    where\r\n        stg_apr.apr_entity_type = 'Policy Line'\r\n),\r\n\r\napr_claim_movement as (\r\n    select\r\n        dmn_policy_part.policy_id,\r\n        gross_igi_share_base as iw_gross,\r\n        acq_cost_base as iw_acq,\r\n        stg_apr.period_year_period\r\n    from\r\n        stg_apr\r\n        inner join dmn_inward_claim on\r\n            stg_apr.apr_instance_id = dmn_inward_claim.claim_movement_id\r\n        inner join dmn_policy_part on\r\n            dmn_inward_claim.policy_line_id = dmn_policy_part.line_id\r\n    where\r\n        stg_apr.apr_entity_type = 'Claim Movement'\r\n        and (is_gross_igi_share = 1 or is_acq_cost = 1)\r\n),\r\n\r\n\r\napr_records as (\r\n    \r\n  select policy_id,\r\n         period_year_period,\r\n         sum(iw_gross) as iw_gross,\r\n         sum(iw_acq) as iw_acq\r\n    from (  \r\n    select * from apr_policy_line\r\n\r\n    union all\r\n\r\n    select * from apr_claim_movement)iw_g_by_policy\r\n\r\n    group by policy_id,period_year_period\r\n\r\n\r\n),\r\n\r\n\r\ndmn_policy_part_renewal as (\r\n\r\n    -- when you join with the domain policy part that has already latest activity\r\n    -- join it based on the renewal policy id = policy id from the renewal cte\r\n\r\n\r\n    -- by account period, by renwal policy , so when you join with the pricing cte on orgi policy id, renewal policy id , account period,\r\n    -- and written account period\r\n\r\n    select apr_records.period_year_period,\r\n           policy_part.policy_id,\r\n           policy_part.policy_id_renewal,\r\n           apr_records.iw_gross/(case when policy_part.igi_sgn_line = 0 then 1 else policy_part.igi_sgn_line end) as actual_gwp_100,\r\n           apr_records.iw_gross * policy_part.igi_sgn_line as actual_gwp_igi_sgn_line\r\n    from     \r\n    apr_records \r\n    inner join \r\n        (select policy_part.policy_id as policy_id, \r\n                renewal_policy_latest.policy_id as policy_id_renewal,\r\n                 renewal_policy_latest.igi_sgn_line\r\n        from dmn_policy_part policy_part\r\n        inner join latest_activity_id as latest_per_policy on latest_per_policy.latest_activity_id = policy_part.activity_id\r\n        inner join  renewal_policy_latest on renewal_policy_latest.policy_id = policy_part.renewal_policy_id)policy_part \r\n    on apr_records.policy_id = policy_part.policy_id_renewal\r\n\r\n \r\n),\r\n\r\n--pricing_renewal (\r\n\r\n  --  select *\r\n\r\n    --from apr_records\r\n\r\n    --inner join renewal_policy_latest on apr_records.policy_id = policy_part.policy_id\r\n\r\n--),\r\n\r\n\r\npricing as (\r\n\r\n    select \r\n            *,\r\n        -- iw_gross amounts , techincal , and plan percentages for each pricing types\r\n          {{pricing_types_unpiv('actual_gwp_igi_sgn_line')}}\r\n\r\n            (actual_gwp_100 ) * plan_adequacy  as plan_premium_100,\r\n\r\n            (actual_gwp_100) * technical_adequacy as technical_premium_100,\r\n            \r\n            -- plan premium_100 * igi sgn line \r\n            (actual_gwp_100 * plan_adequacy) * igi_sgn_line as plan_premium_igi_sgn_line,\r\n\r\n            -- technical premium_100 * igi sgn line \r\n            (actual_gwp_100 * technical_adequacy) * igi_sgn_line as technical_premium_igi_sgn_line,\r\n\r\n            SUM(CASE WHEN pricing_type IS NOT NULL THEN actual_gwp_100 ELSE 0 END)\r\n            OVER (PARTITION BY Reserving_Class_2) AS actual_gwp_all_types,\r\n\r\n\r\n            NULL AS pricing_gross_lr\r\n\r\n            from \r\n            \r\n            (select pricing_base.* ,\r\n                    renewal.policy_id_renewal,\r\n                    renewal.actual_gwp_100 as actual_gwp_100_renewal,\r\n                    renewal.actual_gwp_igi_sgn_line as actual_gwp_igi_sgn_line_renewal\r\n\r\n             from\r\n                (select \r\n                \r\n                policy_part.policy_id,\r\n\r\n                policy_part.policy_reference,\r\n\r\n                replace(ltrim(rtrim(policy_part.line_product_name_used)),' ', '') as line_product_name_used ,\r\n\r\n                policy_part.sub_class_segmentation,\r\n\r\n                policy_part.activity_placement_mop as mop,\r\n\r\n                policy_part.coverage_code,\r\n\r\n                policy_part.Classification,\r\n\r\n                policy_part.line_producing_office,\r\n\r\n                policy_part.insured,\r\n\r\n                policy_part.underwriter,\r\n\r\n                policy_part.renewal_policy_id,\r\n\r\n                --policy_part.Sub_Class,\r\n\r\n                CASE WHEN policy_part.line_division =  1 THEN 'London'   \r\n                    WHEN policy_part.line_division = 0 THEN 'Bermuda' \r\n                    ELSE 'Eurpoe' END AS division,\r\n\r\n                policy_part.line_subdivision as subdivision,\r\n\r\n                replace(ltrim(rtrim(policy_part.line_product_name_used)),' ', '') as lob,\r\n\r\n                replace(lower(ltrim(rtrim(policy_part.Reserving_Class_2))),' ', '') as Reserving_Class_2,\r\n\r\n                CONCAT(replace(ltrim(rtrim(policy_part.line_product_name_used)),' ', '') ,'_',replace(lower(ltrim(rtrim(policy_part.Reserving_Class_2))),' ', ''),'_',policy_part.uw_year) AS lob_resclass2_year,\r\n\r\n                apr_records.period_year_period,\r\n\r\n                eomonth(DATEFROMPARTS(LEFT(apr_records.period_year_period,4),RIGHT(apr_records.period_year_period,2),1)) AS AccountPeriod_date,\r\n\r\n                policy_part.igi_sgn_line,\r\n\r\n                policy_part.pricing_type,\r\n\r\n                policy_part.pricing_time,\r\n\r\n                policy_part.uw_year,\r\n\r\n                policy_part.policy_inception,\r\n\r\n                policy_part.policy_expiry,\r\n\r\n                policy_part.plan_adequacy,\r\n\r\n                policy_part.technical_adequacy,\r\n\r\n                policy_part.lModelSequencekey,\r\n\r\n                apr_records.iw_gross/(case when policy_part.igi_sgn_line = 0 then 1 else policy_part.igi_sgn_line end) as actual_gwp_100,\r\n\r\n                apr_records.iw_gross * policy_part.igi_sgn_line as actual_gwp_igi_sgn_line\r\n\r\n\r\n                from apr_records\r\n                inner join dmn_policy_part as policy_part on apr_records.policy_id = policy_part.policy_id\r\n                inner join latest_activity_id as latest_per_policy on latest_per_policy.latest_activity_id = policy_part.activity_id\r\n\r\n\r\n                where apr_records.period_year_period >=202004)pricing_base\r\n                \r\n                left join dmn_policy_part_renewal renewal on renewal.policy_id_renewal = pricing_base.renewal_policy_id\r\n                                                          and renewal.policy_id = pricing_base.policy_id\r\n                                                          and renewal.period_year_period = pricing_base.period_year_period\r\n\r\n                )renewal_info\r\n)\r\n\r\nselect * from pricing", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "presentation\\pricing\\pricing.sql", "original_file_path": "models\\presentation\\pricing\\pricing.sql", "name": "pricing", "alias": "pricing", "checksum": {"name": "sha256", "checksum": "1a813e4415abc05d25d3b674e6083626d1077260a702c55acea2b2aa0222194c"}, "tags": [], "refs": [["stg_latest_activity_per_policy"], ["stg_latest_activity_per_renewal_policy"], ["dmn_claim"], ["dmn_policy_part"], ["stg_apr"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\presentation\\pricing\\pricing.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "materialized": "table"}, "created_at": 1701786800.7522223, "compiled_code": "with latest_activity_id as (\n\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"stg_latest_activity_per_policy\"\n\n),\n\n\nlatest_activity_id_renewal as (\n\n\n    -- for every renewal policy \n    -- in the renewal policy id, get the latest activity\n    -- so in the cte , you have the renewal policy id with its latest activity\n\n    -- the renewal policy id will be the same for all  the acitivtes\n\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"stg_latest_activity_per_renewal_policy\"\n\n),\n\ndmn_inward_claim as (\n\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"dmn_claim\"\n\n),\n\ndmn_policy_part as (\n\n    -- mapping certain lobs to match with business plan\n    select *, case when line_product_name in ('INWARDS PPN','MR','INWARDS XOL') then 'reinsurance'\n                   when line_product_name in ('MARINE TRADE','MARINE LIABILITY') then 'marine'\n                   when line_product_name = 'FORESTRY' then 'property'\n                   when line_product_name = 'FINANCIAL INSTITUTIONS' then 'fi'\n                   else lower(line_product_name) end as line_product_name_used\n     from \"IGI_PROD_DW\".\"dbt_dev\".\"dmn_policy_part\" policy_part\n\n\n     where policy_state not in ('Submission','Declined','Quote','NTU','Bound','Submission is Void')\n\n     and bIsSequence = -1\n\n),\n\n\nrenewal_policy_latest as (\n\n    -- get the latest activity related to a renewal policy , so when joining with the policy part ,\n        -- the result will have the latest activity per renewal policy\n    \n    select * \n    from dmn_policy_part policy_part\n    inner join latest_activity_id_renewal as latest_per_policy on latest_per_policy.latest_activity_id = policy_part.activity_id\n\n\n),\n\n\nstg_apr as (\n\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"stg_apr\"\n\n),\n\n\napr_policy_line as (\n    select\n        dmn_policy_part.policy_id,\n        gross_igi_share_base as iw_gross,\n        acq_cost_base as iw_acq,\n        stg_apr.period_year_period\n    from\n        stg_apr\n        inner join dmn_policy_part on\n            stg_apr.apr_instance_id = dmn_policy_part.line_id\n            \n    where\n        stg_apr.apr_entity_type = 'Policy Line'\n),\n\napr_claim_movement as (\n    select\n        dmn_policy_part.policy_id,\n        gross_igi_share_base as iw_gross,\n        acq_cost_base as iw_acq,\n        stg_apr.period_year_period\n    from\n        stg_apr\n        inner join dmn_inward_claim on\n            stg_apr.apr_instance_id = dmn_inward_claim.claim_movement_id\n        inner join dmn_policy_part on\n            dmn_inward_claim.policy_line_id = dmn_policy_part.line_id\n    where\n        stg_apr.apr_entity_type = 'Claim Movement'\n        and (is_gross_igi_share = 1 or is_acq_cost = 1)\n),\n\n\napr_records as (\n    \n  select policy_id,\n         period_year_period,\n         sum(iw_gross) as iw_gross,\n         sum(iw_acq) as iw_acq\n    from (  \n    select * from apr_policy_line\n\n    union all\n\n    select * from apr_claim_movement)iw_g_by_policy\n\n    group by policy_id,period_year_period\n\n\n),\n\n\ndmn_policy_part_renewal as (\n\n    -- when you join with the domain policy part that has already latest activity\n    -- join it based on the renewal policy id = policy id from the renewal cte\n\n\n    -- by account period, by renwal policy , so when you join with the pricing cte on orgi policy id, renewal policy id , account period,\n    -- and written account period\n\n    select apr_records.period_year_period,\n           policy_part.policy_id,\n           policy_part.policy_id_renewal,\n           apr_records.iw_gross/(case when policy_part.igi_sgn_line = 0 then 1 else policy_part.igi_sgn_line end) as actual_gwp_100,\n           apr_records.iw_gross * policy_part.igi_sgn_line as actual_gwp_igi_sgn_line\n    from     \n    apr_records \n    inner join \n        (select policy_part.policy_id as policy_id, \n                renewal_policy_latest.policy_id as policy_id_renewal,\n                 renewal_policy_latest.igi_sgn_line\n        from dmn_policy_part policy_part\n        inner join latest_activity_id as latest_per_policy on latest_per_policy.latest_activity_id = policy_part.activity_id\n        inner join  renewal_policy_latest on renewal_policy_latest.policy_id = policy_part.renewal_policy_id)policy_part \n    on apr_records.policy_id = policy_part.policy_id_renewal\n\n \n),\n\n--pricing_renewal (\n\n  --  select *\n\n    --from apr_records\n\n    --inner join renewal_policy_latest on apr_records.policy_id = policy_part.policy_id\n\n--),\n\n\npricing as (\n\n    select \n            *,\n        -- iw_gross amounts , techincal , and plan percentages for each pricing types\n          \n\n-- run it in execute mode\n\n        --case when pricing_type = 'UW' then sum(case when pricing_type = 'UW' then actual_gwp_100 else 0 end)\n          --                                               over(partition by lob, Reserving_Class_2, pricing_type) end as UW_actual_gwp_100,\n\n        case when pricing_type = 'UW' then actual_gwp_igi_sgn_line else 0 end as UW_actual_gwp_igi_sgn_line ,\n\n        --case when pricing_type = 'UW' then sum(actual_gwp_igi_sgn_line) over (partition by Reserving_Class_2) /\n          --                                               sum() over (partition by Reserving_Class_2) \n            --                                             end as UW_plan_premium_percentage,\n\n        --case when pricing_type = 'UW' then sum(actual_gwp_igi_sgn_line) over (partition by Reserving_Class_2) /\n          --                                               sum() over (partition by Reserving_Class_2) \n            --                                             end as UW_technical_premium_percentage,\n\n        --case when pricing_type = 'ACTUARY' then sum(case when pricing_type = 'ACTUARY' then actual_gwp_100 else 0 end)\n          --                                               over(partition by lob, Reserving_Class_2, pricing_type) end as ACTUARY_actual_gwp_100,\n\n        case when pricing_type = 'ACTUARY' then actual_gwp_igi_sgn_line else 0 end as ACTUARY_actual_gwp_igi_sgn_line ,\n\n        --case when pricing_type = 'ACTUARY' then sum(actual_gwp_igi_sgn_line) over (partition by Reserving_Class_2) /\n          --                                               sum() over (partition by Reserving_Class_2) \n            --                                             end as ACTUARY_plan_premium_percentage,\n\n        --case when pricing_type = 'ACTUARY' then sum(actual_gwp_igi_sgn_line) over (partition by Reserving_Class_2) /\n          --                                               sum() over (partition by Reserving_Class_2) \n            --                                             end as ACTUARY_technical_premium_percentage,\n\n        --case when pricing_type = 'Model' then sum(case when pricing_type = 'Model' then actual_gwp_100 else 0 end)\n          --                                               over(partition by lob, Reserving_Class_2, pricing_type) end as Model_actual_gwp_100,\n\n        case when pricing_type = 'Model' then actual_gwp_igi_sgn_line else 0 end as Model_actual_gwp_igi_sgn_line ,\n\n        --case when pricing_type = 'Model' then sum(actual_gwp_igi_sgn_line) over (partition by Reserving_Class_2) /\n          --                                               sum() over (partition by Reserving_Class_2) \n            --                                             end as Model_plan_premium_percentage,\n\n        --case when pricing_type = 'Model' then sum(actual_gwp_igi_sgn_line) over (partition by Reserving_Class_2) /\n          --                                               sum() over (partition by Reserving_Class_2) \n            --                                             end as Model_technical_premium_percentage,\n\n        --case when pricing_type = 'Incomplete' then sum(case when pricing_type = 'Incomplete' then actual_gwp_100 else 0 end)\n          --                                               over(partition by lob, Reserving_Class_2, pricing_type) end as Incomplete_actual_gwp_100,\n\n        case when pricing_type = 'Incomplete' then actual_gwp_igi_sgn_line else 0 end as Incomplete_actual_gwp_igi_sgn_line ,\n\n        --case when pricing_type = 'Incomplete' then sum(actual_gwp_igi_sgn_line) over (partition by Reserving_Class_2) /\n          --                                               sum() over (partition by Reserving_Class_2) \n            --                                             end as Incomplete_plan_premium_percentage,\n\n        --case when pricing_type = 'Incomplete' then sum(actual_gwp_igi_sgn_line) over (partition by Reserving_Class_2) /\n          --                                               sum() over (partition by Reserving_Class_2) \n            --                                             end as Incomplete_technical_premium_percentage\n\n            (actual_gwp_100 ) * plan_adequacy  as plan_premium_100,\n\n            (actual_gwp_100) * technical_adequacy as technical_premium_100,\n            \n            -- plan premium_100 * igi sgn line \n            (actual_gwp_100 * plan_adequacy) * igi_sgn_line as plan_premium_igi_sgn_line,\n\n            -- technical premium_100 * igi sgn line \n            (actual_gwp_100 * technical_adequacy) * igi_sgn_line as technical_premium_igi_sgn_line,\n\n            SUM(CASE WHEN pricing_type IS NOT NULL THEN actual_gwp_100 ELSE 0 END)\n            OVER (PARTITION BY Reserving_Class_2) AS actual_gwp_all_types,\n\n\n            NULL AS pricing_gross_lr\n\n            from \n            \n            (select pricing_base.* ,\n                    renewal.policy_id_renewal,\n                    renewal.actual_gwp_100 as actual_gwp_100_renewal,\n                    renewal.actual_gwp_igi_sgn_line as actual_gwp_igi_sgn_line_renewal\n\n             from\n                (select \n                \n                policy_part.policy_id,\n\n                policy_part.policy_reference,\n\n                replace(ltrim(rtrim(policy_part.line_product_name_used)),' ', '') as line_product_name_used ,\n\n                policy_part.sub_class_segmentation,\n\n                policy_part.activity_placement_mop as mop,\n\n                policy_part.coverage_code,\n\n                policy_part.Classification,\n\n                policy_part.line_producing_office,\n\n                policy_part.insured,\n\n                policy_part.underwriter,\n\n                policy_part.renewal_policy_id,\n\n                --policy_part.Sub_Class,\n\n                CASE WHEN policy_part.line_division =  1 THEN 'London'   \n                    WHEN policy_part.line_division = 0 THEN 'Bermuda' \n                    ELSE 'Eurpoe' END AS division,\n\n                policy_part.line_subdivision as subdivision,\n\n                replace(ltrim(rtrim(policy_part.line_product_name_used)),' ', '') as lob,\n\n                replace(lower(ltrim(rtrim(policy_part.Reserving_Class_2))),' ', '') as Reserving_Class_2,\n\n                CONCAT(replace(ltrim(rtrim(policy_part.line_product_name_used)),' ', '') ,'_',replace(lower(ltrim(rtrim(policy_part.Reserving_Class_2))),' ', ''),'_',policy_part.uw_year) AS lob_resclass2_year,\n\n                apr_records.period_year_period,\n\n                eomonth(DATEFROMPARTS(LEFT(apr_records.period_year_period,4),RIGHT(apr_records.period_year_period,2),1)) AS AccountPeriod_date,\n\n                policy_part.igi_sgn_line,\n\n                policy_part.pricing_type,\n\n                policy_part.pricing_time,\n\n                policy_part.uw_year,\n\n                policy_part.policy_inception,\n\n                policy_part.policy_expiry,\n\n                policy_part.plan_adequacy,\n\n                policy_part.technical_adequacy,\n\n                policy_part.lModelSequencekey,\n\n                apr_records.iw_gross/(case when policy_part.igi_sgn_line = 0 then 1 else policy_part.igi_sgn_line end) as actual_gwp_100,\n\n                apr_records.iw_gross * policy_part.igi_sgn_line as actual_gwp_igi_sgn_line\n\n\n                from apr_records\n                inner join dmn_policy_part as policy_part on apr_records.policy_id = policy_part.policy_id\n                inner join latest_activity_id as latest_per_policy on latest_per_policy.latest_activity_id = policy_part.activity_id\n\n\n                where apr_records.period_year_period >=202004)pricing_base\n                \n                left join dmn_policy_part_renewal renewal on renewal.policy_id_renewal = pricing_base.renewal_policy_id\n                                                          and renewal.policy_id = pricing_base.policy_id\n                                                          and renewal.period_year_period = pricing_base.period_year_period\n\n                )renewal_info\n)\n\nselect * from pricing", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"pricing\""}, "model.iginsure.actuarial_all_core_filtered": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.iginsure.dbo.actuarial_all_core", "source.iginsure.dbo.actuarial_all_core_historical"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["ReservingModel"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "presentation", "reserving_model", "actuarial_all_core_filtered"], "unique_id": "model.iginsure.actuarial_all_core_filtered", "raw_code": "-- for a given control date, we want to extract a subset of AllCore which would\r\n-- represent the dataset as-at that date. We do this by first combining\r\n-- AllCore and AllCore_Historical, finding the closest Account period to our\r\n-- control date, and then filtering on that account period to get a snapshot\r\n-- of the data at that point\r\n\r\n{{\r\n  config(tags=['ReservingModel'])\r\n}}\r\n\r\nwith combined as (\r\n    select * from {{ source('dbo', 'actuarial_all_core') }}    \r\n    union all\r\n    select * from {{ source('dbo', 'actuarial_all_core_historical') }}\r\n),\r\n\r\nincepted as (\r\n    select *\r\n    from combined\r\n    where [Include / Exclude] = 'Include'\r\n),\r\n\r\nfiltered as (\r\n    select *\r\n    from incepted\r\n    where accountperiod = (\r\n        select top(1) accountperiod\r\n        from combined\r\n        -- the AllCore table uses YYYYMM as the date format,\r\n        -- so we need to truncate from YYYYMMDD\r\n        where accountperiod <= cast(\r\n            substring('{{ var('actuarial_snapshot_control_date') }}', 1, 6)\r\n            as int)\r\n        order by accountperiod desc\r\n    )\r\n)   \r\n\r\nselect * from filtered", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "presentation\\reserving_model\\actuarial_all_core_filtered.sql", "original_file_path": "models\\presentation\\reserving_model\\actuarial_all_core_filtered.sql", "name": "actuarial_all_core_filtered", "alias": "actuarial_all_core_filtered", "checksum": {"name": "sha256", "checksum": "fc2d5ede840f5a46ce39c539a02ff3d5cc5c503a4eef0e0635e51e9c14badb3f"}, "tags": ["ReservingModel"], "refs": [], "sources": [["dbo", "actuarial_all_core"], ["dbo", "actuarial_all_core_historical"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\presentation\\reserving_model\\actuarial_all_core_filtered.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "materialized": "table", "tags": ["ReservingModel"]}, "created_at": 1701786800.7634156, "compiled_code": "-- for a given control date, we want to extract a subset of AllCore which would\n-- represent the dataset as-at that date. We do this by first combining\n-- AllCore and AllCore_Historical, finding the closest Account period to our\n-- control date, and then filtering on that account period to get a snapshot\n-- of the data at that point\n\n\n\nwith combined as (\n    select * from \"IGI_PROD_DW\".\"dbo\".\"ActuarialCopy_AllCore\"    \n    union all\n    select * from \"IGI_PROD_DW\".\"dbo\".\"ActuarialCopy_AllCore_Historical\"\n),\n\nincepted as (\n    select *\n    from combined\n    where [Include / Exclude] = 'Include'\n),\n\nfiltered as (\n    select *\n    from incepted\n    where accountperiod = (\n        select top(1) accountperiod\n        from combined\n        -- the AllCore table uses YYYYMM as the date format,\n        -- so we need to truncate from YYYYMMDD\n        where accountperiod <= cast(\n            substring('20231205', 1, 6)\n            as int)\n        order by accountperiod desc\n    )\n)   \n\nselect * from filtered", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_all_core_filtered\""}, "model.iginsure.actuarial_claim_movement_clean_nb100": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.iginsure.actuarial_claim_movement_load"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["ReservingModel"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "presentation", "reserving_model", "actuarial_claim_movement_clean_nb100"], "unique_id": "model.iginsure.actuarial_claim_movement_clean_nb100", "raw_code": "-- transformations applied to the claim movement table in notebook\r\n-- 100_Curate_InitialClean.ipynb\r\n\r\n{{\r\n  config(tags=['ReservingModel'])\r\n}}\r\n\r\n\r\nselect\r\n    policy_id,\r\n    claim_id,\r\n    cast(movement_date as date) as movement_date,\r\n    cast(reinsurance_type as varchar) as reinsurance_type,\r\n    cast(loss_date as date) as loss_date,\r\n    cast(loss_date_claims_made as date) as loss_date_claims_made,\r\n    cast(reported_date as date) as reported_date,\r\n    cast(event_code as varchar) as event_code,\r\n    cast(event_type as varchar) as event_type,\r\n    cast(event_desc as varchar) as event_desc,\r\n    cast(claim_desc as varchar) as claim_desc,\r\n    cast((case\r\n            when cat_flag = 'Y' then 1\r\n            else 0\r\n        end) as bit) as is_cat,\r\n    cast((case\r\n            when nat_cat_flag = 'Y' then 1\r\n            else 0\r\n        end) as bit) as is_nat_cat,\r\n    cast(org_ccy_code as varchar) as org_ccy_code,\r\n    cast(fx_rate_ccy_per_usd as float) as fx_rate_ccy_per_usd,\r\n    cast(amount_type as varchar) as amount_type,\r\n    cast(historical_amount_usd as float) as historical_amount_usd,\r\n    cast(current_amount_usd as float) as current_amount_usd,\r\n    cast(original_amount_ccy as float) as original_amount_ccy,\r\n    cast(policy_inception_date_yq as int) as policy_inception_date_yq,\r\n    cast(claim_reporting_date_yq as int) as claim_reporting_date_yq,\r\n    cast(claim_loss_date_yq as int) as claim_loss_date_yq,\r\n    cast(\r\n        claim_loss_date_claims_made_yq as int\r\n    ) as claim_loss_date_claims_made_yq,\r\n    cast(\r\n        policy_inception_date_dev_dur_q as int\r\n    ) as policy_inception_date_dev_dur_q,\r\n    cast(\r\n        claim_reporting_date_dev_dur_q as int\r\n    ) as claim_reporting_date_dev_dur_q,\r\n    cast(\r\n        claim_loss_date_dev_dur_q as int\r\n    ) as claim_loss_date_dev_dur_q,\r\n    cast(\r\n        claim_loss_date_claims_made_dev_dur_q as int\r\n    ) as claim_loss_date_claims_made_dev_dur_q\r\nfrom {{ ref('actuarial_claim_movement_load') }}", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "presentation\\reserving_model\\actuarial_claim_movement_clean_nb100.sql", "original_file_path": "models\\presentation\\reserving_model\\actuarial_claim_movement_clean_nb100.sql", "name": "actuarial_claim_movement_clean_nb100", "alias": "actuarial_claim_movement_clean_nb100", "checksum": {"name": "sha256", "checksum": "445fbed9597731b09ac7165662b38da177487c90d51de20784ee5c41e08c027c"}, "tags": ["ReservingModel"], "refs": [["actuarial_claim_movement_load"]], "sources": [], "metrics": [], "description": "This table performs type conversions on actuarial_claim_movement_load", "columns": {"movement_date": {"name": "movement_date", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "reinsurance_type": {"name": "reinsurance_type", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "loss_date": {"name": "loss_date", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "loss_date_claims_made": {"name": "loss_date_claims_made", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "reported_date": {"name": "reported_date", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "event_code": {"name": "event_code", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "event_type": {"name": "event_type", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "event_desc": {"name": "event_desc", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "claim_desc": {"name": "claim_desc", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_cat": {"name": "is_cat", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_nat_cat": {"name": "is_nat_cat", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "org_ccy_code": {"name": "org_ccy_code", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fx_rate_ccy_per_usd": {"name": "fx_rate_ccy_per_usd", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount_type": {"name": "amount_type", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "historical_amount_usd": {"name": "historical_amount_usd", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "current_amount_usd": {"name": "current_amount_usd", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "original_amount_ccy": {"name": "original_amount_ccy", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "policy_inception_date_yq": {"name": "policy_inception_date_yq", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "claim_reporting_date_yq": {"name": "claim_reporting_date_yq", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "claim_loss_date_yq": {"name": "claim_loss_date_yq", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "claim_loss_date_claims_made_yq": {"name": "claim_loss_date_claims_made_yq", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "policy_inception_date_dev_dur_q": {"name": "policy_inception_date_dev_dur_q", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "claim_reporting_date_dev_dur_q": {"name": "claim_reporting_date_dev_dur_q", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "claim_loss_date_dev_dur_q": {"name": "claim_loss_date_dev_dur_q", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "claim_loss_date_claims_made_dev_dur_q": {"name": "claim_loss_date_claims_made_dev_dur_q", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "written_date": {"name": "written_date", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "inception_date": {"name": "inception_date", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "expiry_date": {"name": "expiry_date", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "working_line_pct": {"name": "working_line_pct", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tiv_usd": {"name": "tiv_usd", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tiv_share_usd": {"name": "tiv_share_usd", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tiv_100_usd": {"name": "tiv_100_usd", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "event_limit_100_usd": {"name": "event_limit_100_usd", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "pml_100_usd": {"name": "pml_100_usd", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "pml_share_usd": {"name": "pml_share_usd", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "iginsure://models\\presentation\\reserving_model\\docs.yml", "compiled_path": "target\\compiled\\iginsure\\models\\presentation\\reserving_model\\actuarial_claim_movement_clean_nb100.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "materialized": "table", "tags": ["ReservingModel"]}, "created_at": 1701786801.3083174, "compiled_code": "-- transformations applied to the claim movement table in notebook\n-- 100_Curate_InitialClean.ipynb\n\n\n\n\nselect\n    policy_id,\n    claim_id,\n    cast(movement_date as date) as movement_date,\n    cast(reinsurance_type as varchar) as reinsurance_type,\n    cast(loss_date as date) as loss_date,\n    cast(loss_date_claims_made as date) as loss_date_claims_made,\n    cast(reported_date as date) as reported_date,\n    cast(event_code as varchar) as event_code,\n    cast(event_type as varchar) as event_type,\n    cast(event_desc as varchar) as event_desc,\n    cast(claim_desc as varchar) as claim_desc,\n    cast((case\n            when cat_flag = 'Y' then 1\n            else 0\n        end) as bit) as is_cat,\n    cast((case\n            when nat_cat_flag = 'Y' then 1\n            else 0\n        end) as bit) as is_nat_cat,\n    cast(org_ccy_code as varchar) as org_ccy_code,\n    cast(fx_rate_ccy_per_usd as float) as fx_rate_ccy_per_usd,\n    cast(amount_type as varchar) as amount_type,\n    cast(historical_amount_usd as float) as historical_amount_usd,\n    cast(current_amount_usd as float) as current_amount_usd,\n    cast(original_amount_ccy as float) as original_amount_ccy,\n    cast(policy_inception_date_yq as int) as policy_inception_date_yq,\n    cast(claim_reporting_date_yq as int) as claim_reporting_date_yq,\n    cast(claim_loss_date_yq as int) as claim_loss_date_yq,\n    cast(\n        claim_loss_date_claims_made_yq as int\n    ) as claim_loss_date_claims_made_yq,\n    cast(\n        policy_inception_date_dev_dur_q as int\n    ) as policy_inception_date_dev_dur_q,\n    cast(\n        claim_reporting_date_dev_dur_q as int\n    ) as claim_reporting_date_dev_dur_q,\n    cast(\n        claim_loss_date_dev_dur_q as int\n    ) as claim_loss_date_dev_dur_q,\n    cast(\n        claim_loss_date_claims_made_dev_dur_q as int\n    ) as claim_loss_date_claims_made_dev_dur_q\nfrom \"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_claim_movement_load\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_claim_movement_clean_nb100\""}, "model.iginsure.actuarial_claim_movement_clean_nb110": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.iginsure.actuarial_claim_movement_clean_nb100", "model.iginsure.actuarial_policy_clean_nb100"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["ReservingModel"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "presentation", "reserving_model", "actuarial_claim_movement_clean_nb110"], "unique_id": "model.iginsure.actuarial_claim_movement_clean_nb110", "raw_code": "-- transformations applied to the claim movement table in\r\n-- notebook 110_Curate_FeatEng_Elements.ipynb\r\n-- TODO the notebook removes inception_date ... is this necessary?\r\n\r\n{{\r\n  config(tags=['ReservingModel'])\r\n}}\r\n\r\n\r\nwith\r\n\r\ncm as (\r\n    select * from {{ ref('actuarial_claim_movement_clean_nb100') }}\r\n),\r\n\r\npol as (\r\n    select * from {{ ref('actuarial_policy_clean_nb100') }}\r\n)\r\n\r\nselect\r\n    pol.*,\r\n    cm.claim_id,\r\n    cm.movement_date,\r\n    cm.reinsurance_type,\r\n    cm.loss_date,\r\n    cm.loss_date_claims_made,\r\n    cm.reported_date,\r\n    cm.event_code,\r\n    cm.event_type,\r\n    cm.event_desc,\r\n    cm.claim_desc,\r\n    cm.is_cat,\r\n    cm.is_nat_cat,\r\n    cm.org_ccy_code,\r\n    cm.fx_rate_ccy_per_usd,\r\n    cm.amount_type,\r\n    cm.historical_amount_usd,\r\n    cm.current_amount_usd,\r\n    cm.original_amount_ccy,\r\n    cm.policy_inception_date_yq,\r\n    cm.claim_reporting_date_yq,\r\n    cm.claim_loss_date_yq,\r\n    cm.claim_loss_date_claims_made_yq,\r\n    cm.policy_inception_date_dev_dur_q,\r\n    cm.claim_reporting_date_dev_dur_q,\r\n    cm.claim_loss_date_dev_dur_q,\r\n    cm.claim_loss_date_claims_made_dev_dur_q,\r\n    cast((case\r\n            when (cm.movement_date >= '2020-04-01')\r\n                and (cm.movement_date <= '2021-08-01') then 1\r\n            else 0\r\n        end) as bit) as is_lockdown,\r\n    datediff(\r\n        quarter, cm.loss_date, cm.reported_date\r\n    ) as dur_loss_to_reported,\r\n    datediff(\r\n        quarter, cm.loss_date_claims_made, cm.reported_date\r\n    ) as dur_loss_claims_made_to_reported,\r\n    datediff(\r\n        quarter, cm.loss_date, cm.movement_date\r\n    ) as dur_loss_to_movement,\r\n    datediff(\r\n        quarter, cm.loss_date_claims_made, cm.movement_date\r\n    ) as dur_loss_claims_made_to_movement,\r\n    datediff(\r\n        quarter, pol.inception_date, cm.loss_date\r\n    ) as dur_inception_to_loss,\r\n    datediff(\r\n        quarter, pol.inception_date, cm.loss_date_claims_made\r\n    ) as dur_inception_to_loss_claims_made,\r\n    datediff(\r\n        quarter, pol.inception_date, cm.movement_date\r\n    ) as dur_inception_to_movement\r\n\r\nfrom cm\r\nleft join pol\r\n    on cm.policy_id = pol.policy_id", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "presentation\\reserving_model\\actuarial_claim_movement_clean_nb110.sql", "original_file_path": "models\\presentation\\reserving_model\\actuarial_claim_movement_clean_nb110.sql", "name": "actuarial_claim_movement_clean_nb110", "alias": "actuarial_claim_movement_clean_nb110", "checksum": {"name": "sha256", "checksum": "a44153b6bf79724c87c20c778f31c8e63bd7786972f5499d5d02703e702f6345"}, "tags": ["ReservingModel"], "refs": [["actuarial_claim_movement_clean_nb100"], ["actuarial_policy_clean_nb100"]], "sources": [], "metrics": [], "description": "This table performs some calculations on top of actuarial_claim_movement_clean_nb100", "columns": {"reinsurance_type": {"name": "reinsurance_type", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount_type": {"name": "amount_type", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "iginsure://models\\presentation\\reserving_model\\docs.yml", "compiled_path": "target\\compiled\\iginsure\\models\\presentation\\reserving_model\\actuarial_claim_movement_clean_nb110.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "materialized": "table", "tags": ["ReservingModel"]}, "created_at": 1701786801.3093183, "compiled_code": "-- transformations applied to the claim movement table in\n-- notebook 110_Curate_FeatEng_Elements.ipynb\n-- TODO the notebook removes inception_date ... is this necessary?\n\n\n\n\nwith\n\ncm as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_claim_movement_clean_nb100\"\n),\n\npol as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_policy_clean_nb100\"\n)\n\nselect\n    pol.*,\n    cm.claim_id,\n    cm.movement_date,\n    cm.reinsurance_type,\n    cm.loss_date,\n    cm.loss_date_claims_made,\n    cm.reported_date,\n    cm.event_code,\n    cm.event_type,\n    cm.event_desc,\n    cm.claim_desc,\n    cm.is_cat,\n    cm.is_nat_cat,\n    cm.org_ccy_code,\n    cm.fx_rate_ccy_per_usd,\n    cm.amount_type,\n    cm.historical_amount_usd,\n    cm.current_amount_usd,\n    cm.original_amount_ccy,\n    cm.policy_inception_date_yq,\n    cm.claim_reporting_date_yq,\n    cm.claim_loss_date_yq,\n    cm.claim_loss_date_claims_made_yq,\n    cm.policy_inception_date_dev_dur_q,\n    cm.claim_reporting_date_dev_dur_q,\n    cm.claim_loss_date_dev_dur_q,\n    cm.claim_loss_date_claims_made_dev_dur_q,\n    cast((case\n            when (cm.movement_date >= '2020-04-01')\n                and (cm.movement_date <= '2021-08-01') then 1\n            else 0\n        end) as bit) as is_lockdown,\n    datediff(\n        quarter, cm.loss_date, cm.reported_date\n    ) as dur_loss_to_reported,\n    datediff(\n        quarter, cm.loss_date_claims_made, cm.reported_date\n    ) as dur_loss_claims_made_to_reported,\n    datediff(\n        quarter, cm.loss_date, cm.movement_date\n    ) as dur_loss_to_movement,\n    datediff(\n        quarter, cm.loss_date_claims_made, cm.movement_date\n    ) as dur_loss_claims_made_to_movement,\n    datediff(\n        quarter, pol.inception_date, cm.loss_date\n    ) as dur_inception_to_loss,\n    datediff(\n        quarter, pol.inception_date, cm.loss_date_claims_made\n    ) as dur_inception_to_loss_claims_made,\n    datediff(\n        quarter, pol.inception_date, cm.movement_date\n    ) as dur_inception_to_movement\n\nfrom cm\nleft join pol\n    on cm.policy_id = pol.policy_id", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_claim_movement_clean_nb110\""}, "model.iginsure.actuarial_claim_movement_gre_agg_movement_date": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.iginsure.actuarial_claim_movement_gre_filtered"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["ReservingModel"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "presentation", "reserving_model", "actuarial_claim_movement_gre_agg_movement_date"], "unique_id": "model.iginsure.actuarial_claim_movement_gre_agg_movement_date", "raw_code": "-- TODO: check if correct:\r\n--          we assume that within a group, each categorical variable has the\r\n--          same value throughout\r\n--          we could use a CTE/partition to select the first one\r\n--          (https://stackoverflow.com/a/3800572)\r\n--          but MAX should work just fine to return that value, as there is no\r\n--          order since all values are equal\r\n\r\n{{\r\n  config(tags=['ReservingModel'])\r\n}}\r\n\r\n\r\nselect\r\n    policy_id,\r\n    claim_id,\r\n    movement_date,\r\n    cast(max(cast(is_cat as int)) as bit) as is_cat,\r\n    cast(max(cast(is_nat_cat as int)) as bit) as is_nat_cat,\r\n    cast(max(cast(is_lockdown as int)) as bit) as is_lockdown,\r\n    count(*) as row_ct,\r\n    max(event_code) as event_code,\r\n    max(event_type) as event_type,\r\n    max(event_desc) as event_desc,\r\n    max(loss_date) as loss_date,\r\n    max(loss_date_claims_made) as loss_date_claims_made,\r\n    max(reported_date) as reported_date,\r\n    max(dur_inception_to_loss) as dur_inception_to_loss,\r\n    max(dur_inception_to_loss_claims_made) as dur_inception_to_loss_claims_made,\r\n    max(dur_loss_to_reported) as dur_loss_to_reported,\r\n    max(dur_loss_claims_made_to_reported) as dur_loss_claims_made_to_reported,\r\n    max(dur_loss_to_movement) as dur_loss_to_movement,\r\n    max(dur_loss_claims_made_to_movement) as dur_loss_claims_made_to_movement,\r\n    max(dur_inception_to_movement) as dur_inception_to_movement,\r\n    sum(current_amount_usd) as current_amount_usd_sum,\r\n    sum(historical_amount_usd) as historical_amount_usd_sum\r\nfrom {{ ref('actuarial_claim_movement_gre_filtered') }}\r\ngroup by policy_id, claim_id, movement_date", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "presentation\\reserving_model\\actuarial_claim_movement_gre_agg_movement_date.sql", "original_file_path": "models\\presentation\\reserving_model\\actuarial_claim_movement_gre_agg_movement_date.sql", "name": "actuarial_claim_movement_gre_agg_movement_date", "alias": "actuarial_claim_movement_gre_agg_movement_date", "checksum": {"name": "sha256", "checksum": "53a1ecfdf77b9d4e90dd7333ccc0e5cc0a32fb53662d501708c0b8b9ccc62e53"}, "tags": ["ReservingModel"], "refs": [["actuarial_claim_movement_gre_filtered"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\presentation\\reserving_model\\actuarial_claim_movement_gre_agg_movement_date.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "materialized": "table", "tags": ["ReservingModel"]}, "created_at": 1701786800.794574, "compiled_code": "-- TODO: check if correct:\n--          we assume that within a group, each categorical variable has the\n--          same value throughout\n--          we could use a CTE/partition to select the first one\n--          (https://stackoverflow.com/a/3800572)\n--          but MAX should work just fine to return that value, as there is no\n--          order since all values are equal\n\n\n\n\nselect\n    policy_id,\n    claim_id,\n    movement_date,\n    cast(max(cast(is_cat as int)) as bit) as is_cat,\n    cast(max(cast(is_nat_cat as int)) as bit) as is_nat_cat,\n    cast(max(cast(is_lockdown as int)) as bit) as is_lockdown,\n    count(*) as row_ct,\n    max(event_code) as event_code,\n    max(event_type) as event_type,\n    max(event_desc) as event_desc,\n    max(loss_date) as loss_date,\n    max(loss_date_claims_made) as loss_date_claims_made,\n    max(reported_date) as reported_date,\n    max(dur_inception_to_loss) as dur_inception_to_loss,\n    max(dur_inception_to_loss_claims_made) as dur_inception_to_loss_claims_made,\n    max(dur_loss_to_reported) as dur_loss_to_reported,\n    max(dur_loss_claims_made_to_reported) as dur_loss_claims_made_to_reported,\n    max(dur_loss_to_movement) as dur_loss_to_movement,\n    max(dur_loss_claims_made_to_movement) as dur_loss_claims_made_to_movement,\n    max(dur_inception_to_movement) as dur_inception_to_movement,\n    sum(current_amount_usd) as current_amount_usd_sum,\n    sum(historical_amount_usd) as historical_amount_usd_sum\nfrom \"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_claim_movement_gre_filtered\"\ngroup by policy_id, claim_id, movement_date", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_claim_movement_gre_agg_movement_date\""}, "model.iginsure.actuarial_claim_movement_gre_agg_movement_duration": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.iginsure.actuarial_claim_movement_gre_agg_movement_date"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["ReservingModel"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "presentation", "reserving_model", "actuarial_claim_movement_gre_agg_movement_duration"], "unique_id": "model.iginsure.actuarial_claim_movement_gre_agg_movement_duration", "raw_code": "-- TODO: check if correct:\r\n--          we assume that within a group, each categorical variable has the\r\n--          same value throughout\r\n--          we could use a CTE/partition to select the first one\r\n--          (https://stackoverflow.com/a/3800572)\r\n--          but MAX should work just fine to return that value, as there is no\r\n--          order since all values are equal\r\n\r\n--          MAX also works for movement_date_latest_in_dur since we want to pick\r\n--          the latest (largest) date in the group\r\n--          MAX also works for is_lockdown, where we want a value of TRUE if\r\n--          there is at least one TRUE value in the group\r\n\r\n{{\r\n  config(tags=['ReservingModel'])\r\n}}\r\n\r\n\r\nselect\r\n    policy_id,\r\n    claim_id,\r\n    dur_inception_to_movement,\r\n    cast(max(cast(is_lockdown as int)) as bit) as is_lockdown,\r\n    max(loss_date) as loss_date,\r\n    max(loss_date_claims_made) as loss_date_claims_made,\r\n    max(reported_date) as reported_date,\r\n    max(movement_date) as movement_date_latest_in_dur,\r\n    max(dur_inception_to_loss) as dur_inception_to_loss,\r\n    max(dur_inception_to_loss_claims_made) as dur_inception_to_loss_claims_made,\r\n    max(dur_loss_to_reported) as dur_loss_to_reported,\r\n    max(dur_loss_claims_made_to_reported) as dur_loss_claims_made_to_reported,\r\n    sum(current_amount_usd_sum) as current_amount_usd_sum,\r\n    sum(historical_amount_usd_sum) as historical_amount_usd_sum\r\nfrom {{ ref('actuarial_claim_movement_gre_agg_movement_date') }}\r\ngroup by policy_id, claim_id, dur_inception_to_movement", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "presentation\\reserving_model\\actuarial_claim_movement_gre_agg_movement_duration.sql", "original_file_path": "models\\presentation\\reserving_model\\actuarial_claim_movement_gre_agg_movement_duration.sql", "name": "actuarial_claim_movement_gre_agg_movement_duration", "alias": "actuarial_claim_movement_gre_agg_movement_duration", "checksum": {"name": "sha256", "checksum": "04cf6ca6bb016069325679b327d67879e289b48cba466f75a1aa803c5df94ea9"}, "tags": ["ReservingModel"], "refs": [["actuarial_claim_movement_gre_agg_movement_date"]], "sources": [], "metrics": [], "description": "", "columns": {"dur_inception_to_movement": {"name": "dur_inception_to_movement", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dur_inception_to_loss": {"name": "dur_inception_to_loss", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dur_inception_to_loss_claims_made": {"name": "dur_inception_to_loss_claims_made", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dur_loss_to_reported": {"name": "dur_loss_to_reported", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dur_loss_claims_made_to_reported": {"name": "dur_loss_claims_made_to_reported", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "current_amount_usd_sum": {"name": "current_amount_usd_sum", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "historical_amount_usd_sum": {"name": "historical_amount_usd_sum", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "iginsure://models\\presentation\\reserving_model\\docs.yml", "compiled_path": "target\\compiled\\iginsure\\models\\presentation\\reserving_model\\actuarial_claim_movement_gre_agg_movement_duration.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "materialized": "table", "tags": ["ReservingModel"]}, "created_at": 1701786801.3123138, "compiled_code": "-- TODO: check if correct:\n--          we assume that within a group, each categorical variable has the\n--          same value throughout\n--          we could use a CTE/partition to select the first one\n--          (https://stackoverflow.com/a/3800572)\n--          but MAX should work just fine to return that value, as there is no\n--          order since all values are equal\n\n--          MAX also works for movement_date_latest_in_dur since we want to pick\n--          the latest (largest) date in the group\n--          MAX also works for is_lockdown, where we want a value of TRUE if\n--          there is at least one TRUE value in the group\n\n\n\n\nselect\n    policy_id,\n    claim_id,\n    dur_inception_to_movement,\n    cast(max(cast(is_lockdown as int)) as bit) as is_lockdown,\n    max(loss_date) as loss_date,\n    max(loss_date_claims_made) as loss_date_claims_made,\n    max(reported_date) as reported_date,\n    max(movement_date) as movement_date_latest_in_dur,\n    max(dur_inception_to_loss) as dur_inception_to_loss,\n    max(dur_inception_to_loss_claims_made) as dur_inception_to_loss_claims_made,\n    max(dur_loss_to_reported) as dur_loss_to_reported,\n    max(dur_loss_claims_made_to_reported) as dur_loss_claims_made_to_reported,\n    sum(current_amount_usd_sum) as current_amount_usd_sum,\n    sum(historical_amount_usd_sum) as historical_amount_usd_sum\nfrom \"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_claim_movement_gre_agg_movement_date\"\ngroup by policy_id, claim_id, dur_inception_to_movement", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_claim_movement_gre_agg_movement_duration\""}, "model.iginsure.actuarial_claim_movement_gre_agg_policy": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.iginsure.actuarial_claim_movement_gre_filtered"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["ReservingModel"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "presentation", "reserving_model", "actuarial_claim_movement_gre_agg_policy"], "unique_id": "model.iginsure.actuarial_claim_movement_gre_agg_policy", "raw_code": "{{\r\n  config(tags=['ReservingModel'])\r\n}}\r\n\r\nselect\r\n    policy_id,\r\n    count(distinct(claim_id)) as claim_ct,\r\n    count(distinct(movement_date)) as movement_ct,\r\n    count(*) as row_ct,\r\n    sum(current_amount_usd) as current_amount_usd_sum,\r\n    sum(historical_amount_usd) as historical_amount_usd_sum\r\nfrom {{ ref('actuarial_claim_movement_gre_filtered') }}\r\ngroup by policy_id", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "presentation\\reserving_model\\actuarial_claim_movement_gre_agg_policy.sql", "original_file_path": "models\\presentation\\reserving_model\\actuarial_claim_movement_gre_agg_policy.sql", "name": "actuarial_claim_movement_gre_agg_policy", "alias": "actuarial_claim_movement_gre_agg_policy", "checksum": {"name": "sha256", "checksum": "c9f1f68fde30f2d509e33c863eac83d6d8f193b3e1a12b1c1522e1cf291a5ff9"}, "tags": ["ReservingModel"], "refs": [["actuarial_claim_movement_gre_filtered"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\presentation\\reserving_model\\actuarial_claim_movement_gre_agg_policy.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "materialized": "table", "tags": ["ReservingModel"]}, "created_at": 1701786800.8025792, "compiled_code": "\n\nselect\n    policy_id,\n    count(distinct(claim_id)) as claim_ct,\n    count(distinct(movement_date)) as movement_ct,\n    count(*) as row_ct,\n    sum(current_amount_usd) as current_amount_usd_sum,\n    sum(historical_amount_usd) as historical_amount_usd_sum\nfrom \"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_claim_movement_gre_filtered\"\ngroup by policy_id", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_claim_movement_gre_agg_policy\""}, "model.iginsure.actuarial_claim_movement_gre_filtered": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.iginsure.actuarial_claim_movement_clean_nb110"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["ReservingModel"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "presentation", "reserving_model", "actuarial_claim_movement_gre_filtered"], "unique_id": "model.iginsure.actuarial_claim_movement_gre_filtered", "raw_code": "{{\r\n  config(tags=['ReservingModel'])\r\n}}\r\n\r\nselect *\r\nfrom {{ ref('actuarial_claim_movement_clean_nb110') }}\r\nwhere reinsurance_type = 'Gross'", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "presentation\\reserving_model\\actuarial_claim_movement_gre_filtered.sql", "original_file_path": "models\\presentation\\reserving_model\\actuarial_claim_movement_gre_filtered.sql", "name": "actuarial_claim_movement_gre_filtered", "alias": "actuarial_claim_movement_gre_filtered", "checksum": {"name": "sha256", "checksum": "77032ec70feb32facb1551b894bdec98bdba8f75b83fbfca6ae7dc2e0353be61"}, "tags": ["ReservingModel"], "refs": [["actuarial_claim_movement_clean_nb110"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\presentation\\reserving_model\\actuarial_claim_movement_gre_filtered.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "materialized": "table", "tags": ["ReservingModel"]}, "created_at": 1701786800.8076992, "compiled_code": "\n\nselect *\nfrom \"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_claim_movement_clean_nb110\"\nwhere reinsurance_type = 'Gross'", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_claim_movement_gre_filtered\""}, "model.iginsure.actuarial_claim_movement_load": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.iginsure.dbo.actuarial_claims_data", "model.iginsure.actuarial_all_core_filtered"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["ReservingModel"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "presentation", "reserving_model", "actuarial_claim_movement_load"], "unique_id": "model.iginsure.actuarial_claim_movement_load", "raw_code": "{{\r\n  config(tags=['ReservingModel'])\r\n}}\r\n\r\nwith pol (policy_id)\r\nas (\r\n    select policyref as policy_id\r\n    from {{ ref('actuarial_all_core_filtered') }}\r\n),\r\n\r\ncm as (\r\n    select * from {{ source('dbo', 'actuarial_claims_data') }}\r\n)\r\n\r\nselect\r\n    pol.policy_id,\r\n    cm.claimreference as claim_id,\r\n    cm.control_date as movement_date,\r\n    cm.reinsurance_type as reinsurance_type,\r\n    cm.dateoflossfrom_org as loss_date,\r\n    cm.dateoflossfrom_claimsmade as loss_date_claims_made,\r\n    cm.adviseddate as reported_date,\r\n    cm.eventcd as event_code,\r\n    cm.eventtype as event_type,\r\n    cm.eventdesc as event_desc,\r\n    cm.claimdescription as claim_desc,\r\n    cm.cat_indicator as cat_flag,\r\n    cm.nat_cat_indicator as nat_cat_flag,\r\n    cm.ccy as org_ccy_code,\r\n    cm.fx as fx_rate_ccy_per_usd,\r\n    cm.amount_type as amount_type,\r\n    cm.hist_amount_accccy as historical_amount_usd,\r\n    cm.current_amount_accccy as current_amount_usd,\r\n    cm.org_amount as original_amount_ccy,\r\n    cm.orig_uw_q as policy_inception_date_yq,\r\n    cm.orig_r_q as claim_reporting_date_yq,\r\n    cm.orig_a_q as claim_loss_date_yq,\r\n    cm.orig_ar_q as claim_loss_date_claims_made_yq,\r\n    cm.dev_uw_qq as policy_inception_date_dev_dur_q,\r\n    cm.dev_r_qq as claim_reporting_date_dev_dur_q,\r\n    cm.dev_a_qq as claim_loss_date_dev_dur_q,\r\n    cm.dev_ar_qq as claim_loss_date_claims_made_dev_dur_q\r\nfrom pol\r\ninner join cm\r\n    on pol.policy_id = cm.policyref\r\n-- use the control date variable to filter the list of claims and\r\n-- get a snapshot of the claims data as-at the control date\r\nwhere convert(varchar, cm.control_date, 112) -- YYYYMMDD\r\n    <= '{{ var('actuarial_snapshot_control_date') }}'", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "presentation\\reserving_model\\actuarial_claim_movement_load.sql", "original_file_path": "models\\presentation\\reserving_model\\actuarial_claim_movement_load.sql", "name": "actuarial_claim_movement_load", "alias": "actuarial_claim_movement_load", "checksum": {"name": "sha256", "checksum": "e769f40a46de80da86e70539e0e85013f4e1d295b841ec92b85be92a0e2df4cd"}, "tags": ["ReservingModel"], "refs": [["actuarial_all_core_filtered"]], "sources": [["dbo", "actuarial_claims_data"]], "metrics": [], "description": "This table contains raw data extracted from the Actuarial_ClaimsData_Unpivoted table in the Actuarial DB (casualty claims only)", "columns": {"policy_id": {"name": "policy_id", "description": "[0-9]{6}/[01]/[YYYY]/[0]{4}", "meta": {}, "data_type": null, "quote": null, "tags": []}, "claim_id": {"name": "claim_id", "description": "GUID", "meta": {}, "data_type": null, "quote": null, "tags": []}, "movement_date": {"name": "movement_date", "description": "YYYY-MM-DD, end of month of accounting period in which movements", "meta": {}, "data_type": null, "quote": null, "tags": []}, "reinsurance_type": {"name": "reinsurance_type", "description": "{'QS', 'Gross', ....}", "meta": {}, "data_type": null, "quote": null, "tags": []}, "loss_date": {"name": "loss_date", "description": "YYYY-MM-DD, aka incident_date", "meta": {}, "data_type": null, "quote": null, "tags": []}, "loss_date_claims_made": {"name": "loss_date_claims_made", "description": "TODO has special handling, if related to facility", "meta": {}, "data_type": null, "quote": null, "tags": []}, "reported_date": {"name": "reported_date", "description": "YYYY-MM-DD  this is claims reported date aka FNOL", "meta": {}, "data_type": null, "quote": null, "tags": []}, "event_code": {"name": "event_code", "description": "event code: incl. FFB / MAD ?", "meta": {}, "data_type": null, "quote": null, "tags": []}, "event_type": {"name": "event_type", "description": "? mostly missing", "meta": {}, "data_type": null, "quote": null, "tags": []}, "event_desc": {"name": "event_desc", "description": "freetext", "meta": {}, "data_type": null, "quote": null, "tags": []}, "claim_desc": {"name": "claim_desc", "description": "freetext", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cat_flag": {"name": "cat_flag", "description": "{'Y', NULL}", "meta": {}, "data_type": null, "quote": null, "tags": []}, "nat_cat_flag": {"name": "nat_cat_flag", "description": "{'Y', NULL}", "meta": {}, "data_type": null, "quote": null, "tags": []}, "org_ccy_code": {"name": "org_ccy_code", "description": "original currency code", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fx_rate_ccy_per_usd": {"name": "fx_rate_ccy_per_usd", "description": "fx rate USD /", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount_type": {"name": "amount_type", "description": "{'Paid', 'OS'} etc sums to incurred", "meta": {}, "data_type": null, "quote": null, "tags": []}, "historical_amount_usd": {"name": "historical_amount_usd", "description": "USD amount using FX rate when claim was booked", "meta": {}, "data_type": null, "quote": null, "tags": []}, "current_amount_usd": {"name": "current_amount_usd", "description": "USD amount using FX rate at latest quarter close", "meta": {}, "data_type": null, "quote": null, "tags": []}, "original_amount_ccy": {"name": "original_amount_ccy", "description": "currency amounts", "meta": {}, "data_type": null, "quote": null, "tags": []}, "policy_inception_date_yq": {"name": "policy_inception_date_yq", "description": "origin policy inception date year & quarter YYYYQ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "claim_reporting_date_yq": {"name": "claim_reporting_date_yq", "description": "origin claim reporting date year & quarter YYYYQ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "claim_loss_date_yq": {"name": "claim_loss_date_yq", "description": "origin claim loss date year & quarter YYYYQ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "claim_loss_date_claims_made_yq": {"name": "claim_loss_date_claims_made_yq", "description": "origin claim loss date claims made year & quarter YYYYQ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "policy_inception_date_dev_dur_q": {"name": "policy_inception_date_dev_dur_q", "description": "duration (quarters)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "claim_reporting_date_dev_dur_q": {"name": "claim_reporting_date_dev_dur_q", "description": "duration (quarters)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "claim_loss_date_dev_dur_q": {"name": "claim_loss_date_dev_dur_q", "description": "duration (quarters)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "claim_loss_date_claims_made_dev_dur_q": {"name": "claim_loss_date_claims_made_dev_dur_q", "description": "duration (quarters)", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "iginsure://models\\presentation\\reserving_model\\docs.yml", "compiled_path": "target\\compiled\\iginsure\\models\\presentation\\reserving_model\\actuarial_claim_movement_load.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "materialized": "table", "tags": ["ReservingModel"]}, "created_at": 1701786801.216805, "compiled_code": "\n\nwith pol (policy_id)\nas (\n    select policyref as policy_id\n    from \"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_all_core_filtered\"\n),\n\ncm as (\n    select * from \"IGI_PROD_DW\".\"dbo\".\"ActuarialCopy_ClaimsData_Unpivoted\"\n)\n\nselect\n    pol.policy_id,\n    cm.claimreference as claim_id,\n    cm.control_date as movement_date,\n    cm.reinsurance_type as reinsurance_type,\n    cm.dateoflossfrom_org as loss_date,\n    cm.dateoflossfrom_claimsmade as loss_date_claims_made,\n    cm.adviseddate as reported_date,\n    cm.eventcd as event_code,\n    cm.eventtype as event_type,\n    cm.eventdesc as event_desc,\n    cm.claimdescription as claim_desc,\n    cm.cat_indicator as cat_flag,\n    cm.nat_cat_indicator as nat_cat_flag,\n    cm.ccy as org_ccy_code,\n    cm.fx as fx_rate_ccy_per_usd,\n    cm.amount_type as amount_type,\n    cm.hist_amount_accccy as historical_amount_usd,\n    cm.current_amount_accccy as current_amount_usd,\n    cm.org_amount as original_amount_ccy,\n    cm.orig_uw_q as policy_inception_date_yq,\n    cm.orig_r_q as claim_reporting_date_yq,\n    cm.orig_a_q as claim_loss_date_yq,\n    cm.orig_ar_q as claim_loss_date_claims_made_yq,\n    cm.dev_uw_qq as policy_inception_date_dev_dur_q,\n    cm.dev_r_qq as claim_reporting_date_dev_dur_q,\n    cm.dev_a_qq as claim_loss_date_dev_dur_q,\n    cm.dev_ar_qq as claim_loss_date_claims_made_dev_dur_q\nfrom pol\ninner join cm\n    on pol.policy_id = cm.policyref\n-- use the control date variable to filter the list of claims and\n-- get a snapshot of the claims data as-at the control date\nwhere convert(varchar, cm.control_date, 112) -- YYYYMMDD\n    <= '20231205'", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_claim_movement_load\""}, "model.iginsure.actuarial_claim_movement_nre_agg_movement_date": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.iginsure.actuarial_claim_movement_nre_filtered"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["ReservingModel"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "presentation", "reserving_model", "actuarial_claim_movement_nre_agg_movement_date"], "unique_id": "model.iginsure.actuarial_claim_movement_nre_agg_movement_date", "raw_code": "-- TODO: check if correct:\r\n--          we assume that within a group, each categorical variable has the\r\n--          same value throughout\r\n--          we could use a CTE/partition to select the first one\r\n--          (https://stackoverflow.com/a/3800572)\r\n--          but MAX should work just fine to return that value, as there is no\r\n--          order since all values are equal\r\n\r\n{{\r\n  config(tags=['ReservingModel'])\r\n}}\r\n\r\n\r\nselect\r\n    policy_id,\r\n    claim_id,\r\n    movement_date,\r\n    cast(max(cast(is_cat as int)) as bit) as is_cat,\r\n    cast(max(cast(is_nat_cat as int)) as bit) as is_nat_cat,\r\n    cast(max(cast(is_lockdown as int)) as bit) as is_lockdown,\r\n    count(*) as row_ct,\r\n    max(event_code) as event_code,\r\n    max(event_type) as event_type,\r\n    max(event_desc) as event_desc,\r\n    max(loss_date) as loss_date,\r\n    max(loss_date_claims_made) as loss_date_claims_made,\r\n    max(reported_date) as reported_date,\r\n    max(dur_inception_to_loss) as dur_inception_to_loss,\r\n    max(dur_inception_to_loss_claims_made) as dur_inception_to_loss_claims_made,\r\n    max(dur_loss_to_reported) as dur_loss_to_reported,\r\n    max(dur_loss_claims_made_to_reported) as dur_loss_claims_made_to_reported,\r\n    max(dur_loss_to_movement) as dur_loss_to_movement,\r\n    max(dur_loss_claims_made_to_movement) as dur_loss_claims_made_to_movement,\r\n    max(dur_inception_to_movement) as dur_inception_to_movement,\r\n    sum(current_amount_usd) as current_amount_usd_sum,\r\n    sum(historical_amount_usd) as historical_amount_usd_sum\r\nfrom {{ ref('actuarial_claim_movement_nre_filtered') }}\r\ngroup by policy_id, claim_id, movement_date", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "presentation\\reserving_model\\actuarial_claim_movement_nre_agg_movement_date.sql", "original_file_path": "models\\presentation\\reserving_model\\actuarial_claim_movement_nre_agg_movement_date.sql", "name": "actuarial_claim_movement_nre_agg_movement_date", "alias": "actuarial_claim_movement_nre_agg_movement_date", "checksum": {"name": "sha256", "checksum": "f1e7eab70f633f3b6e59f8fb73f448f6f06706d15759ee2761060572def6e57f"}, "tags": ["ReservingModel"], "refs": [["actuarial_claim_movement_nre_filtered"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\presentation\\reserving_model\\actuarial_claim_movement_nre_agg_movement_date.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "materialized": "table", "tags": ["ReservingModel"]}, "created_at": 1701786800.8213656, "compiled_code": "-- TODO: check if correct:\n--          we assume that within a group, each categorical variable has the\n--          same value throughout\n--          we could use a CTE/partition to select the first one\n--          (https://stackoverflow.com/a/3800572)\n--          but MAX should work just fine to return that value, as there is no\n--          order since all values are equal\n\n\n\n\nselect\n    policy_id,\n    claim_id,\n    movement_date,\n    cast(max(cast(is_cat as int)) as bit) as is_cat,\n    cast(max(cast(is_nat_cat as int)) as bit) as is_nat_cat,\n    cast(max(cast(is_lockdown as int)) as bit) as is_lockdown,\n    count(*) as row_ct,\n    max(event_code) as event_code,\n    max(event_type) as event_type,\n    max(event_desc) as event_desc,\n    max(loss_date) as loss_date,\n    max(loss_date_claims_made) as loss_date_claims_made,\n    max(reported_date) as reported_date,\n    max(dur_inception_to_loss) as dur_inception_to_loss,\n    max(dur_inception_to_loss_claims_made) as dur_inception_to_loss_claims_made,\n    max(dur_loss_to_reported) as dur_loss_to_reported,\n    max(dur_loss_claims_made_to_reported) as dur_loss_claims_made_to_reported,\n    max(dur_loss_to_movement) as dur_loss_to_movement,\n    max(dur_loss_claims_made_to_movement) as dur_loss_claims_made_to_movement,\n    max(dur_inception_to_movement) as dur_inception_to_movement,\n    sum(current_amount_usd) as current_amount_usd_sum,\n    sum(historical_amount_usd) as historical_amount_usd_sum\nfrom \"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_claim_movement_nre_filtered\"\ngroup by policy_id, claim_id, movement_date", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_claim_movement_nre_agg_movement_date\""}, "model.iginsure.actuarial_claim_movement_nre_agg_movement_duration": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.iginsure.actuarial_claim_movement_nre_agg_movement_date"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["ReservingModel"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "presentation", "reserving_model", "actuarial_claim_movement_nre_agg_movement_duration"], "unique_id": "model.iginsure.actuarial_claim_movement_nre_agg_movement_duration", "raw_code": "-- TODO: check if correct:\r\n--          we assume that within a group, each categorical variable has the\r\n--          same value throughout\r\n--          we could use a CTE/partition to select the first one\r\n--          (https://stackoverflow.com/a/3800572)\r\n--          but MAX should work just fine to return that value, as there is no\r\n--          order since all values are equal\r\n\r\n--          MAX also works for movement_date_latest_in_dur since we want to pick\r\n--          the latest (largest) date in the group\r\n--          MAX also works for is_lockdown, where we want a value of TRUE if\r\n--          there is at least one TRUE value in the group\r\n\r\n{{\r\n  config(tags=['ReservingModel'])\r\n}}\r\n\r\n\r\nselect\r\n    policy_id,\r\n    claim_id,\r\n    dur_inception_to_movement,\r\n    cast(max(cast(is_lockdown as int)) as bit) as is_lockdown,\r\n    max(loss_date) as loss_date,\r\n    max(loss_date_claims_made) as loss_date_claims_made,\r\n    max(reported_date) as reported_date,\r\n    max(movement_date) as movement_date_latest_in_dur,\r\n    max(dur_inception_to_loss) as dur_inception_to_loss,\r\n    max(dur_inception_to_loss_claims_made) as dur_inception_to_loss_claims_made,\r\n    max(dur_loss_to_reported) as dur_loss_to_reported,\r\n    max(dur_loss_claims_made_to_reported) as dur_loss_claims_made_to_reported,\r\n    sum(current_amount_usd_sum) as current_amount_usd_sum,\r\n    sum(historical_amount_usd_sum) as historical_amount_usd_sum\r\nfrom {{ ref('actuarial_claim_movement_nre_agg_movement_date') }}\r\ngroup by policy_id, claim_id, dur_inception_to_movement", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "presentation\\reserving_model\\actuarial_claim_movement_nre_agg_movement_duration.sql", "original_file_path": "models\\presentation\\reserving_model\\actuarial_claim_movement_nre_agg_movement_duration.sql", "name": "actuarial_claim_movement_nre_agg_movement_duration", "alias": "actuarial_claim_movement_nre_agg_movement_duration", "checksum": {"name": "sha256", "checksum": "08aeb035d7f03fc2f598c4ee8a5daf947455833d4205b8f96516c3db9055e65b"}, "tags": ["ReservingModel"], "refs": [["actuarial_claim_movement_nre_agg_movement_date"]], "sources": [], "metrics": [], "description": "", "columns": {"dur_inception_to_movement": {"name": "dur_inception_to_movement", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dur_inception_to_loss": {"name": "dur_inception_to_loss", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dur_inception_to_loss_claims_made": {"name": "dur_inception_to_loss_claims_made", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dur_loss_to_reported": {"name": "dur_loss_to_reported", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dur_loss_claims_made_to_reported": {"name": "dur_loss_claims_made_to_reported", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "current_amount_usd_sum": {"name": "current_amount_usd_sum", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "historical_amount_usd_sum": {"name": "historical_amount_usd_sum", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "iginsure://models\\presentation\\reserving_model\\docs.yml", "compiled_path": "target\\compiled\\iginsure\\models\\presentation\\reserving_model\\actuarial_claim_movement_nre_agg_movement_duration.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "materialized": "table", "tags": ["ReservingModel"]}, "created_at": 1701786801.3143575, "compiled_code": "-- TODO: check if correct:\n--          we assume that within a group, each categorical variable has the\n--          same value throughout\n--          we could use a CTE/partition to select the first one\n--          (https://stackoverflow.com/a/3800572)\n--          but MAX should work just fine to return that value, as there is no\n--          order since all values are equal\n\n--          MAX also works for movement_date_latest_in_dur since we want to pick\n--          the latest (largest) date in the group\n--          MAX also works for is_lockdown, where we want a value of TRUE if\n--          there is at least one TRUE value in the group\n\n\n\n\nselect\n    policy_id,\n    claim_id,\n    dur_inception_to_movement,\n    cast(max(cast(is_lockdown as int)) as bit) as is_lockdown,\n    max(loss_date) as loss_date,\n    max(loss_date_claims_made) as loss_date_claims_made,\n    max(reported_date) as reported_date,\n    max(movement_date) as movement_date_latest_in_dur,\n    max(dur_inception_to_loss) as dur_inception_to_loss,\n    max(dur_inception_to_loss_claims_made) as dur_inception_to_loss_claims_made,\n    max(dur_loss_to_reported) as dur_loss_to_reported,\n    max(dur_loss_claims_made_to_reported) as dur_loss_claims_made_to_reported,\n    sum(current_amount_usd_sum) as current_amount_usd_sum,\n    sum(historical_amount_usd_sum) as historical_amount_usd_sum\nfrom \"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_claim_movement_nre_agg_movement_date\"\ngroup by policy_id, claim_id, dur_inception_to_movement", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_claim_movement_nre_agg_movement_duration\""}, "model.iginsure.actuarial_claim_movement_nre_agg_policy": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.iginsure.actuarial_claim_movement_nre_filtered"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["ReservingModel"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "presentation", "reserving_model", "actuarial_claim_movement_nre_agg_policy"], "unique_id": "model.iginsure.actuarial_claim_movement_nre_agg_policy", "raw_code": "{{\r\n  config(tags=['ReservingModel'])\r\n}}\r\n\r\nselect\r\n    policy_id,\r\n    count(distinct(claim_id)) as claim_ct,\r\n    count(distinct(movement_date)) as movement_ct,\r\n    count(*) as row_ct,\r\n    sum(current_amount_usd) as current_amount_usd_sum,\r\n    sum(historical_amount_usd) as historical_amount_usd_sum\r\nfrom {{ ref('actuarial_claim_movement_nre_filtered') }}\r\ngroup by policy_id", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "presentation\\reserving_model\\actuarial_claim_movement_nre_agg_policy.sql", "original_file_path": "models\\presentation\\reserving_model\\actuarial_claim_movement_nre_agg_policy.sql", "name": "actuarial_claim_movement_nre_agg_policy", "alias": "actuarial_claim_movement_nre_agg_policy", "checksum": {"name": "sha256", "checksum": "07f94740cdb2457310842138758ed565349842a58cd5c3ac94685f7d936733d1"}, "tags": ["ReservingModel"], "refs": [["actuarial_claim_movement_nre_filtered"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\presentation\\reserving_model\\actuarial_claim_movement_nre_agg_policy.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "materialized": "table", "tags": ["ReservingModel"]}, "created_at": 1701786800.8284042, "compiled_code": "\n\nselect\n    policy_id,\n    count(distinct(claim_id)) as claim_ct,\n    count(distinct(movement_date)) as movement_ct,\n    count(*) as row_ct,\n    sum(current_amount_usd) as current_amount_usd_sum,\n    sum(historical_amount_usd) as historical_amount_usd_sum\nfrom \"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_claim_movement_nre_filtered\"\ngroup by policy_id", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_claim_movement_nre_agg_policy\""}, "model.iginsure.actuarial_claim_movement_nre_filtered": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.iginsure.actuarial_claim_movement_clean_nb110"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["ReservingModel"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "presentation", "reserving_model", "actuarial_claim_movement_nre_filtered"], "unique_id": "model.iginsure.actuarial_claim_movement_nre_filtered", "raw_code": "{{\r\n  config(tags=['ReservingModel'])\r\n}}\r\n\r\n-- this filtering is no longer required because we're now including XOL too\r\n\r\nselect *\r\nfrom {{ ref('actuarial_claim_movement_clean_nb110') }}", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "presentation\\reserving_model\\actuarial_claim_movement_nre_filtered.sql", "original_file_path": "models\\presentation\\reserving_model\\actuarial_claim_movement_nre_filtered.sql", "name": "actuarial_claim_movement_nre_filtered", "alias": "actuarial_claim_movement_nre_filtered", "checksum": {"name": "sha256", "checksum": "12ca09c76926bdfa0c8880ca19d0d4761d86e22d4263e4f6beb406b23b8f4c34"}, "tags": ["ReservingModel"], "refs": [["actuarial_claim_movement_clean_nb110"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\presentation\\reserving_model\\actuarial_claim_movement_nre_filtered.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "materialized": "table", "tags": ["ReservingModel"]}, "created_at": 1701786800.8304791, "compiled_code": "\n\n-- this filtering is no longer required because we're now including XOL too\n\nselect *\nfrom \"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_claim_movement_clean_nb110\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_claim_movement_nre_filtered\""}, "model.iginsure.actuarial_earned_premium_clean_nb100": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.iginsure.actuarial_earned_premium_load"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["ReservingModel"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "presentation", "reserving_model", "actuarial_earned_premium_clean_nb100"], "unique_id": "model.iginsure.actuarial_earned_premium_clean_nb100", "raw_code": "-- transformations applied to the premium earning table in notebook\r\n-- 100_Curate_InitialClean.ipynb\r\n\r\n{{\r\n  config(tags=['ReservingModel'])\r\n}}\r\n\r\nwith premium as (\r\n    select * from {{ ref('actuarial_earned_premium_load') }}\r\n),\r\n\r\nrenaming as (\r\n    select\r\n        policy_id,\r\n        earning_qtr,\r\n        cast(is_earned as bit) as is_earned,\r\n        cast(gross_earned_premium as float) as gross_earned_premium,\r\n        cast(inward_acquisition_cost as float) as gross_earned_premium_acq,\r\n        --TODO confirm that there are no agency fees\r\n        cast(quota_share_premium as float) as qs_earned_premium,\r\n        cast(quota_share_acquisition as float) as qs_earned_premium_acq,\r\n        cast(fac_premium as float) as fac_earned_premium,\r\n        cast(fac_acquisition as float) as fac_earned_premium_acq,\r\n        cast(allocated_xol_cost as float) as xol_premium_allocated_acq\r\n    from premium\r\n),\r\n\r\nadding_xol_flag as (\r\n    select\r\n        policy_id,\r\n        earning_qtr,\r\n        is_earned,\r\n        cast((\r\n            case\r\n                when xol_premium_allocated_acq is null then 0\r\n                else 1\r\n            end\r\n        )\r\n        as bit) as is_xol,\r\n        gross_earned_premium,\r\n        gross_earned_premium_acq,\r\n        qs_earned_premium,\r\n        qs_earned_premium_acq,\r\n        fac_earned_premium,\r\n        fac_earned_premium_acq,\r\n        isnull(xol_premium_allocated_acq, 0) as xol_premium_allocated_acq \r\n    from renaming\r\n)\r\n\r\nselect * from adding_xol_flag", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "presentation\\reserving_model\\actuarial_earned_premium_clean_nb100.sql", "original_file_path": "models\\presentation\\reserving_model\\actuarial_earned_premium_clean_nb100.sql", "name": "actuarial_earned_premium_clean_nb100", "alias": "actuarial_earned_premium_clean_nb100", "checksum": {"name": "sha256", "checksum": "29f485dda924923c7de78284973ac91741a3a16d457c02630703fdec911e6a10"}, "tags": ["ReservingModel"], "refs": [["actuarial_earned_premium_load"]], "sources": [], "metrics": [], "description": "This table performs type conversions on actuarial_earned_premium_load", "columns": {"gross_earned_premium": {"name": "gross_earned_premium", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "inward_acquisition_cost": {"name": "inward_acquisition_cost", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "quota_share_premium": {"name": "quota_share_premium", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "quota_share_acquisition": {"name": "quota_share_acquisition", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fac_premium": {"name": "fac_premium", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fac_acquisition": {"name": "fac_acquisition", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "allocated_xol_cost": {"name": "allocated_xol_cost", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "iginsure://models\\presentation\\reserving_model\\docs.yml", "compiled_path": "target\\compiled\\iginsure\\models\\presentation\\reserving_model\\actuarial_earned_premium_clean_nb100.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "materialized": "table", "tags": ["ReservingModel"]}, "created_at": 1701786801.2461905, "compiled_code": "-- transformations applied to the premium earning table in notebook\n-- 100_Curate_InitialClean.ipynb\n\n\n\nwith premium as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_earned_premium_load\"\n),\n\nrenaming as (\n    select\n        policy_id,\n        earning_qtr,\n        cast(is_earned as bit) as is_earned,\n        cast(gross_earned_premium as float) as gross_earned_premium,\n        cast(inward_acquisition_cost as float) as gross_earned_premium_acq,\n        --TODO confirm that there are no agency fees\n        cast(quota_share_premium as float) as qs_earned_premium,\n        cast(quota_share_acquisition as float) as qs_earned_premium_acq,\n        cast(fac_premium as float) as fac_earned_premium,\n        cast(fac_acquisition as float) as fac_earned_premium_acq,\n        cast(allocated_xol_cost as float) as xol_premium_allocated_acq\n    from premium\n),\n\nadding_xol_flag as (\n    select\n        policy_id,\n        earning_qtr,\n        is_earned,\n        cast((\n            case\n                when xol_premium_allocated_acq is null then 0\n                else 1\n            end\n        )\n        as bit) as is_xol,\n        gross_earned_premium,\n        gross_earned_premium_acq,\n        qs_earned_premium,\n        qs_earned_premium_acq,\n        fac_earned_premium,\n        fac_earned_premium_acq,\n        isnull(xol_premium_allocated_acq, 0) as xol_premium_allocated_acq \n    from renaming\n)\n\nselect * from adding_xol_flag", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_earned_premium_clean_nb100\""}, "model.iginsure.actuarial_earned_premium_clean_nb110": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.iginsure.actuarial_earned_premium_clean_nb100"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["ReservingModel"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "presentation", "reserving_model", "actuarial_earned_premium_clean_nb110"], "unique_id": "model.iginsure.actuarial_earned_premium_clean_nb110", "raw_code": "-- transformations applied to the premium earning table in\r\n-- notebook 110_Curate_FeatEng_Elements.ipynb\r\n\r\n{{\r\n  config(tags=['ReservingModel'])\r\n}}\r\n\r\nwith premium as (\r\n    select * from {{ ref('actuarial_earned_premium_clean_nb100') }}\r\n),\r\n\r\nadding_csum as (\r\n    select\r\n        *,\r\n\r\n        sum(gross_earned_premium)\r\n        over (partition by policy_id order by earning_qtr)\r\n        as gross_earned_premium_csum,\r\n\r\n        sum(gross_earned_premium_acq)\r\n        over (partition by policy_id order by earning_qtr)\r\n        as gross_earned_premium_acq_csum,\r\n\r\n        sum(qs_earned_premium)\r\n        over (partition by policy_id order by earning_qtr)\r\n        as qs_earned_premium_csum,\r\n\r\n        sum(qs_earned_premium_acq)\r\n        over (partition by policy_id order by earning_qtr)\r\n        as qs_earned_premium_acq_csum,\r\n\r\n        sum(fac_earned_premium)\r\n        over (partition by policy_id order by earning_qtr)\r\n        as fac_earned_premium_csum,\r\n\r\n        sum(fac_earned_premium_acq)\r\n        over (partition by policy_id order by earning_qtr)\r\n        as fac_earned_premium_acq_csum,\r\n\r\n        sum(xol_premium_allocated_acq)\r\n        over (partition by policy_id order by earning_qtr)\r\n        as xol_premium_allocated_acq_csum\r\n    from premium\r\n)\r\n\r\nselect\r\n    *,\r\n    -- GWP net of primary acquisition\r\n    (gross_earned_premium - gross_earned_premium_acq) as gwp_ma,\r\n    -- GWP net of primary and reinsurance acquisition costs\r\n    (\r\n        (gross_earned_premium - gross_earned_premium_acq)\r\n        - (qs_earned_premium - qs_earned_premium_acq)\r\n        - (fac_earned_premium - fac_earned_premium_acq)\r\n        - xol_premium_allocated_acq\r\n    ) as gwp_maa,\r\n    -- cumulative GWP net of primary acquisition\r\n    (gross_earned_premium_csum - gross_earned_premium_acq_csum) as gwp_ma_csum,\r\n    -- cumulative GWP net of primary and reinsurance acquisition costs\r\n    (\r\n        (gross_earned_premium_csum - gross_earned_premium_acq_csum)\r\n        - (qs_earned_premium_csum - qs_earned_premium_acq_csum)\r\n        - (fac_earned_premium_csum - fac_earned_premium_acq_csum)\r\n        - xol_premium_allocated_acq_csum\r\n    ) as gwp_maa_csum\r\nfrom adding_csum", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "presentation\\reserving_model\\actuarial_earned_premium_clean_nb110.sql", "original_file_path": "models\\presentation\\reserving_model\\actuarial_earned_premium_clean_nb110.sql", "name": "actuarial_earned_premium_clean_nb110", "alias": "actuarial_earned_premium_clean_nb110", "checksum": {"name": "sha256", "checksum": "30da9d60024a11599a5a089e3c1acffed4328d232a426b0993e4721e7c0e25ad"}, "tags": ["ReservingModel"], "refs": [["actuarial_earned_premium_clean_nb100"]], "sources": [], "metrics": [], "description": "This table performs some calculations on top of actuarial_earned_premium_clean_nb100", "columns": {"gross_earned_premium": {"name": "gross_earned_premium", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "iginsure://models\\presentation\\reserving_model\\docs.yml", "compiled_path": "target\\compiled\\iginsure\\models\\presentation\\reserving_model\\actuarial_earned_premium_clean_nb110.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "materialized": "table", "tags": ["ReservingModel"]}, "created_at": 1701786801.3103142, "compiled_code": "-- transformations applied to the premium earning table in\n-- notebook 110_Curate_FeatEng_Elements.ipynb\n\n\n\nwith premium as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_earned_premium_clean_nb100\"\n),\n\nadding_csum as (\n    select\n        *,\n\n        sum(gross_earned_premium)\n        over (partition by policy_id order by earning_qtr)\n        as gross_earned_premium_csum,\n\n        sum(gross_earned_premium_acq)\n        over (partition by policy_id order by earning_qtr)\n        as gross_earned_premium_acq_csum,\n\n        sum(qs_earned_premium)\n        over (partition by policy_id order by earning_qtr)\n        as qs_earned_premium_csum,\n\n        sum(qs_earned_premium_acq)\n        over (partition by policy_id order by earning_qtr)\n        as qs_earned_premium_acq_csum,\n\n        sum(fac_earned_premium)\n        over (partition by policy_id order by earning_qtr)\n        as fac_earned_premium_csum,\n\n        sum(fac_earned_premium_acq)\n        over (partition by policy_id order by earning_qtr)\n        as fac_earned_premium_acq_csum,\n\n        sum(xol_premium_allocated_acq)\n        over (partition by policy_id order by earning_qtr)\n        as xol_premium_allocated_acq_csum\n    from premium\n)\n\nselect\n    *,\n    -- GWP net of primary acquisition\n    (gross_earned_premium - gross_earned_premium_acq) as gwp_ma,\n    -- GWP net of primary and reinsurance acquisition costs\n    (\n        (gross_earned_premium - gross_earned_premium_acq)\n        - (qs_earned_premium - qs_earned_premium_acq)\n        - (fac_earned_premium - fac_earned_premium_acq)\n        - xol_premium_allocated_acq\n    ) as gwp_maa,\n    -- cumulative GWP net of primary acquisition\n    (gross_earned_premium_csum - gross_earned_premium_acq_csum) as gwp_ma_csum,\n    -- cumulative GWP net of primary and reinsurance acquisition costs\n    (\n        (gross_earned_premium_csum - gross_earned_premium_acq_csum)\n        - (qs_earned_premium_csum - qs_earned_premium_acq_csum)\n        - (fac_earned_premium_csum - fac_earned_premium_acq_csum)\n        - xol_premium_allocated_acq_csum\n    ) as gwp_maa_csum\nfrom adding_csum", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_earned_premium_clean_nb110\""}, "model.iginsure.actuarial_earned_premium_load": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.iginsure.dbo.actuarial_earned_premium", "model.iginsure.actuarial_all_core_filtered"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["ReservingModel"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "presentation", "reserving_model", "actuarial_earned_premium_load"], "unique_id": "model.iginsure.actuarial_earned_premium_load", "raw_code": "{{\r\n  config(tags=['ReservingModel'])\r\n}}\r\n\r\nwith pol (policy_id)\r\nas (\r\n    select policyref as policy_id\r\n    from {{ ref('actuarial_all_core_filtered') }}\r\n),\r\n\r\npremium as (\r\n    select *\r\n    from {{ source('dbo', 'actuarial_earned_premium') }}\r\n),\r\n\r\nfiltered_by_policy as (\r\n    select\r\n        pol.policy_id,\r\n        premium.gross_earned_premium as gross_earned_premium,\r\n        premium.gross_acq_earned_premium as inward_acquisition_cost,\r\n        --TODO confirm no agency fees included\r\n        premium.qs_earned_premium as quota_share_premium,\r\n        premium.qs_acq_earned_premium as quota_share_acquisition,\r\n        premium.fac_earned_premium as fac_premium,\r\n        premium.fac_acq_earned_premium as fac_acquisition,\r\n        premium.allocated_xol_cost as allocated_xol_cost,\r\n        -- we want to set the is_earned flag based on the control date\r\n        -- i.e. only set is_earned to true if that premium would have \r\n        -- been considerd earned as-at the control date\r\n        cast((\r\n            case\r\n                when convert(varchar, earning_quarter, 112) -- YYYYMMDD\r\n                    <= '{{ var('actuarial_snapshot_control_date') }}' then 1\r\n                else 0\r\n            end\r\n        )\r\n        as bit) as is_earned,\r\n        premium.earning_quarter as earning_qtr\r\n    from pol\r\n    inner join premium\r\n        on pol.policy_id = premium.policy_number\r\n),\r\n\r\naggregates as (\r\n    select\r\n        policy_id,\r\n        earning_qtr,\r\n        --TODO check that it's fine to use MAX\r\n        --should not make a difference since value should be the same within grp\r\n        max(cast(is_earned as int)) as is_earned,\r\n        sum(gross_earned_premium) as gross_earned_premium,\r\n        sum(inward_acquisition_cost) as inward_acquisition_cost,\r\n        sum(quota_share_premium) as quota_share_premium,\r\n        sum(quota_share_acquisition) as quota_share_acquisition,\r\n        sum(fac_premium) as fac_premium,\r\n        sum(fac_acquisition) as fac_acquisition,\r\n        sum(allocated_xol_cost) as allocated_xol_cost\r\n    from filtered_by_policy\r\n    group by policy_id, earning_qtr\r\n)\r\n\r\nselect * from aggregates", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "presentation\\reserving_model\\actuarial_earned_premium_load.sql", "original_file_path": "models\\presentation\\reserving_model\\actuarial_earned_premium_load.sql", "name": "actuarial_earned_premium_load", "alias": "actuarial_earned_premium_load", "checksum": {"name": "sha256", "checksum": "6b625d55b310868c1779d0b3c3d8a5d6b74eae3a056d0119a545b8e7e7de9c69"}, "tags": ["ReservingModel"], "refs": [["actuarial_all_core_filtered"]], "sources": [["dbo", "actuarial_earned_premium"]], "metrics": [], "description": "This table contains raw data extracted from the Earned_Premium_Data_with_XOL table in the Actuarial DB (casualty claims only)", "columns": {"policy_id": {"name": "policy_id", "description": "[0-9]{6}/[01]/[YYYY]/[0]{4}", "meta": {}, "data_type": null, "quote": null, "tags": []}, "gross_earned_premium": {"name": "gross_earned_premium", "description": "Earned GWP USD (all amounts are proportional for IGI)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "inward_acquisition_cost": {"name": "inward_acquisition_cost", "description": "acquisition costs USD, IGI operations cost", "meta": {}, "data_type": null, "quote": null, "tags": []}, "quota_share_premium": {"name": "quota_share_premium", "description": "used to calculate the amount paid by IGI for outbound RI", "meta": {}, "data_type": null, "quote": null, "tags": []}, "quota_share_acquisition": {"name": "quota_share_acquisition", "description": "used to calculate the amount paid by IGI for outbound RI", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fac_premium": {"name": "fac_premium", "description": "used to calculate the amount paid by IGI for outbound RI", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fac_acquisition": {"name": "fac_acquisition", "description": "used to calculate the amount paid by IGI for outbound RI", "meta": {}, "data_type": null, "quote": null, "tags": []}, "allocated_xol_cost": {"name": "allocated_xol_cost", "description": "used to calculate the amount paid by IGI for outbound RI", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "iginsure://models\\presentation\\reserving_model\\docs.yml", "compiled_path": "target\\compiled\\iginsure\\models\\presentation\\reserving_model\\actuarial_earned_premium_load.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "materialized": "table", "tags": ["ReservingModel"]}, "created_at": 1701786801.230563, "compiled_code": "\n\nwith pol (policy_id)\nas (\n    select policyref as policy_id\n    from \"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_all_core_filtered\"\n),\n\npremium as (\n    select *\n    from \"IGI_PROD_DW\".\"dbo\".\"ActuarialCopy_Earned_Premium_Data_with_XOL\"\n),\n\nfiltered_by_policy as (\n    select\n        pol.policy_id,\n        premium.gross_earned_premium as gross_earned_premium,\n        premium.gross_acq_earned_premium as inward_acquisition_cost,\n        --TODO confirm no agency fees included\n        premium.qs_earned_premium as quota_share_premium,\n        premium.qs_acq_earned_premium as quota_share_acquisition,\n        premium.fac_earned_premium as fac_premium,\n        premium.fac_acq_earned_premium as fac_acquisition,\n        premium.allocated_xol_cost as allocated_xol_cost,\n        -- we want to set the is_earned flag based on the control date\n        -- i.e. only set is_earned to true if that premium would have \n        -- been considerd earned as-at the control date\n        cast((\n            case\n                when convert(varchar, earning_quarter, 112) -- YYYYMMDD\n                    <= '20231205' then 1\n                else 0\n            end\n        )\n        as bit) as is_earned,\n        premium.earning_quarter as earning_qtr\n    from pol\n    inner join premium\n        on pol.policy_id = premium.policy_number\n),\n\naggregates as (\n    select\n        policy_id,\n        earning_qtr,\n        --TODO check that it's fine to use MAX\n        --should not make a difference since value should be the same within grp\n        max(cast(is_earned as int)) as is_earned,\n        sum(gross_earned_premium) as gross_earned_premium,\n        sum(inward_acquisition_cost) as inward_acquisition_cost,\n        sum(quota_share_premium) as quota_share_premium,\n        sum(quota_share_acquisition) as quota_share_acquisition,\n        sum(fac_premium) as fac_premium,\n        sum(fac_acquisition) as fac_acquisition,\n        sum(allocated_xol_cost) as allocated_xol_cost\n    from filtered_by_policy\n    group by policy_id, earning_qtr\n)\n\nselect * from aggregates", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_earned_premium_load\""}, "model.iginsure.actuarial_policy_clean_nb100": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.iginsure.actuarial_policy_load"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["ReservingModel"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "presentation", "reserving_model", "actuarial_policy_clean_nb100"], "unique_id": "model.iginsure.actuarial_policy_clean_nb100", "raw_code": "-- transformations applied to the policy table in notebook\r\n-- 100_Curate_InitialClean.ipynb\r\n\r\n{{\r\n  config(tags=['ReservingModel'])\r\n}}\r\n\r\nselect\r\n    policy_id,\r\n    cast(uw_year as int) as uw_year,\r\n    cast(mis_uw_year as date) as mis_uw_year,\r\n    cast(product as varchar) as product,\r\n    cast(class as varchar) as class,\r\n    cast(sub_class as varchar) as sub_class,\r\n    cast(coverage as varchar) as coverage,\r\n    cast(coverage_code as varchar) as coverage_code,\r\n    cast(lloyds_risk_code as varchar) as lloyds_risk_code,\r\n    cast(insured as varchar) as insured,\r\n    cast(reassured as varchar) as reassured,\r\n    cast((\r\n        case\r\n            when direct_reinsurance_flag = 'direct' then 1\r\n            when direct_reinsurance_flag = 'assumed' then 0\r\n        end\r\n        )\r\n        as bit) as is_direct,\r\n    cast(region as varchar) as region,\r\n    cast(territory as varchar) as territory,\r\n    cast(domicile_country as varchar) as domicile_country,\r\n    cast(written_date as datetime) as written_date,\r\n    cast(inception_date as datetime) as inception_date,\r\n    cast(expiry_date as datetime) as expiry_date,\r\n    cast(cancellation_date as datetime) as cancellation_date,\r\n    cast(cancellation_type as varchar) as cancellation_type,\r\n    cast(policy_status as varchar) as policy_status,\r\n    cast(activity as varchar) as activity,\r\n    cast((\r\n        case\r\n            when activity_new_vs_renewal = 'renewal' then 1\r\n            when activity_new_vs_renewal = 'new' then 0\r\n        end\r\n        )\r\n        as bit) as is_renewal,\r\n    cast(activity_status as varchar) as activity_status,\r\n    cast(placing_code as varchar) as placing_code,\r\n    cast(placing_method as varchar) as placing_method,\r\n    cast((\r\n        case\r\n            when claims_made_flag = 'YES' then 1\r\n            when claims_made_flag = 'NO' then 0\r\n        end\r\n        )\r\n        as bit) as is_claims_made,\r\n    cast(working_line_pct as float) as working_line_pct,\r\n    cast(gross_written_share as float) as gross_written_share,\r\n    cast(reserving_class_1 as varchar) as reserving_class_1,\r\n    cast(reserving_class_2 as varchar) as reserving_class_2,\r\n    cast(reserving_class_3 as varchar) as reserving_class_3,\r\n    cast(\r\n        reserving_class_xol_allocation as varchar\r\n    ) as reserving_class_xol_allocation,\r\n    cast(account_period as int) as account_period,\r\n    cast(tiv_usd as float) as tiv_usd,\r\n    cast(tiv_share_usd as float) as tiv_share_usd,\r\n    cast(tiv_100_usd as float) as tiv_100_usd,\r\n    cast(event_limit_100_usd as float) as event_limit_100_usd,\r\n    cast(pml_100_usd as float) as pml_100_usd,\r\n    cast(pml_share_usd as float) as pml_share_usd\r\nfrom {{ ref('actuarial_policy_load') }}", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "presentation\\reserving_model\\actuarial_policy_clean_nb100.sql", "original_file_path": "models\\presentation\\reserving_model\\actuarial_policy_clean_nb100.sql", "name": "actuarial_policy_clean_nb100", "alias": "actuarial_policy_clean_nb100", "checksum": {"name": "sha256", "checksum": "1fffe13de7e0473edfc64bfbb376d4fd1c22ed684230bbc3d7882a6a89faf914"}, "tags": ["ReservingModel"], "refs": [["actuarial_policy_load"]], "sources": [], "metrics": [], "description": "This table performs some data cleaning on actuarial_policy_load, and type conversions", "columns": {"uw_year": {"name": "uw_year", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "mis_uw_year": {"name": "mis_uw_year", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "class": {"name": "class", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sub_class": {"name": "sub_class", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "coverage": {"name": "coverage", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "coverage_code": {"name": "coverage_code", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "lloyds_risk_code": {"name": "lloyds_risk_code", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "insured": {"name": "insured", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "reassured": {"name": "reassured", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_direct": {"name": "is_direct", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "region": {"name": "region", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "territory": {"name": "territory", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "domicile_country": {"name": "domicile_country", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "written_date": {"name": "written_date", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "inception_date": {"name": "inception_date", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "expiry_date": {"name": "expiry_date", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cancellation_date": {"name": "cancellation_date", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cancellation_type": {"name": "cancellation_type", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "policy_status": {"name": "policy_status", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "activity": {"name": "activity", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_renewal": {"name": "is_renewal", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "activity_status": {"name": "activity_status", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "placing_code": {"name": "placing_code", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "placing_method": {"name": "placing_method", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_claims_made": {"name": "is_claims_made", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "working_line_pct": {"name": "working_line_pct", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "gross_written_share": {"name": "gross_written_share", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "reserving_class_1": {"name": "reserving_class_1", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "reserving_class_2": {"name": "reserving_class_2", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "reserving_class_3": {"name": "reserving_class_3", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "reserving_class_xol_allocation": {"name": "reserving_class_xol_allocation", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_period": {"name": "account_period", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tiv_usd": {"name": "tiv_usd", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tiv_share_usd": {"name": "tiv_share_usd", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tiv_100_usd": {"name": "tiv_100_usd", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "event_limit_100_usd": {"name": "event_limit_100_usd", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "pml_100_usd": {"name": "pml_100_usd", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "pml_share_usd": {"name": "pml_share_usd", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "iginsure://models\\presentation\\reserving_model\\docs.yml", "compiled_path": "target\\compiled\\iginsure\\models\\presentation\\reserving_model\\actuarial_policy_clean_nb100.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "materialized": "table", "tags": ["ReservingModel"]}, "created_at": 1701786801.2431872, "compiled_code": "-- transformations applied to the policy table in notebook\n-- 100_Curate_InitialClean.ipynb\n\n\n\nselect\n    policy_id,\n    cast(uw_year as int) as uw_year,\n    cast(mis_uw_year as date) as mis_uw_year,\n    cast(product as varchar) as product,\n    cast(class as varchar) as class,\n    cast(sub_class as varchar) as sub_class,\n    cast(coverage as varchar) as coverage,\n    cast(coverage_code as varchar) as coverage_code,\n    cast(lloyds_risk_code as varchar) as lloyds_risk_code,\n    cast(insured as varchar) as insured,\n    cast(reassured as varchar) as reassured,\n    cast((\n        case\n            when direct_reinsurance_flag = 'direct' then 1\n            when direct_reinsurance_flag = 'assumed' then 0\n        end\n        )\n        as bit) as is_direct,\n    cast(region as varchar) as region,\n    cast(territory as varchar) as territory,\n    cast(domicile_country as varchar) as domicile_country,\n    cast(written_date as datetime) as written_date,\n    cast(inception_date as datetime) as inception_date,\n    cast(expiry_date as datetime) as expiry_date,\n    cast(cancellation_date as datetime) as cancellation_date,\n    cast(cancellation_type as varchar) as cancellation_type,\n    cast(policy_status as varchar) as policy_status,\n    cast(activity as varchar) as activity,\n    cast((\n        case\n            when activity_new_vs_renewal = 'renewal' then 1\n            when activity_new_vs_renewal = 'new' then 0\n        end\n        )\n        as bit) as is_renewal,\n    cast(activity_status as varchar) as activity_status,\n    cast(placing_code as varchar) as placing_code,\n    cast(placing_method as varchar) as placing_method,\n    cast((\n        case\n            when claims_made_flag = 'YES' then 1\n            when claims_made_flag = 'NO' then 0\n        end\n        )\n        as bit) as is_claims_made,\n    cast(working_line_pct as float) as working_line_pct,\n    cast(gross_written_share as float) as gross_written_share,\n    cast(reserving_class_1 as varchar) as reserving_class_1,\n    cast(reserving_class_2 as varchar) as reserving_class_2,\n    cast(reserving_class_3 as varchar) as reserving_class_3,\n    cast(\n        reserving_class_xol_allocation as varchar\n    ) as reserving_class_xol_allocation,\n    cast(account_period as int) as account_period,\n    cast(tiv_usd as float) as tiv_usd,\n    cast(tiv_share_usd as float) as tiv_share_usd,\n    cast(tiv_100_usd as float) as tiv_100_usd,\n    cast(event_limit_100_usd as float) as event_limit_100_usd,\n    cast(pml_100_usd as float) as pml_100_usd,\n    cast(pml_share_usd as float) as pml_share_usd\nfrom \"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_policy_load\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_policy_clean_nb100\""}, "model.iginsure.actuarial_policy_clean_nb110": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.iginsure.actuarial_policy_clean_nb100"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["ReservingModel"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "presentation", "reserving_model", "actuarial_policy_clean_nb110"], "unique_id": "model.iginsure.actuarial_policy_clean_nb110", "raw_code": "-- transformations applied to the policy table in notebook\r\n-- 110_Curate_FeatEng_Elements.ipynb\r\n\r\n{{\r\n  config(tags=['ReservingModel'])\r\n}}\r\n\r\n\r\nwith calculating_policy_duration_days as (\r\n    select\r\n        *,\r\n        cast(uw_year as int) as uw_y,\r\n        concat('s', cast(uw_year as varchar)) as uw_ys,\r\n        datediff(dayofyear, inception_date, expiry_date) as policy_duration_days,\r\n        (2022 - year(mis_uw_year)) as years_since_mis_uw_year\r\n    from {{ ref('actuarial_policy_clean_nb100') }}\r\n)\r\n\r\nselect\r\n    *,\r\n    case\r\n        when policy_duration_days in (364, 365, 366) then '1yr'\r\n        when policy_duration_days < 364 then '<1yr'\r\n        when policy_duration_days > 366 then '>1yr'\r\n    end as policy_duration_grp\r\nfrom calculating_policy_duration_days", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "presentation\\reserving_model\\actuarial_policy_clean_nb110.sql", "original_file_path": "models\\presentation\\reserving_model\\actuarial_policy_clean_nb110.sql", "name": "actuarial_policy_clean_nb110", "alias": "actuarial_policy_clean_nb110", "checksum": {"name": "sha256", "checksum": "fb265624b0e8778abd159b5d828e5e441549ef6a05ed743e7b50d2ce8e22014c"}, "tags": ["ReservingModel"], "refs": [["actuarial_policy_clean_nb100"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\presentation\\reserving_model\\actuarial_policy_clean_nb110.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "materialized": "table", "tags": ["ReservingModel"]}, "created_at": 1701786800.8498569, "compiled_code": "-- transformations applied to the policy table in notebook\n-- 110_Curate_FeatEng_Elements.ipynb\n\n\n\n\nwith calculating_policy_duration_days as (\n    select\n        *,\n        cast(uw_year as int) as uw_y,\n        concat('s', cast(uw_year as varchar)) as uw_ys,\n        datediff(dayofyear, inception_date, expiry_date) as policy_duration_days,\n        (2022 - year(mis_uw_year)) as years_since_mis_uw_year\n    from \"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_policy_clean_nb100\"\n)\n\nselect\n    *,\n    case\n        when policy_duration_days in (364, 365, 366) then '1yr'\n        when policy_duration_days < 364 then '<1yr'\n        when policy_duration_days > 366 then '>1yr'\n    end as policy_duration_grp\nfrom calculating_policy_duration_days", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_policy_clean_nb110\""}, "model.iginsure.actuarial_policy_load": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.iginsure.actuarial_all_core_filtered"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["ReservingModel"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "presentation", "reserving_model", "actuarial_policy_load"], "unique_id": "model.iginsure.actuarial_policy_load", "raw_code": "{{\r\n  config(tags=['ReservingModel'])\r\n}}\r\n\r\nwith pol\r\nas (\r\n    select *\r\n    from {{ ref('actuarial_all_core_filtered') }}\r\n)\r\n\r\nselect\r\n    policyref as policy_id,\r\n    product as product,\r\n    uwyear as uw_year,\r\n    mis_uw_year as mis_uw_year,\r\n    class as class,\r\n    sub_class as sub_class,\r\n    coverage as coverage,\r\n    coveragecd as coverage_code,\r\n    lloydsriskcode as lloyds_risk_code,\r\n    insured as insured,\r\n    reassured as reassured,\r\n    directreinsuranceindicator as direct_reinsurance_flag,\r\n    region as region,\r\n    territory as territory,\r\n    domicilecountry as domicile_country,\r\n    datewritten as written_date,\r\n    policyinceptiondate as inception_date,\r\n    policyexpirydate as expiry_date,\r\n    cancellationdate as cancellation_date,\r\n    cancellationtype as cancellation_type,\r\n    policystatus as policy_status,\r\n    activity as activity,\r\n    activity_new_vs_renewal as activity_new_vs_renewal,\r\n    activitystatus as activity_status,\r\n    placing as placing_code,\r\n    mop as placing_method,\r\n    claims_made_flag as claims_made_flag,\r\n    [Sum of WorkingLinePer] as working_line_pct,\r\n    [Sum of GrossWrittenShare] as gross_written_share,\r\n    reservingclass1 as reserving_class_1,\r\n    reservingclass2 as reserving_class_2,\r\n    reservingclass3 as reserving_class_3,\r\n    reservingclass_xol_allocation as reserving_class_xol_allocation,\r\n    accountperiod as account_period,\r\n    [Sum of TotalSumInsuredCCY1$] as tiv_usd,\r\n    [Sum of TotalSumInsuredShareCCY1$] as tiv_share_usd,\r\n    [Sum of TotalSumInsured100$] as tiv_100_usd,\r\n    [Sum of EventLimit100$] as event_limit_100_usd,\r\n    [Sum of PML100$] as pml_100_usd,\r\n    [Sum of PMLShare$] as pml_share_usd\r\nfrom pol", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "presentation\\reserving_model\\actuarial_policy_load.sql", "original_file_path": "models\\presentation\\reserving_model\\actuarial_policy_load.sql", "name": "actuarial_policy_load", "alias": "actuarial_policy_load", "checksum": {"name": "sha256", "checksum": "25d23e4fe83755d09d4429253c9067f7225af114b109dc7a0442b50ec22419f6"}, "tags": ["ReservingModel"], "refs": [["actuarial_all_core_filtered"]], "sources": [], "metrics": [], "description": "This table contains raw data extracted from the Actuarial_AllCore table in the Actuarial DB (casualty claims only)", "columns": {"policy_id": {"name": "policy_id", "description": "[0-9]{6}/[01]/[YYYY]/[0]{4}", "meta": {}, "data_type": null, "quote": null, "tags": []}, "uw_year": {"name": "uw_year", "description": "YYYY-MM-DD", "meta": {}, "data_type": null, "quote": null, "tags": []}, "mis_uw_year": {"name": "mis_uw_year", "description": "[YYYY]   TODO: how different from uw_year?", "meta": {}, "data_type": null, "quote": null, "tags": []}, "class": {"name": "class", "description": "seems to == product", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sub_class": {"name": "sub_class", "description": "subclass, possibly freetext, contains nbsp", "meta": {}, "data_type": null, "quote": null, "tags": []}, "coverage": {"name": "coverage", "description": "TODO freetext or system generated?", "meta": {}, "data_type": null, "quote": null, "tags": []}, "coverage_code": {"name": "coverage_code", "description": "PI / GL / WC etc", "meta": {}, "data_type": null, "quote": null, "tags": []}, "lloyds_risk_code": {"name": "lloyds_risk_code", "description": "lloyds risk code", "meta": {}, "data_type": null, "quote": null, "tags": []}, "insured": {"name": "insured", "description": "freetext", "meta": {}, "data_type": null, "quote": null, "tags": []}, "reassured": {"name": "reassured", "description": "freetext", "meta": {}, "data_type": null, "quote": null, "tags": []}, "direct_reinsurance_flag": {"name": "direct_reinsurance_flag", "description": "{direct, assumed}", "meta": {}, "data_type": null, "quote": null, "tags": []}, "region": {"name": "region", "description": "equiv to continent or wide region", "meta": {}, "data_type": null, "quote": null, "tags": []}, "territory": {"name": "territory", "description": "equiv to country or smaller region", "meta": {}, "data_type": null, "quote": null, "tags": []}, "domicile_country": {"name": "domicile_country", "description": "country", "meta": {}, "data_type": null, "quote": null, "tags": []}, "written_date": {"name": "written_date", "description": "YYYY-MM-DD", "meta": {}, "data_type": null, "quote": null, "tags": []}, "inception_date": {"name": "inception_date", "description": "YYYY-MM-DD", "meta": {}, "data_type": null, "quote": null, "tags": []}, "expiry_date": {"name": "expiry_date", "description": "YYYY-MM-DD", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cancellation_date": {"name": "cancellation_date", "description": "YYYY-MM-DD", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cancellation_type": {"name": "cancellation_type", "description": "freetext", "meta": {}, "data_type": null, "quote": null, "tags": []}, "policy_status": {"name": "policy_status", "description": "status as-at extract date, not very useful", "meta": {}, "data_type": null, "quote": null, "tags": []}, "activity": {"name": "activity", "description": "as-at extract date e.g. New Business", "meta": {}, "data_type": null, "quote": null, "tags": []}, "activity_new_vs_renewal": {"name": "activity_new_vs_renewal", "description": "{'New', 'Renewal'}", "meta": {}, "data_type": null, "quote": null, "tags": []}, "activity_status": {"name": "activity_status", "description": "as-at extract date e.g Expired / Cancellation", "meta": {}, "data_type": null, "quote": null, "tags": []}, "placing_code": {"name": "placing_code", "description": "e.g. FAC PROP, FAC X/L", "meta": {}, "data_type": null, "quote": null, "tags": []}, "placing_method": {"name": "placing_method", "description": "method of placement e.g. Inwards Fac Proportional", "meta": {}, "data_type": null, "quote": null, "tags": []}, "claims_made_flag": {"name": "claims_made_flag", "description": "YES / NO", "meta": {}, "data_type": null, "quote": null, "tags": []}, "working_line_pct": {"name": "working_line_pct", "description": "contains signed line pct [0-100.]", "meta": {}, "data_type": null, "quote": null, "tags": []}, "gross_written_share": {"name": "gross_written_share", "description": "GWP. this is USD, aggregates all endorsements", "meta": {}, "data_type": null, "quote": null, "tags": []}, "reserving_class_1": {"name": "reserving_class_1", "description": "e.g. InwardXL", "meta": {}, "data_type": null, "quote": null, "tags": []}, "reserving_class_2": {"name": "reserving_class_2", "description": "e.g. InwardMedMotorEXP", "meta": {}, "data_type": null, "quote": null, "tags": []}, "reserving_class_3": {"name": "reserving_class_3", "description": "e.g. InwardMedMotorEXP", "meta": {}, "data_type": null, "quote": null, "tags": []}, "reserving_class_xol_allocation": {"name": "reserving_class_xol_allocation", "description": "e.g. InwardMedMotorEXP", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_period": {"name": "account_period", "description": "YYYYMM date of extract / as-at current until this date", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tiv_usd": {"name": "tiv_usd", "description": "TIV 1 USD. Note 'Sum of' legacy naming, not actually a sum over", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tiv_share_usd": {"name": "tiv_share_usd", "description": "TIV Share 1 USD", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tiv_100_usd": {"name": "tiv_100_usd", "description": "full slip 100%", "meta": {}, "data_type": null, "quote": null, "tags": []}, "event_limit_100_usd": {"name": "event_limit_100_usd", "description": "limit 100%", "meta": {}, "data_type": null, "quote": null, "tags": []}, "pml_100_usd": {"name": "pml_100_usd", "description": "pml 100%", "meta": {}, "data_type": null, "quote": null, "tags": []}, "pml_share_usd": {"name": "pml_share_usd", "description": "share", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "iginsure://models\\presentation\\reserving_model\\docs.yml", "compiled_path": "target\\compiled\\iginsure\\models\\presentation\\reserving_model\\actuarial_policy_load.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "materialized": "table", "tags": ["ReservingModel"]}, "created_at": 1701786801.228558, "compiled_code": "\n\nwith pol\nas (\n    select *\n    from \"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_all_core_filtered\"\n)\n\nselect\n    policyref as policy_id,\n    product as product,\n    uwyear as uw_year,\n    mis_uw_year as mis_uw_year,\n    class as class,\n    sub_class as sub_class,\n    coverage as coverage,\n    coveragecd as coverage_code,\n    lloydsriskcode as lloyds_risk_code,\n    insured as insured,\n    reassured as reassured,\n    directreinsuranceindicator as direct_reinsurance_flag,\n    region as region,\n    territory as territory,\n    domicilecountry as domicile_country,\n    datewritten as written_date,\n    policyinceptiondate as inception_date,\n    policyexpirydate as expiry_date,\n    cancellationdate as cancellation_date,\n    cancellationtype as cancellation_type,\n    policystatus as policy_status,\n    activity as activity,\n    activity_new_vs_renewal as activity_new_vs_renewal,\n    activitystatus as activity_status,\n    placing as placing_code,\n    mop as placing_method,\n    claims_made_flag as claims_made_flag,\n    [Sum of WorkingLinePer] as working_line_pct,\n    [Sum of GrossWrittenShare] as gross_written_share,\n    reservingclass1 as reserving_class_1,\n    reservingclass2 as reserving_class_2,\n    reservingclass3 as reserving_class_3,\n    reservingclass_xol_allocation as reserving_class_xol_allocation,\n    accountperiod as account_period,\n    [Sum of TotalSumInsuredCCY1$] as tiv_usd,\n    [Sum of TotalSumInsuredShareCCY1$] as tiv_share_usd,\n    [Sum of TotalSumInsured100$] as tiv_100_usd,\n    [Sum of EventLimit100$] as event_limit_100_usd,\n    [Sum of PML100$] as pml_100_usd,\n    [Sum of PMLShare$] as pml_share_usd\nfrom pol", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_policy_load\""}, "model.iginsure.scd_account": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.iginsure.dbo.account"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "scd", "scd_account"], "unique_id": "model.iginsure.scd_account", "raw_code": "-- This file is automatically generated\r\n\r\nwith\r\n\r\naccount as (\r\n    select * from {{ source('dbo', 'account') }}\r\n),\r\n\r\nordered as (\r\n    select\r\n        lAccountKey,\r\n        sAccountNumber,\r\n        sAccountDescription,\r\n        sAccountDescriptionSearch,\r\n        lTypeOfAccountElementKey,\r\n        sExtractCode,\r\n        bRevalueToBase,\r\n        lExtractTypeOfAccountElementKey,\r\n        bExtractNatureMismatch,\r\n        dw_loadts,\r\n        row_number() over (\r\n            partition by\r\n                lAccountKey,\r\n                sAccountNumber,\r\n                sAccountDescription,\r\n                sAccountDescriptionSearch,\r\n                lTypeOfAccountElementKey,\r\n                sExtractCode,\r\n                bRevalueToBase,\r\n                lExtractTypeOfAccountElementKey,\r\n                bExtractNatureMismatch\r\n            order by\r\n                dw_loadts\r\n        ) as dw_extract_order\r\n    from\r\n        account\r\n),\r\n\r\nfiltered as (\r\n    select * from ordered where dw_extract_order = 1\r\n),\r\n\r\nranged as (\r\n    select\r\n        lAccountKey,\r\n        sAccountNumber,\r\n        sAccountDescription,\r\n        sAccountDescriptionSearch,\r\n        lTypeOfAccountElementKey,\r\n        sExtractCode,\r\n        bRevalueToBase,\r\n        lExtractTypeOfAccountElementKey,\r\n        bExtractNatureMismatch,\r\n        dw_loadts as _valid_from,\r\n        lead(dw_loadts) over (partition by lAccountKey order by dw_loadts) as _valid_to\r\n    from\r\n        filtered\r\n)\r\n\r\nselect * from ranged", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "scd\\scd_account.sql", "original_file_path": "models\\scd\\scd_account.sql", "name": "scd_account", "alias": "scd_account", "checksum": {"name": "sha256", "checksum": "830d925ddb5e765a2aa6ee4859d0f0b91b4f91c1d1f254a484b400dc1d8fba42"}, "tags": [], "refs": [], "sources": [["dbo", "account"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": "iginsure://models\\scd\\scd.yml", "compiled_path": "target\\compiled\\iginsure\\models\\scd\\scd_account.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "docs": {"show": false}}, "created_at": 1701786801.7547772, "compiled_code": "-- This file is automatically generated\n\nwith\n\naccount as (\n    select * from \"IGI_PROD_DW\".\"dbo\".\"Account\"\n),\n\nordered as (\n    select\n        lAccountKey,\n        sAccountNumber,\n        sAccountDescription,\n        sAccountDescriptionSearch,\n        lTypeOfAccountElementKey,\n        sExtractCode,\n        bRevalueToBase,\n        lExtractTypeOfAccountElementKey,\n        bExtractNatureMismatch,\n        dw_loadts,\n        row_number() over (\n            partition by\n                lAccountKey,\n                sAccountNumber,\n                sAccountDescription,\n                sAccountDescriptionSearch,\n                lTypeOfAccountElementKey,\n                sExtractCode,\n                bRevalueToBase,\n                lExtractTypeOfAccountElementKey,\n                bExtractNatureMismatch\n            order by\n                dw_loadts\n        ) as dw_extract_order\n    from\n        account\n),\n\nfiltered as (\n    select * from ordered where dw_extract_order = 1\n),\n\nranged as (\n    select\n        lAccountKey,\n        sAccountNumber,\n        sAccountDescription,\n        sAccountDescriptionSearch,\n        lTypeOfAccountElementKey,\n        sExtractCode,\n        bRevalueToBase,\n        lExtractTypeOfAccountElementKey,\n        bExtractNatureMismatch,\n        dw_loadts as _valid_from,\n        lead(dw_loadts) over (partition by lAccountKey order by dw_loadts) as _valid_to\n    from\n        filtered\n)\n\nselect * from ranged", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"scd_account\""}, "model.iginsure.scd_account_period": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.iginsure.dbo.account_period"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["InwardPremium"], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "scd", "scd_account_period"], "unique_id": "model.iginsure.scd_account_period", "raw_code": "-- This file is automatically generated\r\n{{\r\n  config(tags=['InwardPremium'])\r\n}}\r\n\r\nwith\r\n\r\naccount_period as (\r\n    select * from {{ source('dbo', 'account_period') }}\r\n),\r\n\r\nordered as (\r\n    select\r\n        lAccountPeriodKey,\r\n        nYearPeriod,\r\n        nYear,\r\n        dtPeriodStart,\r\n        dtPeriodEnd,\r\n        dtEarnAt,\r\n        nPeriod,\r\n        sPeriodName,\r\n        sPeriodNameSearch,\r\n        bClosing,\r\n        lPreviousAccountPeriodKey,\r\n        nQuarterlyPeriod,\r\n        lTypeOfAccountPeriodROEKey,\r\n        sPeriodYearCode,\r\n        dtPeriodFromSales,\r\n        dtPeriodToSales,\r\n        dw_loadts,\r\n        row_number() over (\r\n            partition by\r\n                lAccountPeriodKey,\r\n                nYearPeriod,\r\n                nYear,\r\n                dtPeriodStart,\r\n                dtPeriodEnd,\r\n                dtEarnAt,\r\n                nPeriod,\r\n                sPeriodName,\r\n                sPeriodNameSearch,\r\n                bClosing,\r\n                lPreviousAccountPeriodKey,\r\n                nQuarterlyPeriod,\r\n                lTypeOfAccountPeriodROEKey,\r\n                sPeriodYearCode,\r\n                dtPeriodFromSales,\r\n                dtPeriodToSales,\r\n                dw_loadts\r\n            order by\r\n                dw_loadts\r\n        ) as dw_extract_order\r\n    from\r\n        account_period\r\n),\r\n\r\nfiltered as (\r\n    select * from ordered where dw_extract_order = 1\r\n),\r\n\r\nranged as (\r\n    select\r\n        lAccountPeriodKey,\r\n        nYearPeriod,\r\n        nYear,\r\n        dtPeriodStart,\r\n        dtPeriodEnd,\r\n        dtEarnAt,\r\n        nPeriod,\r\n        sPeriodName,\r\n        sPeriodNameSearch,\r\n        bClosing,\r\n        lPreviousAccountPeriodKey,\r\n        nQuarterlyPeriod,\r\n        lTypeOfAccountPeriodROEKey,\r\n        sPeriodYearCode,\r\n        dtPeriodFromSales,\r\n        dtPeriodToSales,\r\n        dw_loadts as _valid_from,\r\n        lead(dw_loadts) over (partition by lAccountPeriodKey order by dw_loadts) as _valid_to\r\n    from\r\n        filtered\r\n)\r\n\r\nselect * from ranged", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "scd\\scd_account_period.sql", "original_file_path": "models\\scd\\scd_account_period.sql", "name": "scd_account_period", "alias": "scd_account_period", "checksum": {"name": "sha256", "checksum": "9d46e0d88af40db956b62ea1a1cb642e9ec7a4ae193c76e1850ac3f5433e18b1"}, "tags": ["InwardPremium"], "refs": [], "sources": [["dbo", "account_period"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": "iginsure://models\\scd\\scd.yml", "compiled_path": "target\\compiled\\iginsure\\models\\scd\\scd_account_period.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "docs": {"show": false}, "tags": ["InwardPremium"]}, "created_at": 1701786801.7507772, "compiled_code": "-- This file is automatically generated\n\n\nwith\n\naccount_period as (\n    select * from \"IGI_PROD_DW\".\"dbo\".\"AccountPeriod\"\n),\n\nordered as (\n    select\n        lAccountPeriodKey,\n        nYearPeriod,\n        nYear,\n        dtPeriodStart,\n        dtPeriodEnd,\n        dtEarnAt,\n        nPeriod,\n        sPeriodName,\n        sPeriodNameSearch,\n        bClosing,\n        lPreviousAccountPeriodKey,\n        nQuarterlyPeriod,\n        lTypeOfAccountPeriodROEKey,\n        sPeriodYearCode,\n        dtPeriodFromSales,\n        dtPeriodToSales,\n        dw_loadts,\n        row_number() over (\n            partition by\n                lAccountPeriodKey,\n                nYearPeriod,\n                nYear,\n                dtPeriodStart,\n                dtPeriodEnd,\n                dtEarnAt,\n                nPeriod,\n                sPeriodName,\n                sPeriodNameSearch,\n                bClosing,\n                lPreviousAccountPeriodKey,\n                nQuarterlyPeriod,\n                lTypeOfAccountPeriodROEKey,\n                sPeriodYearCode,\n                dtPeriodFromSales,\n                dtPeriodToSales,\n                dw_loadts\n            order by\n                dw_loadts\n        ) as dw_extract_order\n    from\n        account_period\n),\n\nfiltered as (\n    select * from ordered where dw_extract_order = 1\n),\n\nranged as (\n    select\n        lAccountPeriodKey,\n        nYearPeriod,\n        nYear,\n        dtPeriodStart,\n        dtPeriodEnd,\n        dtEarnAt,\n        nPeriod,\n        sPeriodName,\n        sPeriodNameSearch,\n        bClosing,\n        lPreviousAccountPeriodKey,\n        nQuarterlyPeriod,\n        lTypeOfAccountPeriodROEKey,\n        sPeriodYearCode,\n        dtPeriodFromSales,\n        dtPeriodToSales,\n        dw_loadts as _valid_from,\n        lead(dw_loadts) over (partition by lAccountPeriodKey order by dw_loadts) as _valid_to\n    from\n        filtered\n)\n\nselect * from ranged", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"scd_account_period\""}, "model.iginsure.scd_apr": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.iginsure.dbo.apr"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["InwardPremium"], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "scd", "scd_apr"], "unique_id": "model.iginsure.scd_apr", "raw_code": "-- This file is automatically generated\r\n{{\r\n  config(tags=['InwardPremium'])\r\n}}\r\n\r\nwith\r\n\r\napr as (\r\n    select * from {{ source('dbo', 'apr') }}\r\n),\r\n\r\nordered as (\r\n    select\r\n        lAccountsPayableReceivableKey,\r\n        lTypeOfAccountActivityKey,\r\n        lTypeOfPayableReceivableKey,\r\n        sReference,\r\n        lEntityKey,\r\n        lInstanceKey,\r\n        lParentEntityKey,\r\n        lParentInstanceKey,\r\n        sInstanceReference,\r\n        lAccountPeriodKey,\r\n        dtEntry,\r\n        dtEffective,\r\n        nTermsOfTradeDays,\r\n        dtDue,\r\n        lTypeOfPayMethodKey,\r\n        lPayerContactKey,\r\n        lPayeeContactKey,\r\n        lInRespectOfContactKey,\r\n        lPayerContactBankKey,\r\n        lPayeeContactBankKey,\r\n        lCurrencyKey,\r\n        dROE,\r\n        dAmount,\r\n        dAllocated,\r\n        dUnallocated,\r\n        bRecordPaymentDetails,\r\n        dtPaymentMade,\r\n        sPaymentReference,\r\n        lNotesKey,\r\n        lTransactionGroup,\r\n        lDependentAPRKey,\r\n        lParentAPRKey,\r\n        bAvailableForUserMatching,\r\n        lCashMatchingContactKey,\r\n        lSourceEntityKey,\r\n        lSourceInstanceKey,\r\n        lDivisionKey,\r\n        lTypeOfMonetaryAmountKey,\r\n        sNotes,\r\n        bAutoNetted,\r\n        dNetReceiveableAmount,\r\n        bCashLoss,\r\n        bCashLossIndicator,\r\n        dBaseAmount,\r\n        lBaseCurrencyKey,\r\n        lPolicyAPRGroupKey,\r\n        lENDSubClassificationKey,\r\n        dNetReceivableAmountUSD,\r\n        dw_loadts,\r\n        row_number() over (\r\n            partition by\r\n                lAccountsPayableReceivableKey,\r\n                lTypeOfAccountActivityKey,\r\n                lTypeOfPayableReceivableKey,\r\n                sReference,\r\n                lEntityKey,\r\n                lInstanceKey,\r\n                lParentEntityKey,\r\n                lParentInstanceKey,\r\n                sInstanceReference,\r\n                lAccountPeriodKey,\r\n                dtEntry,\r\n                dtEffective,\r\n                nTermsOfTradeDays,\r\n                dtDue,\r\n                lTypeOfPayMethodKey,\r\n                lPayerContactKey,\r\n                lPayeeContactKey,\r\n                lInRespectOfContactKey,\r\n                lPayerContactBankKey,\r\n                lPayeeContactBankKey,\r\n                lCurrencyKey,\r\n                dROE,\r\n                dAmount,\r\n                dAllocated,\r\n                dUnallocated,\r\n                bRecordPaymentDetails,\r\n                dtPaymentMade,\r\n                sPaymentReference,\r\n                lNotesKey,\r\n                lTransactionGroup,\r\n                lDependentAPRKey,\r\n                lParentAPRKey,\r\n                bAvailableForUserMatching,\r\n                lCashMatchingContactKey,\r\n                lSourceEntityKey,\r\n                lSourceInstanceKey,\r\n                lDivisionKey,\r\n                lTypeOfMonetaryAmountKey,\r\n                sNotes,\r\n                bAutoNetted,\r\n                dNetReceiveableAmount,\r\n                bCashLoss,\r\n                bCashLossIndicator,\r\n                dBaseAmount,\r\n                lBaseCurrencyKey,\r\n                lPolicyAPRGroupKey,\r\n                lENDSubClassificationKey,\r\n                dNetReceivableAmountUSD\r\n            order by\r\n                dw_loadts\r\n        ) as dw_extract_order\r\n    from\r\n        apr\r\n),\r\n\r\nfiltered as (\r\n    select * from ordered where dw_extract_order = 1\r\n),\r\n\r\nranged as (\r\n    select\r\n        lAccountsPayableReceivableKey,\r\n        lTypeOfAccountActivityKey,\r\n        lTypeOfPayableReceivableKey,\r\n        sReference,\r\n        lEntityKey,\r\n        lInstanceKey,\r\n        lParentEntityKey,\r\n        lParentInstanceKey,\r\n        sInstanceReference,\r\n        lAccountPeriodKey,\r\n        dtEntry,\r\n        dtEffective,\r\n        nTermsOfTradeDays,\r\n        dtDue,\r\n        lTypeOfPayMethodKey,\r\n        lPayerContactKey,\r\n        lPayeeContactKey,\r\n        lInRespectOfContactKey,\r\n        lPayerContactBankKey,\r\n        lPayeeContactBankKey,\r\n        lCurrencyKey,\r\n        dROE,\r\n        dAmount,\r\n        dAllocated,\r\n        dUnallocated,\r\n        bRecordPaymentDetails,\r\n        dtPaymentMade,\r\n        sPaymentReference,\r\n        lNotesKey,\r\n        lTransactionGroup,\r\n        lDependentAPRKey,\r\n        lParentAPRKey,\r\n        bAvailableForUserMatching,\r\n        lCashMatchingContactKey,\r\n        lSourceEntityKey,\r\n        lSourceInstanceKey,\r\n        lDivisionKey,\r\n        lTypeOfMonetaryAmountKey,\r\n        sNotes,\r\n        bAutoNetted,\r\n        dNetReceiveableAmount,\r\n        bCashLoss,\r\n        bCashLossIndicator,\r\n        dBaseAmount,\r\n        lBaseCurrencyKey,\r\n        lPolicyAPRGroupKey,\r\n        lENDSubClassificationKey,\r\n        dNetReceivableAmountUSD,\r\n        dw_loadts as _valid_from,\r\n        lead(dw_loadts) over (partition by lAccountsPayableReceivableKey order by dw_loadts) as _valid_to\r\n    from\r\n        filtered\r\n)\r\n\r\nselect * from ranged", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "scd\\scd_apr.sql", "original_file_path": "models\\scd\\scd_apr.sql", "name": "scd_apr", "alias": "scd_apr", "checksum": {"name": "sha256", "checksum": "9fb157c8c557d01aaad6deff1e211912295a0f0984b8071a653e075f8f536144"}, "tags": ["InwardPremium"], "refs": [], "sources": [["dbo", "apr"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": "iginsure://models\\scd\\scd.yml", "compiled_path": "target\\compiled\\iginsure\\models\\scd\\scd_apr.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "docs": {"show": false}, "tags": ["InwardPremium"]}, "created_at": 1701786801.7587767, "compiled_code": "-- This file is automatically generated\n\n\nwith\n\napr as (\n    select * from \"IGI_PROD_DW\".\"dbo\".\"AccountsPayableReceivable\"\n),\n\nordered as (\n    select\n        lAccountsPayableReceivableKey,\n        lTypeOfAccountActivityKey,\n        lTypeOfPayableReceivableKey,\n        sReference,\n        lEntityKey,\n        lInstanceKey,\n        lParentEntityKey,\n        lParentInstanceKey,\n        sInstanceReference,\n        lAccountPeriodKey,\n        dtEntry,\n        dtEffective,\n        nTermsOfTradeDays,\n        dtDue,\n        lTypeOfPayMethodKey,\n        lPayerContactKey,\n        lPayeeContactKey,\n        lInRespectOfContactKey,\n        lPayerContactBankKey,\n        lPayeeContactBankKey,\n        lCurrencyKey,\n        dROE,\n        dAmount,\n        dAllocated,\n        dUnallocated,\n        bRecordPaymentDetails,\n        dtPaymentMade,\n        sPaymentReference,\n        lNotesKey,\n        lTransactionGroup,\n        lDependentAPRKey,\n        lParentAPRKey,\n        bAvailableForUserMatching,\n        lCashMatchingContactKey,\n        lSourceEntityKey,\n        lSourceInstanceKey,\n        lDivisionKey,\n        lTypeOfMonetaryAmountKey,\n        sNotes,\n        bAutoNetted,\n        dNetReceiveableAmount,\n        bCashLoss,\n        bCashLossIndicator,\n        dBaseAmount,\n        lBaseCurrencyKey,\n        lPolicyAPRGroupKey,\n        lENDSubClassificationKey,\n        dNetReceivableAmountUSD,\n        dw_loadts,\n        row_number() over (\n            partition by\n                lAccountsPayableReceivableKey,\n                lTypeOfAccountActivityKey,\n                lTypeOfPayableReceivableKey,\n                sReference,\n                lEntityKey,\n                lInstanceKey,\n                lParentEntityKey,\n                lParentInstanceKey,\n                sInstanceReference,\n                lAccountPeriodKey,\n                dtEntry,\n                dtEffective,\n                nTermsOfTradeDays,\n                dtDue,\n                lTypeOfPayMethodKey,\n                lPayerContactKey,\n                lPayeeContactKey,\n                lInRespectOfContactKey,\n                lPayerContactBankKey,\n                lPayeeContactBankKey,\n                lCurrencyKey,\n                dROE,\n                dAmount,\n                dAllocated,\n                dUnallocated,\n                bRecordPaymentDetails,\n                dtPaymentMade,\n                sPaymentReference,\n                lNotesKey,\n                lTransactionGroup,\n                lDependentAPRKey,\n                lParentAPRKey,\n                bAvailableForUserMatching,\n                lCashMatchingContactKey,\n                lSourceEntityKey,\n                lSourceInstanceKey,\n                lDivisionKey,\n                lTypeOfMonetaryAmountKey,\n                sNotes,\n                bAutoNetted,\n                dNetReceiveableAmount,\n                bCashLoss,\n                bCashLossIndicator,\n                dBaseAmount,\n                lBaseCurrencyKey,\n                lPolicyAPRGroupKey,\n                lENDSubClassificationKey,\n                dNetReceivableAmountUSD\n            order by\n                dw_loadts\n        ) as dw_extract_order\n    from\n        apr\n),\n\nfiltered as (\n    select * from ordered where dw_extract_order = 1\n),\n\nranged as (\n    select\n        lAccountsPayableReceivableKey,\n        lTypeOfAccountActivityKey,\n        lTypeOfPayableReceivableKey,\n        sReference,\n        lEntityKey,\n        lInstanceKey,\n        lParentEntityKey,\n        lParentInstanceKey,\n        sInstanceReference,\n        lAccountPeriodKey,\n        dtEntry,\n        dtEffective,\n        nTermsOfTradeDays,\n        dtDue,\n        lTypeOfPayMethodKey,\n        lPayerContactKey,\n        lPayeeContactKey,\n        lInRespectOfContactKey,\n        lPayerContactBankKey,\n        lPayeeContactBankKey,\n        lCurrencyKey,\n        dROE,\n        dAmount,\n        dAllocated,\n        dUnallocated,\n        bRecordPaymentDetails,\n        dtPaymentMade,\n        sPaymentReference,\n        lNotesKey,\n        lTransactionGroup,\n        lDependentAPRKey,\n        lParentAPRKey,\n        bAvailableForUserMatching,\n        lCashMatchingContactKey,\n        lSourceEntityKey,\n        lSourceInstanceKey,\n        lDivisionKey,\n        lTypeOfMonetaryAmountKey,\n        sNotes,\n        bAutoNetted,\n        dNetReceiveableAmount,\n        bCashLoss,\n        bCashLossIndicator,\n        dBaseAmount,\n        lBaseCurrencyKey,\n        lPolicyAPRGroupKey,\n        lENDSubClassificationKey,\n        dNetReceivableAmountUSD,\n        dw_loadts as _valid_from,\n        lead(dw_loadts) over (partition by lAccountsPayableReceivableKey order by dw_loadts) as _valid_to\n    from\n        filtered\n)\n\nselect * from ranged", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"scd_apr\""}, "model.iginsure.scd_apr_message_instalment": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.iginsure.dbo.apr_message_instalment"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["InwardPremium"], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "scd", "scd_apr_message_instalment"], "unique_id": "model.iginsure.scd_apr_message_instalment", "raw_code": "-- This file is automatically generated\r\n{{\r\n  config(tags=['InwardPremium'])\r\n}}\r\n\r\nwith\r\n\r\napr_message_instalment as (\r\n    select * from {{ source('dbo', 'apr_message_instalment') }}\r\n),\r\n\r\nordered as (\r\n    select\r\n        lAPRMessageInstalmentkey,\r\n        lAPRMessageHeaderKey,\r\n        lAccountsPayableReceivableKey,\r\n        bTreatySection,\r\n        lOriginalCurrencyKey,\r\n        lSettlementCurrencyKey,\r\n        dMessageOrigSettRoe,\r\n        dtSettlementDue,\r\n        dtActualPayment,\r\n        dPayMessageInstalmentSettShare,\r\n        nInstalment,\r\n        lPaymentTypeClassKey,\r\n        lStagingTableInstalmentKey,\r\n        lBureauMessageKey,\r\n        lTypeOfBureauMessageKey,\r\n        sTransactionUUId,\r\n        sServiceProviderAccountTR,\r\n        sCedentTransRef,\r\n        sBrokerReference1,\r\n        sBrokerReference2,\r\n        lAccountPeriodKey,\r\n        lSourceEntityKey,\r\n        dDiff,\r\n        lTypeOfTechnicalCategoryKey,\r\n        dw_loadts,\r\n        row_number() over (\r\n            partition by\r\n                lAPRMessageInstalmentkey,\r\n                lAPRMessageHeaderKey,\r\n                lAccountsPayableReceivableKey,\r\n                bTreatySection,\r\n                lOriginalCurrencyKey,\r\n                lSettlementCurrencyKey,\r\n                dMessageOrigSettRoe,\r\n                dtSettlementDue,\r\n                dtActualPayment,\r\n                dPayMessageInstalmentSettShare,\r\n                nInstalment,\r\n                lPaymentTypeClassKey,\r\n                lStagingTableInstalmentKey,\r\n                lBureauMessageKey,\r\n                lTypeOfBureauMessageKey,\r\n                sTransactionUUId,\r\n                sServiceProviderAccountTR,\r\n                sCedentTransRef,\r\n                sBrokerReference1,\r\n                sBrokerReference2,\r\n                lAccountPeriodKey,\r\n                lSourceEntityKey,\r\n                dDiff,\r\n                lTypeOfTechnicalCategoryKey\r\n            order by\r\n                dw_loadts\r\n        ) as dw_extract_order\r\n    from\r\n        apr_message_instalment\r\n),\r\n\r\nfiltered as (\r\n    select * from ordered where dw_extract_order = 1\r\n),\r\n\r\nranged as (\r\n    select\r\n        lAPRMessageInstalmentkey,\r\n        lAPRMessageHeaderKey,\r\n        lAccountsPayableReceivableKey,\r\n        bTreatySection,\r\n        lOriginalCurrencyKey,\r\n        lSettlementCurrencyKey,\r\n        dMessageOrigSettRoe,\r\n        dtSettlementDue,\r\n        dtActualPayment,\r\n        dPayMessageInstalmentSettShare,\r\n        nInstalment,\r\n        lPaymentTypeClassKey,\r\n        lStagingTableInstalmentKey,\r\n        lBureauMessageKey,\r\n        lTypeOfBureauMessageKey,\r\n        sTransactionUUId,\r\n        sServiceProviderAccountTR,\r\n        sCedentTransRef,\r\n        sBrokerReference1,\r\n        sBrokerReference2,\r\n        lAccountPeriodKey,\r\n        lSourceEntityKey,\r\n        dDiff,\r\n        lTypeOfTechnicalCategoryKey,\r\n        dw_loadts as _valid_from,\r\n        lead(dw_loadts) over (partition by lAPRMessageInstalmentkey order by dw_loadts) as _valid_to\r\n    from\r\n        filtered\r\n)\r\n\r\nselect * from ranged", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "scd\\scd_apr_message_instalment.sql", "original_file_path": "models\\scd\\scd_apr_message_instalment.sql", "name": "scd_apr_message_instalment", "alias": "scd_apr_message_instalment", "checksum": {"name": "sha256", "checksum": "c3026a724229c06ec0a2b4246e72fba25fa8bd71be67f13b2800168b832a3b83"}, "tags": ["InwardPremium"], "refs": [], "sources": [["dbo", "apr_message_instalment"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": "iginsure://models\\scd\\scd.yml", "compiled_path": "target\\compiled\\iginsure\\models\\scd\\scd_apr_message_instalment.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "docs": {"show": false}, "tags": ["InwardPremium"]}, "created_at": 1701786801.756777, "compiled_code": "-- This file is automatically generated\n\n\nwith\n\napr_message_instalment as (\n    select * from \"IGI_PROD_DW\".\"dbo\".\"APRMessageInstalment\"\n),\n\nordered as (\n    select\n        lAPRMessageInstalmentkey,\n        lAPRMessageHeaderKey,\n        lAccountsPayableReceivableKey,\n        bTreatySection,\n        lOriginalCurrencyKey,\n        lSettlementCurrencyKey,\n        dMessageOrigSettRoe,\n        dtSettlementDue,\n        dtActualPayment,\n        dPayMessageInstalmentSettShare,\n        nInstalment,\n        lPaymentTypeClassKey,\n        lStagingTableInstalmentKey,\n        lBureauMessageKey,\n        lTypeOfBureauMessageKey,\n        sTransactionUUId,\n        sServiceProviderAccountTR,\n        sCedentTransRef,\n        sBrokerReference1,\n        sBrokerReference2,\n        lAccountPeriodKey,\n        lSourceEntityKey,\n        dDiff,\n        lTypeOfTechnicalCategoryKey,\n        dw_loadts,\n        row_number() over (\n            partition by\n                lAPRMessageInstalmentkey,\n                lAPRMessageHeaderKey,\n                lAccountsPayableReceivableKey,\n                bTreatySection,\n                lOriginalCurrencyKey,\n                lSettlementCurrencyKey,\n                dMessageOrigSettRoe,\n                dtSettlementDue,\n                dtActualPayment,\n                dPayMessageInstalmentSettShare,\n                nInstalment,\n                lPaymentTypeClassKey,\n                lStagingTableInstalmentKey,\n                lBureauMessageKey,\n                lTypeOfBureauMessageKey,\n                sTransactionUUId,\n                sServiceProviderAccountTR,\n                sCedentTransRef,\n                sBrokerReference1,\n                sBrokerReference2,\n                lAccountPeriodKey,\n                lSourceEntityKey,\n                dDiff,\n                lTypeOfTechnicalCategoryKey\n            order by\n                dw_loadts\n        ) as dw_extract_order\n    from\n        apr_message_instalment\n),\n\nfiltered as (\n    select * from ordered where dw_extract_order = 1\n),\n\nranged as (\n    select\n        lAPRMessageInstalmentkey,\n        lAPRMessageHeaderKey,\n        lAccountsPayableReceivableKey,\n        bTreatySection,\n        lOriginalCurrencyKey,\n        lSettlementCurrencyKey,\n        dMessageOrigSettRoe,\n        dtSettlementDue,\n        dtActualPayment,\n        dPayMessageInstalmentSettShare,\n        nInstalment,\n        lPaymentTypeClassKey,\n        lStagingTableInstalmentKey,\n        lBureauMessageKey,\n        lTypeOfBureauMessageKey,\n        sTransactionUUId,\n        sServiceProviderAccountTR,\n        sCedentTransRef,\n        sBrokerReference1,\n        sBrokerReference2,\n        lAccountPeriodKey,\n        lSourceEntityKey,\n        dDiff,\n        lTypeOfTechnicalCategoryKey,\n        dw_loadts as _valid_from,\n        lead(dw_loadts) over (partition by lAPRMessageInstalmentkey order by dw_loadts) as _valid_to\n    from\n        filtered\n)\n\nselect * from ranged", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"scd_apr_message_instalment\""}, "model.iginsure.scd_auditcolumns": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.iginsure.dbo.auditcolumns"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["InwardPremium"], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "scd", "scd_auditcolumns"], "unique_id": "model.iginsure.scd_auditcolumns", "raw_code": "{{config(\r\n\r\n    tags= ['InwardPremium']\r\n\r\n)}}\r\n\r\nwith auditcolumns as (\r\n\r\n    select * from {{source('dbo','auditcolumns')}}\r\n\r\n),\r\n\r\n\r\nordered as (\r\nSELECT \r\n    LAUDITCOLUMNSKEY,\r\n    LAUDITHEADERKEY,\r\n    LAUDITROWSKEY,\r\n    LENTITYPROPERTYKEY,\r\n    SFIELDNAME,\r\n    DOLDVALUE,\r\n    DTOLDVALUE,\r\n    SOLDVALUE,\r\n    sOldValueDescription,\r\n    dw_loadts,\r\n    row_number() over(partition by \r\n                    LAUDITCOLUMNSKEY,\r\n                    LAUDITHEADERKEY,\r\n                    LAUDITROWSKEY,\r\n                    LENTITYPROPERTYKEY,\r\n                    SFIELDNAME,\r\n                    DOLDVALUE,\r\n                    DTOLDVALUE,\r\n                    SOLDVALUE,\r\n                    sOldValueDescription,\r\n                    dw_loadts\r\n                    order by \r\n                    dw_loadts) as dw_extract_order\r\n\r\n    FROM auditcolumns\r\n    \r\n    ),\r\n\r\n\r\nfiltered as (\r\n\r\n    select * from ordered where dw_extract_order = 1\r\n\r\n),\r\n\r\n\r\nranged as (\r\n\r\nSELECT\r\n    LAUDITCOLUMNSKEY,\r\n    LAUDITHEADERKEY,\r\n    LAUDITROWSKEY,\r\n    LENTITYPROPERTYKEY,\r\n    SFIELDNAME,\r\n    DOLDVALUE,\r\n    DTOLDVALUE,\r\n    SOLDVALUE,\r\n    sOldValueDescription,\r\n    dw_loadts as _valid_from,\r\n    lead(dw_loadts) over (partition by LAUDITCOLUMNSKEY,LAUDITHEADERKEY,LAUDITROWSKEY,LENTITYPROPERTYKEY,SFIELDNAME,DOLDVALUE,DTOLDVALUE,SOLDVALUE,sOldValueDescription ORDER BY dw_loadts) AS _valid_to\r\n   \r\n    FROM \r\n\r\n    filtered\r\n\r\n)\r\n\r\n\r\nSELECT * FROM ranged", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "scd\\scd_auditcolumns.sql", "original_file_path": "models\\scd\\scd_auditcolumns.sql", "name": "scd_auditcolumns", "alias": "scd_auditcolumns", "checksum": {"name": "sha256", "checksum": "e6a5d23ed4b539db2a2afc87eccdc41d8840945329451f12592977cc66f873cf"}, "tags": ["InwardPremium"], "refs": [], "sources": [["dbo", "auditcolumns"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\scd\\scd_auditcolumns.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "tags": ["InwardPremium"]}, "created_at": 1701786800.8641078, "compiled_code": "\n\nwith auditcolumns as (\n\n    select * from \"IGI_PROD_DW\".\"dbo\".\"auditcolumns\"\n\n),\n\n\nordered as (\nSELECT \n    LAUDITCOLUMNSKEY,\n    LAUDITHEADERKEY,\n    LAUDITROWSKEY,\n    LENTITYPROPERTYKEY,\n    SFIELDNAME,\n    DOLDVALUE,\n    DTOLDVALUE,\n    SOLDVALUE,\n    sOldValueDescription,\n    dw_loadts,\n    row_number() over(partition by \n                    LAUDITCOLUMNSKEY,\n                    LAUDITHEADERKEY,\n                    LAUDITROWSKEY,\n                    LENTITYPROPERTYKEY,\n                    SFIELDNAME,\n                    DOLDVALUE,\n                    DTOLDVALUE,\n                    SOLDVALUE,\n                    sOldValueDescription,\n                    dw_loadts\n                    order by \n                    dw_loadts) as dw_extract_order\n\n    FROM auditcolumns\n    \n    ),\n\n\nfiltered as (\n\n    select * from ordered where dw_extract_order = 1\n\n),\n\n\nranged as (\n\nSELECT\n    LAUDITCOLUMNSKEY,\n    LAUDITHEADERKEY,\n    LAUDITROWSKEY,\n    LENTITYPROPERTYKEY,\n    SFIELDNAME,\n    DOLDVALUE,\n    DTOLDVALUE,\n    SOLDVALUE,\n    sOldValueDescription,\n    dw_loadts as _valid_from,\n    lead(dw_loadts) over (partition by LAUDITCOLUMNSKEY,LAUDITHEADERKEY,LAUDITROWSKEY,LENTITYPROPERTYKEY,SFIELDNAME,DOLDVALUE,DTOLDVALUE,SOLDVALUE,sOldValueDescription ORDER BY dw_loadts) AS _valid_to\n   \n    FROM \n\n    filtered\n\n)\n\n\nSELECT * FROM ranged", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"scd_auditcolumns\""}, "model.iginsure.scd_auditheader": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.iginsure.dbo.auditheader"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["InwardPremium"], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "scd", "scd_auditheader"], "unique_id": "model.iginsure.scd_auditheader", "raw_code": "{{config(\r\n\r\n    tags= ['InwardPremium']\r\n\r\n)}}\r\n\r\nwith auditheader as (\r\n\r\n    select * from {{source('dbo','auditheader')}}\r\n\r\n),\r\n\r\n\r\nordered as (\r\nSELECT \r\n    LAUDITHEADERKEY,\r\n    LSECURITYUSERKEY,\r\n    LEDITMODE,\r\n    NAUDITOBJECT,\r\n    LAUDITOBJECTKEY,\r\n    LAUDITOBJECTINSTANCEKEY,\r\n    DTDATEAMENDED,\r\n    SDELETEDOBJECTDESC,\r\n    dw_loadts,\r\n    row_number() over(partition by \r\n                    LAUDITHEADERKEY,\r\n                    LSECURITYUSERKEY,\r\n                    LEDITMODE,\r\n                    NAUDITOBJECT,\r\n                    LAUDITOBJECTKEY,\r\n                    LAUDITOBJECTINSTANCEKEY,\r\n                    DTDATEAMENDED,\r\n                    SDELETEDOBJECTDESC\r\n                    order by \r\n                    dw_loadts) as dw_extract_order\r\n\r\n    FROM auditheader\r\n    \r\n    ),\r\n\r\n\r\nfiltered as (\r\n\r\n    select * from ordered where dw_extract_order = 1\r\n\r\n),\r\n\r\n\r\nranged as (\r\n\r\n    SELECT\r\n    LAUDITHEADERKEY,\r\n    LSECURITYUSERKEY,\r\n    LEDITMODE,\r\n    NAUDITOBJECT,\r\n    LAUDITOBJECTKEY,\r\n    LAUDITOBJECTINSTANCEKEY,\r\n    DTDATEAMENDED,\r\n    SDELETEDOBJECTDESC,\r\n    dw_loadts as _valid_from,\r\n    lead(dw_loadts) over (partition by LAUDITHEADERKEY,LSECURITYUSERKEY,LEDITMODE,NAUDITOBJECT,LAUDITOBJECTKEY,LAUDITOBJECTINSTANCEKEY,DTDATEAMENDED,SDELETEDOBJECTDESC ORDER BY dw_loadts) AS _valid_to\r\n    \r\n    FROM \r\n\r\n    filtered\r\n\r\n)\r\n\r\n\r\nSELECT * FROM ranged", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "scd\\scd_auditheader.sql", "original_file_path": "models\\scd\\scd_auditheader.sql", "name": "scd_auditheader", "alias": "scd_auditheader", "checksum": {"name": "sha256", "checksum": "0bca9eef7aae09206cfa47c485b324e6f499a308420b7105e644679938b30cda"}, "tags": ["InwardPremium"], "refs": [], "sources": [["dbo", "auditheader"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\scd\\scd_auditheader.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "tags": ["InwardPremium"]}, "created_at": 1701786800.8668697, "compiled_code": "\n\nwith auditheader as (\n\n    select * from \"IGI_PROD_DW\".\"dbo\".\"auditheader\"\n\n),\n\n\nordered as (\nSELECT \n    LAUDITHEADERKEY,\n    LSECURITYUSERKEY,\n    LEDITMODE,\n    NAUDITOBJECT,\n    LAUDITOBJECTKEY,\n    LAUDITOBJECTINSTANCEKEY,\n    DTDATEAMENDED,\n    SDELETEDOBJECTDESC,\n    dw_loadts,\n    row_number() over(partition by \n                    LAUDITHEADERKEY,\n                    LSECURITYUSERKEY,\n                    LEDITMODE,\n                    NAUDITOBJECT,\n                    LAUDITOBJECTKEY,\n                    LAUDITOBJECTINSTANCEKEY,\n                    DTDATEAMENDED,\n                    SDELETEDOBJECTDESC\n                    order by \n                    dw_loadts) as dw_extract_order\n\n    FROM auditheader\n    \n    ),\n\n\nfiltered as (\n\n    select * from ordered where dw_extract_order = 1\n\n),\n\n\nranged as (\n\n    SELECT\n    LAUDITHEADERKEY,\n    LSECURITYUSERKEY,\n    LEDITMODE,\n    NAUDITOBJECT,\n    LAUDITOBJECTKEY,\n    LAUDITOBJECTINSTANCEKEY,\n    DTDATEAMENDED,\n    SDELETEDOBJECTDESC,\n    dw_loadts as _valid_from,\n    lead(dw_loadts) over (partition by LAUDITHEADERKEY,LSECURITYUSERKEY,LEDITMODE,NAUDITOBJECT,LAUDITOBJECTKEY,LAUDITOBJECTINSTANCEKEY,DTDATEAMENDED,SDELETEDOBJECTDESC ORDER BY dw_loadts) AS _valid_to\n    \n    FROM \n\n    filtered\n\n)\n\n\nSELECT * FROM ranged", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"scd_auditheader\""}, "model.iginsure.scd_auditrows": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.iginsure.dbo.auditrows"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["InwardPremium"], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "scd", "scd_auditrows"], "unique_id": "model.iginsure.scd_auditrows", "raw_code": "{{config(\r\n\r\n    tags= ['InwardPremium']\r\n\r\n)}}\r\n\r\nwith auditrows as (\r\n\r\n    select * from {{source('dbo','auditrows')}}\r\n\r\n),\r\n\r\n\r\nordered as (\r\nSELECT \r\n    LAUDITROWSKEY,\r\n    LAUDITHEADERKEY,\r\n    LCHANGETYPE,\r\n    LAUDITOBJECTINSTANCEKEY,\r\n    LAUDITOBJECTKEY,\r\n    SDELETEDOBJECTDESC,\r\n    dw_loadts,\r\n    row_number() over(partition by \r\n                        LAUDITROWSKEY,\r\n                        LAUDITHEADERKEY,\r\n                        LCHANGETYPE,\r\n                        LAUDITOBJECTINSTANCEKEY,\r\n                        LAUDITOBJECTKEY,\r\n                        SDELETEDOBJECTDESC,\r\n                        dw_loadts\r\n                    order by \r\n                    dw_loadts) as dw_extract_order\r\n\r\n    FROM auditrows\r\n    \r\n    ),\r\n\r\n\r\nfiltered as (\r\n\r\n    select * from ordered where dw_extract_order = 1\r\n\r\n),\r\n\r\n\r\nranged as (\r\n\r\n    SELECT\r\n    LAUDITROWSKEY,\r\n    LAUDITHEADERKEY,\r\n    LCHANGETYPE,\r\n    LAUDITOBJECTINSTANCEKEY,\r\n    LAUDITOBJECTKEY,\r\n    SDELETEDOBJECTDESC,\r\n    dw_loadts as _valid_from,\r\n    lead(dw_loadts) over (partition by LAUDITROWSKEY,LAUDITHEADERKEY,LCHANGETYPE,LAUDITOBJECTINSTANCEKEY,LAUDITOBJECTKEY,SDELETEDOBJECTDESC,dw_loadts ORDER BY dw_loadts) AS _valid_to\r\n   \r\n    FROM \r\n\r\n    filtered\r\n\r\n)\r\n\r\n\r\nSELECT * FROM ranged", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "scd\\scd_auditrows.sql", "original_file_path": "models\\scd\\scd_auditrows.sql", "name": "scd_auditrows", "alias": "scd_auditrows", "checksum": {"name": "sha256", "checksum": "6807006b1ebbc6fe843a11625a85aff3da7ed56376a8a846d25d5d5ec4f4bc07"}, "tags": ["InwardPremium"], "refs": [], "sources": [["dbo", "auditrows"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\scd\\scd_auditrows.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "tags": ["InwardPremium"]}, "created_at": 1701786800.872283, "compiled_code": "\n\nwith auditrows as (\n\n    select * from \"IGI_PROD_DW\".\"dbo\".\"auditrows\"\n\n),\n\n\nordered as (\nSELECT \n    LAUDITROWSKEY,\n    LAUDITHEADERKEY,\n    LCHANGETYPE,\n    LAUDITOBJECTINSTANCEKEY,\n    LAUDITOBJECTKEY,\n    SDELETEDOBJECTDESC,\n    dw_loadts,\n    row_number() over(partition by \n                        LAUDITROWSKEY,\n                        LAUDITHEADERKEY,\n                        LCHANGETYPE,\n                        LAUDITOBJECTINSTANCEKEY,\n                        LAUDITOBJECTKEY,\n                        SDELETEDOBJECTDESC,\n                        dw_loadts\n                    order by \n                    dw_loadts) as dw_extract_order\n\n    FROM auditrows\n    \n    ),\n\n\nfiltered as (\n\n    select * from ordered where dw_extract_order = 1\n\n),\n\n\nranged as (\n\n    SELECT\n    LAUDITROWSKEY,\n    LAUDITHEADERKEY,\n    LCHANGETYPE,\n    LAUDITOBJECTINSTANCEKEY,\n    LAUDITOBJECTKEY,\n    SDELETEDOBJECTDESC,\n    dw_loadts as _valid_from,\n    lead(dw_loadts) over (partition by LAUDITROWSKEY,LAUDITHEADERKEY,LCHANGETYPE,LAUDITOBJECTINSTANCEKEY,LAUDITOBJECTKEY,SDELETEDOBJECTDESC,dw_loadts ORDER BY dw_loadts) AS _valid_to\n   \n    FROM \n\n    filtered\n\n)\n\n\nSELECT * FROM ranged", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"scd_auditrows\""}, "model.iginsure.scd_audit_state_transitions": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.iginsure.dbo.audit_state_transitions"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["InwardPremium"], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "scd", "scd_audit_state_transitions"], "unique_id": "model.iginsure.scd_audit_state_transitions", "raw_code": "-- This file is automatically generated\r\n{{\r\n  config(tags=['InwardPremium'])\r\n}}\r\n\r\nwith\r\n\r\naudit_state_transitions as (\r\n    select * from {{ source('dbo', 'audit_state_transitions') }}\r\n),\r\n\r\nordered as (\r\n    select\r\n        LAUDITSTATETRANSITIONKEY,\r\n        LENTITYKEY,\r\n        LINSTANCEKEY,\r\n        LENTITYSTATEACTIONKEY,\r\n        LENTITYSTATEMEMBERKEY,\r\n        LENTITYSTATEACTIONREASONKEY,\r\n        LSECURITYUSERKEY,\r\n        DTTRANSITION,\r\n        dw_loadts,\r\n        row_number() over (\r\n            partition by\r\n                LAUDITSTATETRANSITIONKEY,\r\n                LENTITYKEY,\r\n                LINSTANCEKEY,\r\n                LENTITYSTATEACTIONKEY,\r\n                LENTITYSTATEMEMBERKEY,\r\n                LENTITYSTATEACTIONREASONKEY,\r\n                LSECURITYUSERKEY,\r\n                DTTRANSITION\r\n            order by\r\n                dw_loadts\r\n        ) as dw_extract_order\r\n    from\r\n        audit_state_transitions\r\n),\r\n\r\nfiltered as (\r\n    select * from ordered where dw_extract_order = 1\r\n),\r\n\r\nranged as (\r\n    select\r\n        LAUDITSTATETRANSITIONKEY,\r\n        LENTITYKEY,\r\n        LINSTANCEKEY,\r\n        LENTITYSTATEACTIONKEY,\r\n        LENTITYSTATEMEMBERKEY,\r\n        LENTITYSTATEACTIONREASONKEY,\r\n        LSECURITYUSERKEY,\r\n        DTTRANSITION,\r\n        dw_loadts as _valid_from,\r\n        lead(dw_loadts) over (partition by LAUDITSTATETRANSITIONKEY order by dw_loadts) as _valid_to\r\n    from\r\n        filtered\r\n)\r\n\r\nselect * from ranged", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "scd\\scd_audit_state_transitions.sql", "original_file_path": "models\\scd\\scd_audit_state_transitions.sql", "name": "scd_audit_state_transitions", "alias": "scd_audit_state_transitions", "checksum": {"name": "sha256", "checksum": "713c1404def5f557cb81288ae4e9259eb0f1c040f3fa36311d02c2d8f8b2a506"}, "tags": ["InwardPremium"], "refs": [], "sources": [["dbo", "audit_state_transitions"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": "iginsure://models\\scd\\scd.yml", "compiled_path": "target\\compiled\\iginsure\\models\\scd\\scd_audit_state_transitions.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "docs": {"show": false}, "tags": ["InwardPremium"]}, "created_at": 1701786801.7597814, "compiled_code": "-- This file is automatically generated\n\n\nwith\n\naudit_state_transitions as (\n    select * from \"IGI_PROD_DW\".\"dbo\".\"AUDITSTATETRANSITIONS\"\n),\n\nordered as (\n    select\n        LAUDITSTATETRANSITIONKEY,\n        LENTITYKEY,\n        LINSTANCEKEY,\n        LENTITYSTATEACTIONKEY,\n        LENTITYSTATEMEMBERKEY,\n        LENTITYSTATEACTIONREASONKEY,\n        LSECURITYUSERKEY,\n        DTTRANSITION,\n        dw_loadts,\n        row_number() over (\n            partition by\n                LAUDITSTATETRANSITIONKEY,\n                LENTITYKEY,\n                LINSTANCEKEY,\n                LENTITYSTATEACTIONKEY,\n                LENTITYSTATEMEMBERKEY,\n                LENTITYSTATEACTIONREASONKEY,\n                LSECURITYUSERKEY,\n                DTTRANSITION\n            order by\n                dw_loadts\n        ) as dw_extract_order\n    from\n        audit_state_transitions\n),\n\nfiltered as (\n    select * from ordered where dw_extract_order = 1\n),\n\nranged as (\n    select\n        LAUDITSTATETRANSITIONKEY,\n        LENTITYKEY,\n        LINSTANCEKEY,\n        LENTITYSTATEACTIONKEY,\n        LENTITYSTATEMEMBERKEY,\n        LENTITYSTATEACTIONREASONKEY,\n        LSECURITYUSERKEY,\n        DTTRANSITION,\n        dw_loadts as _valid_from,\n        lead(dw_loadts) over (partition by LAUDITSTATETRANSITIONKEY order by dw_loadts) as _valid_to\n    from\n        filtered\n)\n\nselect * from ranged", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"scd_audit_state_transitions\""}, "model.iginsure.scd_claim": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.iginsure.dbo.claim"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "scd", "scd_claim"], "unique_id": "model.iginsure.scd_claim", "raw_code": "-- This file is automatically generated\r\n\r\nwith\r\n\r\nclaim as (\r\n    select * from {{ source('dbo', 'claim') }}\r\n),\r\n\r\nordered as (\r\n    select\r\n        lClaimKey,\r\n        bBordereauClaim,\r\n        bBureauClaim,\r\n        bClaimOutsideTerm,\r\n        bECFClaim,\r\n        bfaconpolicy,\r\n        bInlitigation,\r\n        bLeader,\r\n        bLOC,\r\n        bLossDateTBA,\r\n        bManualBlockIndicator,\r\n        bManuallyCorrected,\r\n        bNoticeToReinsurer,\r\n        bOutOfScope,\r\n        bPremiumFullyEarned,\r\n        bRIApplies,\r\n        bSalvage,\r\n        bSigned,\r\n        bSubrogation,\r\n        bsurplustreatyonpolicy,\r\n        BTOTALLOSS,\r\n        bWordingDeficient,\r\n        DCURRENTEXPENSES,\r\n        dCurrentExpensesReserve,\r\n        dCurrentFeePaid,\r\n        dCurrentFeeReserve,\r\n        DCURRENTINDEMNITY,\r\n        dCurrentIndemnityReserve,\r\n        dCurrentTotalPaid,\r\n        dCurrentTotalReserve,\r\n        dInitialExpensesReserve,\r\n        dInitialFeeReserve,\r\n        dInitialIndemnityReserve,\r\n        dInitialTotalReserve,\r\n        dLOCCurrentBalance,\r\n        dLOCInitialBalance,\r\n        dLOCTotalDrawings,\r\n        dMonitorCurrentPaidTotal,\r\n        dPolicyActivityROE,\r\n        dRateOfExchange,\r\n        dSectionLinePC,\r\n        dSubrogationAmount,\r\n        dSubrogationSettlementAmount,\r\n        dtClaim1stReported,\r\n        dtClaimAttached,\r\n        dtClaimMadeFrom,\r\n        dtClaimMadeTo,\r\n        dtClosed,\r\n        dtLossFrom,\r\n        dtDiscovery,\r\n        dtLastReviewed,\r\n        dtLossTo,\r\n        DTREPORTED,\r\n        dtSubrogationDateCompleted,\r\n        dtSubrogationDateStarted,\r\n        lAddressLookupKey,\r\n        lAgreementActivityKey,\r\n        lBordereauLiabilityKey,\r\n        lAgreementBordereauLocationKey,\r\n        lAgreementBordereauPolicyKey,\r\n        lBordereauTransClmCanAttachKey,\r\n        lBordereauTransactionKey,\r\n        lAgreementFolderKey,\r\n        lAgreementInsuredKey,\r\n        lAgreementYearKey,\r\n        lBlobBackgroundKey,\r\n        lBlobCoverageKey,\r\n        lBlobDamagesKey,\r\n        lBlobLiabilityKey,\r\n        lBlobPlanOfActionKey,\r\n        lBlobReserveCommentaryKey,\r\n        lBrokerContactLiaisonKey,\r\n        lBrokerKey,\r\n        lBureauLeaderContactKey,\r\n        lCatCodeKey,\r\n        lClaimantKey,\r\n        lClaimsCauseCategoryKey,\r\n        LCLAIMSCAUSETYPEKEY,\r\n        lClaimsLeadType,\r\n        lCurrencyKey,\r\n        lDivisionKey,\r\n        lEventKey,\r\n        lExternalAdjusterContactKey,\r\n        lExternalAttorneyContactKey,\r\n        lInsuredKey,\r\n        lInternalAdjusterContactKey,\r\n        lInternalAttorneyContactKey,\r\n        lLossLocationCityKey,\r\n        lLossLocationCountryKey,\r\n        lLossLocationCountryRegionKey,\r\n        lLossLocationPostCodeKey,\r\n        lLossLocationStateKey,\r\n        lPlaintiffAttorneyContactKey,\r\n        lPolicyActivityCurrencyKey,\r\n        lPolicyActivityKey,\r\n        lPolicyBrokerKey,\r\n        lPolicyBrokerLiaisonKey,\r\n        lPolicyDivisionKey,\r\n        lPolicyFolderKey,\r\n        lPolicyInsuredKey,\r\n        lPolicyKey,\r\n        lPolicySectionKey,\r\n        lPolicySubDivisionKey,\r\n        lResponsiblePartyKey,\r\n        lSlipLeaderContactKey,\r\n        lSubDivisionKey,\r\n        lSubEventKey,\r\n        lTypeOfCauseKey,\r\n        lTypeOfClaimClosedKey,\r\n        lTypeOfLossKey,\r\n        lTypeOfLossLocationKey,\r\n        lTypeOfMarketSourceKey,\r\n        lTypeOfNAICCodeKey,\r\n        lTypeOfNoticeToReinsurerKey,\r\n        lTypeOfPolicyActivityKey,\r\n        lUnderwriterContactKey,\r\n        lVesselKey,\r\n        nAccidentYear,\r\n        nInvalidClassCounter,\r\n        nYearOfAccount,\r\n        sBrokerReference1,\r\n        sBrokerReference2,\r\n        sClaimDescription,\r\n        sClaimReference,\r\n        sClassUCR,\r\n        sExternalAdjusterReference,\r\n        sExternalAttorneyReference,\r\n        sFireIncidentReference,\r\n        sLocationName,\r\n        sLossCulprit,\r\n        sLossLocationAddress1,\r\n        sLossLocationAddress2,\r\n        sLossLocationCity,\r\n        sLossLocationPostCode,\r\n        sMarketReference,\r\n        sOrigClaimReference,\r\n        sPCSCode,\r\n        sPlaintiffAttorneyReference,\r\n        sPoliceIncidentReference,\r\n        sPolicyRef,\r\n        sTR,\r\n        sUCR,\r\n        sUMR,\r\n        bPolicyPremiumPaid,\r\n        bManuallyCorrectedComplete,\r\n        dPolicySectionLinePC,\r\n        dtDenied,\r\n        sLossLocationLat,\r\n        sLossLocationLong,\r\n        sLossDateNotes,\r\n        lPaperKey,\r\n        sInsuredPhone,\r\n        sInsuredEmail,\r\n        sBrokerPhone,\r\n        sBrokerEmail,\r\n        sBrokerContactPhone,\r\n        sBrokerContactEmail,\r\n        sExternalAdjusterPhone,\r\n        sExternalAdjusterEmail,\r\n        nProofNotPresentedCount,\r\n        lCombinedPolicyFolderKey,\r\n        lCombinedPolicyKey,\r\n        lCombinedPolicySectionKey,\r\n        lCombinedPolicyActivityKey,\r\n        lEntityKey,\r\n        lInstanceKey,\r\n        lAgreementSectionKey,\r\n        dAgreementSectionLinePC,\r\n        lCurrencyKeyAgrmt,\r\n        dROEAgrmt,\r\n        bCoinsuranceClaimAccounting,\r\n        lPolicyLineKey,\r\n        bCoinsuranceExists,\r\n        bOverRideAttachmentRule,\r\n        sVoyageFrom,\r\n        sVoyageTo,\r\n        sBackground,\r\n        sCoverage,\r\n        sDamages,\r\n        sLiability,\r\n        sPlanOfAction,\r\n        sReserveCommentary,\r\n        lPolicyLineChainKey,\r\n        dMinSignedLine,\r\n        dMaxSignedLine,\r\n        bPolicyLeader,\r\n        lPolicyTypeOfLeaderKey,\r\n        nPolicyYearOfAccount,\r\n        bBinderPolicy,\r\n        lTypeOfClaimSeverityKey,\r\n        lClaimHandlerKey,\r\n        bCloseClaimAFP,\r\n        bCannotPayClaimsLTR,\r\n        dtReopenedDate,\r\n        dtCreatedDate,\r\n        dtClaimAmountAgreedDate,\r\n        lClaimStatusKey,\r\n        dtWithdrawnDate,\r\n        bPolicyCoverageMandatory,\r\n        bPolicySectionMandatory,\r\n        lvPolicyMandatoryFlagsKey,\r\n        lCombinedPolicyListKey,\r\n        bDOLOverride,\r\n        bAuthorisedCatCode,\r\n        dtNextReviewedSixMonths,\r\n        dtNextReviewed,\r\n        bDOLEntered,\r\n        lTypeOfRAGKey,\r\n        dClaimPotential,\r\n        lReinstatementCurrencyKey,\r\n        dReinstatementROE,\r\n        dReinstatementTotalReserve,\r\n        dReinstatementTotalPaidToDate,\r\n        dReinstatementTotalDue,\r\n        dReinstatementTotalReserveReport,\r\n        dReinstatementTotalPaidToDateReport,\r\n        dReinstatementTotalDueReport,\r\n        bManualDuplicateExists,\r\n        lClaimGroupKey,\r\n        sManualDuplicateUCRCheck,\r\n        dtReopened,\r\n        lTypeofEventType,\r\n        dtBrokerClaimReceived,\r\n        dtPolicySignedDate,\r\n        bTreaty,\r\n        bDeligatedAuthority,\r\n        lSCAPKey,\r\n        bAuthorisedEvent,\r\n        bFullFollow,\r\n        bNoHardCopyFile,\r\n        sClaimant,\r\n        lClaimPotentialCcyKey,\r\n        bDivisionChange,\r\n        dw_loadts,\r\n        row_number() over (\r\n            partition by\r\n                lClaimKey,\r\n                bBordereauClaim,\r\n                bBureauClaim,\r\n                bClaimOutsideTerm,\r\n                bECFClaim,\r\n                bfaconpolicy,\r\n                bInlitigation,\r\n                bLeader,\r\n                bLOC,\r\n                bLossDateTBA,\r\n                bManualBlockIndicator,\r\n                bManuallyCorrected,\r\n                bNoticeToReinsurer,\r\n                bOutOfScope,\r\n                bPremiumFullyEarned,\r\n                bRIApplies,\r\n                bSalvage,\r\n                bSigned,\r\n                bSubrogation,\r\n                bsurplustreatyonpolicy,\r\n                BTOTALLOSS,\r\n                bWordingDeficient,\r\n                DCURRENTEXPENSES,\r\n                dCurrentExpensesReserve,\r\n                dCurrentFeePaid,\r\n                dCurrentFeeReserve,\r\n                DCURRENTINDEMNITY,\r\n                dCurrentIndemnityReserve,\r\n                dCurrentTotalPaid,\r\n                dCurrentTotalReserve,\r\n                dInitialExpensesReserve,\r\n                dInitialFeeReserve,\r\n                dInitialIndemnityReserve,\r\n                dInitialTotalReserve,\r\n                dLOCCurrentBalance,\r\n                dLOCInitialBalance,\r\n                dLOCTotalDrawings,\r\n                dMonitorCurrentPaidTotal,\r\n                dPolicyActivityROE,\r\n                dRateOfExchange,\r\n                dSectionLinePC,\r\n                dSubrogationAmount,\r\n                dSubrogationSettlementAmount,\r\n                dtClaim1stReported,\r\n                dtClaimAttached,\r\n                dtClaimMadeFrom,\r\n                dtClaimMadeTo,\r\n                dtClosed,\r\n                dtLossFrom,\r\n                dtDiscovery,\r\n                dtLastReviewed,\r\n                dtLossTo,\r\n                DTREPORTED,\r\n                dtSubrogationDateCompleted,\r\n                dtSubrogationDateStarted,\r\n                lAddressLookupKey,\r\n                lAgreementActivityKey,\r\n                lBordereauLiabilityKey,\r\n                lAgreementBordereauLocationKey,\r\n                lAgreementBordereauPolicyKey,\r\n                lBordereauTransClmCanAttachKey,\r\n                lBordereauTransactionKey,\r\n                lAgreementFolderKey,\r\n                lAgreementInsuredKey,\r\n                lAgreementYearKey,\r\n                lBlobBackgroundKey,\r\n                lBlobCoverageKey,\r\n                lBlobDamagesKey,\r\n                lBlobLiabilityKey,\r\n                lBlobPlanOfActionKey,\r\n                lBlobReserveCommentaryKey,\r\n                lBrokerContactLiaisonKey,\r\n                lBrokerKey,\r\n                lBureauLeaderContactKey,\r\n                lCatCodeKey,\r\n                lClaimantKey,\r\n                lClaimsCauseCategoryKey,\r\n                LCLAIMSCAUSETYPEKEY,\r\n                lClaimsLeadType,\r\n                lCurrencyKey,\r\n                lDivisionKey,\r\n                lEventKey,\r\n                lExternalAdjusterContactKey,\r\n                lExternalAttorneyContactKey,\r\n                lInsuredKey,\r\n                lInternalAdjusterContactKey,\r\n                lInternalAttorneyContactKey,\r\n                lLossLocationCityKey,\r\n                lLossLocationCountryKey,\r\n                lLossLocationCountryRegionKey,\r\n                lLossLocationPostCodeKey,\r\n                lLossLocationStateKey,\r\n                lPlaintiffAttorneyContactKey,\r\n                lPolicyActivityCurrencyKey,\r\n                lPolicyActivityKey,\r\n                lPolicyBrokerKey,\r\n                lPolicyBrokerLiaisonKey,\r\n                lPolicyDivisionKey,\r\n                lPolicyFolderKey,\r\n                lPolicyInsuredKey,\r\n                lPolicyKey,\r\n                lPolicySectionKey,\r\n                lPolicySubDivisionKey,\r\n                lResponsiblePartyKey,\r\n                lSlipLeaderContactKey,\r\n                lSubDivisionKey,\r\n                lSubEventKey,\r\n                lTypeOfCauseKey,\r\n                lTypeOfClaimClosedKey,\r\n                lTypeOfLossKey,\r\n                lTypeOfLossLocationKey,\r\n                lTypeOfMarketSourceKey,\r\n                lTypeOfNAICCodeKey,\r\n                lTypeOfNoticeToReinsurerKey,\r\n                lTypeOfPolicyActivityKey,\r\n                lUnderwriterContactKey,\r\n                lVesselKey,\r\n                nAccidentYear,\r\n                nInvalidClassCounter,\r\n                nYearOfAccount,\r\n                sBrokerReference1,\r\n                sBrokerReference2,\r\n                sClaimDescription,\r\n                sClaimReference,\r\n                sClassUCR,\r\n                sExternalAdjusterReference,\r\n                sExternalAttorneyReference,\r\n                sFireIncidentReference,\r\n                sLocationName,\r\n                sLossCulprit,\r\n                sLossLocationAddress1,\r\n                sLossLocationAddress2,\r\n                sLossLocationCity,\r\n                sLossLocationPostCode,\r\n                sMarketReference,\r\n                sOrigClaimReference,\r\n                sPCSCode,\r\n                sPlaintiffAttorneyReference,\r\n                sPoliceIncidentReference,\r\n                sPolicyRef,\r\n                sTR,\r\n                sUCR,\r\n                sUMR,\r\n                bPolicyPremiumPaid,\r\n                bManuallyCorrectedComplete,\r\n                dPolicySectionLinePC,\r\n                dtDenied,\r\n                sLossLocationLat,\r\n                sLossLocationLong,\r\n                sLossDateNotes,\r\n                lPaperKey,\r\n                sInsuredPhone,\r\n                sInsuredEmail,\r\n                sBrokerPhone,\r\n                sBrokerEmail,\r\n                sBrokerContactPhone,\r\n                sBrokerContactEmail,\r\n                sExternalAdjusterPhone,\r\n                sExternalAdjusterEmail,\r\n                nProofNotPresentedCount,\r\n                lCombinedPolicyFolderKey,\r\n                lCombinedPolicyKey,\r\n                lCombinedPolicySectionKey,\r\n                lCombinedPolicyActivityKey,\r\n                lEntityKey,\r\n                lInstanceKey,\r\n                lAgreementSectionKey,\r\n                dAgreementSectionLinePC,\r\n                lCurrencyKeyAgrmt,\r\n                dROEAgrmt,\r\n                bCoinsuranceClaimAccounting,\r\n                lPolicyLineKey,\r\n                bCoinsuranceExists,\r\n                bOverRideAttachmentRule,\r\n                sVoyageFrom,\r\n                sVoyageTo,\r\n                sBackground,\r\n                sCoverage,\r\n                sDamages,\r\n                sLiability,\r\n                sPlanOfAction,\r\n                sReserveCommentary,\r\n                lPolicyLineChainKey,\r\n                dMinSignedLine,\r\n                dMaxSignedLine,\r\n                bPolicyLeader,\r\n                lPolicyTypeOfLeaderKey,\r\n                nPolicyYearOfAccount,\r\n                bBinderPolicy,\r\n                lTypeOfClaimSeverityKey,\r\n                lClaimHandlerKey,\r\n                bCloseClaimAFP,\r\n                bCannotPayClaimsLTR,\r\n                dtReopenedDate,\r\n                dtCreatedDate,\r\n                dtClaimAmountAgreedDate,\r\n                lClaimStatusKey,\r\n                dtWithdrawnDate,\r\n                bPolicyCoverageMandatory,\r\n                bPolicySectionMandatory,\r\n                lvPolicyMandatoryFlagsKey,\r\n                lCombinedPolicyListKey,\r\n                bDOLOverride,\r\n                bAuthorisedCatCode,\r\n                dtNextReviewedSixMonths,\r\n                dtNextReviewed,\r\n                bDOLEntered,\r\n                lTypeOfRAGKey,\r\n                dClaimPotential,\r\n                lReinstatementCurrencyKey,\r\n                dReinstatementROE,\r\n                dReinstatementTotalReserve,\r\n                dReinstatementTotalPaidToDate,\r\n                dReinstatementTotalDue,\r\n                dReinstatementTotalReserveReport,\r\n                dReinstatementTotalPaidToDateReport,\r\n                dReinstatementTotalDueReport,\r\n                bManualDuplicateExists,\r\n                lClaimGroupKey,\r\n                sManualDuplicateUCRCheck,\r\n                dtReopened,\r\n                lTypeofEventType,\r\n                dtBrokerClaimReceived,\r\n                dtPolicySignedDate,\r\n                bTreaty,\r\n                bDeligatedAuthority,\r\n                lSCAPKey,\r\n                bAuthorisedEvent,\r\n                bFullFollow,\r\n                bNoHardCopyFile,\r\n                sClaimant,\r\n                lClaimPotentialCcyKey,\r\n                bDivisionChange\r\n            order by\r\n                dw_loadts\r\n        ) as dw_extract_order\r\n    from\r\n        claim\r\n),\r\n\r\nfiltered as (\r\n    select * from ordered where dw_extract_order = 1\r\n),\r\n\r\nranged as (\r\n    select\r\n        lClaimKey,\r\n        bBordereauClaim,\r\n        bBureauClaim,\r\n        bClaimOutsideTerm,\r\n        bECFClaim,\r\n        bfaconpolicy,\r\n        bInlitigation,\r\n        bLeader,\r\n        bLOC,\r\n        bLossDateTBA,\r\n        bManualBlockIndicator,\r\n        bManuallyCorrected,\r\n        bNoticeToReinsurer,\r\n        bOutOfScope,\r\n        bPremiumFullyEarned,\r\n        bRIApplies,\r\n        bSalvage,\r\n        bSigned,\r\n        bSubrogation,\r\n        bsurplustreatyonpolicy,\r\n        BTOTALLOSS,\r\n        bWordingDeficient,\r\n        DCURRENTEXPENSES,\r\n        dCurrentExpensesReserve,\r\n        dCurrentFeePaid,\r\n        dCurrentFeeReserve,\r\n        DCURRENTINDEMNITY,\r\n        dCurrentIndemnityReserve,\r\n        dCurrentTotalPaid,\r\n        dCurrentTotalReserve,\r\n        dInitialExpensesReserve,\r\n        dInitialFeeReserve,\r\n        dInitialIndemnityReserve,\r\n        dInitialTotalReserve,\r\n        dLOCCurrentBalance,\r\n        dLOCInitialBalance,\r\n        dLOCTotalDrawings,\r\n        dMonitorCurrentPaidTotal,\r\n        dPolicyActivityROE,\r\n        dRateOfExchange,\r\n        dSectionLinePC,\r\n        dSubrogationAmount,\r\n        dSubrogationSettlementAmount,\r\n        dtClaim1stReported,\r\n        dtClaimAttached,\r\n        dtClaimMadeFrom,\r\n        dtClaimMadeTo,\r\n        dtClosed,\r\n        dtLossFrom,\r\n        dtDiscovery,\r\n        dtLastReviewed,\r\n        dtLossTo,\r\n        DTREPORTED,\r\n        dtSubrogationDateCompleted,\r\n        dtSubrogationDateStarted,\r\n        lAddressLookupKey,\r\n        lAgreementActivityKey,\r\n        lBordereauLiabilityKey,\r\n        lAgreementBordereauLocationKey,\r\n        lAgreementBordereauPolicyKey,\r\n        lBordereauTransClmCanAttachKey,\r\n        lBordereauTransactionKey,\r\n        lAgreementFolderKey,\r\n        lAgreementInsuredKey,\r\n        lAgreementYearKey,\r\n        lBlobBackgroundKey,\r\n        lBlobCoverageKey,\r\n        lBlobDamagesKey,\r\n        lBlobLiabilityKey,\r\n        lBlobPlanOfActionKey,\r\n        lBlobReserveCommentaryKey,\r\n        lBrokerContactLiaisonKey,\r\n        lBrokerKey,\r\n        lBureauLeaderContactKey,\r\n        lCatCodeKey,\r\n        lClaimantKey,\r\n        lClaimsCauseCategoryKey,\r\n        LCLAIMSCAUSETYPEKEY,\r\n        lClaimsLeadType,\r\n        lCurrencyKey,\r\n        lDivisionKey,\r\n        lEventKey,\r\n        lExternalAdjusterContactKey,\r\n        lExternalAttorneyContactKey,\r\n        lInsuredKey,\r\n        lInternalAdjusterContactKey,\r\n        lInternalAttorneyContactKey,\r\n        lLossLocationCityKey,\r\n        lLossLocationCountryKey,\r\n        lLossLocationCountryRegionKey,\r\n        lLossLocationPostCodeKey,\r\n        lLossLocationStateKey,\r\n        lPlaintiffAttorneyContactKey,\r\n        lPolicyActivityCurrencyKey,\r\n        lPolicyActivityKey,\r\n        lPolicyBrokerKey,\r\n        lPolicyBrokerLiaisonKey,\r\n        lPolicyDivisionKey,\r\n        lPolicyFolderKey,\r\n        lPolicyInsuredKey,\r\n        lPolicyKey,\r\n        lPolicySectionKey,\r\n        lPolicySubDivisionKey,\r\n        lResponsiblePartyKey,\r\n        lSlipLeaderContactKey,\r\n        lSubDivisionKey,\r\n        lSubEventKey,\r\n        lTypeOfCauseKey,\r\n        lTypeOfClaimClosedKey,\r\n        lTypeOfLossKey,\r\n        lTypeOfLossLocationKey,\r\n        lTypeOfMarketSourceKey,\r\n        lTypeOfNAICCodeKey,\r\n        lTypeOfNoticeToReinsurerKey,\r\n        lTypeOfPolicyActivityKey,\r\n        lUnderwriterContactKey,\r\n        lVesselKey,\r\n        nAccidentYear,\r\n        nInvalidClassCounter,\r\n        nYearOfAccount,\r\n        sBrokerReference1,\r\n        sBrokerReference2,\r\n        sClaimDescription,\r\n        sClaimReference,\r\n        sClassUCR,\r\n        sExternalAdjusterReference,\r\n        sExternalAttorneyReference,\r\n        sFireIncidentReference,\r\n        sLocationName,\r\n        sLossCulprit,\r\n        sLossLocationAddress1,\r\n        sLossLocationAddress2,\r\n        sLossLocationCity,\r\n        sLossLocationPostCode,\r\n        sMarketReference,\r\n        sOrigClaimReference,\r\n        sPCSCode,\r\n        sPlaintiffAttorneyReference,\r\n        sPoliceIncidentReference,\r\n        sPolicyRef,\r\n        sTR,\r\n        sUCR,\r\n        sUMR,\r\n        bPolicyPremiumPaid,\r\n        bManuallyCorrectedComplete,\r\n        dPolicySectionLinePC,\r\n        dtDenied,\r\n        sLossLocationLat,\r\n        sLossLocationLong,\r\n        sLossDateNotes,\r\n        lPaperKey,\r\n        sInsuredPhone,\r\n        sInsuredEmail,\r\n        sBrokerPhone,\r\n        sBrokerEmail,\r\n        sBrokerContactPhone,\r\n        sBrokerContactEmail,\r\n        sExternalAdjusterPhone,\r\n        sExternalAdjusterEmail,\r\n        nProofNotPresentedCount,\r\n        lCombinedPolicyFolderKey,\r\n        lCombinedPolicyKey,\r\n        lCombinedPolicySectionKey,\r\n        lCombinedPolicyActivityKey,\r\n        lEntityKey,\r\n        lInstanceKey,\r\n        lAgreementSectionKey,\r\n        dAgreementSectionLinePC,\r\n        lCurrencyKeyAgrmt,\r\n        dROEAgrmt,\r\n        bCoinsuranceClaimAccounting,\r\n        lPolicyLineKey,\r\n        bCoinsuranceExists,\r\n        bOverRideAttachmentRule,\r\n        sVoyageFrom,\r\n        sVoyageTo,\r\n        sBackground,\r\n        sCoverage,\r\n        sDamages,\r\n        sLiability,\r\n        sPlanOfAction,\r\n        sReserveCommentary,\r\n        lPolicyLineChainKey,\r\n        dMinSignedLine,\r\n        dMaxSignedLine,\r\n        bPolicyLeader,\r\n        lPolicyTypeOfLeaderKey,\r\n        nPolicyYearOfAccount,\r\n        bBinderPolicy,\r\n        lTypeOfClaimSeverityKey,\r\n        lClaimHandlerKey,\r\n        bCloseClaimAFP,\r\n        bCannotPayClaimsLTR,\r\n        dtReopenedDate,\r\n        dtCreatedDate,\r\n        dtClaimAmountAgreedDate,\r\n        lClaimStatusKey,\r\n        dtWithdrawnDate,\r\n        bPolicyCoverageMandatory,\r\n        bPolicySectionMandatory,\r\n        lvPolicyMandatoryFlagsKey,\r\n        lCombinedPolicyListKey,\r\n        bDOLOverride,\r\n        bAuthorisedCatCode,\r\n        dtNextReviewedSixMonths,\r\n        dtNextReviewed,\r\n        bDOLEntered,\r\n        lTypeOfRAGKey,\r\n        dClaimPotential,\r\n        lReinstatementCurrencyKey,\r\n        dReinstatementROE,\r\n        dReinstatementTotalReserve,\r\n        dReinstatementTotalPaidToDate,\r\n        dReinstatementTotalDue,\r\n        dReinstatementTotalReserveReport,\r\n        dReinstatementTotalPaidToDateReport,\r\n        dReinstatementTotalDueReport,\r\n        bManualDuplicateExists,\r\n        lClaimGroupKey,\r\n        sManualDuplicateUCRCheck,\r\n        dtReopened,\r\n        lTypeofEventType,\r\n        dtBrokerClaimReceived,\r\n        dtPolicySignedDate,\r\n        bTreaty,\r\n        bDeligatedAuthority,\r\n        lSCAPKey,\r\n        bAuthorisedEvent,\r\n        bFullFollow,\r\n        bNoHardCopyFile,\r\n        sClaimant,\r\n        lClaimPotentialCcyKey,\r\n        bDivisionChange,\r\n        dw_loadts as _valid_from,\r\n        lead(dw_loadts) over (partition by lClaimKey order by dw_loadts) as _valid_to\r\n    from\r\n        filtered\r\n)\r\n\r\nselect * from ranged", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "scd\\scd_claim.sql", "original_file_path": "models\\scd\\scd_claim.sql", "name": "scd_claim", "alias": "scd_claim", "checksum": {"name": "sha256", "checksum": "0f917380f7d84d6cf23f9c0f66ad5c98b38d2fed01c254ec7ddedc940fe28c50"}, "tags": [], "refs": [], "sources": [["dbo", "claim"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": "iginsure://models\\scd\\scd.yml", "compiled_path": "target\\compiled\\iginsure\\models\\scd\\scd_claim.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "docs": {"show": false}}, "created_at": 1701786801.7627804, "compiled_code": "-- This file is automatically generated\n\nwith\n\nclaim as (\n    select * from \"IGI_PROD_DW\".\"dbo\".\"Claim\"\n),\n\nordered as (\n    select\n        lClaimKey,\n        bBordereauClaim,\n        bBureauClaim,\n        bClaimOutsideTerm,\n        bECFClaim,\n        bfaconpolicy,\n        bInlitigation,\n        bLeader,\n        bLOC,\n        bLossDateTBA,\n        bManualBlockIndicator,\n        bManuallyCorrected,\n        bNoticeToReinsurer,\n        bOutOfScope,\n        bPremiumFullyEarned,\n        bRIApplies,\n        bSalvage,\n        bSigned,\n        bSubrogation,\n        bsurplustreatyonpolicy,\n        BTOTALLOSS,\n        bWordingDeficient,\n        DCURRENTEXPENSES,\n        dCurrentExpensesReserve,\n        dCurrentFeePaid,\n        dCurrentFeeReserve,\n        DCURRENTINDEMNITY,\n        dCurrentIndemnityReserve,\n        dCurrentTotalPaid,\n        dCurrentTotalReserve,\n        dInitialExpensesReserve,\n        dInitialFeeReserve,\n        dInitialIndemnityReserve,\n        dInitialTotalReserve,\n        dLOCCurrentBalance,\n        dLOCInitialBalance,\n        dLOCTotalDrawings,\n        dMonitorCurrentPaidTotal,\n        dPolicyActivityROE,\n        dRateOfExchange,\n        dSectionLinePC,\n        dSubrogationAmount,\n        dSubrogationSettlementAmount,\n        dtClaim1stReported,\n        dtClaimAttached,\n        dtClaimMadeFrom,\n        dtClaimMadeTo,\n        dtClosed,\n        dtLossFrom,\n        dtDiscovery,\n        dtLastReviewed,\n        dtLossTo,\n        DTREPORTED,\n        dtSubrogationDateCompleted,\n        dtSubrogationDateStarted,\n        lAddressLookupKey,\n        lAgreementActivityKey,\n        lBordereauLiabilityKey,\n        lAgreementBordereauLocationKey,\n        lAgreementBordereauPolicyKey,\n        lBordereauTransClmCanAttachKey,\n        lBordereauTransactionKey,\n        lAgreementFolderKey,\n        lAgreementInsuredKey,\n        lAgreementYearKey,\n        lBlobBackgroundKey,\n        lBlobCoverageKey,\n        lBlobDamagesKey,\n        lBlobLiabilityKey,\n        lBlobPlanOfActionKey,\n        lBlobReserveCommentaryKey,\n        lBrokerContactLiaisonKey,\n        lBrokerKey,\n        lBureauLeaderContactKey,\n        lCatCodeKey,\n        lClaimantKey,\n        lClaimsCauseCategoryKey,\n        LCLAIMSCAUSETYPEKEY,\n        lClaimsLeadType,\n        lCurrencyKey,\n        lDivisionKey,\n        lEventKey,\n        lExternalAdjusterContactKey,\n        lExternalAttorneyContactKey,\n        lInsuredKey,\n        lInternalAdjusterContactKey,\n        lInternalAttorneyContactKey,\n        lLossLocationCityKey,\n        lLossLocationCountryKey,\n        lLossLocationCountryRegionKey,\n        lLossLocationPostCodeKey,\n        lLossLocationStateKey,\n        lPlaintiffAttorneyContactKey,\n        lPolicyActivityCurrencyKey,\n        lPolicyActivityKey,\n        lPolicyBrokerKey,\n        lPolicyBrokerLiaisonKey,\n        lPolicyDivisionKey,\n        lPolicyFolderKey,\n        lPolicyInsuredKey,\n        lPolicyKey,\n        lPolicySectionKey,\n        lPolicySubDivisionKey,\n        lResponsiblePartyKey,\n        lSlipLeaderContactKey,\n        lSubDivisionKey,\n        lSubEventKey,\n        lTypeOfCauseKey,\n        lTypeOfClaimClosedKey,\n        lTypeOfLossKey,\n        lTypeOfLossLocationKey,\n        lTypeOfMarketSourceKey,\n        lTypeOfNAICCodeKey,\n        lTypeOfNoticeToReinsurerKey,\n        lTypeOfPolicyActivityKey,\n        lUnderwriterContactKey,\n        lVesselKey,\n        nAccidentYear,\n        nInvalidClassCounter,\n        nYearOfAccount,\n        sBrokerReference1,\n        sBrokerReference2,\n        sClaimDescription,\n        sClaimReference,\n        sClassUCR,\n        sExternalAdjusterReference,\n        sExternalAttorneyReference,\n        sFireIncidentReference,\n        sLocationName,\n        sLossCulprit,\n        sLossLocationAddress1,\n        sLossLocationAddress2,\n        sLossLocationCity,\n        sLossLocationPostCode,\n        sMarketReference,\n        sOrigClaimReference,\n        sPCSCode,\n        sPlaintiffAttorneyReference,\n        sPoliceIncidentReference,\n        sPolicyRef,\n        sTR,\n        sUCR,\n        sUMR,\n        bPolicyPremiumPaid,\n        bManuallyCorrectedComplete,\n        dPolicySectionLinePC,\n        dtDenied,\n        sLossLocationLat,\n        sLossLocationLong,\n        sLossDateNotes,\n        lPaperKey,\n        sInsuredPhone,\n        sInsuredEmail,\n        sBrokerPhone,\n        sBrokerEmail,\n        sBrokerContactPhone,\n        sBrokerContactEmail,\n        sExternalAdjusterPhone,\n        sExternalAdjusterEmail,\n        nProofNotPresentedCount,\n        lCombinedPolicyFolderKey,\n        lCombinedPolicyKey,\n        lCombinedPolicySectionKey,\n        lCombinedPolicyActivityKey,\n        lEntityKey,\n        lInstanceKey,\n        lAgreementSectionKey,\n        dAgreementSectionLinePC,\n        lCurrencyKeyAgrmt,\n        dROEAgrmt,\n        bCoinsuranceClaimAccounting,\n        lPolicyLineKey,\n        bCoinsuranceExists,\n        bOverRideAttachmentRule,\n        sVoyageFrom,\n        sVoyageTo,\n        sBackground,\n        sCoverage,\n        sDamages,\n        sLiability,\n        sPlanOfAction,\n        sReserveCommentary,\n        lPolicyLineChainKey,\n        dMinSignedLine,\n        dMaxSignedLine,\n        bPolicyLeader,\n        lPolicyTypeOfLeaderKey,\n        nPolicyYearOfAccount,\n        bBinderPolicy,\n        lTypeOfClaimSeverityKey,\n        lClaimHandlerKey,\n        bCloseClaimAFP,\n        bCannotPayClaimsLTR,\n        dtReopenedDate,\n        dtCreatedDate,\n        dtClaimAmountAgreedDate,\n        lClaimStatusKey,\n        dtWithdrawnDate,\n        bPolicyCoverageMandatory,\n        bPolicySectionMandatory,\n        lvPolicyMandatoryFlagsKey,\n        lCombinedPolicyListKey,\n        bDOLOverride,\n        bAuthorisedCatCode,\n        dtNextReviewedSixMonths,\n        dtNextReviewed,\n        bDOLEntered,\n        lTypeOfRAGKey,\n        dClaimPotential,\n        lReinstatementCurrencyKey,\n        dReinstatementROE,\n        dReinstatementTotalReserve,\n        dReinstatementTotalPaidToDate,\n        dReinstatementTotalDue,\n        dReinstatementTotalReserveReport,\n        dReinstatementTotalPaidToDateReport,\n        dReinstatementTotalDueReport,\n        bManualDuplicateExists,\n        lClaimGroupKey,\n        sManualDuplicateUCRCheck,\n        dtReopened,\n        lTypeofEventType,\n        dtBrokerClaimReceived,\n        dtPolicySignedDate,\n        bTreaty,\n        bDeligatedAuthority,\n        lSCAPKey,\n        bAuthorisedEvent,\n        bFullFollow,\n        bNoHardCopyFile,\n        sClaimant,\n        lClaimPotentialCcyKey,\n        bDivisionChange,\n        dw_loadts,\n        row_number() over (\n            partition by\n                lClaimKey,\n                bBordereauClaim,\n                bBureauClaim,\n                bClaimOutsideTerm,\n                bECFClaim,\n                bfaconpolicy,\n                bInlitigation,\n                bLeader,\n                bLOC,\n                bLossDateTBA,\n                bManualBlockIndicator,\n                bManuallyCorrected,\n                bNoticeToReinsurer,\n                bOutOfScope,\n                bPremiumFullyEarned,\n                bRIApplies,\n                bSalvage,\n                bSigned,\n                bSubrogation,\n                bsurplustreatyonpolicy,\n                BTOTALLOSS,\n                bWordingDeficient,\n                DCURRENTEXPENSES,\n                dCurrentExpensesReserve,\n                dCurrentFeePaid,\n                dCurrentFeeReserve,\n                DCURRENTINDEMNITY,\n                dCurrentIndemnityReserve,\n                dCurrentTotalPaid,\n                dCurrentTotalReserve,\n                dInitialExpensesReserve,\n                dInitialFeeReserve,\n                dInitialIndemnityReserve,\n                dInitialTotalReserve,\n                dLOCCurrentBalance,\n                dLOCInitialBalance,\n                dLOCTotalDrawings,\n                dMonitorCurrentPaidTotal,\n                dPolicyActivityROE,\n                dRateOfExchange,\n                dSectionLinePC,\n                dSubrogationAmount,\n                dSubrogationSettlementAmount,\n                dtClaim1stReported,\n                dtClaimAttached,\n                dtClaimMadeFrom,\n                dtClaimMadeTo,\n                dtClosed,\n                dtLossFrom,\n                dtDiscovery,\n                dtLastReviewed,\n                dtLossTo,\n                DTREPORTED,\n                dtSubrogationDateCompleted,\n                dtSubrogationDateStarted,\n                lAddressLookupKey,\n                lAgreementActivityKey,\n                lBordereauLiabilityKey,\n                lAgreementBordereauLocationKey,\n                lAgreementBordereauPolicyKey,\n                lBordereauTransClmCanAttachKey,\n                lBordereauTransactionKey,\n                lAgreementFolderKey,\n                lAgreementInsuredKey,\n                lAgreementYearKey,\n                lBlobBackgroundKey,\n                lBlobCoverageKey,\n                lBlobDamagesKey,\n                lBlobLiabilityKey,\n                lBlobPlanOfActionKey,\n                lBlobReserveCommentaryKey,\n                lBrokerContactLiaisonKey,\n                lBrokerKey,\n                lBureauLeaderContactKey,\n                lCatCodeKey,\n                lClaimantKey,\n                lClaimsCauseCategoryKey,\n                LCLAIMSCAUSETYPEKEY,\n                lClaimsLeadType,\n                lCurrencyKey,\n                lDivisionKey,\n                lEventKey,\n                lExternalAdjusterContactKey,\n                lExternalAttorneyContactKey,\n                lInsuredKey,\n                lInternalAdjusterContactKey,\n                lInternalAttorneyContactKey,\n                lLossLocationCityKey,\n                lLossLocationCountryKey,\n                lLossLocationCountryRegionKey,\n                lLossLocationPostCodeKey,\n                lLossLocationStateKey,\n                lPlaintiffAttorneyContactKey,\n                lPolicyActivityCurrencyKey,\n                lPolicyActivityKey,\n                lPolicyBrokerKey,\n                lPolicyBrokerLiaisonKey,\n                lPolicyDivisionKey,\n                lPolicyFolderKey,\n                lPolicyInsuredKey,\n                lPolicyKey,\n                lPolicySectionKey,\n                lPolicySubDivisionKey,\n                lResponsiblePartyKey,\n                lSlipLeaderContactKey,\n                lSubDivisionKey,\n                lSubEventKey,\n                lTypeOfCauseKey,\n                lTypeOfClaimClosedKey,\n                lTypeOfLossKey,\n                lTypeOfLossLocationKey,\n                lTypeOfMarketSourceKey,\n                lTypeOfNAICCodeKey,\n                lTypeOfNoticeToReinsurerKey,\n                lTypeOfPolicyActivityKey,\n                lUnderwriterContactKey,\n                lVesselKey,\n                nAccidentYear,\n                nInvalidClassCounter,\n                nYearOfAccount,\n                sBrokerReference1,\n                sBrokerReference2,\n                sClaimDescription,\n                sClaimReference,\n                sClassUCR,\n                sExternalAdjusterReference,\n                sExternalAttorneyReference,\n                sFireIncidentReference,\n                sLocationName,\n                sLossCulprit,\n                sLossLocationAddress1,\n                sLossLocationAddress2,\n                sLossLocationCity,\n                sLossLocationPostCode,\n                sMarketReference,\n                sOrigClaimReference,\n                sPCSCode,\n                sPlaintiffAttorneyReference,\n                sPoliceIncidentReference,\n                sPolicyRef,\n                sTR,\n                sUCR,\n                sUMR,\n                bPolicyPremiumPaid,\n                bManuallyCorrectedComplete,\n                dPolicySectionLinePC,\n                dtDenied,\n                sLossLocationLat,\n                sLossLocationLong,\n                sLossDateNotes,\n                lPaperKey,\n                sInsuredPhone,\n                sInsuredEmail,\n                sBrokerPhone,\n                sBrokerEmail,\n                sBrokerContactPhone,\n                sBrokerContactEmail,\n                sExternalAdjusterPhone,\n                sExternalAdjusterEmail,\n                nProofNotPresentedCount,\n                lCombinedPolicyFolderKey,\n                lCombinedPolicyKey,\n                lCombinedPolicySectionKey,\n                lCombinedPolicyActivityKey,\n                lEntityKey,\n                lInstanceKey,\n                lAgreementSectionKey,\n                dAgreementSectionLinePC,\n                lCurrencyKeyAgrmt,\n                dROEAgrmt,\n                bCoinsuranceClaimAccounting,\n                lPolicyLineKey,\n                bCoinsuranceExists,\n                bOverRideAttachmentRule,\n                sVoyageFrom,\n                sVoyageTo,\n                sBackground,\n                sCoverage,\n                sDamages,\n                sLiability,\n                sPlanOfAction,\n                sReserveCommentary,\n                lPolicyLineChainKey,\n                dMinSignedLine,\n                dMaxSignedLine,\n                bPolicyLeader,\n                lPolicyTypeOfLeaderKey,\n                nPolicyYearOfAccount,\n                bBinderPolicy,\n                lTypeOfClaimSeverityKey,\n                lClaimHandlerKey,\n                bCloseClaimAFP,\n                bCannotPayClaimsLTR,\n                dtReopenedDate,\n                dtCreatedDate,\n                dtClaimAmountAgreedDate,\n                lClaimStatusKey,\n                dtWithdrawnDate,\n                bPolicyCoverageMandatory,\n                bPolicySectionMandatory,\n                lvPolicyMandatoryFlagsKey,\n                lCombinedPolicyListKey,\n                bDOLOverride,\n                bAuthorisedCatCode,\n                dtNextReviewedSixMonths,\n                dtNextReviewed,\n                bDOLEntered,\n                lTypeOfRAGKey,\n                dClaimPotential,\n                lReinstatementCurrencyKey,\n                dReinstatementROE,\n                dReinstatementTotalReserve,\n                dReinstatementTotalPaidToDate,\n                dReinstatementTotalDue,\n                dReinstatementTotalReserveReport,\n                dReinstatementTotalPaidToDateReport,\n                dReinstatementTotalDueReport,\n                bManualDuplicateExists,\n                lClaimGroupKey,\n                sManualDuplicateUCRCheck,\n                dtReopened,\n                lTypeofEventType,\n                dtBrokerClaimReceived,\n                dtPolicySignedDate,\n                bTreaty,\n                bDeligatedAuthority,\n                lSCAPKey,\n                bAuthorisedEvent,\n                bFullFollow,\n                bNoHardCopyFile,\n                sClaimant,\n                lClaimPotentialCcyKey,\n                bDivisionChange\n            order by\n                dw_loadts\n        ) as dw_extract_order\n    from\n        claim\n),\n\nfiltered as (\n    select * from ordered where dw_extract_order = 1\n),\n\nranged as (\n    select\n        lClaimKey,\n        bBordereauClaim,\n        bBureauClaim,\n        bClaimOutsideTerm,\n        bECFClaim,\n        bfaconpolicy,\n        bInlitigation,\n        bLeader,\n        bLOC,\n        bLossDateTBA,\n        bManualBlockIndicator,\n        bManuallyCorrected,\n        bNoticeToReinsurer,\n        bOutOfScope,\n        bPremiumFullyEarned,\n        bRIApplies,\n        bSalvage,\n        bSigned,\n        bSubrogation,\n        bsurplustreatyonpolicy,\n        BTOTALLOSS,\n        bWordingDeficient,\n        DCURRENTEXPENSES,\n        dCurrentExpensesReserve,\n        dCurrentFeePaid,\n        dCurrentFeeReserve,\n        DCURRENTINDEMNITY,\n        dCurrentIndemnityReserve,\n        dCurrentTotalPaid,\n        dCurrentTotalReserve,\n        dInitialExpensesReserve,\n        dInitialFeeReserve,\n        dInitialIndemnityReserve,\n        dInitialTotalReserve,\n        dLOCCurrentBalance,\n        dLOCInitialBalance,\n        dLOCTotalDrawings,\n        dMonitorCurrentPaidTotal,\n        dPolicyActivityROE,\n        dRateOfExchange,\n        dSectionLinePC,\n        dSubrogationAmount,\n        dSubrogationSettlementAmount,\n        dtClaim1stReported,\n        dtClaimAttached,\n        dtClaimMadeFrom,\n        dtClaimMadeTo,\n        dtClosed,\n        dtLossFrom,\n        dtDiscovery,\n        dtLastReviewed,\n        dtLossTo,\n        DTREPORTED,\n        dtSubrogationDateCompleted,\n        dtSubrogationDateStarted,\n        lAddressLookupKey,\n        lAgreementActivityKey,\n        lBordereauLiabilityKey,\n        lAgreementBordereauLocationKey,\n        lAgreementBordereauPolicyKey,\n        lBordereauTransClmCanAttachKey,\n        lBordereauTransactionKey,\n        lAgreementFolderKey,\n        lAgreementInsuredKey,\n        lAgreementYearKey,\n        lBlobBackgroundKey,\n        lBlobCoverageKey,\n        lBlobDamagesKey,\n        lBlobLiabilityKey,\n        lBlobPlanOfActionKey,\n        lBlobReserveCommentaryKey,\n        lBrokerContactLiaisonKey,\n        lBrokerKey,\n        lBureauLeaderContactKey,\n        lCatCodeKey,\n        lClaimantKey,\n        lClaimsCauseCategoryKey,\n        LCLAIMSCAUSETYPEKEY,\n        lClaimsLeadType,\n        lCurrencyKey,\n        lDivisionKey,\n        lEventKey,\n        lExternalAdjusterContactKey,\n        lExternalAttorneyContactKey,\n        lInsuredKey,\n        lInternalAdjusterContactKey,\n        lInternalAttorneyContactKey,\n        lLossLocationCityKey,\n        lLossLocationCountryKey,\n        lLossLocationCountryRegionKey,\n        lLossLocationPostCodeKey,\n        lLossLocationStateKey,\n        lPlaintiffAttorneyContactKey,\n        lPolicyActivityCurrencyKey,\n        lPolicyActivityKey,\n        lPolicyBrokerKey,\n        lPolicyBrokerLiaisonKey,\n        lPolicyDivisionKey,\n        lPolicyFolderKey,\n        lPolicyInsuredKey,\n        lPolicyKey,\n        lPolicySectionKey,\n        lPolicySubDivisionKey,\n        lResponsiblePartyKey,\n        lSlipLeaderContactKey,\n        lSubDivisionKey,\n        lSubEventKey,\n        lTypeOfCauseKey,\n        lTypeOfClaimClosedKey,\n        lTypeOfLossKey,\n        lTypeOfLossLocationKey,\n        lTypeOfMarketSourceKey,\n        lTypeOfNAICCodeKey,\n        lTypeOfNoticeToReinsurerKey,\n        lTypeOfPolicyActivityKey,\n        lUnderwriterContactKey,\n        lVesselKey,\n        nAccidentYear,\n        nInvalidClassCounter,\n        nYearOfAccount,\n        sBrokerReference1,\n        sBrokerReference2,\n        sClaimDescription,\n        sClaimReference,\n        sClassUCR,\n        sExternalAdjusterReference,\n        sExternalAttorneyReference,\n        sFireIncidentReference,\n        sLocationName,\n        sLossCulprit,\n        sLossLocationAddress1,\n        sLossLocationAddress2,\n        sLossLocationCity,\n        sLossLocationPostCode,\n        sMarketReference,\n        sOrigClaimReference,\n        sPCSCode,\n        sPlaintiffAttorneyReference,\n        sPoliceIncidentReference,\n        sPolicyRef,\n        sTR,\n        sUCR,\n        sUMR,\n        bPolicyPremiumPaid,\n        bManuallyCorrectedComplete,\n        dPolicySectionLinePC,\n        dtDenied,\n        sLossLocationLat,\n        sLossLocationLong,\n        sLossDateNotes,\n        lPaperKey,\n        sInsuredPhone,\n        sInsuredEmail,\n        sBrokerPhone,\n        sBrokerEmail,\n        sBrokerContactPhone,\n        sBrokerContactEmail,\n        sExternalAdjusterPhone,\n        sExternalAdjusterEmail,\n        nProofNotPresentedCount,\n        lCombinedPolicyFolderKey,\n        lCombinedPolicyKey,\n        lCombinedPolicySectionKey,\n        lCombinedPolicyActivityKey,\n        lEntityKey,\n        lInstanceKey,\n        lAgreementSectionKey,\n        dAgreementSectionLinePC,\n        lCurrencyKeyAgrmt,\n        dROEAgrmt,\n        bCoinsuranceClaimAccounting,\n        lPolicyLineKey,\n        bCoinsuranceExists,\n        bOverRideAttachmentRule,\n        sVoyageFrom,\n        sVoyageTo,\n        sBackground,\n        sCoverage,\n        sDamages,\n        sLiability,\n        sPlanOfAction,\n        sReserveCommentary,\n        lPolicyLineChainKey,\n        dMinSignedLine,\n        dMaxSignedLine,\n        bPolicyLeader,\n        lPolicyTypeOfLeaderKey,\n        nPolicyYearOfAccount,\n        bBinderPolicy,\n        lTypeOfClaimSeverityKey,\n        lClaimHandlerKey,\n        bCloseClaimAFP,\n        bCannotPayClaimsLTR,\n        dtReopenedDate,\n        dtCreatedDate,\n        dtClaimAmountAgreedDate,\n        lClaimStatusKey,\n        dtWithdrawnDate,\n        bPolicyCoverageMandatory,\n        bPolicySectionMandatory,\n        lvPolicyMandatoryFlagsKey,\n        lCombinedPolicyListKey,\n        bDOLOverride,\n        bAuthorisedCatCode,\n        dtNextReviewedSixMonths,\n        dtNextReviewed,\n        bDOLEntered,\n        lTypeOfRAGKey,\n        dClaimPotential,\n        lReinstatementCurrencyKey,\n        dReinstatementROE,\n        dReinstatementTotalReserve,\n        dReinstatementTotalPaidToDate,\n        dReinstatementTotalDue,\n        dReinstatementTotalReserveReport,\n        dReinstatementTotalPaidToDateReport,\n        dReinstatementTotalDueReport,\n        bManualDuplicateExists,\n        lClaimGroupKey,\n        sManualDuplicateUCRCheck,\n        dtReopened,\n        lTypeofEventType,\n        dtBrokerClaimReceived,\n        dtPolicySignedDate,\n        bTreaty,\n        bDeligatedAuthority,\n        lSCAPKey,\n        bAuthorisedEvent,\n        bFullFollow,\n        bNoHardCopyFile,\n        sClaimant,\n        lClaimPotentialCcyKey,\n        bDivisionChange,\n        dw_loadts as _valid_from,\n        lead(dw_loadts) over (partition by lClaimKey order by dw_loadts) as _valid_to\n    from\n        filtered\n)\n\nselect * from ranged", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"scd_claim\""}, "model.iginsure.scd_claimgrouplinkedclaims": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.iginsure.dbo.claimgrouplinkedclaims"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["Claim"], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "scd", "scd_claimgrouplinkedclaims"], "unique_id": "model.iginsure.scd_claimgrouplinkedclaims", "raw_code": "-- This file is automatically generated\r\n{{\r\n  config(tags=['Claim'])\r\n}}\r\n\r\nwith\r\n\r\nclaimgrouplinkedclaims as (\r\n    select * from {{ source('dbo', 'claimgrouplinkedclaims') }}\r\n),\r\n\r\nordered as (\r\n    select\r\n        lClaimKey,\r\n        lLinkedClaimKey,\r\n        bUCRMatch,\r\n        bDOLMatch,\r\n        bPolicyMatch,\r\n        lClaimGroupTypeKey,\r\n        sClaimGroupType,\r\n        dw_loadts,\r\n        row_number() over (\r\n            partition by\r\n                lClaimKey,\r\n                lLinkedClaimKey,\r\n                bUCRMatch,\r\n                bDOLMatch,\r\n                bPolicyMatch,\r\n                lClaimGroupTypeKey,\r\n                sClaimGroupType,\r\n                dw_loadts\r\n            order by\r\n                dw_loadts\r\n        ) as dw_extract_order\r\n    from\r\n        claimgrouplinkedclaims\r\n),\r\n\r\nfiltered as (\r\n    select * from ordered where dw_extract_order = 1\r\n),\r\n\r\nranged as (\r\n    select\r\n            lClaimKey,\r\n            lLinkedClaimKey,\r\n            bUCRMatch,\r\n            bDOLMatch,\r\n            bPolicyMatch,\r\n            lClaimGroupTypeKey,\r\n            sClaimGroupType,\r\n            dw_loadts as _valid_from,\r\n            lead(dw_loadts) over (partition by lClaimKey,lLinkedClaimKey order by dw_loadts) as _valid_to\r\n    from\r\n        filtered\r\n)\r\n\r\nselect * from ranged", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "scd\\scd_claimgrouplinkedclaims.sql", "original_file_path": "models\\scd\\scd_claimgrouplinkedclaims.sql", "name": "scd_claimgrouplinkedclaims", "alias": "scd_claimgrouplinkedclaims", "checksum": {"name": "sha256", "checksum": "6d49668d54f67804b5e6d850d5201924b5c9b028842b4116ebfb65fe141c1df6"}, "tags": ["Claim"], "refs": [], "sources": [["dbo", "claimgrouplinkedclaims"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\scd\\scd_claimgrouplinkedclaims.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "tags": ["Claim"]}, "created_at": 1701786800.879975, "compiled_code": "-- This file is automatically generated\n\n\nwith\n\nclaimgrouplinkedclaims as (\n    select * from \"IGI_PROD_DW\".\"dbo\".\"claimgrouplinkedclaims\"\n),\n\nordered as (\n    select\n        lClaimKey,\n        lLinkedClaimKey,\n        bUCRMatch,\n        bDOLMatch,\n        bPolicyMatch,\n        lClaimGroupTypeKey,\n        sClaimGroupType,\n        dw_loadts,\n        row_number() over (\n            partition by\n                lClaimKey,\n                lLinkedClaimKey,\n                bUCRMatch,\n                bDOLMatch,\n                bPolicyMatch,\n                lClaimGroupTypeKey,\n                sClaimGroupType,\n                dw_loadts\n            order by\n                dw_loadts\n        ) as dw_extract_order\n    from\n        claimgrouplinkedclaims\n),\n\nfiltered as (\n    select * from ordered where dw_extract_order = 1\n),\n\nranged as (\n    select\n            lClaimKey,\n            lLinkedClaimKey,\n            bUCRMatch,\n            bDOLMatch,\n            bPolicyMatch,\n            lClaimGroupTypeKey,\n            sClaimGroupType,\n            dw_loadts as _valid_from,\n            lead(dw_loadts) over (partition by lClaimKey,lLinkedClaimKey order by dw_loadts) as _valid_to\n    from\n        filtered\n)\n\nselect * from ranged", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"scd_claimgrouplinkedclaims\""}, "model.iginsure.scd_claim_movement": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.iginsure.dbo.claim_movement"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "scd", "scd_claim_movement"], "unique_id": "model.iginsure.scd_claim_movement", "raw_code": "-- This file is automatically generated\r\n\r\nwith\r\n\r\nclaim_movement as (\r\n    select * from {{ source('dbo', 'claim_movement') }}\r\n),\r\n\r\nordered as (\r\n    select\r\n        lClaimMovementKey,\r\n        lClaimSectionKey,\r\n        lClaimKey,\r\n        lAccountPeriodKey,\r\n        lAccountPeriodOriginalKey,\r\n        dtMovementFirstAdvised,\r\n        dtMovementCreated,\r\n        dtMovementUpdated,\r\n        sMovementReference,\r\n        nSequence,\r\n        nBureauSequence,\r\n        bManualMovement,\r\n        bConverted,\r\n        sPaymentReference,\r\n        lTransactionTypeKey,\r\n        lPayeeContactKey,\r\n        lPayeeRoleKey,\r\n        bReserveTBA,\r\n        lTypeOfReserveQualifierKey,\r\n        lTypeOfMovementKey,\r\n        lPayMethodKey,\r\n        lPayCcyOrigKey,\r\n        dPayROEOrig,\r\n        lPayCcySettKey,\r\n        dPayROESett,\r\n        lPayCcyReportKey,\r\n        dPayROEReport,\r\n        dPaidThisTimeOrig100,\r\n        dPaidThisTimeOrigShare,\r\n        dPaidThisTimeSett100,\r\n        dPaidThisTimeSettShare,\r\n        dPaymentOrig100,\r\n        dPaymentOrigShare,\r\n        dPaymentSett100,\r\n        dPaymentSettShare,\r\n        dPaymentAuthorisedOrig100,\r\n        dPaymentAuthorisedOrigShare,\r\n        dPaymentAuthorisedSett100,\r\n        dPaymentAuthorisedSettShare,\r\n        dPaymentPendingBureauOrig100,\r\n        dPaymentPendingBureauOrigShare,\r\n        dPaymentPendingBureauSett100,\r\n        dPaymentPendingBureauSettShare,\r\n        dPaymentPendingManualOrig100,\r\n        dPaymentPendingManualOrigShare,\r\n        dPaymentPendingManualSett100,\r\n        dPaymentPendingManualSettShare,\r\n        dFacRIPaidThisTimeOrigShare,\r\n        dFacRIPaidThisTimeSettShare,\r\n        dPropRIPaidThisTimeOrigShare,\r\n        dPropRIPaidThisTimeSettShare,\r\n        dXLRIPaidThisTimeOrigShare,\r\n        dXLRIPaidThisTimeSettShare,\r\n        dPaidToDateBureauOrig100,\r\n        dPaidToDateBureauOrigShare,\r\n        dPaidToDateBureauSett100,\r\n        dPaidToDateBureauSettShare,\r\n        dPaidToDateSettShareHold,\r\n        dFacRIPaidToDateOrigShare,\r\n        dFacRIPaidToDateSettShare,\r\n        dPropRIPaidToDateOrigShare,\r\n        dPropRIPaidToDateSettShare,\r\n        dXLRIPaidToDateOrigShare,\r\n        dXLRIPaidToDateSettShare,\r\n        dNetPaidToDateOrigShare,\r\n        dNetPaidToDateSettShare,\r\n        lReserveCcyOrigKey,\r\n        dReserveROEOrig,\r\n        lReserveCcySettKey,\r\n        dReserveROESett,\r\n        lReserveCcyReportKey,\r\n        dReserveROEReport,\r\n        dReserveOrig100,\r\n        dReserveOrigShare,\r\n        dReserveSett100,\r\n        dReserveSettShare,\r\n        dReserveChangeOrig100,\r\n        dReserveChangeOrigShare,\r\n        dReserveChangeSett100,\r\n        dReserveChangeSettShare,\r\n        dReserveChangeAuthOrig100,\r\n        dReserveChangeAuthOrigShare,\r\n        dReserveChangeAuthSett100,\r\n        dReserveChangeAuthSettShare,\r\n        dFacRIReserveOrigShare,\r\n        dFacRIReserveSettShare,\r\n        dPropRIReserveOrigShare,\r\n        dPropRIReserveSettShare,\r\n        dXLRIReserveOrigShare,\r\n        dXLRIReserveSettShare,\r\n        dNetReserveOrigShare,\r\n        dNetReserveSettShare,\r\n        lAdditionalReserveCcyOrigKey,\r\n        dAdditionalReserveROEOrig,\r\n        lAdditionalReserveCcySettKey,\r\n        dAdditionalReserveROESett,\r\n        lAdditionalReserveCcyReportKey,\r\n        dAdditionalReserveROEReport,\r\n        dAdditionalReserveOrig100,\r\n        dAdditionalReserveOrigShare,\r\n        dAdditionalReserveSett100,\r\n        dAdditionalReserveSettShare,\r\n        dAdditionalFacRIOrigShare,\r\n        dAdditionalFacRISettShare,\r\n        dAdditionalPropRIOrigShare,\r\n        dAdditionalPropRISettShare,\r\n        dAdditionalXLRIOrigShare,\r\n        dAdditionalXLRISettShare,\r\n        dAdditionalNetReserveOrigShare,\r\n        dAdditionalNetReserveSettShare,\r\n        dReviseReserveOrig100,\r\n        dReviseReserveOrigShare,\r\n        dReviseReserveSett100,\r\n        dReviseReserveSettShare,\r\n        dTotalReserveOrig100,\r\n        dTotalReserveOrigShare,\r\n        dTotalReserveSett100,\r\n        dTotalReserveSettShare,\r\n        dTotalFacRIReserveOrigShare,\r\n        dTotalFacRIReserveSettShare,\r\n        dTotalPropRIReserveOrigShare,\r\n        dTotalPropRIReserveSettShare,\r\n        dTotalXLRIReserveOrigShare,\r\n        dTotalXLRIReserveSettShare,\r\n        dTotalNetReserveOrigShare,\r\n        dTotalNetReserveSettShare,\r\n        dHighestEstimateOrig100,\r\n        dLeadUWHighestEstimateOrig100,\r\n        sMovementNarrative,\r\n        lExternalAdjusterContactKey,\r\n        sExternalAdjusterReference,\r\n        lExternalLawyerContactKey,\r\n        sExternalLawyerReference,\r\n        sClaimMovementCreatedBy,\r\n        nAccidentYear,\r\n        lAuthorityCheckJoinKey,\r\n        lEventKey,\r\n        bGenerateClaimException,\r\n        lClaimantContactKey,\r\n        sInvoiceNumber,\r\n        lClaimMovementIndemnityKey,\r\n        lClassKey,\r\n        lTypeOfSubClassKey,\r\n        lPayeeRoleKey2,\r\n        lPayeeContactKey2,\r\n        dRIRecoverySettShare,\r\n        dOutstandingRIRecoverySettShr,\r\n        dDeductibleSettShare,\r\n        dLOCAmountSettShare,\r\n        lInsuredKey,\r\n        lExternalAttorneyContactKey,\r\n        lISODeductibleSizeKey,\r\n        lISOTexasDeductibleKey,\r\n        sExtraPaymentDetails,\r\n        bMultiplePayee,\r\n        lBordereauMonthKey,\r\n        bInError,\r\n        sAddressedToName,\r\n        sAddressTo1,\r\n        sAddressTo2,\r\n        sAddressToCity,\r\n        sAddressToPostalCode,\r\n        lAddressToStateKey,\r\n        lAddressedToCountryKey,\r\n        dCurrentAddReserveSettShare,\r\n        dCalcAddReserveSettShare,\r\n        dAddReserveChangeSettShare,\r\n        dReviseAddReserveSettShare,\r\n        dNetPaymentOrigShare,\r\n        dNetPaymentSettShare,\r\n        dPaidToDateOrig100,\r\n        dPaidToDateOrigShare,\r\n        dPaidToDateSett100,\r\n        dPaidToDateSettShare,\r\n        dPaidToDateManualOrig100,\r\n        dPaidToDateManualOrigShare,\r\n        dPaidToDateManualSett100,\r\n        dPaidToDateManualSettShare,\r\n        dAddReserveChangeOrig100,\r\n        dAddReserveChangeOrigShare,\r\n        dAddReserveChangeSett100,\r\n        dTotalReserveChangeOrig100,\r\n        dTotalReserveChangeOrigShare,\r\n        dTotalReserveChangeSett100,\r\n        dTotalReserveChangeSettShare,\r\n        dAddResChangeAuthOrig100,\r\n        dAddResChangeAuthOrigShare,\r\n        dAddResChangeAuthSett100,\r\n        dAddResChangeAuthSettShare,\r\n        dTotalResChangeAuthOrig100,\r\n        dTotalResChangeAuthOrigShare,\r\n        dTotalResChangeAuthSett100,\r\n        dTotalResChangeAuthSettShare,\r\n        dCurrentAddReserveOrig100,\r\n        dCurrentAddReserveOrigShare,\r\n        dCurrentAddReserveSett100,\r\n        dPaidToDateOrig100Hold,\r\n        dPaidToDateOrigShareHold,\r\n        dPaidToDateSett100Hold,\r\n        nClaimPaymentDays,\r\n        dtClaimDueDate,\r\n        dPaymentPendingTotalOrig100,\r\n        dPaymentPendingTotalOrigShare,\r\n        dPaymentPendingTotalSett100,\r\n        dPaymentPendingTotalSettShare,\r\n        b100PcEntered,\r\n        bCoinsuranceClaimAccounting,\r\n        dPaidThisTimeSett100Entered,\r\n        dReviseAddReserveSett100,\r\n        bAuthorisationResult,\r\n        sAuthoriserNotes,\r\n        bProductHardRuleResult,\r\n        bProductRuleResult,\r\n        lTypeOfModuleKey,\r\n        lpolicylinekey,\r\n        bisfirstmovement,\r\n        bGenerateHistoryRow,\r\n        bBureauClaim,\r\n        lImplementationSetupForNewOldRIKey,\r\n        bEnableNewRI,\r\n        bRINonPropClaimAPRProc,\r\n        bClaimMovementPaid,\r\n        lPolicyFolderKey,\r\n        lPolicyKey,\r\n        lPolicyActivityKey,\r\n        lPolicySectionKey,\r\n        lPolSectionLiabilitySummaryKey,\r\n        bLossDateTBA,\r\n        lActivePolicyDetailsKey,\r\n        lPolicyLiabilityKey,\r\n        lPolicyLineLiabilityKey,\r\n        bExGratiaPay,\r\n        bClaimNotPaidWithinXS,\r\n        dAmountClaimed,\r\n        dtClaimsPaidDate,\r\n        dtCoverageConfirmedDate,\r\n        dtFeesPaidDate,\r\n        bPolicySectionMandatory,\r\n        bPolicyCoverageMandatory,\r\n        bMovementBeingEdited,\r\n        lRevTypeofMovementKey,\r\n        bReveral,\r\n        bReversed,\r\n        lOrigClaimMovementKey,\r\n        dReverseCurrentAddReserveSettShare,\r\n        dReverseCurrentAddReserveOrig100,\r\n        dReverseCurrentAddReserveOrigShare,\r\n        dReverseCurrentAddReserveSett100,\r\n        dReversePaidToDateSettShareHold,\r\n        dReversePaidToDateOrig100Hold,\r\n        dReversePaidToDateOrigShareHold,\r\n        dReversePaidToDateSett100Hold,\r\n        lrevtypeofmovementHistKey,\r\n        lReinstatementCurrencyKey,\r\n        dReinstatementROE,\r\n        dReinstatementReserveTotal,\r\n        dReinstatementReservePrevious,\r\n        dReinstatementReserveChange,\r\n        dReinstatementReserveRevise,\r\n        dReinstatementReserveTotalReport,\r\n        dReinstatementReservePreviousReport,\r\n        dReinstatementReserveChangeReport,\r\n        dReinstatementReserveReviseReport,\r\n        dReinstatementPaidToDate,\r\n        dReinstatementPaidToDatePrevious,\r\n        dReinstatementPaidThisTime,\r\n        dReinstatementPaidToDateReport,\r\n        dReinstatementPaidToDatePreviousReport,\r\n        dReinstatementPaidThisTimeReport,\r\n        dReinstatementReserveCalculated,\r\n        lPolicyAPRGroupKey,\r\n        lvPolicyAPRGroupKey,\r\n        dPaidThisTimeReportShare,\r\n        lInwardsTypeOfDeductionKey,\r\n        lInwardsDeductionCurrency,\r\n        dInwardsDeductionROE,\r\n        dInwardsDeductionAmount,\r\n        lReinstatementTypeOfDeductionKey,\r\n        lReinstatementDeductionCurrency,\r\n        dReinstatementDeductionROE,\r\n        dReinstatementDeductionAmount,\r\n        dReviseAddReserveOrigShare,\r\n        dPaidThisTimeBase,\r\n        sClaimant,\r\n        bAdjusted,\r\n        bGenerateAPR,\r\n        bGenerateJV,\r\n        sBureauINsured,\r\n        bTempAddReserve,\r\n        nHighlight,\r\n        dw_loadts,\r\n        row_number() over (\r\n            partition by\r\n                lClaimMovementKey,\r\n                lClaimSectionKey,\r\n                lClaimKey,\r\n                lAccountPeriodKey,\r\n                lAccountPeriodOriginalKey,\r\n                dtMovementFirstAdvised,\r\n                dtMovementCreated,\r\n                dtMovementUpdated,\r\n                sMovementReference,\r\n                nSequence,\r\n                nBureauSequence,\r\n                bManualMovement,\r\n                bConverted,\r\n                sPaymentReference,\r\n                lTransactionTypeKey,\r\n                lPayeeContactKey,\r\n                lPayeeRoleKey,\r\n                bReserveTBA,\r\n                lTypeOfReserveQualifierKey,\r\n                lTypeOfMovementKey,\r\n                lPayMethodKey,\r\n                lPayCcyOrigKey,\r\n                dPayROEOrig,\r\n                lPayCcySettKey,\r\n                dPayROESett,\r\n                lPayCcyReportKey,\r\n                dPayROEReport,\r\n                dPaidThisTimeOrig100,\r\n                dPaidThisTimeOrigShare,\r\n                dPaidThisTimeSett100,\r\n                dPaidThisTimeSettShare,\r\n                dPaymentOrig100,\r\n                dPaymentOrigShare,\r\n                dPaymentSett100,\r\n                dPaymentSettShare,\r\n                dPaymentAuthorisedOrig100,\r\n                dPaymentAuthorisedOrigShare,\r\n                dPaymentAuthorisedSett100,\r\n                dPaymentAuthorisedSettShare,\r\n                dPaymentPendingBureauOrig100,\r\n                dPaymentPendingBureauOrigShare,\r\n                dPaymentPendingBureauSett100,\r\n                dPaymentPendingBureauSettShare,\r\n                dPaymentPendingManualOrig100,\r\n                dPaymentPendingManualOrigShare,\r\n                dPaymentPendingManualSett100,\r\n                dPaymentPendingManualSettShare,\r\n                dFacRIPaidThisTimeOrigShare,\r\n                dFacRIPaidThisTimeSettShare,\r\n                dPropRIPaidThisTimeOrigShare,\r\n                dPropRIPaidThisTimeSettShare,\r\n                dXLRIPaidThisTimeOrigShare,\r\n                dXLRIPaidThisTimeSettShare,\r\n                dPaidToDateBureauOrig100,\r\n                dPaidToDateBureauOrigShare,\r\n                dPaidToDateBureauSett100,\r\n                dPaidToDateBureauSettShare,\r\n                dPaidToDateSettShareHold,\r\n                dFacRIPaidToDateOrigShare,\r\n                dFacRIPaidToDateSettShare,\r\n                dPropRIPaidToDateOrigShare,\r\n                dPropRIPaidToDateSettShare,\r\n                dXLRIPaidToDateOrigShare,\r\n                dXLRIPaidToDateSettShare,\r\n                dNetPaidToDateOrigShare,\r\n                dNetPaidToDateSettShare,\r\n                lReserveCcyOrigKey,\r\n                dReserveROEOrig,\r\n                lReserveCcySettKey,\r\n                dReserveROESett,\r\n                lReserveCcyReportKey,\r\n                dReserveROEReport,\r\n                dReserveOrig100,\r\n                dReserveOrigShare,\r\n                dReserveSett100,\r\n                dReserveSettShare,\r\n                dReserveChangeOrig100,\r\n                dReserveChangeOrigShare,\r\n                dReserveChangeSett100,\r\n                dReserveChangeSettShare,\r\n                dReserveChangeAuthOrig100,\r\n                dReserveChangeAuthOrigShare,\r\n                dReserveChangeAuthSett100,\r\n                dReserveChangeAuthSettShare,\r\n                dFacRIReserveOrigShare,\r\n                dFacRIReserveSettShare,\r\n                dPropRIReserveOrigShare,\r\n                dPropRIReserveSettShare,\r\n                dXLRIReserveOrigShare,\r\n                dXLRIReserveSettShare,\r\n                dNetReserveOrigShare,\r\n                dNetReserveSettShare,\r\n                lAdditionalReserveCcyOrigKey,\r\n                dAdditionalReserveROEOrig,\r\n                lAdditionalReserveCcySettKey,\r\n                dAdditionalReserveROESett,\r\n                lAdditionalReserveCcyReportKey,\r\n                dAdditionalReserveROEReport,\r\n                dAdditionalReserveOrig100,\r\n                dAdditionalReserveOrigShare,\r\n                dAdditionalReserveSett100,\r\n                dAdditionalReserveSettShare,\r\n                dAdditionalFacRIOrigShare,\r\n                dAdditionalFacRISettShare,\r\n                dAdditionalPropRIOrigShare,\r\n                dAdditionalPropRISettShare,\r\n                dAdditionalXLRIOrigShare,\r\n                dAdditionalXLRISettShare,\r\n                dAdditionalNetReserveOrigShare,\r\n                dAdditionalNetReserveSettShare,\r\n                dReviseReserveOrig100,\r\n                dReviseReserveOrigShare,\r\n                dReviseReserveSett100,\r\n                dReviseReserveSettShare,\r\n                dTotalReserveOrig100,\r\n                dTotalReserveOrigShare,\r\n                dTotalReserveSett100,\r\n                dTotalReserveSettShare,\r\n                dTotalFacRIReserveOrigShare,\r\n                dTotalFacRIReserveSettShare,\r\n                dTotalPropRIReserveOrigShare,\r\n                dTotalPropRIReserveSettShare,\r\n                dTotalXLRIReserveOrigShare,\r\n                dTotalXLRIReserveSettShare,\r\n                dTotalNetReserveOrigShare,\r\n                dTotalNetReserveSettShare,\r\n                dHighestEstimateOrig100,\r\n                dLeadUWHighestEstimateOrig100,\r\n                sMovementNarrative,\r\n                lExternalAdjusterContactKey,\r\n                sExternalAdjusterReference,\r\n                lExternalLawyerContactKey,\r\n                sExternalLawyerReference,\r\n                sClaimMovementCreatedBy,\r\n                nAccidentYear,\r\n                lAuthorityCheckJoinKey,\r\n                lEventKey,\r\n                bGenerateClaimException,\r\n                lClaimantContactKey,\r\n                sInvoiceNumber,\r\n                lClaimMovementIndemnityKey,\r\n                lClassKey,\r\n                lTypeOfSubClassKey,\r\n                lPayeeRoleKey2,\r\n                lPayeeContactKey2,\r\n                dRIRecoverySettShare,\r\n                dOutstandingRIRecoverySettShr,\r\n                dDeductibleSettShare,\r\n                dLOCAmountSettShare,\r\n                lInsuredKey,\r\n                lExternalAttorneyContactKey,\r\n                lISODeductibleSizeKey,\r\n                lISOTexasDeductibleKey,\r\n                sExtraPaymentDetails,\r\n                bMultiplePayee,\r\n                lBordereauMonthKey,\r\n                bInError,\r\n                sAddressedToName,\r\n                sAddressTo1,\r\n                sAddressTo2,\r\n                sAddressToCity,\r\n                sAddressToPostalCode,\r\n                lAddressToStateKey,\r\n                lAddressedToCountryKey,\r\n                dCurrentAddReserveSettShare,\r\n                dCalcAddReserveSettShare,\r\n                dAddReserveChangeSettShare,\r\n                dReviseAddReserveSettShare,\r\n                dNetPaymentOrigShare,\r\n                dNetPaymentSettShare,\r\n                dPaidToDateOrig100,\r\n                dPaidToDateOrigShare,\r\n                dPaidToDateSett100,\r\n                dPaidToDateSettShare,\r\n                dPaidToDateManualOrig100,\r\n                dPaidToDateManualOrigShare,\r\n                dPaidToDateManualSett100,\r\n                dPaidToDateManualSettShare,\r\n                dAddReserveChangeOrig100,\r\n                dAddReserveChangeOrigShare,\r\n                dAddReserveChangeSett100,\r\n                dTotalReserveChangeOrig100,\r\n                dTotalReserveChangeOrigShare,\r\n                dTotalReserveChangeSett100,\r\n                dTotalReserveChangeSettShare,\r\n                dAddResChangeAuthOrig100,\r\n                dAddResChangeAuthOrigShare,\r\n                dAddResChangeAuthSett100,\r\n                dAddResChangeAuthSettShare,\r\n                dTotalResChangeAuthOrig100,\r\n                dTotalResChangeAuthOrigShare,\r\n                dTotalResChangeAuthSett100,\r\n                dTotalResChangeAuthSettShare,\r\n                dCurrentAddReserveOrig100,\r\n                dCurrentAddReserveOrigShare,\r\n                dCurrentAddReserveSett100,\r\n                dPaidToDateOrig100Hold,\r\n                dPaidToDateOrigShareHold,\r\n                dPaidToDateSett100Hold,\r\n                nClaimPaymentDays,\r\n                dtClaimDueDate,\r\n                dPaymentPendingTotalOrig100,\r\n                dPaymentPendingTotalOrigShare,\r\n                dPaymentPendingTotalSett100,\r\n                dPaymentPendingTotalSettShare,\r\n                b100PcEntered,\r\n                bCoinsuranceClaimAccounting,\r\n                dPaidThisTimeSett100Entered,\r\n                dReviseAddReserveSett100,\r\n                bAuthorisationResult,\r\n                sAuthoriserNotes,\r\n                bProductHardRuleResult,\r\n                bProductRuleResult,\r\n                lTypeOfModuleKey,\r\n                lpolicylinekey,\r\n                bisfirstmovement,\r\n                bGenerateHistoryRow,\r\n                bBureauClaim,\r\n                lImplementationSetupForNewOldRIKey,\r\n                bEnableNewRI,\r\n                bRINonPropClaimAPRProc,\r\n                bClaimMovementPaid,\r\n                lPolicyFolderKey,\r\n                lPolicyKey,\r\n                lPolicyActivityKey,\r\n                lPolicySectionKey,\r\n                lPolSectionLiabilitySummaryKey,\r\n                bLossDateTBA,\r\n                lActivePolicyDetailsKey,\r\n                lPolicyLiabilityKey,\r\n                lPolicyLineLiabilityKey,\r\n                bExGratiaPay,\r\n                bClaimNotPaidWithinXS,\r\n                dAmountClaimed,\r\n                dtClaimsPaidDate,\r\n                dtCoverageConfirmedDate,\r\n                dtFeesPaidDate,\r\n                bPolicySectionMandatory,\r\n                bPolicyCoverageMandatory,\r\n                bMovementBeingEdited,\r\n                lRevTypeofMovementKey,\r\n                bReveral,\r\n                bReversed,\r\n                lOrigClaimMovementKey,\r\n                dReverseCurrentAddReserveSettShare,\r\n                dReverseCurrentAddReserveOrig100,\r\n                dReverseCurrentAddReserveOrigShare,\r\n                dReverseCurrentAddReserveSett100,\r\n                dReversePaidToDateSettShareHold,\r\n                dReversePaidToDateOrig100Hold,\r\n                dReversePaidToDateOrigShareHold,\r\n                dReversePaidToDateSett100Hold,\r\n                lrevtypeofmovementHistKey,\r\n                lReinstatementCurrencyKey,\r\n                dReinstatementROE,\r\n                dReinstatementReserveTotal,\r\n                dReinstatementReservePrevious,\r\n                dReinstatementReserveChange,\r\n                dReinstatementReserveRevise,\r\n                dReinstatementReserveTotalReport,\r\n                dReinstatementReservePreviousReport,\r\n                dReinstatementReserveChangeReport,\r\n                dReinstatementReserveReviseReport,\r\n                dReinstatementPaidToDate,\r\n                dReinstatementPaidToDatePrevious,\r\n                dReinstatementPaidThisTime,\r\n                dReinstatementPaidToDateReport,\r\n                dReinstatementPaidToDatePreviousReport,\r\n                dReinstatementPaidThisTimeReport,\r\n                dReinstatementReserveCalculated,\r\n                lPolicyAPRGroupKey,\r\n                lvPolicyAPRGroupKey,\r\n                dPaidThisTimeReportShare,\r\n                lInwardsTypeOfDeductionKey,\r\n                lInwardsDeductionCurrency,\r\n                dInwardsDeductionROE,\r\n                dInwardsDeductionAmount,\r\n                lReinstatementTypeOfDeductionKey,\r\n                lReinstatementDeductionCurrency,\r\n                dReinstatementDeductionROE,\r\n                dReinstatementDeductionAmount,\r\n                dReviseAddReserveOrigShare,\r\n                dPaidThisTimeBase,\r\n                sClaimant,\r\n                bAdjusted,\r\n                bGenerateAPR,\r\n                bGenerateJV,\r\n                sBureauINsured,\r\n                bTempAddReserve,\r\n                nHighlight\r\n            order by\r\n                dw_loadts\r\n        ) as dw_extract_order\r\n    from\r\n        claim_movement\r\n),\r\n\r\nfiltered as (\r\n    select * from ordered where dw_extract_order = 1\r\n),\r\n\r\nranged as (\r\n    select\r\n        lClaimMovementKey,\r\n        lClaimSectionKey,\r\n        lClaimKey,\r\n        lAccountPeriodKey,\r\n        lAccountPeriodOriginalKey,\r\n        dtMovementFirstAdvised,\r\n        dtMovementCreated,\r\n        dtMovementUpdated,\r\n        sMovementReference,\r\n        nSequence,\r\n        nBureauSequence,\r\n        bManualMovement,\r\n        bConverted,\r\n        sPaymentReference,\r\n        lTransactionTypeKey,\r\n        lPayeeContactKey,\r\n        lPayeeRoleKey,\r\n        bReserveTBA,\r\n        lTypeOfReserveQualifierKey,\r\n        lTypeOfMovementKey,\r\n        lPayMethodKey,\r\n        lPayCcyOrigKey,\r\n        dPayROEOrig,\r\n        lPayCcySettKey,\r\n        dPayROESett,\r\n        lPayCcyReportKey,\r\n        dPayROEReport,\r\n        dPaidThisTimeOrig100,\r\n        dPaidThisTimeOrigShare,\r\n        dPaidThisTimeSett100,\r\n        dPaidThisTimeSettShare,\r\n        dPaymentOrig100,\r\n        dPaymentOrigShare,\r\n        dPaymentSett100,\r\n        dPaymentSettShare,\r\n        dPaymentAuthorisedOrig100,\r\n        dPaymentAuthorisedOrigShare,\r\n        dPaymentAuthorisedSett100,\r\n        dPaymentAuthorisedSettShare,\r\n        dPaymentPendingBureauOrig100,\r\n        dPaymentPendingBureauOrigShare,\r\n        dPaymentPendingBureauSett100,\r\n        dPaymentPendingBureauSettShare,\r\n        dPaymentPendingManualOrig100,\r\n        dPaymentPendingManualOrigShare,\r\n        dPaymentPendingManualSett100,\r\n        dPaymentPendingManualSettShare,\r\n        dFacRIPaidThisTimeOrigShare,\r\n        dFacRIPaidThisTimeSettShare,\r\n        dPropRIPaidThisTimeOrigShare,\r\n        dPropRIPaidThisTimeSettShare,\r\n        dXLRIPaidThisTimeOrigShare,\r\n        dXLRIPaidThisTimeSettShare,\r\n        dPaidToDateBureauOrig100,\r\n        dPaidToDateBureauOrigShare,\r\n        dPaidToDateBureauSett100,\r\n        dPaidToDateBureauSettShare,\r\n        dPaidToDateSettShareHold,\r\n        dFacRIPaidToDateOrigShare,\r\n        dFacRIPaidToDateSettShare,\r\n        dPropRIPaidToDateOrigShare,\r\n        dPropRIPaidToDateSettShare,\r\n        dXLRIPaidToDateOrigShare,\r\n        dXLRIPaidToDateSettShare,\r\n        dNetPaidToDateOrigShare,\r\n        dNetPaidToDateSettShare,\r\n        lReserveCcyOrigKey,\r\n        dReserveROEOrig,\r\n        lReserveCcySettKey,\r\n        dReserveROESett,\r\n        lReserveCcyReportKey,\r\n        dReserveROEReport,\r\n        dReserveOrig100,\r\n        dReserveOrigShare,\r\n        dReserveSett100,\r\n        dReserveSettShare,\r\n        dReserveChangeOrig100,\r\n        dReserveChangeOrigShare,\r\n        dReserveChangeSett100,\r\n        dReserveChangeSettShare,\r\n        dReserveChangeAuthOrig100,\r\n        dReserveChangeAuthOrigShare,\r\n        dReserveChangeAuthSett100,\r\n        dReserveChangeAuthSettShare,\r\n        dFacRIReserveOrigShare,\r\n        dFacRIReserveSettShare,\r\n        dPropRIReserveOrigShare,\r\n        dPropRIReserveSettShare,\r\n        dXLRIReserveOrigShare,\r\n        dXLRIReserveSettShare,\r\n        dNetReserveOrigShare,\r\n        dNetReserveSettShare,\r\n        lAdditionalReserveCcyOrigKey,\r\n        dAdditionalReserveROEOrig,\r\n        lAdditionalReserveCcySettKey,\r\n        dAdditionalReserveROESett,\r\n        lAdditionalReserveCcyReportKey,\r\n        dAdditionalReserveROEReport,\r\n        dAdditionalReserveOrig100,\r\n        dAdditionalReserveOrigShare,\r\n        dAdditionalReserveSett100,\r\n        dAdditionalReserveSettShare,\r\n        dAdditionalFacRIOrigShare,\r\n        dAdditionalFacRISettShare,\r\n        dAdditionalPropRIOrigShare,\r\n        dAdditionalPropRISettShare,\r\n        dAdditionalXLRIOrigShare,\r\n        dAdditionalXLRISettShare,\r\n        dAdditionalNetReserveOrigShare,\r\n        dAdditionalNetReserveSettShare,\r\n        dReviseReserveOrig100,\r\n        dReviseReserveOrigShare,\r\n        dReviseReserveSett100,\r\n        dReviseReserveSettShare,\r\n        dTotalReserveOrig100,\r\n        dTotalReserveOrigShare,\r\n        dTotalReserveSett100,\r\n        dTotalReserveSettShare,\r\n        dTotalFacRIReserveOrigShare,\r\n        dTotalFacRIReserveSettShare,\r\n        dTotalPropRIReserveOrigShare,\r\n        dTotalPropRIReserveSettShare,\r\n        dTotalXLRIReserveOrigShare,\r\n        dTotalXLRIReserveSettShare,\r\n        dTotalNetReserveOrigShare,\r\n        dTotalNetReserveSettShare,\r\n        dHighestEstimateOrig100,\r\n        dLeadUWHighestEstimateOrig100,\r\n        sMovementNarrative,\r\n        lExternalAdjusterContactKey,\r\n        sExternalAdjusterReference,\r\n        lExternalLawyerContactKey,\r\n        sExternalLawyerReference,\r\n        sClaimMovementCreatedBy,\r\n        nAccidentYear,\r\n        lAuthorityCheckJoinKey,\r\n        lEventKey,\r\n        bGenerateClaimException,\r\n        lClaimantContactKey,\r\n        sInvoiceNumber,\r\n        lClaimMovementIndemnityKey,\r\n        lClassKey,\r\n        lTypeOfSubClassKey,\r\n        lPayeeRoleKey2,\r\n        lPayeeContactKey2,\r\n        dRIRecoverySettShare,\r\n        dOutstandingRIRecoverySettShr,\r\n        dDeductibleSettShare,\r\n        dLOCAmountSettShare,\r\n        lInsuredKey,\r\n        lExternalAttorneyContactKey,\r\n        lISODeductibleSizeKey,\r\n        lISOTexasDeductibleKey,\r\n        sExtraPaymentDetails,\r\n        bMultiplePayee,\r\n        lBordereauMonthKey,\r\n        bInError,\r\n        sAddressedToName,\r\n        sAddressTo1,\r\n        sAddressTo2,\r\n        sAddressToCity,\r\n        sAddressToPostalCode,\r\n        lAddressToStateKey,\r\n        lAddressedToCountryKey,\r\n        dCurrentAddReserveSettShare,\r\n        dCalcAddReserveSettShare,\r\n        dAddReserveChangeSettShare,\r\n        dReviseAddReserveSettShare,\r\n        dNetPaymentOrigShare,\r\n        dNetPaymentSettShare,\r\n        dPaidToDateOrig100,\r\n        dPaidToDateOrigShare,\r\n        dPaidToDateSett100,\r\n        dPaidToDateSettShare,\r\n        dPaidToDateManualOrig100,\r\n        dPaidToDateManualOrigShare,\r\n        dPaidToDateManualSett100,\r\n        dPaidToDateManualSettShare,\r\n        dAddReserveChangeOrig100,\r\n        dAddReserveChangeOrigShare,\r\n        dAddReserveChangeSett100,\r\n        dTotalReserveChangeOrig100,\r\n        dTotalReserveChangeOrigShare,\r\n        dTotalReserveChangeSett100,\r\n        dTotalReserveChangeSettShare,\r\n        dAddResChangeAuthOrig100,\r\n        dAddResChangeAuthOrigShare,\r\n        dAddResChangeAuthSett100,\r\n        dAddResChangeAuthSettShare,\r\n        dTotalResChangeAuthOrig100,\r\n        dTotalResChangeAuthOrigShare,\r\n        dTotalResChangeAuthSett100,\r\n        dTotalResChangeAuthSettShare,\r\n        dCurrentAddReserveOrig100,\r\n        dCurrentAddReserveOrigShare,\r\n        dCurrentAddReserveSett100,\r\n        dPaidToDateOrig100Hold,\r\n        dPaidToDateOrigShareHold,\r\n        dPaidToDateSett100Hold,\r\n        nClaimPaymentDays,\r\n        dtClaimDueDate,\r\n        dPaymentPendingTotalOrig100,\r\n        dPaymentPendingTotalOrigShare,\r\n        dPaymentPendingTotalSett100,\r\n        dPaymentPendingTotalSettShare,\r\n        b100PcEntered,\r\n        bCoinsuranceClaimAccounting,\r\n        dPaidThisTimeSett100Entered,\r\n        dReviseAddReserveSett100,\r\n        bAuthorisationResult,\r\n        sAuthoriserNotes,\r\n        bProductHardRuleResult,\r\n        bProductRuleResult,\r\n        lTypeOfModuleKey,\r\n        lpolicylinekey,\r\n        bisfirstmovement,\r\n        bGenerateHistoryRow,\r\n        bBureauClaim,\r\n        lImplementationSetupForNewOldRIKey,\r\n        bEnableNewRI,\r\n        bRINonPropClaimAPRProc,\r\n        bClaimMovementPaid,\r\n        lPolicyFolderKey,\r\n        lPolicyKey,\r\n        lPolicyActivityKey,\r\n        lPolicySectionKey,\r\n        lPolSectionLiabilitySummaryKey,\r\n        bLossDateTBA,\r\n        lActivePolicyDetailsKey,\r\n        lPolicyLiabilityKey,\r\n        lPolicyLineLiabilityKey,\r\n        bExGratiaPay,\r\n        bClaimNotPaidWithinXS,\r\n        dAmountClaimed,\r\n        dtClaimsPaidDate,\r\n        dtCoverageConfirmedDate,\r\n        dtFeesPaidDate,\r\n        bPolicySectionMandatory,\r\n        bPolicyCoverageMandatory,\r\n        bMovementBeingEdited,\r\n        lRevTypeofMovementKey,\r\n        bReveral,\r\n        bReversed,\r\n        lOrigClaimMovementKey,\r\n        dReverseCurrentAddReserveSettShare,\r\n        dReverseCurrentAddReserveOrig100,\r\n        dReverseCurrentAddReserveOrigShare,\r\n        dReverseCurrentAddReserveSett100,\r\n        dReversePaidToDateSettShareHold,\r\n        dReversePaidToDateOrig100Hold,\r\n        dReversePaidToDateOrigShareHold,\r\n        dReversePaidToDateSett100Hold,\r\n        lrevtypeofmovementHistKey,\r\n        lReinstatementCurrencyKey,\r\n        dReinstatementROE,\r\n        dReinstatementReserveTotal,\r\n        dReinstatementReservePrevious,\r\n        dReinstatementReserveChange,\r\n        dReinstatementReserveRevise,\r\n        dReinstatementReserveTotalReport,\r\n        dReinstatementReservePreviousReport,\r\n        dReinstatementReserveChangeReport,\r\n        dReinstatementReserveReviseReport,\r\n        dReinstatementPaidToDate,\r\n        dReinstatementPaidToDatePrevious,\r\n        dReinstatementPaidThisTime,\r\n        dReinstatementPaidToDateReport,\r\n        dReinstatementPaidToDatePreviousReport,\r\n        dReinstatementPaidThisTimeReport,\r\n        dReinstatementReserveCalculated,\r\n        lPolicyAPRGroupKey,\r\n        lvPolicyAPRGroupKey,\r\n        dPaidThisTimeReportShare,\r\n        lInwardsTypeOfDeductionKey,\r\n        lInwardsDeductionCurrency,\r\n        dInwardsDeductionROE,\r\n        dInwardsDeductionAmount,\r\n        lReinstatementTypeOfDeductionKey,\r\n        lReinstatementDeductionCurrency,\r\n        dReinstatementDeductionROE,\r\n        dReinstatementDeductionAmount,\r\n        dReviseAddReserveOrigShare,\r\n        dPaidThisTimeBase,\r\n        sClaimant,\r\n        bAdjusted,\r\n        bGenerateAPR,\r\n        bGenerateJV,\r\n        sBureauINsured,\r\n        bTempAddReserve,\r\n        nHighlight,\r\n        dw_loadts as _valid_from,\r\n        lead(dw_loadts) over (partition by lClaimMovementKey order by dw_loadts) as _valid_to\r\n    from\r\n        filtered\r\n)\r\n\r\nselect * from ranged", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "scd\\scd_claim_movement.sql", "original_file_path": "models\\scd\\scd_claim_movement.sql", "name": "scd_claim_movement", "alias": "scd_claim_movement", "checksum": {"name": "sha256", "checksum": "9a5372f3b41c013b09cc04d728c688854296c52d6faa744fc2c9d2fbb1a99961"}, "tags": [], "refs": [], "sources": [["dbo", "claim_movement"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": "iginsure://models\\scd\\scd.yml", "compiled_path": "target\\compiled\\iginsure\\models\\scd\\scd_claim_movement.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "docs": {"show": false}}, "created_at": 1701786801.760781, "compiled_code": "-- This file is automatically generated\n\nwith\n\nclaim_movement as (\n    select * from \"IGI_PROD_DW\".\"dbo\".\"ClaimMovement\"\n),\n\nordered as (\n    select\n        lClaimMovementKey,\n        lClaimSectionKey,\n        lClaimKey,\n        lAccountPeriodKey,\n        lAccountPeriodOriginalKey,\n        dtMovementFirstAdvised,\n        dtMovementCreated,\n        dtMovementUpdated,\n        sMovementReference,\n        nSequence,\n        nBureauSequence,\n        bManualMovement,\n        bConverted,\n        sPaymentReference,\n        lTransactionTypeKey,\n        lPayeeContactKey,\n        lPayeeRoleKey,\n        bReserveTBA,\n        lTypeOfReserveQualifierKey,\n        lTypeOfMovementKey,\n        lPayMethodKey,\n        lPayCcyOrigKey,\n        dPayROEOrig,\n        lPayCcySettKey,\n        dPayROESett,\n        lPayCcyReportKey,\n        dPayROEReport,\n        dPaidThisTimeOrig100,\n        dPaidThisTimeOrigShare,\n        dPaidThisTimeSett100,\n        dPaidThisTimeSettShare,\n        dPaymentOrig100,\n        dPaymentOrigShare,\n        dPaymentSett100,\n        dPaymentSettShare,\n        dPaymentAuthorisedOrig100,\n        dPaymentAuthorisedOrigShare,\n        dPaymentAuthorisedSett100,\n        dPaymentAuthorisedSettShare,\n        dPaymentPendingBureauOrig100,\n        dPaymentPendingBureauOrigShare,\n        dPaymentPendingBureauSett100,\n        dPaymentPendingBureauSettShare,\n        dPaymentPendingManualOrig100,\n        dPaymentPendingManualOrigShare,\n        dPaymentPendingManualSett100,\n        dPaymentPendingManualSettShare,\n        dFacRIPaidThisTimeOrigShare,\n        dFacRIPaidThisTimeSettShare,\n        dPropRIPaidThisTimeOrigShare,\n        dPropRIPaidThisTimeSettShare,\n        dXLRIPaidThisTimeOrigShare,\n        dXLRIPaidThisTimeSettShare,\n        dPaidToDateBureauOrig100,\n        dPaidToDateBureauOrigShare,\n        dPaidToDateBureauSett100,\n        dPaidToDateBureauSettShare,\n        dPaidToDateSettShareHold,\n        dFacRIPaidToDateOrigShare,\n        dFacRIPaidToDateSettShare,\n        dPropRIPaidToDateOrigShare,\n        dPropRIPaidToDateSettShare,\n        dXLRIPaidToDateOrigShare,\n        dXLRIPaidToDateSettShare,\n        dNetPaidToDateOrigShare,\n        dNetPaidToDateSettShare,\n        lReserveCcyOrigKey,\n        dReserveROEOrig,\n        lReserveCcySettKey,\n        dReserveROESett,\n        lReserveCcyReportKey,\n        dReserveROEReport,\n        dReserveOrig100,\n        dReserveOrigShare,\n        dReserveSett100,\n        dReserveSettShare,\n        dReserveChangeOrig100,\n        dReserveChangeOrigShare,\n        dReserveChangeSett100,\n        dReserveChangeSettShare,\n        dReserveChangeAuthOrig100,\n        dReserveChangeAuthOrigShare,\n        dReserveChangeAuthSett100,\n        dReserveChangeAuthSettShare,\n        dFacRIReserveOrigShare,\n        dFacRIReserveSettShare,\n        dPropRIReserveOrigShare,\n        dPropRIReserveSettShare,\n        dXLRIReserveOrigShare,\n        dXLRIReserveSettShare,\n        dNetReserveOrigShare,\n        dNetReserveSettShare,\n        lAdditionalReserveCcyOrigKey,\n        dAdditionalReserveROEOrig,\n        lAdditionalReserveCcySettKey,\n        dAdditionalReserveROESett,\n        lAdditionalReserveCcyReportKey,\n        dAdditionalReserveROEReport,\n        dAdditionalReserveOrig100,\n        dAdditionalReserveOrigShare,\n        dAdditionalReserveSett100,\n        dAdditionalReserveSettShare,\n        dAdditionalFacRIOrigShare,\n        dAdditionalFacRISettShare,\n        dAdditionalPropRIOrigShare,\n        dAdditionalPropRISettShare,\n        dAdditionalXLRIOrigShare,\n        dAdditionalXLRISettShare,\n        dAdditionalNetReserveOrigShare,\n        dAdditionalNetReserveSettShare,\n        dReviseReserveOrig100,\n        dReviseReserveOrigShare,\n        dReviseReserveSett100,\n        dReviseReserveSettShare,\n        dTotalReserveOrig100,\n        dTotalReserveOrigShare,\n        dTotalReserveSett100,\n        dTotalReserveSettShare,\n        dTotalFacRIReserveOrigShare,\n        dTotalFacRIReserveSettShare,\n        dTotalPropRIReserveOrigShare,\n        dTotalPropRIReserveSettShare,\n        dTotalXLRIReserveOrigShare,\n        dTotalXLRIReserveSettShare,\n        dTotalNetReserveOrigShare,\n        dTotalNetReserveSettShare,\n        dHighestEstimateOrig100,\n        dLeadUWHighestEstimateOrig100,\n        sMovementNarrative,\n        lExternalAdjusterContactKey,\n        sExternalAdjusterReference,\n        lExternalLawyerContactKey,\n        sExternalLawyerReference,\n        sClaimMovementCreatedBy,\n        nAccidentYear,\n        lAuthorityCheckJoinKey,\n        lEventKey,\n        bGenerateClaimException,\n        lClaimantContactKey,\n        sInvoiceNumber,\n        lClaimMovementIndemnityKey,\n        lClassKey,\n        lTypeOfSubClassKey,\n        lPayeeRoleKey2,\n        lPayeeContactKey2,\n        dRIRecoverySettShare,\n        dOutstandingRIRecoverySettShr,\n        dDeductibleSettShare,\n        dLOCAmountSettShare,\n        lInsuredKey,\n        lExternalAttorneyContactKey,\n        lISODeductibleSizeKey,\n        lISOTexasDeductibleKey,\n        sExtraPaymentDetails,\n        bMultiplePayee,\n        lBordereauMonthKey,\n        bInError,\n        sAddressedToName,\n        sAddressTo1,\n        sAddressTo2,\n        sAddressToCity,\n        sAddressToPostalCode,\n        lAddressToStateKey,\n        lAddressedToCountryKey,\n        dCurrentAddReserveSettShare,\n        dCalcAddReserveSettShare,\n        dAddReserveChangeSettShare,\n        dReviseAddReserveSettShare,\n        dNetPaymentOrigShare,\n        dNetPaymentSettShare,\n        dPaidToDateOrig100,\n        dPaidToDateOrigShare,\n        dPaidToDateSett100,\n        dPaidToDateSettShare,\n        dPaidToDateManualOrig100,\n        dPaidToDateManualOrigShare,\n        dPaidToDateManualSett100,\n        dPaidToDateManualSettShare,\n        dAddReserveChangeOrig100,\n        dAddReserveChangeOrigShare,\n        dAddReserveChangeSett100,\n        dTotalReserveChangeOrig100,\n        dTotalReserveChangeOrigShare,\n        dTotalReserveChangeSett100,\n        dTotalReserveChangeSettShare,\n        dAddResChangeAuthOrig100,\n        dAddResChangeAuthOrigShare,\n        dAddResChangeAuthSett100,\n        dAddResChangeAuthSettShare,\n        dTotalResChangeAuthOrig100,\n        dTotalResChangeAuthOrigShare,\n        dTotalResChangeAuthSett100,\n        dTotalResChangeAuthSettShare,\n        dCurrentAddReserveOrig100,\n        dCurrentAddReserveOrigShare,\n        dCurrentAddReserveSett100,\n        dPaidToDateOrig100Hold,\n        dPaidToDateOrigShareHold,\n        dPaidToDateSett100Hold,\n        nClaimPaymentDays,\n        dtClaimDueDate,\n        dPaymentPendingTotalOrig100,\n        dPaymentPendingTotalOrigShare,\n        dPaymentPendingTotalSett100,\n        dPaymentPendingTotalSettShare,\n        b100PcEntered,\n        bCoinsuranceClaimAccounting,\n        dPaidThisTimeSett100Entered,\n        dReviseAddReserveSett100,\n        bAuthorisationResult,\n        sAuthoriserNotes,\n        bProductHardRuleResult,\n        bProductRuleResult,\n        lTypeOfModuleKey,\n        lpolicylinekey,\n        bisfirstmovement,\n        bGenerateHistoryRow,\n        bBureauClaim,\n        lImplementationSetupForNewOldRIKey,\n        bEnableNewRI,\n        bRINonPropClaimAPRProc,\n        bClaimMovementPaid,\n        lPolicyFolderKey,\n        lPolicyKey,\n        lPolicyActivityKey,\n        lPolicySectionKey,\n        lPolSectionLiabilitySummaryKey,\n        bLossDateTBA,\n        lActivePolicyDetailsKey,\n        lPolicyLiabilityKey,\n        lPolicyLineLiabilityKey,\n        bExGratiaPay,\n        bClaimNotPaidWithinXS,\n        dAmountClaimed,\n        dtClaimsPaidDate,\n        dtCoverageConfirmedDate,\n        dtFeesPaidDate,\n        bPolicySectionMandatory,\n        bPolicyCoverageMandatory,\n        bMovementBeingEdited,\n        lRevTypeofMovementKey,\n        bReveral,\n        bReversed,\n        lOrigClaimMovementKey,\n        dReverseCurrentAddReserveSettShare,\n        dReverseCurrentAddReserveOrig100,\n        dReverseCurrentAddReserveOrigShare,\n        dReverseCurrentAddReserveSett100,\n        dReversePaidToDateSettShareHold,\n        dReversePaidToDateOrig100Hold,\n        dReversePaidToDateOrigShareHold,\n        dReversePaidToDateSett100Hold,\n        lrevtypeofmovementHistKey,\n        lReinstatementCurrencyKey,\n        dReinstatementROE,\n        dReinstatementReserveTotal,\n        dReinstatementReservePrevious,\n        dReinstatementReserveChange,\n        dReinstatementReserveRevise,\n        dReinstatementReserveTotalReport,\n        dReinstatementReservePreviousReport,\n        dReinstatementReserveChangeReport,\n        dReinstatementReserveReviseReport,\n        dReinstatementPaidToDate,\n        dReinstatementPaidToDatePrevious,\n        dReinstatementPaidThisTime,\n        dReinstatementPaidToDateReport,\n        dReinstatementPaidToDatePreviousReport,\n        dReinstatementPaidThisTimeReport,\n        dReinstatementReserveCalculated,\n        lPolicyAPRGroupKey,\n        lvPolicyAPRGroupKey,\n        dPaidThisTimeReportShare,\n        lInwardsTypeOfDeductionKey,\n        lInwardsDeductionCurrency,\n        dInwardsDeductionROE,\n        dInwardsDeductionAmount,\n        lReinstatementTypeOfDeductionKey,\n        lReinstatementDeductionCurrency,\n        dReinstatementDeductionROE,\n        dReinstatementDeductionAmount,\n        dReviseAddReserveOrigShare,\n        dPaidThisTimeBase,\n        sClaimant,\n        bAdjusted,\n        bGenerateAPR,\n        bGenerateJV,\n        sBureauINsured,\n        bTempAddReserve,\n        nHighlight,\n        dw_loadts,\n        row_number() over (\n            partition by\n                lClaimMovementKey,\n                lClaimSectionKey,\n                lClaimKey,\n                lAccountPeriodKey,\n                lAccountPeriodOriginalKey,\n                dtMovementFirstAdvised,\n                dtMovementCreated,\n                dtMovementUpdated,\n                sMovementReference,\n                nSequence,\n                nBureauSequence,\n                bManualMovement,\n                bConverted,\n                sPaymentReference,\n                lTransactionTypeKey,\n                lPayeeContactKey,\n                lPayeeRoleKey,\n                bReserveTBA,\n                lTypeOfReserveQualifierKey,\n                lTypeOfMovementKey,\n                lPayMethodKey,\n                lPayCcyOrigKey,\n                dPayROEOrig,\n                lPayCcySettKey,\n                dPayROESett,\n                lPayCcyReportKey,\n                dPayROEReport,\n                dPaidThisTimeOrig100,\n                dPaidThisTimeOrigShare,\n                dPaidThisTimeSett100,\n                dPaidThisTimeSettShare,\n                dPaymentOrig100,\n                dPaymentOrigShare,\n                dPaymentSett100,\n                dPaymentSettShare,\n                dPaymentAuthorisedOrig100,\n                dPaymentAuthorisedOrigShare,\n                dPaymentAuthorisedSett100,\n                dPaymentAuthorisedSettShare,\n                dPaymentPendingBureauOrig100,\n                dPaymentPendingBureauOrigShare,\n                dPaymentPendingBureauSett100,\n                dPaymentPendingBureauSettShare,\n                dPaymentPendingManualOrig100,\n                dPaymentPendingManualOrigShare,\n                dPaymentPendingManualSett100,\n                dPaymentPendingManualSettShare,\n                dFacRIPaidThisTimeOrigShare,\n                dFacRIPaidThisTimeSettShare,\n                dPropRIPaidThisTimeOrigShare,\n                dPropRIPaidThisTimeSettShare,\n                dXLRIPaidThisTimeOrigShare,\n                dXLRIPaidThisTimeSettShare,\n                dPaidToDateBureauOrig100,\n                dPaidToDateBureauOrigShare,\n                dPaidToDateBureauSett100,\n                dPaidToDateBureauSettShare,\n                dPaidToDateSettShareHold,\n                dFacRIPaidToDateOrigShare,\n                dFacRIPaidToDateSettShare,\n                dPropRIPaidToDateOrigShare,\n                dPropRIPaidToDateSettShare,\n                dXLRIPaidToDateOrigShare,\n                dXLRIPaidToDateSettShare,\n                dNetPaidToDateOrigShare,\n                dNetPaidToDateSettShare,\n                lReserveCcyOrigKey,\n                dReserveROEOrig,\n                lReserveCcySettKey,\n                dReserveROESett,\n                lReserveCcyReportKey,\n                dReserveROEReport,\n                dReserveOrig100,\n                dReserveOrigShare,\n                dReserveSett100,\n                dReserveSettShare,\n                dReserveChangeOrig100,\n                dReserveChangeOrigShare,\n                dReserveChangeSett100,\n                dReserveChangeSettShare,\n                dReserveChangeAuthOrig100,\n                dReserveChangeAuthOrigShare,\n                dReserveChangeAuthSett100,\n                dReserveChangeAuthSettShare,\n                dFacRIReserveOrigShare,\n                dFacRIReserveSettShare,\n                dPropRIReserveOrigShare,\n                dPropRIReserveSettShare,\n                dXLRIReserveOrigShare,\n                dXLRIReserveSettShare,\n                dNetReserveOrigShare,\n                dNetReserveSettShare,\n                lAdditionalReserveCcyOrigKey,\n                dAdditionalReserveROEOrig,\n                lAdditionalReserveCcySettKey,\n                dAdditionalReserveROESett,\n                lAdditionalReserveCcyReportKey,\n                dAdditionalReserveROEReport,\n                dAdditionalReserveOrig100,\n                dAdditionalReserveOrigShare,\n                dAdditionalReserveSett100,\n                dAdditionalReserveSettShare,\n                dAdditionalFacRIOrigShare,\n                dAdditionalFacRISettShare,\n                dAdditionalPropRIOrigShare,\n                dAdditionalPropRISettShare,\n                dAdditionalXLRIOrigShare,\n                dAdditionalXLRISettShare,\n                dAdditionalNetReserveOrigShare,\n                dAdditionalNetReserveSettShare,\n                dReviseReserveOrig100,\n                dReviseReserveOrigShare,\n                dReviseReserveSett100,\n                dReviseReserveSettShare,\n                dTotalReserveOrig100,\n                dTotalReserveOrigShare,\n                dTotalReserveSett100,\n                dTotalReserveSettShare,\n                dTotalFacRIReserveOrigShare,\n                dTotalFacRIReserveSettShare,\n                dTotalPropRIReserveOrigShare,\n                dTotalPropRIReserveSettShare,\n                dTotalXLRIReserveOrigShare,\n                dTotalXLRIReserveSettShare,\n                dTotalNetReserveOrigShare,\n                dTotalNetReserveSettShare,\n                dHighestEstimateOrig100,\n                dLeadUWHighestEstimateOrig100,\n                sMovementNarrative,\n                lExternalAdjusterContactKey,\n                sExternalAdjusterReference,\n                lExternalLawyerContactKey,\n                sExternalLawyerReference,\n                sClaimMovementCreatedBy,\n                nAccidentYear,\n                lAuthorityCheckJoinKey,\n                lEventKey,\n                bGenerateClaimException,\n                lClaimantContactKey,\n                sInvoiceNumber,\n                lClaimMovementIndemnityKey,\n                lClassKey,\n                lTypeOfSubClassKey,\n                lPayeeRoleKey2,\n                lPayeeContactKey2,\n                dRIRecoverySettShare,\n                dOutstandingRIRecoverySettShr,\n                dDeductibleSettShare,\n                dLOCAmountSettShare,\n                lInsuredKey,\n                lExternalAttorneyContactKey,\n                lISODeductibleSizeKey,\n                lISOTexasDeductibleKey,\n                sExtraPaymentDetails,\n                bMultiplePayee,\n                lBordereauMonthKey,\n                bInError,\n                sAddressedToName,\n                sAddressTo1,\n                sAddressTo2,\n                sAddressToCity,\n                sAddressToPostalCode,\n                lAddressToStateKey,\n                lAddressedToCountryKey,\n                dCurrentAddReserveSettShare,\n                dCalcAddReserveSettShare,\n                dAddReserveChangeSettShare,\n                dReviseAddReserveSettShare,\n                dNetPaymentOrigShare,\n                dNetPaymentSettShare,\n                dPaidToDateOrig100,\n                dPaidToDateOrigShare,\n                dPaidToDateSett100,\n                dPaidToDateSettShare,\n                dPaidToDateManualOrig100,\n                dPaidToDateManualOrigShare,\n                dPaidToDateManualSett100,\n                dPaidToDateManualSettShare,\n                dAddReserveChangeOrig100,\n                dAddReserveChangeOrigShare,\n                dAddReserveChangeSett100,\n                dTotalReserveChangeOrig100,\n                dTotalReserveChangeOrigShare,\n                dTotalReserveChangeSett100,\n                dTotalReserveChangeSettShare,\n                dAddResChangeAuthOrig100,\n                dAddResChangeAuthOrigShare,\n                dAddResChangeAuthSett100,\n                dAddResChangeAuthSettShare,\n                dTotalResChangeAuthOrig100,\n                dTotalResChangeAuthOrigShare,\n                dTotalResChangeAuthSett100,\n                dTotalResChangeAuthSettShare,\n                dCurrentAddReserveOrig100,\n                dCurrentAddReserveOrigShare,\n                dCurrentAddReserveSett100,\n                dPaidToDateOrig100Hold,\n                dPaidToDateOrigShareHold,\n                dPaidToDateSett100Hold,\n                nClaimPaymentDays,\n                dtClaimDueDate,\n                dPaymentPendingTotalOrig100,\n                dPaymentPendingTotalOrigShare,\n                dPaymentPendingTotalSett100,\n                dPaymentPendingTotalSettShare,\n                b100PcEntered,\n                bCoinsuranceClaimAccounting,\n                dPaidThisTimeSett100Entered,\n                dReviseAddReserveSett100,\n                bAuthorisationResult,\n                sAuthoriserNotes,\n                bProductHardRuleResult,\n                bProductRuleResult,\n                lTypeOfModuleKey,\n                lpolicylinekey,\n                bisfirstmovement,\n                bGenerateHistoryRow,\n                bBureauClaim,\n                lImplementationSetupForNewOldRIKey,\n                bEnableNewRI,\n                bRINonPropClaimAPRProc,\n                bClaimMovementPaid,\n                lPolicyFolderKey,\n                lPolicyKey,\n                lPolicyActivityKey,\n                lPolicySectionKey,\n                lPolSectionLiabilitySummaryKey,\n                bLossDateTBA,\n                lActivePolicyDetailsKey,\n                lPolicyLiabilityKey,\n                lPolicyLineLiabilityKey,\n                bExGratiaPay,\n                bClaimNotPaidWithinXS,\n                dAmountClaimed,\n                dtClaimsPaidDate,\n                dtCoverageConfirmedDate,\n                dtFeesPaidDate,\n                bPolicySectionMandatory,\n                bPolicyCoverageMandatory,\n                bMovementBeingEdited,\n                lRevTypeofMovementKey,\n                bReveral,\n                bReversed,\n                lOrigClaimMovementKey,\n                dReverseCurrentAddReserveSettShare,\n                dReverseCurrentAddReserveOrig100,\n                dReverseCurrentAddReserveOrigShare,\n                dReverseCurrentAddReserveSett100,\n                dReversePaidToDateSettShareHold,\n                dReversePaidToDateOrig100Hold,\n                dReversePaidToDateOrigShareHold,\n                dReversePaidToDateSett100Hold,\n                lrevtypeofmovementHistKey,\n                lReinstatementCurrencyKey,\n                dReinstatementROE,\n                dReinstatementReserveTotal,\n                dReinstatementReservePrevious,\n                dReinstatementReserveChange,\n                dReinstatementReserveRevise,\n                dReinstatementReserveTotalReport,\n                dReinstatementReservePreviousReport,\n                dReinstatementReserveChangeReport,\n                dReinstatementReserveReviseReport,\n                dReinstatementPaidToDate,\n                dReinstatementPaidToDatePrevious,\n                dReinstatementPaidThisTime,\n                dReinstatementPaidToDateReport,\n                dReinstatementPaidToDatePreviousReport,\n                dReinstatementPaidThisTimeReport,\n                dReinstatementReserveCalculated,\n                lPolicyAPRGroupKey,\n                lvPolicyAPRGroupKey,\n                dPaidThisTimeReportShare,\n                lInwardsTypeOfDeductionKey,\n                lInwardsDeductionCurrency,\n                dInwardsDeductionROE,\n                dInwardsDeductionAmount,\n                lReinstatementTypeOfDeductionKey,\n                lReinstatementDeductionCurrency,\n                dReinstatementDeductionROE,\n                dReinstatementDeductionAmount,\n                dReviseAddReserveOrigShare,\n                dPaidThisTimeBase,\n                sClaimant,\n                bAdjusted,\n                bGenerateAPR,\n                bGenerateJV,\n                sBureauINsured,\n                bTempAddReserve,\n                nHighlight\n            order by\n                dw_loadts\n        ) as dw_extract_order\n    from\n        claim_movement\n),\n\nfiltered as (\n    select * from ordered where dw_extract_order = 1\n),\n\nranged as (\n    select\n        lClaimMovementKey,\n        lClaimSectionKey,\n        lClaimKey,\n        lAccountPeriodKey,\n        lAccountPeriodOriginalKey,\n        dtMovementFirstAdvised,\n        dtMovementCreated,\n        dtMovementUpdated,\n        sMovementReference,\n        nSequence,\n        nBureauSequence,\n        bManualMovement,\n        bConverted,\n        sPaymentReference,\n        lTransactionTypeKey,\n        lPayeeContactKey,\n        lPayeeRoleKey,\n        bReserveTBA,\n        lTypeOfReserveQualifierKey,\n        lTypeOfMovementKey,\n        lPayMethodKey,\n        lPayCcyOrigKey,\n        dPayROEOrig,\n        lPayCcySettKey,\n        dPayROESett,\n        lPayCcyReportKey,\n        dPayROEReport,\n        dPaidThisTimeOrig100,\n        dPaidThisTimeOrigShare,\n        dPaidThisTimeSett100,\n        dPaidThisTimeSettShare,\n        dPaymentOrig100,\n        dPaymentOrigShare,\n        dPaymentSett100,\n        dPaymentSettShare,\n        dPaymentAuthorisedOrig100,\n        dPaymentAuthorisedOrigShare,\n        dPaymentAuthorisedSett100,\n        dPaymentAuthorisedSettShare,\n        dPaymentPendingBureauOrig100,\n        dPaymentPendingBureauOrigShare,\n        dPaymentPendingBureauSett100,\n        dPaymentPendingBureauSettShare,\n        dPaymentPendingManualOrig100,\n        dPaymentPendingManualOrigShare,\n        dPaymentPendingManualSett100,\n        dPaymentPendingManualSettShare,\n        dFacRIPaidThisTimeOrigShare,\n        dFacRIPaidThisTimeSettShare,\n        dPropRIPaidThisTimeOrigShare,\n        dPropRIPaidThisTimeSettShare,\n        dXLRIPaidThisTimeOrigShare,\n        dXLRIPaidThisTimeSettShare,\n        dPaidToDateBureauOrig100,\n        dPaidToDateBureauOrigShare,\n        dPaidToDateBureauSett100,\n        dPaidToDateBureauSettShare,\n        dPaidToDateSettShareHold,\n        dFacRIPaidToDateOrigShare,\n        dFacRIPaidToDateSettShare,\n        dPropRIPaidToDateOrigShare,\n        dPropRIPaidToDateSettShare,\n        dXLRIPaidToDateOrigShare,\n        dXLRIPaidToDateSettShare,\n        dNetPaidToDateOrigShare,\n        dNetPaidToDateSettShare,\n        lReserveCcyOrigKey,\n        dReserveROEOrig,\n        lReserveCcySettKey,\n        dReserveROESett,\n        lReserveCcyReportKey,\n        dReserveROEReport,\n        dReserveOrig100,\n        dReserveOrigShare,\n        dReserveSett100,\n        dReserveSettShare,\n        dReserveChangeOrig100,\n        dReserveChangeOrigShare,\n        dReserveChangeSett100,\n        dReserveChangeSettShare,\n        dReserveChangeAuthOrig100,\n        dReserveChangeAuthOrigShare,\n        dReserveChangeAuthSett100,\n        dReserveChangeAuthSettShare,\n        dFacRIReserveOrigShare,\n        dFacRIReserveSettShare,\n        dPropRIReserveOrigShare,\n        dPropRIReserveSettShare,\n        dXLRIReserveOrigShare,\n        dXLRIReserveSettShare,\n        dNetReserveOrigShare,\n        dNetReserveSettShare,\n        lAdditionalReserveCcyOrigKey,\n        dAdditionalReserveROEOrig,\n        lAdditionalReserveCcySettKey,\n        dAdditionalReserveROESett,\n        lAdditionalReserveCcyReportKey,\n        dAdditionalReserveROEReport,\n        dAdditionalReserveOrig100,\n        dAdditionalReserveOrigShare,\n        dAdditionalReserveSett100,\n        dAdditionalReserveSettShare,\n        dAdditionalFacRIOrigShare,\n        dAdditionalFacRISettShare,\n        dAdditionalPropRIOrigShare,\n        dAdditionalPropRISettShare,\n        dAdditionalXLRIOrigShare,\n        dAdditionalXLRISettShare,\n        dAdditionalNetReserveOrigShare,\n        dAdditionalNetReserveSettShare,\n        dReviseReserveOrig100,\n        dReviseReserveOrigShare,\n        dReviseReserveSett100,\n        dReviseReserveSettShare,\n        dTotalReserveOrig100,\n        dTotalReserveOrigShare,\n        dTotalReserveSett100,\n        dTotalReserveSettShare,\n        dTotalFacRIReserveOrigShare,\n        dTotalFacRIReserveSettShare,\n        dTotalPropRIReserveOrigShare,\n        dTotalPropRIReserveSettShare,\n        dTotalXLRIReserveOrigShare,\n        dTotalXLRIReserveSettShare,\n        dTotalNetReserveOrigShare,\n        dTotalNetReserveSettShare,\n        dHighestEstimateOrig100,\n        dLeadUWHighestEstimateOrig100,\n        sMovementNarrative,\n        lExternalAdjusterContactKey,\n        sExternalAdjusterReference,\n        lExternalLawyerContactKey,\n        sExternalLawyerReference,\n        sClaimMovementCreatedBy,\n        nAccidentYear,\n        lAuthorityCheckJoinKey,\n        lEventKey,\n        bGenerateClaimException,\n        lClaimantContactKey,\n        sInvoiceNumber,\n        lClaimMovementIndemnityKey,\n        lClassKey,\n        lTypeOfSubClassKey,\n        lPayeeRoleKey2,\n        lPayeeContactKey2,\n        dRIRecoverySettShare,\n        dOutstandingRIRecoverySettShr,\n        dDeductibleSettShare,\n        dLOCAmountSettShare,\n        lInsuredKey,\n        lExternalAttorneyContactKey,\n        lISODeductibleSizeKey,\n        lISOTexasDeductibleKey,\n        sExtraPaymentDetails,\n        bMultiplePayee,\n        lBordereauMonthKey,\n        bInError,\n        sAddressedToName,\n        sAddressTo1,\n        sAddressTo2,\n        sAddressToCity,\n        sAddressToPostalCode,\n        lAddressToStateKey,\n        lAddressedToCountryKey,\n        dCurrentAddReserveSettShare,\n        dCalcAddReserveSettShare,\n        dAddReserveChangeSettShare,\n        dReviseAddReserveSettShare,\n        dNetPaymentOrigShare,\n        dNetPaymentSettShare,\n        dPaidToDateOrig100,\n        dPaidToDateOrigShare,\n        dPaidToDateSett100,\n        dPaidToDateSettShare,\n        dPaidToDateManualOrig100,\n        dPaidToDateManualOrigShare,\n        dPaidToDateManualSett100,\n        dPaidToDateManualSettShare,\n        dAddReserveChangeOrig100,\n        dAddReserveChangeOrigShare,\n        dAddReserveChangeSett100,\n        dTotalReserveChangeOrig100,\n        dTotalReserveChangeOrigShare,\n        dTotalReserveChangeSett100,\n        dTotalReserveChangeSettShare,\n        dAddResChangeAuthOrig100,\n        dAddResChangeAuthOrigShare,\n        dAddResChangeAuthSett100,\n        dAddResChangeAuthSettShare,\n        dTotalResChangeAuthOrig100,\n        dTotalResChangeAuthOrigShare,\n        dTotalResChangeAuthSett100,\n        dTotalResChangeAuthSettShare,\n        dCurrentAddReserveOrig100,\n        dCurrentAddReserveOrigShare,\n        dCurrentAddReserveSett100,\n        dPaidToDateOrig100Hold,\n        dPaidToDateOrigShareHold,\n        dPaidToDateSett100Hold,\n        nClaimPaymentDays,\n        dtClaimDueDate,\n        dPaymentPendingTotalOrig100,\n        dPaymentPendingTotalOrigShare,\n        dPaymentPendingTotalSett100,\n        dPaymentPendingTotalSettShare,\n        b100PcEntered,\n        bCoinsuranceClaimAccounting,\n        dPaidThisTimeSett100Entered,\n        dReviseAddReserveSett100,\n        bAuthorisationResult,\n        sAuthoriserNotes,\n        bProductHardRuleResult,\n        bProductRuleResult,\n        lTypeOfModuleKey,\n        lpolicylinekey,\n        bisfirstmovement,\n        bGenerateHistoryRow,\n        bBureauClaim,\n        lImplementationSetupForNewOldRIKey,\n        bEnableNewRI,\n        bRINonPropClaimAPRProc,\n        bClaimMovementPaid,\n        lPolicyFolderKey,\n        lPolicyKey,\n        lPolicyActivityKey,\n        lPolicySectionKey,\n        lPolSectionLiabilitySummaryKey,\n        bLossDateTBA,\n        lActivePolicyDetailsKey,\n        lPolicyLiabilityKey,\n        lPolicyLineLiabilityKey,\n        bExGratiaPay,\n        bClaimNotPaidWithinXS,\n        dAmountClaimed,\n        dtClaimsPaidDate,\n        dtCoverageConfirmedDate,\n        dtFeesPaidDate,\n        bPolicySectionMandatory,\n        bPolicyCoverageMandatory,\n        bMovementBeingEdited,\n        lRevTypeofMovementKey,\n        bReveral,\n        bReversed,\n        lOrigClaimMovementKey,\n        dReverseCurrentAddReserveSettShare,\n        dReverseCurrentAddReserveOrig100,\n        dReverseCurrentAddReserveOrigShare,\n        dReverseCurrentAddReserveSett100,\n        dReversePaidToDateSettShareHold,\n        dReversePaidToDateOrig100Hold,\n        dReversePaidToDateOrigShareHold,\n        dReversePaidToDateSett100Hold,\n        lrevtypeofmovementHistKey,\n        lReinstatementCurrencyKey,\n        dReinstatementROE,\n        dReinstatementReserveTotal,\n        dReinstatementReservePrevious,\n        dReinstatementReserveChange,\n        dReinstatementReserveRevise,\n        dReinstatementReserveTotalReport,\n        dReinstatementReservePreviousReport,\n        dReinstatementReserveChangeReport,\n        dReinstatementReserveReviseReport,\n        dReinstatementPaidToDate,\n        dReinstatementPaidToDatePrevious,\n        dReinstatementPaidThisTime,\n        dReinstatementPaidToDateReport,\n        dReinstatementPaidToDatePreviousReport,\n        dReinstatementPaidThisTimeReport,\n        dReinstatementReserveCalculated,\n        lPolicyAPRGroupKey,\n        lvPolicyAPRGroupKey,\n        dPaidThisTimeReportShare,\n        lInwardsTypeOfDeductionKey,\n        lInwardsDeductionCurrency,\n        dInwardsDeductionROE,\n        dInwardsDeductionAmount,\n        lReinstatementTypeOfDeductionKey,\n        lReinstatementDeductionCurrency,\n        dReinstatementDeductionROE,\n        dReinstatementDeductionAmount,\n        dReviseAddReserveOrigShare,\n        dPaidThisTimeBase,\n        sClaimant,\n        bAdjusted,\n        bGenerateAPR,\n        bGenerateJV,\n        sBureauINsured,\n        bTempAddReserve,\n        nHighlight,\n        dw_loadts as _valid_from,\n        lead(dw_loadts) over (partition by lClaimMovementKey order by dw_loadts) as _valid_to\n    from\n        filtered\n)\n\nselect * from ranged", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"scd_claim_movement\""}, "model.iginsure.scd_claim_section": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.iginsure.dbo.claim_section"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "scd", "scd_claim_section"], "unique_id": "model.iginsure.scd_claim_section", "raw_code": "-- This file is automatically generated\r\n\r\nwith\r\n\r\nclaim_section as (\r\n    select * from {{ source('dbo', 'claim_section') }}\r\n),\r\n\r\nordered as (\r\n    select\r\n        lClaimSectionKey,\r\n        lClaimKey,\r\n        lAdditionalReserveCcyOrigKey,\r\n        lAdditionalReserveCcyReportKey,\r\n        lAdditionalReserveCcySettKey,\r\n        lAgreementCurrencyKey,\r\n        lAgreementSectionKey,\r\n        lAgreementSectionLiabSumryKey,\r\n        lAgrmntTypeOfRatingElementKey,\r\n        lBordereauCurrencyKey,\r\n        lBrokerContactKey,\r\n        lClaimantContactKey,\r\n        lClaimTypeOfClassKey,\r\n        lClaimTypeOfRatingElementKey,\r\n        lClaimTypeOfSubClassKey,\r\n        lCurrentTypeOfReserveQualfKey,\r\n        lEventKey,\r\n        lExternalAdjusterContactKey,\r\n        lExternalAttorneyContactKey,\r\n        lExternalSurveyorContactKey,\r\n        lInsuredContactKey,\r\n        lInternalAdjusterContactKey,\r\n        lInternalAttorneyContactKey,\r\n        lLatestMovementKey,\r\n        lPayCcyOrigKey,\r\n        lPayCcyReportKey,\r\n        lPayCcySettKey,\r\n        lPolicyCurrencyKey,\r\n        lPolicyLiabilityKey,\r\n        lpolliabilityratingelementkey,\r\n        lPolicySectionKey,\r\n        lPolSectionLiabilitySummaryKey,\r\n        lPolicyTypeOfClassKey,\r\n        lPolicyTypeOfRatingElementKey,\r\n        lPolicyTypeOfSubClassKey,\r\n        lReserveCcyOrigKey,\r\n        lReserveCcyReportKey,\r\n        lReserveCcySettKey,\r\n        lTransactionTypeKey,\r\n        lTypeOfClaimAttachmentKey,\r\n        lTypeOfLiabilityKey,\r\n        lTypeOfMarketSourceKey,\r\n        lTypeOfSectionKey,\r\n        bReserveExceedsLimit,\r\n        bReserveTBA,\r\n        dAddReserveAuthorisedOrig100,\r\n        dAddReserveAuthorisedOrigShare,\r\n        dAddReserveAuthorisedSett100,\r\n        dAddReserveAuthorisedSettShare,\r\n        dAdditionalReserveOrig100,\r\n        dAdditionalReserveOrigShare,\r\n        dAdditionalReserveSett100,\r\n        dAdditionalReserveSettShare,\r\n        dAddReserveROEOrig,\r\n        dAddReserveROEReport,\r\n        dAddReserveROESett,\r\n        dFacRIAddReserveSettShare,\r\n        dFacRIPTDSettShare,\r\n        dFacRIReserveSettShare,\r\n        dCurrentIncurredOrig100,\r\n        dCurrentIncurredOrigShare,\r\n        dCurrentIncurredSett100,\r\n        dCurrentIncurredSettShare,\r\n        dInitialReserveSettShare,\r\n        dLOCTotalDrawingsSettShare,\r\n        dPTDAuthorisedBureauOrig100,\r\n        dPTDAuthorisedBureauOrigShare,\r\n        dPTDAuthorisedBureauSett100,\r\n        dPTDAuthorisedBureauSettShare,\r\n        dPTDAuthorisedManualOrig100,\r\n        dPTDAuthorisedManualOrigShare,\r\n        dPTDAuthorisedManualSett100,\r\n        dPTDAuthorisedManualSettShare,\r\n        dPTDAuthorisedOrig100,\r\n        dPTDAuthorisedOrigShare,\r\n        dPTDAuthorisedSett100,\r\n        dPTDAuthorisedSettShare,\r\n        dPTDBureauOrig100,\r\n        dPTDBureauOrigShare,\r\n        dPTDBureauSett100,\r\n        dPTDBureauSettShare,\r\n        dPTDManualOrig100,\r\n        dPTDManualOrigShare,\r\n        dPTDManualSett100,\r\n        dPTDManualSettShare,\r\n        dPaidToDateOrig100,\r\n        dPaidToDateOrigShare,\r\n        dPTDPendingBureauOrig100,\r\n        dPTDPendingBureauOrigShare,\r\n        dPTDPendingBureauSett100,\r\n        dPTDPendingBureauSettShare,\r\n        dPTDPendingManualOrig100,\r\n        dPTDPendingManualOrigShare,\r\n        dPTDPendingManualSett100,\r\n        dPTDPendingManualSettShare,\r\n        dPTDPendingOrig100,\r\n        dPTDPendingOrigShare,\r\n        dPTDPendingSett100,\r\n        dPTDPendingSettShare,\r\n        dPaidToDateSett100,\r\n        dPaidToDateSettShare,\r\n        dPayROEOrig,\r\n        dPayROEReport,\r\n        dPayROESett,\r\n        dPolicyLimit,\r\n        dPropRIAddReserveSettShare,\r\n        dPropRIPTDSettShare,\r\n        dPropRIReserveSettShare,\r\n        dReserveAuthorisedOrig100,\r\n        dReserveAuthorisedOrigShare,\r\n        dReserveAuthorisedSett100,\r\n        dReserveAuthorisedSettShare,\r\n        dReserveOrig100,\r\n        dReserveOrigShare,\r\n        dReserveROEOrig,\r\n        dReserveROEReport,\r\n        dReserveROESett,\r\n        dReserveSett100,\r\n        dReserveSettShare,\r\n        dtExternalAdjusterAssigned,\r\n        dtExternalAttorneyAssigned,\r\n        dtInternalAdjusterAssigned,\r\n        dtInternalAttorneyAssigned,\r\n        dTotalOSReserveMovements,\r\n        dTotalReserveOrig100,\r\n        dTotalReserveOrigShare,\r\n        dTotalReserveSett100,\r\n        dTotalReserveSettShare,\r\n        dTotalRIRecoverySettShare,\r\n        dTotalRIReserveSettShare,\r\n        dXLRIAddReserveSettShare,\r\n        dXLRIPTDSettShare,\r\n        dXLRIReserveSettShare,\r\n        nInvalidClassFlag,\r\n        nMovementCount,\r\n        sExternalAdjusterReference,\r\n        sExternalLawyerReference,\r\n        sExternalSurveyorReference,\r\n        sSectionNotes,\r\n        dIncurredBureauOrig100,\r\n        dIncurredBureauOrigShare,\r\n        dIncurredBureauSett100,\r\n        dIncurredBureauSettShare,\r\n        dIncurredManualOrig100,\r\n        dIncurredManualOrigShare,\r\n        dIncurredManualSett100,\r\n        dIncurredManualSettShare,\r\n        dWrittenLine,\r\n        dSignedLine,\r\n        dAggregateLimit,\r\n        bProofOfLossPresented,\r\n        dtProofOfLossPresented,\r\n        dClaimPaymentLimit,\r\n        bClaimWithinAgreement,\r\n        dAgreementROE,\r\n        nClaimSectionRegulatoryCount,\r\n        nClaimSectionRegulatoryInCount,\r\n        bBureauClaim,\r\n        lMasterPolicySectionKey,\r\n        bClaimWithinBinder,\r\n        dBinderClaimPaymentLimit,\r\n        lBinderCurrencyKey,\r\n        dBinderROE,\r\n        lReinstatementCurrencyKey,\r\n        dReinstatementROE,\r\n        dReinstatementTotalReserve,\r\n        dReinstatementTotalPaidToDate,\r\n        dReinstatementTotalDue,\r\n        dReinstatementTotalReserveReport,\r\n        dReinstatementTotalPaidToDateReport,\r\n        dReinstatementTotalDueReport,\r\n        lPolicyLineKey,\r\n        dInitialReserveOrigShare,\r\n        sClaimant,\r\n        bInferredCCY,\r\n        dw_loadts,\r\n        row_number() over (\r\n            partition by\r\n                lClaimSectionKey,\r\n                lClaimKey,\r\n                lAdditionalReserveCcyOrigKey,\r\n                lAdditionalReserveCcyReportKey,\r\n                lAdditionalReserveCcySettKey,\r\n                lAgreementCurrencyKey,\r\n                lAgreementSectionKey,\r\n                lAgreementSectionLiabSumryKey,\r\n                lAgrmntTypeOfRatingElementKey,\r\n                lBordereauCurrencyKey,\r\n                lBrokerContactKey,\r\n                lClaimantContactKey,\r\n                lClaimTypeOfClassKey,\r\n                lClaimTypeOfRatingElementKey,\r\n                lClaimTypeOfSubClassKey,\r\n                lCurrentTypeOfReserveQualfKey,\r\n                lEventKey,\r\n                lExternalAdjusterContactKey,\r\n                lExternalAttorneyContactKey,\r\n                lExternalSurveyorContactKey,\r\n                lInsuredContactKey,\r\n                lInternalAdjusterContactKey,\r\n                lInternalAttorneyContactKey,\r\n                lLatestMovementKey,\r\n                lPayCcyOrigKey,\r\n                lPayCcyReportKey,\r\n                lPayCcySettKey,\r\n                lPolicyCurrencyKey,\r\n                lPolicyLiabilityKey,\r\n                lpolliabilityratingelementkey,\r\n                lPolicySectionKey,\r\n                lPolSectionLiabilitySummaryKey,\r\n                lPolicyTypeOfClassKey,\r\n                lPolicyTypeOfRatingElementKey,\r\n                lPolicyTypeOfSubClassKey,\r\n                lReserveCcyOrigKey,\r\n                lReserveCcyReportKey,\r\n                lReserveCcySettKey,\r\n                lTransactionTypeKey,\r\n                lTypeOfClaimAttachmentKey,\r\n                lTypeOfLiabilityKey,\r\n                lTypeOfMarketSourceKey,\r\n                lTypeOfSectionKey,\r\n                bReserveExceedsLimit,\r\n                bReserveTBA,\r\n                dAddReserveAuthorisedOrig100,\r\n                dAddReserveAuthorisedOrigShare,\r\n                dAddReserveAuthorisedSett100,\r\n                dAddReserveAuthorisedSettShare,\r\n                dAdditionalReserveOrig100,\r\n                dAdditionalReserveOrigShare,\r\n                dAdditionalReserveSett100,\r\n                dAdditionalReserveSettShare,\r\n                dAddReserveROEOrig,\r\n                dAddReserveROEReport,\r\n                dAddReserveROESett,\r\n                dFacRIAddReserveSettShare,\r\n                dFacRIPTDSettShare,\r\n                dFacRIReserveSettShare,\r\n                dCurrentIncurredOrig100,\r\n                dCurrentIncurredOrigShare,\r\n                dCurrentIncurredSett100,\r\n                dCurrentIncurredSettShare,\r\n                dInitialReserveSettShare,\r\n                dLOCTotalDrawingsSettShare,\r\n                dPTDAuthorisedBureauOrig100,\r\n                dPTDAuthorisedBureauOrigShare,\r\n                dPTDAuthorisedBureauSett100,\r\n                dPTDAuthorisedBureauSettShare,\r\n                dPTDAuthorisedManualOrig100,\r\n                dPTDAuthorisedManualOrigShare,\r\n                dPTDAuthorisedManualSett100,\r\n                dPTDAuthorisedManualSettShare,\r\n                dPTDAuthorisedOrig100,\r\n                dPTDAuthorisedOrigShare,\r\n                dPTDAuthorisedSett100,\r\n                dPTDAuthorisedSettShare,\r\n                dPTDBureauOrig100,\r\n                dPTDBureauOrigShare,\r\n                dPTDBureauSett100,\r\n                dPTDBureauSettShare,\r\n                dPTDManualOrig100,\r\n                dPTDManualOrigShare,\r\n                dPTDManualSett100,\r\n                dPTDManualSettShare,\r\n                dPaidToDateOrig100,\r\n                dPaidToDateOrigShare,\r\n                dPTDPendingBureauOrig100,\r\n                dPTDPendingBureauOrigShare,\r\n                dPTDPendingBureauSett100,\r\n                dPTDPendingBureauSettShare,\r\n                dPTDPendingManualOrig100,\r\n                dPTDPendingManualOrigShare,\r\n                dPTDPendingManualSett100,\r\n                dPTDPendingManualSettShare,\r\n                dPTDPendingOrig100,\r\n                dPTDPendingOrigShare,\r\n                dPTDPendingSett100,\r\n                dPTDPendingSettShare,\r\n                dPaidToDateSett100,\r\n                dPaidToDateSettShare,\r\n                dPayROEOrig,\r\n                dPayROEReport,\r\n                dPayROESett,\r\n                dPolicyLimit,\r\n                dPropRIAddReserveSettShare,\r\n                dPropRIPTDSettShare,\r\n                dPropRIReserveSettShare,\r\n                dReserveAuthorisedOrig100,\r\n                dReserveAuthorisedOrigShare,\r\n                dReserveAuthorisedSett100,\r\n                dReserveAuthorisedSettShare,\r\n                dReserveOrig100,\r\n                dReserveOrigShare,\r\n                dReserveROEOrig,\r\n                dReserveROEReport,\r\n                dReserveROESett,\r\n                dReserveSett100,\r\n                dReserveSettShare,\r\n                dtExternalAdjusterAssigned,\r\n                dtExternalAttorneyAssigned,\r\n                dtInternalAdjusterAssigned,\r\n                dtInternalAttorneyAssigned,\r\n                dTotalOSReserveMovements,\r\n                dTotalReserveOrig100,\r\n                dTotalReserveOrigShare,\r\n                dTotalReserveSett100,\r\n                dTotalReserveSettShare,\r\n                dTotalRIRecoverySettShare,\r\n                dTotalRIReserveSettShare,\r\n                dXLRIAddReserveSettShare,\r\n                dXLRIPTDSettShare,\r\n                dXLRIReserveSettShare,\r\n                nInvalidClassFlag,\r\n                nMovementCount,\r\n                sExternalAdjusterReference,\r\n                sExternalLawyerReference,\r\n                sExternalSurveyorReference,\r\n                sSectionNotes,\r\n                dIncurredBureauOrig100,\r\n                dIncurredBureauOrigShare,\r\n                dIncurredBureauSett100,\r\n                dIncurredBureauSettShare,\r\n                dIncurredManualOrig100,\r\n                dIncurredManualOrigShare,\r\n                dIncurredManualSett100,\r\n                dIncurredManualSettShare,\r\n                dWrittenLine,\r\n                dSignedLine,\r\n                dAggregateLimit,\r\n                bProofOfLossPresented,\r\n                dtProofOfLossPresented,\r\n                dClaimPaymentLimit,\r\n                bClaimWithinAgreement,\r\n                dAgreementROE,\r\n                nClaimSectionRegulatoryCount,\r\n                nClaimSectionRegulatoryInCount,\r\n                bBureauClaim,\r\n                lMasterPolicySectionKey,\r\n                bClaimWithinBinder,\r\n                dBinderClaimPaymentLimit,\r\n                lBinderCurrencyKey,\r\n                dBinderROE,\r\n                lReinstatementCurrencyKey,\r\n                dReinstatementROE,\r\n                dReinstatementTotalReserve,\r\n                dReinstatementTotalPaidToDate,\r\n                dReinstatementTotalDue,\r\n                dReinstatementTotalReserveReport,\r\n                dReinstatementTotalPaidToDateReport,\r\n                dReinstatementTotalDueReport,\r\n                lPolicyLineKey,\r\n                dInitialReserveOrigShare,\r\n                sClaimant,\r\n                bInferredCCY\r\n            order by\r\n                dw_loadts\r\n        ) as dw_extract_order\r\n    from\r\n        claim_section\r\n),\r\n\r\nfiltered as (\r\n    select * from ordered where dw_extract_order = 1\r\n),\r\n\r\nranged as (\r\n    select\r\n        lClaimSectionKey,\r\n        lClaimKey,\r\n        lAdditionalReserveCcyOrigKey,\r\n        lAdditionalReserveCcyReportKey,\r\n        lAdditionalReserveCcySettKey,\r\n        lAgreementCurrencyKey,\r\n        lAgreementSectionKey,\r\n        lAgreementSectionLiabSumryKey,\r\n        lAgrmntTypeOfRatingElementKey,\r\n        lBordereauCurrencyKey,\r\n        lBrokerContactKey,\r\n        lClaimantContactKey,\r\n        lClaimTypeOfClassKey,\r\n        lClaimTypeOfRatingElementKey,\r\n        lClaimTypeOfSubClassKey,\r\n        lCurrentTypeOfReserveQualfKey,\r\n        lEventKey,\r\n        lExternalAdjusterContactKey,\r\n        lExternalAttorneyContactKey,\r\n        lExternalSurveyorContactKey,\r\n        lInsuredContactKey,\r\n        lInternalAdjusterContactKey,\r\n        lInternalAttorneyContactKey,\r\n        lLatestMovementKey,\r\n        lPayCcyOrigKey,\r\n        lPayCcyReportKey,\r\n        lPayCcySettKey,\r\n        lPolicyCurrencyKey,\r\n        lPolicyLiabilityKey,\r\n        lpolliabilityratingelementkey,\r\n        lPolicySectionKey,\r\n        lPolSectionLiabilitySummaryKey,\r\n        lPolicyTypeOfClassKey,\r\n        lPolicyTypeOfRatingElementKey,\r\n        lPolicyTypeOfSubClassKey,\r\n        lReserveCcyOrigKey,\r\n        lReserveCcyReportKey,\r\n        lReserveCcySettKey,\r\n        lTransactionTypeKey,\r\n        lTypeOfClaimAttachmentKey,\r\n        lTypeOfLiabilityKey,\r\n        lTypeOfMarketSourceKey,\r\n        lTypeOfSectionKey,\r\n        bReserveExceedsLimit,\r\n        bReserveTBA,\r\n        dAddReserveAuthorisedOrig100,\r\n        dAddReserveAuthorisedOrigShare,\r\n        dAddReserveAuthorisedSett100,\r\n        dAddReserveAuthorisedSettShare,\r\n        dAdditionalReserveOrig100,\r\n        dAdditionalReserveOrigShare,\r\n        dAdditionalReserveSett100,\r\n        dAdditionalReserveSettShare,\r\n        dAddReserveROEOrig,\r\n        dAddReserveROEReport,\r\n        dAddReserveROESett,\r\n        dFacRIAddReserveSettShare,\r\n        dFacRIPTDSettShare,\r\n        dFacRIReserveSettShare,\r\n        dCurrentIncurredOrig100,\r\n        dCurrentIncurredOrigShare,\r\n        dCurrentIncurredSett100,\r\n        dCurrentIncurredSettShare,\r\n        dInitialReserveSettShare,\r\n        dLOCTotalDrawingsSettShare,\r\n        dPTDAuthorisedBureauOrig100,\r\n        dPTDAuthorisedBureauOrigShare,\r\n        dPTDAuthorisedBureauSett100,\r\n        dPTDAuthorisedBureauSettShare,\r\n        dPTDAuthorisedManualOrig100,\r\n        dPTDAuthorisedManualOrigShare,\r\n        dPTDAuthorisedManualSett100,\r\n        dPTDAuthorisedManualSettShare,\r\n        dPTDAuthorisedOrig100,\r\n        dPTDAuthorisedOrigShare,\r\n        dPTDAuthorisedSett100,\r\n        dPTDAuthorisedSettShare,\r\n        dPTDBureauOrig100,\r\n        dPTDBureauOrigShare,\r\n        dPTDBureauSett100,\r\n        dPTDBureauSettShare,\r\n        dPTDManualOrig100,\r\n        dPTDManualOrigShare,\r\n        dPTDManualSett100,\r\n        dPTDManualSettShare,\r\n        dPaidToDateOrig100,\r\n        dPaidToDateOrigShare,\r\n        dPTDPendingBureauOrig100,\r\n        dPTDPendingBureauOrigShare,\r\n        dPTDPendingBureauSett100,\r\n        dPTDPendingBureauSettShare,\r\n        dPTDPendingManualOrig100,\r\n        dPTDPendingManualOrigShare,\r\n        dPTDPendingManualSett100,\r\n        dPTDPendingManualSettShare,\r\n        dPTDPendingOrig100,\r\n        dPTDPendingOrigShare,\r\n        dPTDPendingSett100,\r\n        dPTDPendingSettShare,\r\n        dPaidToDateSett100,\r\n        dPaidToDateSettShare,\r\n        dPayROEOrig,\r\n        dPayROEReport,\r\n        dPayROESett,\r\n        dPolicyLimit,\r\n        dPropRIAddReserveSettShare,\r\n        dPropRIPTDSettShare,\r\n        dPropRIReserveSettShare,\r\n        dReserveAuthorisedOrig100,\r\n        dReserveAuthorisedOrigShare,\r\n        dReserveAuthorisedSett100,\r\n        dReserveAuthorisedSettShare,\r\n        dReserveOrig100,\r\n        dReserveOrigShare,\r\n        dReserveROEOrig,\r\n        dReserveROEReport,\r\n        dReserveROESett,\r\n        dReserveSett100,\r\n        dReserveSettShare,\r\n        dtExternalAdjusterAssigned,\r\n        dtExternalAttorneyAssigned,\r\n        dtInternalAdjusterAssigned,\r\n        dtInternalAttorneyAssigned,\r\n        dTotalOSReserveMovements,\r\n        dTotalReserveOrig100,\r\n        dTotalReserveOrigShare,\r\n        dTotalReserveSett100,\r\n        dTotalReserveSettShare,\r\n        dTotalRIRecoverySettShare,\r\n        dTotalRIReserveSettShare,\r\n        dXLRIAddReserveSettShare,\r\n        dXLRIPTDSettShare,\r\n        dXLRIReserveSettShare,\r\n        nInvalidClassFlag,\r\n        nMovementCount,\r\n        sExternalAdjusterReference,\r\n        sExternalLawyerReference,\r\n        sExternalSurveyorReference,\r\n        sSectionNotes,\r\n        dIncurredBureauOrig100,\r\n        dIncurredBureauOrigShare,\r\n        dIncurredBureauSett100,\r\n        dIncurredBureauSettShare,\r\n        dIncurredManualOrig100,\r\n        dIncurredManualOrigShare,\r\n        dIncurredManualSett100,\r\n        dIncurredManualSettShare,\r\n        dWrittenLine,\r\n        dSignedLine,\r\n        dAggregateLimit,\r\n        bProofOfLossPresented,\r\n        dtProofOfLossPresented,\r\n        dClaimPaymentLimit,\r\n        bClaimWithinAgreement,\r\n        dAgreementROE,\r\n        nClaimSectionRegulatoryCount,\r\n        nClaimSectionRegulatoryInCount,\r\n        bBureauClaim,\r\n        lMasterPolicySectionKey,\r\n        bClaimWithinBinder,\r\n        dBinderClaimPaymentLimit,\r\n        lBinderCurrencyKey,\r\n        dBinderROE,\r\n        lReinstatementCurrencyKey,\r\n        dReinstatementROE,\r\n        dReinstatementTotalReserve,\r\n        dReinstatementTotalPaidToDate,\r\n        dReinstatementTotalDue,\r\n        dReinstatementTotalReserveReport,\r\n        dReinstatementTotalPaidToDateReport,\r\n        dReinstatementTotalDueReport,\r\n        lPolicyLineKey,\r\n        dInitialReserveOrigShare,\r\n        sClaimant,\r\n        bInferredCCY,\r\n        dw_loadts as _valid_from,\r\n        lead(dw_loadts) over (partition by lClaimSectionKey order by dw_loadts) as _valid_to\r\n    from\r\n        filtered\r\n)\r\n\r\nselect * from ranged", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "scd\\scd_claim_section.sql", "original_file_path": "models\\scd\\scd_claim_section.sql", "name": "scd_claim_section", "alias": "scd_claim_section", "checksum": {"name": "sha256", "checksum": "72b19c6755a2f7e25bf22c7718732701a90b8eddbafb5458b5971669cdbd60c8"}, "tags": [], "refs": [], "sources": [["dbo", "claim_section"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": "iginsure://models\\scd\\scd.yml", "compiled_path": "target\\compiled\\iginsure\\models\\scd\\scd_claim_section.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "docs": {"show": false}}, "created_at": 1701786801.7617803, "compiled_code": "-- This file is automatically generated\n\nwith\n\nclaim_section as (\n    select * from \"IGI_PROD_DW\".\"dbo\".\"ClaimSection\"\n),\n\nordered as (\n    select\n        lClaimSectionKey,\n        lClaimKey,\n        lAdditionalReserveCcyOrigKey,\n        lAdditionalReserveCcyReportKey,\n        lAdditionalReserveCcySettKey,\n        lAgreementCurrencyKey,\n        lAgreementSectionKey,\n        lAgreementSectionLiabSumryKey,\n        lAgrmntTypeOfRatingElementKey,\n        lBordereauCurrencyKey,\n        lBrokerContactKey,\n        lClaimantContactKey,\n        lClaimTypeOfClassKey,\n        lClaimTypeOfRatingElementKey,\n        lClaimTypeOfSubClassKey,\n        lCurrentTypeOfReserveQualfKey,\n        lEventKey,\n        lExternalAdjusterContactKey,\n        lExternalAttorneyContactKey,\n        lExternalSurveyorContactKey,\n        lInsuredContactKey,\n        lInternalAdjusterContactKey,\n        lInternalAttorneyContactKey,\n        lLatestMovementKey,\n        lPayCcyOrigKey,\n        lPayCcyReportKey,\n        lPayCcySettKey,\n        lPolicyCurrencyKey,\n        lPolicyLiabilityKey,\n        lpolliabilityratingelementkey,\n        lPolicySectionKey,\n        lPolSectionLiabilitySummaryKey,\n        lPolicyTypeOfClassKey,\n        lPolicyTypeOfRatingElementKey,\n        lPolicyTypeOfSubClassKey,\n        lReserveCcyOrigKey,\n        lReserveCcyReportKey,\n        lReserveCcySettKey,\n        lTransactionTypeKey,\n        lTypeOfClaimAttachmentKey,\n        lTypeOfLiabilityKey,\n        lTypeOfMarketSourceKey,\n        lTypeOfSectionKey,\n        bReserveExceedsLimit,\n        bReserveTBA,\n        dAddReserveAuthorisedOrig100,\n        dAddReserveAuthorisedOrigShare,\n        dAddReserveAuthorisedSett100,\n        dAddReserveAuthorisedSettShare,\n        dAdditionalReserveOrig100,\n        dAdditionalReserveOrigShare,\n        dAdditionalReserveSett100,\n        dAdditionalReserveSettShare,\n        dAddReserveROEOrig,\n        dAddReserveROEReport,\n        dAddReserveROESett,\n        dFacRIAddReserveSettShare,\n        dFacRIPTDSettShare,\n        dFacRIReserveSettShare,\n        dCurrentIncurredOrig100,\n        dCurrentIncurredOrigShare,\n        dCurrentIncurredSett100,\n        dCurrentIncurredSettShare,\n        dInitialReserveSettShare,\n        dLOCTotalDrawingsSettShare,\n        dPTDAuthorisedBureauOrig100,\n        dPTDAuthorisedBureauOrigShare,\n        dPTDAuthorisedBureauSett100,\n        dPTDAuthorisedBureauSettShare,\n        dPTDAuthorisedManualOrig100,\n        dPTDAuthorisedManualOrigShare,\n        dPTDAuthorisedManualSett100,\n        dPTDAuthorisedManualSettShare,\n        dPTDAuthorisedOrig100,\n        dPTDAuthorisedOrigShare,\n        dPTDAuthorisedSett100,\n        dPTDAuthorisedSettShare,\n        dPTDBureauOrig100,\n        dPTDBureauOrigShare,\n        dPTDBureauSett100,\n        dPTDBureauSettShare,\n        dPTDManualOrig100,\n        dPTDManualOrigShare,\n        dPTDManualSett100,\n        dPTDManualSettShare,\n        dPaidToDateOrig100,\n        dPaidToDateOrigShare,\n        dPTDPendingBureauOrig100,\n        dPTDPendingBureauOrigShare,\n        dPTDPendingBureauSett100,\n        dPTDPendingBureauSettShare,\n        dPTDPendingManualOrig100,\n        dPTDPendingManualOrigShare,\n        dPTDPendingManualSett100,\n        dPTDPendingManualSettShare,\n        dPTDPendingOrig100,\n        dPTDPendingOrigShare,\n        dPTDPendingSett100,\n        dPTDPendingSettShare,\n        dPaidToDateSett100,\n        dPaidToDateSettShare,\n        dPayROEOrig,\n        dPayROEReport,\n        dPayROESett,\n        dPolicyLimit,\n        dPropRIAddReserveSettShare,\n        dPropRIPTDSettShare,\n        dPropRIReserveSettShare,\n        dReserveAuthorisedOrig100,\n        dReserveAuthorisedOrigShare,\n        dReserveAuthorisedSett100,\n        dReserveAuthorisedSettShare,\n        dReserveOrig100,\n        dReserveOrigShare,\n        dReserveROEOrig,\n        dReserveROEReport,\n        dReserveROESett,\n        dReserveSett100,\n        dReserveSettShare,\n        dtExternalAdjusterAssigned,\n        dtExternalAttorneyAssigned,\n        dtInternalAdjusterAssigned,\n        dtInternalAttorneyAssigned,\n        dTotalOSReserveMovements,\n        dTotalReserveOrig100,\n        dTotalReserveOrigShare,\n        dTotalReserveSett100,\n        dTotalReserveSettShare,\n        dTotalRIRecoverySettShare,\n        dTotalRIReserveSettShare,\n        dXLRIAddReserveSettShare,\n        dXLRIPTDSettShare,\n        dXLRIReserveSettShare,\n        nInvalidClassFlag,\n        nMovementCount,\n        sExternalAdjusterReference,\n        sExternalLawyerReference,\n        sExternalSurveyorReference,\n        sSectionNotes,\n        dIncurredBureauOrig100,\n        dIncurredBureauOrigShare,\n        dIncurredBureauSett100,\n        dIncurredBureauSettShare,\n        dIncurredManualOrig100,\n        dIncurredManualOrigShare,\n        dIncurredManualSett100,\n        dIncurredManualSettShare,\n        dWrittenLine,\n        dSignedLine,\n        dAggregateLimit,\n        bProofOfLossPresented,\n        dtProofOfLossPresented,\n        dClaimPaymentLimit,\n        bClaimWithinAgreement,\n        dAgreementROE,\n        nClaimSectionRegulatoryCount,\n        nClaimSectionRegulatoryInCount,\n        bBureauClaim,\n        lMasterPolicySectionKey,\n        bClaimWithinBinder,\n        dBinderClaimPaymentLimit,\n        lBinderCurrencyKey,\n        dBinderROE,\n        lReinstatementCurrencyKey,\n        dReinstatementROE,\n        dReinstatementTotalReserve,\n        dReinstatementTotalPaidToDate,\n        dReinstatementTotalDue,\n        dReinstatementTotalReserveReport,\n        dReinstatementTotalPaidToDateReport,\n        dReinstatementTotalDueReport,\n        lPolicyLineKey,\n        dInitialReserveOrigShare,\n        sClaimant,\n        bInferredCCY,\n        dw_loadts,\n        row_number() over (\n            partition by\n                lClaimSectionKey,\n                lClaimKey,\n                lAdditionalReserveCcyOrigKey,\n                lAdditionalReserveCcyReportKey,\n                lAdditionalReserveCcySettKey,\n                lAgreementCurrencyKey,\n                lAgreementSectionKey,\n                lAgreementSectionLiabSumryKey,\n                lAgrmntTypeOfRatingElementKey,\n                lBordereauCurrencyKey,\n                lBrokerContactKey,\n                lClaimantContactKey,\n                lClaimTypeOfClassKey,\n                lClaimTypeOfRatingElementKey,\n                lClaimTypeOfSubClassKey,\n                lCurrentTypeOfReserveQualfKey,\n                lEventKey,\n                lExternalAdjusterContactKey,\n                lExternalAttorneyContactKey,\n                lExternalSurveyorContactKey,\n                lInsuredContactKey,\n                lInternalAdjusterContactKey,\n                lInternalAttorneyContactKey,\n                lLatestMovementKey,\n                lPayCcyOrigKey,\n                lPayCcyReportKey,\n                lPayCcySettKey,\n                lPolicyCurrencyKey,\n                lPolicyLiabilityKey,\n                lpolliabilityratingelementkey,\n                lPolicySectionKey,\n                lPolSectionLiabilitySummaryKey,\n                lPolicyTypeOfClassKey,\n                lPolicyTypeOfRatingElementKey,\n                lPolicyTypeOfSubClassKey,\n                lReserveCcyOrigKey,\n                lReserveCcyReportKey,\n                lReserveCcySettKey,\n                lTransactionTypeKey,\n                lTypeOfClaimAttachmentKey,\n                lTypeOfLiabilityKey,\n                lTypeOfMarketSourceKey,\n                lTypeOfSectionKey,\n                bReserveExceedsLimit,\n                bReserveTBA,\n                dAddReserveAuthorisedOrig100,\n                dAddReserveAuthorisedOrigShare,\n                dAddReserveAuthorisedSett100,\n                dAddReserveAuthorisedSettShare,\n                dAdditionalReserveOrig100,\n                dAdditionalReserveOrigShare,\n                dAdditionalReserveSett100,\n                dAdditionalReserveSettShare,\n                dAddReserveROEOrig,\n                dAddReserveROEReport,\n                dAddReserveROESett,\n                dFacRIAddReserveSettShare,\n                dFacRIPTDSettShare,\n                dFacRIReserveSettShare,\n                dCurrentIncurredOrig100,\n                dCurrentIncurredOrigShare,\n                dCurrentIncurredSett100,\n                dCurrentIncurredSettShare,\n                dInitialReserveSettShare,\n                dLOCTotalDrawingsSettShare,\n                dPTDAuthorisedBureauOrig100,\n                dPTDAuthorisedBureauOrigShare,\n                dPTDAuthorisedBureauSett100,\n                dPTDAuthorisedBureauSettShare,\n                dPTDAuthorisedManualOrig100,\n                dPTDAuthorisedManualOrigShare,\n                dPTDAuthorisedManualSett100,\n                dPTDAuthorisedManualSettShare,\n                dPTDAuthorisedOrig100,\n                dPTDAuthorisedOrigShare,\n                dPTDAuthorisedSett100,\n                dPTDAuthorisedSettShare,\n                dPTDBureauOrig100,\n                dPTDBureauOrigShare,\n                dPTDBureauSett100,\n                dPTDBureauSettShare,\n                dPTDManualOrig100,\n                dPTDManualOrigShare,\n                dPTDManualSett100,\n                dPTDManualSettShare,\n                dPaidToDateOrig100,\n                dPaidToDateOrigShare,\n                dPTDPendingBureauOrig100,\n                dPTDPendingBureauOrigShare,\n                dPTDPendingBureauSett100,\n                dPTDPendingBureauSettShare,\n                dPTDPendingManualOrig100,\n                dPTDPendingManualOrigShare,\n                dPTDPendingManualSett100,\n                dPTDPendingManualSettShare,\n                dPTDPendingOrig100,\n                dPTDPendingOrigShare,\n                dPTDPendingSett100,\n                dPTDPendingSettShare,\n                dPaidToDateSett100,\n                dPaidToDateSettShare,\n                dPayROEOrig,\n                dPayROEReport,\n                dPayROESett,\n                dPolicyLimit,\n                dPropRIAddReserveSettShare,\n                dPropRIPTDSettShare,\n                dPropRIReserveSettShare,\n                dReserveAuthorisedOrig100,\n                dReserveAuthorisedOrigShare,\n                dReserveAuthorisedSett100,\n                dReserveAuthorisedSettShare,\n                dReserveOrig100,\n                dReserveOrigShare,\n                dReserveROEOrig,\n                dReserveROEReport,\n                dReserveROESett,\n                dReserveSett100,\n                dReserveSettShare,\n                dtExternalAdjusterAssigned,\n                dtExternalAttorneyAssigned,\n                dtInternalAdjusterAssigned,\n                dtInternalAttorneyAssigned,\n                dTotalOSReserveMovements,\n                dTotalReserveOrig100,\n                dTotalReserveOrigShare,\n                dTotalReserveSett100,\n                dTotalReserveSettShare,\n                dTotalRIRecoverySettShare,\n                dTotalRIReserveSettShare,\n                dXLRIAddReserveSettShare,\n                dXLRIPTDSettShare,\n                dXLRIReserveSettShare,\n                nInvalidClassFlag,\n                nMovementCount,\n                sExternalAdjusterReference,\n                sExternalLawyerReference,\n                sExternalSurveyorReference,\n                sSectionNotes,\n                dIncurredBureauOrig100,\n                dIncurredBureauOrigShare,\n                dIncurredBureauSett100,\n                dIncurredBureauSettShare,\n                dIncurredManualOrig100,\n                dIncurredManualOrigShare,\n                dIncurredManualSett100,\n                dIncurredManualSettShare,\n                dWrittenLine,\n                dSignedLine,\n                dAggregateLimit,\n                bProofOfLossPresented,\n                dtProofOfLossPresented,\n                dClaimPaymentLimit,\n                bClaimWithinAgreement,\n                dAgreementROE,\n                nClaimSectionRegulatoryCount,\n                nClaimSectionRegulatoryInCount,\n                bBureauClaim,\n                lMasterPolicySectionKey,\n                bClaimWithinBinder,\n                dBinderClaimPaymentLimit,\n                lBinderCurrencyKey,\n                dBinderROE,\n                lReinstatementCurrencyKey,\n                dReinstatementROE,\n                dReinstatementTotalReserve,\n                dReinstatementTotalPaidToDate,\n                dReinstatementTotalDue,\n                dReinstatementTotalReserveReport,\n                dReinstatementTotalPaidToDateReport,\n                dReinstatementTotalDueReport,\n                lPolicyLineKey,\n                dInitialReserveOrigShare,\n                sClaimant,\n                bInferredCCY\n            order by\n                dw_loadts\n        ) as dw_extract_order\n    from\n        claim_section\n),\n\nfiltered as (\n    select * from ordered where dw_extract_order = 1\n),\n\nranged as (\n    select\n        lClaimSectionKey,\n        lClaimKey,\n        lAdditionalReserveCcyOrigKey,\n        lAdditionalReserveCcyReportKey,\n        lAdditionalReserveCcySettKey,\n        lAgreementCurrencyKey,\n        lAgreementSectionKey,\n        lAgreementSectionLiabSumryKey,\n        lAgrmntTypeOfRatingElementKey,\n        lBordereauCurrencyKey,\n        lBrokerContactKey,\n        lClaimantContactKey,\n        lClaimTypeOfClassKey,\n        lClaimTypeOfRatingElementKey,\n        lClaimTypeOfSubClassKey,\n        lCurrentTypeOfReserveQualfKey,\n        lEventKey,\n        lExternalAdjusterContactKey,\n        lExternalAttorneyContactKey,\n        lExternalSurveyorContactKey,\n        lInsuredContactKey,\n        lInternalAdjusterContactKey,\n        lInternalAttorneyContactKey,\n        lLatestMovementKey,\n        lPayCcyOrigKey,\n        lPayCcyReportKey,\n        lPayCcySettKey,\n        lPolicyCurrencyKey,\n        lPolicyLiabilityKey,\n        lpolliabilityratingelementkey,\n        lPolicySectionKey,\n        lPolSectionLiabilitySummaryKey,\n        lPolicyTypeOfClassKey,\n        lPolicyTypeOfRatingElementKey,\n        lPolicyTypeOfSubClassKey,\n        lReserveCcyOrigKey,\n        lReserveCcyReportKey,\n        lReserveCcySettKey,\n        lTransactionTypeKey,\n        lTypeOfClaimAttachmentKey,\n        lTypeOfLiabilityKey,\n        lTypeOfMarketSourceKey,\n        lTypeOfSectionKey,\n        bReserveExceedsLimit,\n        bReserveTBA,\n        dAddReserveAuthorisedOrig100,\n        dAddReserveAuthorisedOrigShare,\n        dAddReserveAuthorisedSett100,\n        dAddReserveAuthorisedSettShare,\n        dAdditionalReserveOrig100,\n        dAdditionalReserveOrigShare,\n        dAdditionalReserveSett100,\n        dAdditionalReserveSettShare,\n        dAddReserveROEOrig,\n        dAddReserveROEReport,\n        dAddReserveROESett,\n        dFacRIAddReserveSettShare,\n        dFacRIPTDSettShare,\n        dFacRIReserveSettShare,\n        dCurrentIncurredOrig100,\n        dCurrentIncurredOrigShare,\n        dCurrentIncurredSett100,\n        dCurrentIncurredSettShare,\n        dInitialReserveSettShare,\n        dLOCTotalDrawingsSettShare,\n        dPTDAuthorisedBureauOrig100,\n        dPTDAuthorisedBureauOrigShare,\n        dPTDAuthorisedBureauSett100,\n        dPTDAuthorisedBureauSettShare,\n        dPTDAuthorisedManualOrig100,\n        dPTDAuthorisedManualOrigShare,\n        dPTDAuthorisedManualSett100,\n        dPTDAuthorisedManualSettShare,\n        dPTDAuthorisedOrig100,\n        dPTDAuthorisedOrigShare,\n        dPTDAuthorisedSett100,\n        dPTDAuthorisedSettShare,\n        dPTDBureauOrig100,\n        dPTDBureauOrigShare,\n        dPTDBureauSett100,\n        dPTDBureauSettShare,\n        dPTDManualOrig100,\n        dPTDManualOrigShare,\n        dPTDManualSett100,\n        dPTDManualSettShare,\n        dPaidToDateOrig100,\n        dPaidToDateOrigShare,\n        dPTDPendingBureauOrig100,\n        dPTDPendingBureauOrigShare,\n        dPTDPendingBureauSett100,\n        dPTDPendingBureauSettShare,\n        dPTDPendingManualOrig100,\n        dPTDPendingManualOrigShare,\n        dPTDPendingManualSett100,\n        dPTDPendingManualSettShare,\n        dPTDPendingOrig100,\n        dPTDPendingOrigShare,\n        dPTDPendingSett100,\n        dPTDPendingSettShare,\n        dPaidToDateSett100,\n        dPaidToDateSettShare,\n        dPayROEOrig,\n        dPayROEReport,\n        dPayROESett,\n        dPolicyLimit,\n        dPropRIAddReserveSettShare,\n        dPropRIPTDSettShare,\n        dPropRIReserveSettShare,\n        dReserveAuthorisedOrig100,\n        dReserveAuthorisedOrigShare,\n        dReserveAuthorisedSett100,\n        dReserveAuthorisedSettShare,\n        dReserveOrig100,\n        dReserveOrigShare,\n        dReserveROEOrig,\n        dReserveROEReport,\n        dReserveROESett,\n        dReserveSett100,\n        dReserveSettShare,\n        dtExternalAdjusterAssigned,\n        dtExternalAttorneyAssigned,\n        dtInternalAdjusterAssigned,\n        dtInternalAttorneyAssigned,\n        dTotalOSReserveMovements,\n        dTotalReserveOrig100,\n        dTotalReserveOrigShare,\n        dTotalReserveSett100,\n        dTotalReserveSettShare,\n        dTotalRIRecoverySettShare,\n        dTotalRIReserveSettShare,\n        dXLRIAddReserveSettShare,\n        dXLRIPTDSettShare,\n        dXLRIReserveSettShare,\n        nInvalidClassFlag,\n        nMovementCount,\n        sExternalAdjusterReference,\n        sExternalLawyerReference,\n        sExternalSurveyorReference,\n        sSectionNotes,\n        dIncurredBureauOrig100,\n        dIncurredBureauOrigShare,\n        dIncurredBureauSett100,\n        dIncurredBureauSettShare,\n        dIncurredManualOrig100,\n        dIncurredManualOrigShare,\n        dIncurredManualSett100,\n        dIncurredManualSettShare,\n        dWrittenLine,\n        dSignedLine,\n        dAggregateLimit,\n        bProofOfLossPresented,\n        dtProofOfLossPresented,\n        dClaimPaymentLimit,\n        bClaimWithinAgreement,\n        dAgreementROE,\n        nClaimSectionRegulatoryCount,\n        nClaimSectionRegulatoryInCount,\n        bBureauClaim,\n        lMasterPolicySectionKey,\n        bClaimWithinBinder,\n        dBinderClaimPaymentLimit,\n        lBinderCurrencyKey,\n        dBinderROE,\n        lReinstatementCurrencyKey,\n        dReinstatementROE,\n        dReinstatementTotalReserve,\n        dReinstatementTotalPaidToDate,\n        dReinstatementTotalDue,\n        dReinstatementTotalReserveReport,\n        dReinstatementTotalPaidToDateReport,\n        dReinstatementTotalDueReport,\n        lPolicyLineKey,\n        dInitialReserveOrigShare,\n        sClaimant,\n        bInferredCCY,\n        dw_loadts as _valid_from,\n        lead(dw_loadts) over (partition by lClaimSectionKey order by dw_loadts) as _valid_to\n    from\n        filtered\n)\n\nselect * from ranged", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"scd_claim_section\""}, "model.iginsure.scd_classification": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.iginsure.dbo.classification"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["InwardPremium"], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "scd", "scd_classification"], "unique_id": "model.iginsure.scd_classification", "raw_code": "-- This file is automatically generated\r\n\r\n{{\r\n  config(tags=['InwardPremium'])\r\n}}\r\n\r\nwith\r\n\r\nclassification as (\r\n    select * from {{ source('dbo', 'classification') }}\r\n),\r\n\r\nordered as (\r\n    select\r\n        lClassificationKey,\r\n        sClassificationCode,\r\n        sClassificationDescr,\r\n        sSearchClassificationDescr,\r\n        lProductKey,\r\n        dw_loadts,\r\n        row_number() over (\r\n            partition by\r\n                lClassificationKey,\r\n                sClassificationCode,\r\n                sClassificationDescr,\r\n                sSearchClassificationDescr,\r\n                lProductKey\r\n            order by\r\n                dw_loadts\r\n        ) as dw_extract_order\r\n    from\r\n        classification\r\n),\r\n\r\nfiltered as (\r\n    select * from ordered where dw_extract_order = 1\r\n),\r\n\r\nranged as (\r\n    select\r\n        lClassificationKey,\r\n        sClassificationCode,\r\n        sClassificationDescr,\r\n        sSearchClassificationDescr,\r\n        lProductKey,\r\n        dw_loadts as _valid_from,\r\n        lead(dw_loadts) over (partition by lClassificationKey order by dw_loadts) as _valid_to\r\n    from\r\n        filtered\r\n)\r\n\r\nselect * from ranged", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "scd\\scd_classification.sql", "original_file_path": "models\\scd\\scd_classification.sql", "name": "scd_classification", "alias": "scd_classification", "checksum": {"name": "sha256", "checksum": "ddfcef6518062995a3c47f7e6a096dd92997684a09391ce853f08cfa52489f2a"}, "tags": ["InwardPremium"], "refs": [], "sources": [["dbo", "classification"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": "iginsure://models\\scd\\scd.yml", "compiled_path": "target\\compiled\\iginsure\\models\\scd\\scd_classification.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "docs": {"show": false}, "tags": ["InwardPremium"]}, "created_at": 1701786801.764776, "compiled_code": "-- This file is automatically generated\n\n\n\nwith\n\nclassification as (\n    select * from \"IGI_PROD_DW\".\"dbo\".\"Classification\"\n),\n\nordered as (\n    select\n        lClassificationKey,\n        sClassificationCode,\n        sClassificationDescr,\n        sSearchClassificationDescr,\n        lProductKey,\n        dw_loadts,\n        row_number() over (\n            partition by\n                lClassificationKey,\n                sClassificationCode,\n                sClassificationDescr,\n                sSearchClassificationDescr,\n                lProductKey\n            order by\n                dw_loadts\n        ) as dw_extract_order\n    from\n        classification\n),\n\nfiltered as (\n    select * from ordered where dw_extract_order = 1\n),\n\nranged as (\n    select\n        lClassificationKey,\n        sClassificationCode,\n        sClassificationDescr,\n        sSearchClassificationDescr,\n        lProductKey,\n        dw_loadts as _valid_from,\n        lead(dw_loadts) over (partition by lClassificationKey order by dw_loadts) as _valid_to\n    from\n        filtered\n)\n\nselect * from ranged", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"scd_classification\""}, "model.iginsure.scd_contact": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.iginsure.dbo.contact"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["InwardPremium"], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "scd", "scd_contact"], "unique_id": "model.iginsure.scd_contact", "raw_code": "-- This file is automatically generated\r\n{{\r\n  config(tags=['InwardPremium'])\r\n}}\r\n\r\n\r\nwith\r\n\r\ncontact as (\r\n    select * from {{ source('dbo', 'contact') }}\r\n),\r\n\r\nordered as (\r\n    select\r\n        lContactKey,\r\n        lAuthorityCheckJoinKey,\r\n        sContactReference,\r\n        sContactRefSearch,\r\n        lTypeOfRoleKey,\r\n        lTypeOfContactKey,\r\n        lTypeOfContactLevelKey,\r\n        lTypeOfUserKey,\r\n        lSecurityUserKey,\r\n        lManagerKey,\r\n        sCompanyName,\r\n        sCode,\r\n        sNameOfMainContact,\r\n        bBusinessIncorporated,\r\n        lTypeOfCompanyKey,\r\n        sForename,\r\n        sSurname,\r\n        lTypeOfTitleKey,\r\n        lTypeOfTitleSuffixKey,\r\n        lTypeOfGenderKey,\r\n        dtBirth,\r\n        lTypeOfOccupationKey,\r\n        sInitials,\r\n        sPosition,\r\n        sPhone,\r\n        sMobilePhone,\r\n        sFax,\r\n        sEmail,\r\n        sWebSite,\r\n        sToBeKnownAs,\r\n        bKeyClient,\r\n        bAttorneyTax1099,\r\n        lRatingSourceKey,\r\n        sTaxCode,\r\n        bW9Tax,\r\n        dtEffectiveFrom,\r\n        dtCancelled,\r\n        lBrokerGroupKey,\r\n        bInBrokerGroup,\r\n        sLedgerCodeSegment,\r\n        sLedgerCodeUnit,\r\n        sLedgerCodeLOB,\r\n        sMailingAddressCareOf,\r\n        lMailingAddressKey,\r\n        sMailingAddress1,\r\n        sMailingAddress2,\r\n        sMailingAddressCity,\r\n        sMailingAddressPostCode,\r\n        lMailingAddressCityKey,\r\n        lMailingAddressStateKey,\r\n        lMailingAddressZipKey,\r\n        lMailingAddressCountryKey,\r\n        sBillingAddressCareOf,\r\n        lBillingAddressKey,\r\n        sBillingAddress1,\r\n        sBillingAddress2,\r\n        sBillingAddressCity,\r\n        sBillingAddressPostCode,\r\n        lBillingAddressCityKey,\r\n        lBillingAddressStateKey,\r\n        lBillingAddressZipKey,\r\n        lBillingAddressCountryKey,\r\n        lDomicileCountryKey,\r\n        bDirectBroker,\r\n        bReinsuranceBroker,\r\n        bSurplusLinesBroker,\r\n        bInwardsBroker,\r\n        bInternalUserScreen,\r\n        bPeerReview,\r\n        bBillingAddressSameAsMailing,\r\n        lTypeOfBillingKey,\r\n        lTypeOfBrokerKey,\r\n        lTypeOfSalesRegionKey,\r\n        lTypeOfSICKey,\r\n        sAdvisenFPN,\r\n        sBillingAddressZipPlusFour,\r\n        sDunnAndBradstreet,\r\n        sMailingAddressZipPlusFour,\r\n        sNIPRNumber,\r\n        sStockSymbol,\r\n        lUserDivisionKey,\r\n        lSecurityBitfield,\r\n        lUserSubDivisionKey,\r\n        lDomicileStateKey,\r\n        lBlobCompanyLogoKey,\r\n        lBlobCompanyAddressKey,\r\n        lLanguageKey,\r\n        lInternalContactKey,\r\n        lBlobNoteKey,\r\n        lTypeOfRatingSourceValueKey,\r\n        bGenerateCode,\r\n        lAMLCompleteKey,\r\n        lAMLCheckCOntactKey,\r\n        dtAMLCheckPerformed,\r\n        dtAMLCheckExipry,\r\n        sAMLNotes,\r\n        lTypeOfContactFunctionKey,\r\n        lContactOwnerKey,\r\n        sCountOfPrimaryRole,\r\n        sCode2,\r\n        sLogonID,\r\n        bUnrestrictedInstancePermissn,\r\n        lTypeOfAddressEntryKey,\r\n        bBACountryHasStates,\r\n        bMACountryHasStates,\r\n        sCompanyLogo,\r\n        sCompanyAddress,\r\n        sNotes,\r\n        bSelfServiceAvailable,\r\n        nContactACRDefault,\r\n        sLloydsSyndicateNo,\r\n        sLloydsBrokerNo,\r\n        sLloydsCoverholderPIN,\r\n        sNAICCompanyCode,\r\n        sFEINCode,\r\n        sDUNSCode,\r\n        sLIRMACode,\r\n        sILUCode,\r\n        sLloydsListCode,\r\n        sIHSFairplayCode,\r\n        bGeneralScreen,\r\n        nPolicyAuthorityPrimaryCcySet,\r\n        nClaimAuthorityPrimaryCcySet,\r\n        lTypeofInsuredPolicyholderLloyds,\r\n        nWriteOffCount,\r\n        sCLASSUserId,\r\n        sCLASSAccountCode,\r\n        SSPECIALCHARACTERS,\r\n        LMAINLOCATIONKEY,\r\n        LTERRITORYKEY,\r\n        bPossibleDuplicate,\r\n        sLegalIdentifier,\r\n        dtNextApproval,\r\n        sPreviousContactReference,\r\n        lCountryRiskLevel,\r\n        bBrokerCodeValid,\r\n        lsecurityuserkeywq,\r\n        LWQSECURITYUSERKEY,\r\n        sLegalName,\r\n        dw_loadts,\r\n        row_number() over (\r\n            partition by\r\n                lContactKey,\r\n                lAuthorityCheckJoinKey,\r\n                sContactReference,\r\n                sContactRefSearch,\r\n                lTypeOfRoleKey,\r\n                lTypeOfContactKey,\r\n                lTypeOfContactLevelKey,\r\n                lTypeOfUserKey,\r\n                lSecurityUserKey,\r\n                lManagerKey,\r\n                sCompanyName,\r\n                sCode,\r\n                sNameOfMainContact,\r\n                bBusinessIncorporated,\r\n                lTypeOfCompanyKey,\r\n                sForename,\r\n                sSurname,\r\n                lTypeOfTitleKey,\r\n                lTypeOfTitleSuffixKey,\r\n                lTypeOfGenderKey,\r\n                dtBirth,\r\n                lTypeOfOccupationKey,\r\n                sInitials,\r\n                sPosition,\r\n                sPhone,\r\n                sMobilePhone,\r\n                sFax,\r\n                sEmail,\r\n                sWebSite,\r\n                sToBeKnownAs,\r\n                bKeyClient,\r\n                bAttorneyTax1099,\r\n                lRatingSourceKey,\r\n                sTaxCode,\r\n                bW9Tax,\r\n                dtEffectiveFrom,\r\n                dtCancelled,\r\n                lBrokerGroupKey,\r\n                bInBrokerGroup,\r\n                sLedgerCodeSegment,\r\n                sLedgerCodeUnit,\r\n                sLedgerCodeLOB,\r\n                sMailingAddressCareOf,\r\n                lMailingAddressKey,\r\n                sMailingAddress1,\r\n                sMailingAddress2,\r\n                sMailingAddressCity,\r\n                sMailingAddressPostCode,\r\n                lMailingAddressCityKey,\r\n                lMailingAddressStateKey,\r\n                lMailingAddressZipKey,\r\n                lMailingAddressCountryKey,\r\n                sBillingAddressCareOf,\r\n                lBillingAddressKey,\r\n                sBillingAddress1,\r\n                sBillingAddress2,\r\n                sBillingAddressCity,\r\n                sBillingAddressPostCode,\r\n                lBillingAddressCityKey,\r\n                lBillingAddressStateKey,\r\n                lBillingAddressZipKey,\r\n                lBillingAddressCountryKey,\r\n                lDomicileCountryKey,\r\n                bDirectBroker,\r\n                bReinsuranceBroker,\r\n                bSurplusLinesBroker,\r\n                bInwardsBroker,\r\n                bInternalUserScreen,\r\n                bPeerReview,\r\n                bBillingAddressSameAsMailing,\r\n                lTypeOfBillingKey,\r\n                lTypeOfBrokerKey,\r\n                lTypeOfSalesRegionKey,\r\n                lTypeOfSICKey,\r\n                sAdvisenFPN,\r\n                sBillingAddressZipPlusFour,\r\n                sDunnAndBradstreet,\r\n                sMailingAddressZipPlusFour,\r\n                sNIPRNumber,\r\n                sStockSymbol,\r\n                lUserDivisionKey,\r\n                lSecurityBitfield,\r\n                lUserSubDivisionKey,\r\n                lDomicileStateKey,\r\n                lBlobCompanyLogoKey,\r\n                lBlobCompanyAddressKey,\r\n                lLanguageKey,\r\n                lInternalContactKey,\r\n                lBlobNoteKey,\r\n                lTypeOfRatingSourceValueKey,\r\n                bGenerateCode,\r\n                lAMLCompleteKey,\r\n                lAMLCheckCOntactKey,\r\n                dtAMLCheckPerformed,\r\n                dtAMLCheckExipry,\r\n                sAMLNotes,\r\n                lTypeOfContactFunctionKey,\r\n                lContactOwnerKey,\r\n                sCountOfPrimaryRole,\r\n                sCode2,\r\n                sLogonID,\r\n                bUnrestrictedInstancePermissn,\r\n                lTypeOfAddressEntryKey,\r\n                bBACountryHasStates,\r\n                bMACountryHasStates,\r\n                sCompanyLogo,\r\n                sCompanyAddress,\r\n                sNotes,\r\n                bSelfServiceAvailable,\r\n                nContactACRDefault,\r\n                sLloydsSyndicateNo,\r\n                sLloydsBrokerNo,\r\n                sLloydsCoverholderPIN,\r\n                sNAICCompanyCode,\r\n                sFEINCode,\r\n                sDUNSCode,\r\n                sLIRMACode,\r\n                sILUCode,\r\n                sLloydsListCode,\r\n                sIHSFairplayCode,\r\n                bGeneralScreen,\r\n                nPolicyAuthorityPrimaryCcySet,\r\n                nClaimAuthorityPrimaryCcySet,\r\n                lTypeofInsuredPolicyholderLloyds,\r\n                nWriteOffCount,\r\n                sCLASSUserId,\r\n                sCLASSAccountCode,\r\n                SSPECIALCHARACTERS,\r\n                LMAINLOCATIONKEY,\r\n                LTERRITORYKEY,\r\n                bPossibleDuplicate,\r\n                sLegalIdentifier,\r\n                dtNextApproval,\r\n                sPreviousContactReference,\r\n                lCountryRiskLevel,\r\n                bBrokerCodeValid,\r\n                lsecurityuserkeywq,\r\n                LWQSECURITYUSERKEY,\r\n                sLegalName\r\n            order by\r\n                dw_loadts\r\n        ) as dw_extract_order\r\n    from\r\n        contact\r\n),\r\n\r\nfiltered as (\r\n    select * from ordered where dw_extract_order = 1\r\n),\r\n\r\nranged as (\r\n    select\r\n        lContactKey,\r\n        lAuthorityCheckJoinKey,\r\n        sContactReference,\r\n        sContactRefSearch,\r\n        lTypeOfRoleKey,\r\n        lTypeOfContactKey,\r\n        lTypeOfContactLevelKey,\r\n        lTypeOfUserKey,\r\n        lSecurityUserKey,\r\n        lManagerKey,\r\n        sCompanyName,\r\n        sCode,\r\n        sNameOfMainContact,\r\n        bBusinessIncorporated,\r\n        lTypeOfCompanyKey,\r\n        sForename,\r\n        sSurname,\r\n        lTypeOfTitleKey,\r\n        lTypeOfTitleSuffixKey,\r\n        lTypeOfGenderKey,\r\n        dtBirth,\r\n        lTypeOfOccupationKey,\r\n        sInitials,\r\n        sPosition,\r\n        sPhone,\r\n        sMobilePhone,\r\n        sFax,\r\n        sEmail,\r\n        sWebSite,\r\n        sToBeKnownAs,\r\n        bKeyClient,\r\n        bAttorneyTax1099,\r\n        lRatingSourceKey,\r\n        sTaxCode,\r\n        bW9Tax,\r\n        dtEffectiveFrom,\r\n        dtCancelled,\r\n        lBrokerGroupKey,\r\n        bInBrokerGroup,\r\n        sLedgerCodeSegment,\r\n        sLedgerCodeUnit,\r\n        sLedgerCodeLOB,\r\n        sMailingAddressCareOf,\r\n        lMailingAddressKey,\r\n        sMailingAddress1,\r\n        sMailingAddress2,\r\n        sMailingAddressCity,\r\n        sMailingAddressPostCode,\r\n        lMailingAddressCityKey,\r\n        lMailingAddressStateKey,\r\n        lMailingAddressZipKey,\r\n        lMailingAddressCountryKey,\r\n        sBillingAddressCareOf,\r\n        lBillingAddressKey,\r\n        sBillingAddress1,\r\n        sBillingAddress2,\r\n        sBillingAddressCity,\r\n        sBillingAddressPostCode,\r\n        lBillingAddressCityKey,\r\n        lBillingAddressStateKey,\r\n        lBillingAddressZipKey,\r\n        lBillingAddressCountryKey,\r\n        lDomicileCountryKey,\r\n        bDirectBroker,\r\n        bReinsuranceBroker,\r\n        bSurplusLinesBroker,\r\n        bInwardsBroker,\r\n        bInternalUserScreen,\r\n        bPeerReview,\r\n        bBillingAddressSameAsMailing,\r\n        lTypeOfBillingKey,\r\n        lTypeOfBrokerKey,\r\n        lTypeOfSalesRegionKey,\r\n        lTypeOfSICKey,\r\n        sAdvisenFPN,\r\n        sBillingAddressZipPlusFour,\r\n        sDunnAndBradstreet,\r\n        sMailingAddressZipPlusFour,\r\n        sNIPRNumber,\r\n        sStockSymbol,\r\n        lUserDivisionKey,\r\n        lSecurityBitfield,\r\n        lUserSubDivisionKey,\r\n        lDomicileStateKey,\r\n        lBlobCompanyLogoKey,\r\n        lBlobCompanyAddressKey,\r\n        lLanguageKey,\r\n        lInternalContactKey,\r\n        lBlobNoteKey,\r\n        lTypeOfRatingSourceValueKey,\r\n        bGenerateCode,\r\n        lAMLCompleteKey,\r\n        lAMLCheckCOntactKey,\r\n        dtAMLCheckPerformed,\r\n        dtAMLCheckExipry,\r\n        sAMLNotes,\r\n        lTypeOfContactFunctionKey,\r\n        lContactOwnerKey,\r\n        sCountOfPrimaryRole,\r\n        sCode2,\r\n        sLogonID,\r\n        bUnrestrictedInstancePermissn,\r\n        lTypeOfAddressEntryKey,\r\n        bBACountryHasStates,\r\n        bMACountryHasStates,\r\n        sCompanyLogo,\r\n        sCompanyAddress,\r\n        sNotes,\r\n        bSelfServiceAvailable,\r\n        nContactACRDefault,\r\n        sLloydsSyndicateNo,\r\n        sLloydsBrokerNo,\r\n        sLloydsCoverholderPIN,\r\n        sNAICCompanyCode,\r\n        sFEINCode,\r\n        sDUNSCode,\r\n        sLIRMACode,\r\n        sILUCode,\r\n        sLloydsListCode,\r\n        sIHSFairplayCode,\r\n        bGeneralScreen,\r\n        nPolicyAuthorityPrimaryCcySet,\r\n        nClaimAuthorityPrimaryCcySet,\r\n        lTypeofInsuredPolicyholderLloyds,\r\n        nWriteOffCount,\r\n        sCLASSUserId,\r\n        sCLASSAccountCode,\r\n        SSPECIALCHARACTERS,\r\n        LMAINLOCATIONKEY,\r\n        LTERRITORYKEY,\r\n        bPossibleDuplicate,\r\n        sLegalIdentifier,\r\n        dtNextApproval,\r\n        sPreviousContactReference,\r\n        lCountryRiskLevel,\r\n        bBrokerCodeValid,\r\n        lsecurityuserkeywq,\r\n        LWQSECURITYUSERKEY,\r\n        sLegalName,\r\n        dw_loadts as _valid_from,\r\n        lead(dw_loadts) over (partition by lContactKey order by dw_loadts) as _valid_to\r\n    from\r\n        filtered\r\n)\r\n\r\nselect * from ranged", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "scd\\scd_contact.sql", "original_file_path": "models\\scd\\scd_contact.sql", "name": "scd_contact", "alias": "scd_contact", "checksum": {"name": "sha256", "checksum": "790bbe56c2ddbdd8d5dca32278b7bc26350a79bd42ebf2d91d27f31cdc63b368"}, "tags": ["InwardPremium"], "refs": [], "sources": [["dbo", "contact"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": "iginsure://models\\scd\\scd.yml", "compiled_path": "target\\compiled\\iginsure\\models\\scd\\scd_contact.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "docs": {"show": false}, "tags": ["InwardPremium"]}, "created_at": 1701786801.7676651, "compiled_code": "-- This file is automatically generated\n\n\n\nwith\n\ncontact as (\n    select * from \"IGI_PROD_DW\".\"dbo\".\"Contact\"\n),\n\nordered as (\n    select\n        lContactKey,\n        lAuthorityCheckJoinKey,\n        sContactReference,\n        sContactRefSearch,\n        lTypeOfRoleKey,\n        lTypeOfContactKey,\n        lTypeOfContactLevelKey,\n        lTypeOfUserKey,\n        lSecurityUserKey,\n        lManagerKey,\n        sCompanyName,\n        sCode,\n        sNameOfMainContact,\n        bBusinessIncorporated,\n        lTypeOfCompanyKey,\n        sForename,\n        sSurname,\n        lTypeOfTitleKey,\n        lTypeOfTitleSuffixKey,\n        lTypeOfGenderKey,\n        dtBirth,\n        lTypeOfOccupationKey,\n        sInitials,\n        sPosition,\n        sPhone,\n        sMobilePhone,\n        sFax,\n        sEmail,\n        sWebSite,\n        sToBeKnownAs,\n        bKeyClient,\n        bAttorneyTax1099,\n        lRatingSourceKey,\n        sTaxCode,\n        bW9Tax,\n        dtEffectiveFrom,\n        dtCancelled,\n        lBrokerGroupKey,\n        bInBrokerGroup,\n        sLedgerCodeSegment,\n        sLedgerCodeUnit,\n        sLedgerCodeLOB,\n        sMailingAddressCareOf,\n        lMailingAddressKey,\n        sMailingAddress1,\n        sMailingAddress2,\n        sMailingAddressCity,\n        sMailingAddressPostCode,\n        lMailingAddressCityKey,\n        lMailingAddressStateKey,\n        lMailingAddressZipKey,\n        lMailingAddressCountryKey,\n        sBillingAddressCareOf,\n        lBillingAddressKey,\n        sBillingAddress1,\n        sBillingAddress2,\n        sBillingAddressCity,\n        sBillingAddressPostCode,\n        lBillingAddressCityKey,\n        lBillingAddressStateKey,\n        lBillingAddressZipKey,\n        lBillingAddressCountryKey,\n        lDomicileCountryKey,\n        bDirectBroker,\n        bReinsuranceBroker,\n        bSurplusLinesBroker,\n        bInwardsBroker,\n        bInternalUserScreen,\n        bPeerReview,\n        bBillingAddressSameAsMailing,\n        lTypeOfBillingKey,\n        lTypeOfBrokerKey,\n        lTypeOfSalesRegionKey,\n        lTypeOfSICKey,\n        sAdvisenFPN,\n        sBillingAddressZipPlusFour,\n        sDunnAndBradstreet,\n        sMailingAddressZipPlusFour,\n        sNIPRNumber,\n        sStockSymbol,\n        lUserDivisionKey,\n        lSecurityBitfield,\n        lUserSubDivisionKey,\n        lDomicileStateKey,\n        lBlobCompanyLogoKey,\n        lBlobCompanyAddressKey,\n        lLanguageKey,\n        lInternalContactKey,\n        lBlobNoteKey,\n        lTypeOfRatingSourceValueKey,\n        bGenerateCode,\n        lAMLCompleteKey,\n        lAMLCheckCOntactKey,\n        dtAMLCheckPerformed,\n        dtAMLCheckExipry,\n        sAMLNotes,\n        lTypeOfContactFunctionKey,\n        lContactOwnerKey,\n        sCountOfPrimaryRole,\n        sCode2,\n        sLogonID,\n        bUnrestrictedInstancePermissn,\n        lTypeOfAddressEntryKey,\n        bBACountryHasStates,\n        bMACountryHasStates,\n        sCompanyLogo,\n        sCompanyAddress,\n        sNotes,\n        bSelfServiceAvailable,\n        nContactACRDefault,\n        sLloydsSyndicateNo,\n        sLloydsBrokerNo,\n        sLloydsCoverholderPIN,\n        sNAICCompanyCode,\n        sFEINCode,\n        sDUNSCode,\n        sLIRMACode,\n        sILUCode,\n        sLloydsListCode,\n        sIHSFairplayCode,\n        bGeneralScreen,\n        nPolicyAuthorityPrimaryCcySet,\n        nClaimAuthorityPrimaryCcySet,\n        lTypeofInsuredPolicyholderLloyds,\n        nWriteOffCount,\n        sCLASSUserId,\n        sCLASSAccountCode,\n        SSPECIALCHARACTERS,\n        LMAINLOCATIONKEY,\n        LTERRITORYKEY,\n        bPossibleDuplicate,\n        sLegalIdentifier,\n        dtNextApproval,\n        sPreviousContactReference,\n        lCountryRiskLevel,\n        bBrokerCodeValid,\n        lsecurityuserkeywq,\n        LWQSECURITYUSERKEY,\n        sLegalName,\n        dw_loadts,\n        row_number() over (\n            partition by\n                lContactKey,\n                lAuthorityCheckJoinKey,\n                sContactReference,\n                sContactRefSearch,\n                lTypeOfRoleKey,\n                lTypeOfContactKey,\n                lTypeOfContactLevelKey,\n                lTypeOfUserKey,\n                lSecurityUserKey,\n                lManagerKey,\n                sCompanyName,\n                sCode,\n                sNameOfMainContact,\n                bBusinessIncorporated,\n                lTypeOfCompanyKey,\n                sForename,\n                sSurname,\n                lTypeOfTitleKey,\n                lTypeOfTitleSuffixKey,\n                lTypeOfGenderKey,\n                dtBirth,\n                lTypeOfOccupationKey,\n                sInitials,\n                sPosition,\n                sPhone,\n                sMobilePhone,\n                sFax,\n                sEmail,\n                sWebSite,\n                sToBeKnownAs,\n                bKeyClient,\n                bAttorneyTax1099,\n                lRatingSourceKey,\n                sTaxCode,\n                bW9Tax,\n                dtEffectiveFrom,\n                dtCancelled,\n                lBrokerGroupKey,\n                bInBrokerGroup,\n                sLedgerCodeSegment,\n                sLedgerCodeUnit,\n                sLedgerCodeLOB,\n                sMailingAddressCareOf,\n                lMailingAddressKey,\n                sMailingAddress1,\n                sMailingAddress2,\n                sMailingAddressCity,\n                sMailingAddressPostCode,\n                lMailingAddressCityKey,\n                lMailingAddressStateKey,\n                lMailingAddressZipKey,\n                lMailingAddressCountryKey,\n                sBillingAddressCareOf,\n                lBillingAddressKey,\n                sBillingAddress1,\n                sBillingAddress2,\n                sBillingAddressCity,\n                sBillingAddressPostCode,\n                lBillingAddressCityKey,\n                lBillingAddressStateKey,\n                lBillingAddressZipKey,\n                lBillingAddressCountryKey,\n                lDomicileCountryKey,\n                bDirectBroker,\n                bReinsuranceBroker,\n                bSurplusLinesBroker,\n                bInwardsBroker,\n                bInternalUserScreen,\n                bPeerReview,\n                bBillingAddressSameAsMailing,\n                lTypeOfBillingKey,\n                lTypeOfBrokerKey,\n                lTypeOfSalesRegionKey,\n                lTypeOfSICKey,\n                sAdvisenFPN,\n                sBillingAddressZipPlusFour,\n                sDunnAndBradstreet,\n                sMailingAddressZipPlusFour,\n                sNIPRNumber,\n                sStockSymbol,\n                lUserDivisionKey,\n                lSecurityBitfield,\n                lUserSubDivisionKey,\n                lDomicileStateKey,\n                lBlobCompanyLogoKey,\n                lBlobCompanyAddressKey,\n                lLanguageKey,\n                lInternalContactKey,\n                lBlobNoteKey,\n                lTypeOfRatingSourceValueKey,\n                bGenerateCode,\n                lAMLCompleteKey,\n                lAMLCheckCOntactKey,\n                dtAMLCheckPerformed,\n                dtAMLCheckExipry,\n                sAMLNotes,\n                lTypeOfContactFunctionKey,\n                lContactOwnerKey,\n                sCountOfPrimaryRole,\n                sCode2,\n                sLogonID,\n                bUnrestrictedInstancePermissn,\n                lTypeOfAddressEntryKey,\n                bBACountryHasStates,\n                bMACountryHasStates,\n                sCompanyLogo,\n                sCompanyAddress,\n                sNotes,\n                bSelfServiceAvailable,\n                nContactACRDefault,\n                sLloydsSyndicateNo,\n                sLloydsBrokerNo,\n                sLloydsCoverholderPIN,\n                sNAICCompanyCode,\n                sFEINCode,\n                sDUNSCode,\n                sLIRMACode,\n                sILUCode,\n                sLloydsListCode,\n                sIHSFairplayCode,\n                bGeneralScreen,\n                nPolicyAuthorityPrimaryCcySet,\n                nClaimAuthorityPrimaryCcySet,\n                lTypeofInsuredPolicyholderLloyds,\n                nWriteOffCount,\n                sCLASSUserId,\n                sCLASSAccountCode,\n                SSPECIALCHARACTERS,\n                LMAINLOCATIONKEY,\n                LTERRITORYKEY,\n                bPossibleDuplicate,\n                sLegalIdentifier,\n                dtNextApproval,\n                sPreviousContactReference,\n                lCountryRiskLevel,\n                bBrokerCodeValid,\n                lsecurityuserkeywq,\n                LWQSECURITYUSERKEY,\n                sLegalName\n            order by\n                dw_loadts\n        ) as dw_extract_order\n    from\n        contact\n),\n\nfiltered as (\n    select * from ordered where dw_extract_order = 1\n),\n\nranged as (\n    select\n        lContactKey,\n        lAuthorityCheckJoinKey,\n        sContactReference,\n        sContactRefSearch,\n        lTypeOfRoleKey,\n        lTypeOfContactKey,\n        lTypeOfContactLevelKey,\n        lTypeOfUserKey,\n        lSecurityUserKey,\n        lManagerKey,\n        sCompanyName,\n        sCode,\n        sNameOfMainContact,\n        bBusinessIncorporated,\n        lTypeOfCompanyKey,\n        sForename,\n        sSurname,\n        lTypeOfTitleKey,\n        lTypeOfTitleSuffixKey,\n        lTypeOfGenderKey,\n        dtBirth,\n        lTypeOfOccupationKey,\n        sInitials,\n        sPosition,\n        sPhone,\n        sMobilePhone,\n        sFax,\n        sEmail,\n        sWebSite,\n        sToBeKnownAs,\n        bKeyClient,\n        bAttorneyTax1099,\n        lRatingSourceKey,\n        sTaxCode,\n        bW9Tax,\n        dtEffectiveFrom,\n        dtCancelled,\n        lBrokerGroupKey,\n        bInBrokerGroup,\n        sLedgerCodeSegment,\n        sLedgerCodeUnit,\n        sLedgerCodeLOB,\n        sMailingAddressCareOf,\n        lMailingAddressKey,\n        sMailingAddress1,\n        sMailingAddress2,\n        sMailingAddressCity,\n        sMailingAddressPostCode,\n        lMailingAddressCityKey,\n        lMailingAddressStateKey,\n        lMailingAddressZipKey,\n        lMailingAddressCountryKey,\n        sBillingAddressCareOf,\n        lBillingAddressKey,\n        sBillingAddress1,\n        sBillingAddress2,\n        sBillingAddressCity,\n        sBillingAddressPostCode,\n        lBillingAddressCityKey,\n        lBillingAddressStateKey,\n        lBillingAddressZipKey,\n        lBillingAddressCountryKey,\n        lDomicileCountryKey,\n        bDirectBroker,\n        bReinsuranceBroker,\n        bSurplusLinesBroker,\n        bInwardsBroker,\n        bInternalUserScreen,\n        bPeerReview,\n        bBillingAddressSameAsMailing,\n        lTypeOfBillingKey,\n        lTypeOfBrokerKey,\n        lTypeOfSalesRegionKey,\n        lTypeOfSICKey,\n        sAdvisenFPN,\n        sBillingAddressZipPlusFour,\n        sDunnAndBradstreet,\n        sMailingAddressZipPlusFour,\n        sNIPRNumber,\n        sStockSymbol,\n        lUserDivisionKey,\n        lSecurityBitfield,\n        lUserSubDivisionKey,\n        lDomicileStateKey,\n        lBlobCompanyLogoKey,\n        lBlobCompanyAddressKey,\n        lLanguageKey,\n        lInternalContactKey,\n        lBlobNoteKey,\n        lTypeOfRatingSourceValueKey,\n        bGenerateCode,\n        lAMLCompleteKey,\n        lAMLCheckCOntactKey,\n        dtAMLCheckPerformed,\n        dtAMLCheckExipry,\n        sAMLNotes,\n        lTypeOfContactFunctionKey,\n        lContactOwnerKey,\n        sCountOfPrimaryRole,\n        sCode2,\n        sLogonID,\n        bUnrestrictedInstancePermissn,\n        lTypeOfAddressEntryKey,\n        bBACountryHasStates,\n        bMACountryHasStates,\n        sCompanyLogo,\n        sCompanyAddress,\n        sNotes,\n        bSelfServiceAvailable,\n        nContactACRDefault,\n        sLloydsSyndicateNo,\n        sLloydsBrokerNo,\n        sLloydsCoverholderPIN,\n        sNAICCompanyCode,\n        sFEINCode,\n        sDUNSCode,\n        sLIRMACode,\n        sILUCode,\n        sLloydsListCode,\n        sIHSFairplayCode,\n        bGeneralScreen,\n        nPolicyAuthorityPrimaryCcySet,\n        nClaimAuthorityPrimaryCcySet,\n        lTypeofInsuredPolicyholderLloyds,\n        nWriteOffCount,\n        sCLASSUserId,\n        sCLASSAccountCode,\n        SSPECIALCHARACTERS,\n        LMAINLOCATIONKEY,\n        LTERRITORYKEY,\n        bPossibleDuplicate,\n        sLegalIdentifier,\n        dtNextApproval,\n        sPreviousContactReference,\n        lCountryRiskLevel,\n        bBrokerCodeValid,\n        lsecurityuserkeywq,\n        LWQSECURITYUSERKEY,\n        sLegalName,\n        dw_loadts as _valid_from,\n        lead(dw_loadts) over (partition by lContactKey order by dw_loadts) as _valid_to\n    from\n        filtered\n)\n\nselect * from ranged", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"scd_contact\""}, "model.iginsure.scd_contact_link": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.iginsure.dbo.contact_link"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["InwardPremium"], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "scd", "scd_contact_link"], "unique_id": "model.iginsure.scd_contact_link", "raw_code": "-- This file is automatically generated\r\n{{\r\n  config(tags=['InwardPremium'])\r\n}}\r\n\r\nwith\r\n\r\ncontact_link as (\r\n    select * from {{ source('dbo', 'contact_link') }}\r\n),\r\n\r\nordered as (\r\n    select\r\n        LCONTACTLINKKEY,\r\n        LCONTACTKEY,\r\n        LLINKTOCONTACTKEY,\r\n        LLINKKEY,\r\n        bAllRoles,\r\n        dw_loadts,\r\n        row_number() over (\r\n            partition by\r\n                LCONTACTLINKKEY,\r\n                LCONTACTKEY,\r\n                LLINKTOCONTACTKEY,\r\n                LLINKKEY,\r\n                bAllRoles\r\n            order by\r\n                dw_loadts\r\n        ) as dw_extract_order\r\n    from\r\n        contact_link\r\n),\r\n\r\nfiltered as (\r\n    select * from ordered where dw_extract_order = 1\r\n),\r\n\r\nranged as (\r\n    select\r\n        LCONTACTLINKKEY,\r\n        LCONTACTKEY,\r\n        LLINKTOCONTACTKEY,\r\n        LLINKKEY,\r\n        bAllRoles,\r\n        dw_loadts as _valid_from,\r\n        lead(dw_loadts) over (partition by LCONTACTLINKKEY order by dw_loadts) as _valid_to\r\n    from\r\n        filtered\r\n)\r\n\r\nselect * from ranged", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "scd\\scd_contact_link.sql", "original_file_path": "models\\scd\\scd_contact_link.sql", "name": "scd_contact_link", "alias": "scd_contact_link", "checksum": {"name": "sha256", "checksum": "0de9228da93b2cd9e496c5049a39360cb6b7a590a61730083f0631cccd14d561"}, "tags": ["InwardPremium"], "refs": [], "sources": [["dbo", "contact_link"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": "iginsure://models\\scd\\scd.yml", "compiled_path": "target\\compiled\\iginsure\\models\\scd\\scd_contact_link.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "docs": {"show": false}, "tags": ["InwardPremium"]}, "created_at": 1701786801.765781, "compiled_code": "-- This file is automatically generated\n\n\nwith\n\ncontact_link as (\n    select * from \"IGI_PROD_DW\".\"dbo\".\"CONTACTLINK\"\n),\n\nordered as (\n    select\n        LCONTACTLINKKEY,\n        LCONTACTKEY,\n        LLINKTOCONTACTKEY,\n        LLINKKEY,\n        bAllRoles,\n        dw_loadts,\n        row_number() over (\n            partition by\n                LCONTACTLINKKEY,\n                LCONTACTKEY,\n                LLINKTOCONTACTKEY,\n                LLINKKEY,\n                bAllRoles\n            order by\n                dw_loadts\n        ) as dw_extract_order\n    from\n        contact_link\n),\n\nfiltered as (\n    select * from ordered where dw_extract_order = 1\n),\n\nranged as (\n    select\n        LCONTACTLINKKEY,\n        LCONTACTKEY,\n        LLINKTOCONTACTKEY,\n        LLINKKEY,\n        bAllRoles,\n        dw_loadts as _valid_from,\n        lead(dw_loadts) over (partition by LCONTACTLINKKEY order by dw_loadts) as _valid_to\n    from\n        filtered\n)\n\nselect * from ranged", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"scd_contact_link\""}, "model.iginsure.scd_currency": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.iginsure.dbo.currency"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["InwardPremium"], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "scd", "scd_currency"], "unique_id": "model.iginsure.scd_currency", "raw_code": "-- This file is automatically generated\r\n{{\r\n  config(tags=['InwardPremium'])\r\n}}\r\n\r\nwith\r\n\r\ncurrency as (\r\n    select * from {{ source('dbo', 'currency') }}\r\n),\r\n\r\nordered as (\r\n    select\r\n        lCurrencyKey,\r\n        sCcy,\r\n        sDescription,\r\n        sDescriptionSearch,\r\n        dROE,\r\n        bBase,\r\n        bPrime,\r\n        bEuro,\r\n        dtWithdrawn,\r\n        sSymbol,\r\n        lTypeofCodeSetKey,\r\n        sISOCurrencyNumber,\r\n        bWithdrawn,\r\n        dtJoinedEuro,\r\n        dw_loadts,\r\n        row_number() over (\r\n            partition by\r\n                lCurrencyKey,\r\n                sCcy,\r\n                sDescription,\r\n                sDescriptionSearch,\r\n                dROE,\r\n                bBase,\r\n                bPrime,\r\n                bEuro,\r\n                dtWithdrawn,\r\n                sSymbol,\r\n                lTypeofCodeSetKey,\r\n                sISOCurrencyNumber,\r\n                bWithdrawn,\r\n                dtJoinedEuro\r\n            order by\r\n                dw_loadts\r\n        ) as dw_extract_order\r\n    from\r\n        currency\r\n),\r\n\r\nfiltered as (\r\n    select * from ordered where dw_extract_order = 1\r\n),\r\n\r\nranged as (\r\n    select\r\n        lCurrencyKey,\r\n        sCcy,\r\n        sDescription,\r\n        sDescriptionSearch,\r\n        dROE,\r\n        bBase,\r\n        bPrime,\r\n        bEuro,\r\n        dtWithdrawn,\r\n        sSymbol,\r\n        lTypeofCodeSetKey,\r\n        sISOCurrencyNumber,\r\n        bWithdrawn,\r\n        dtJoinedEuro,\r\n        dw_loadts as _valid_from,\r\n        lead(dw_loadts) over (partition by lCurrencyKey order by dw_loadts) as _valid_to\r\n    from\r\n        filtered\r\n)\r\n\r\nselect * from ranged", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "scd\\scd_currency.sql", "original_file_path": "models\\scd\\scd_currency.sql", "name": "scd_currency", "alias": "scd_currency", "checksum": {"name": "sha256", "checksum": "51d2f00996708aac04fd44dc45356b1b6705fb23030a347a626689bf7e3d18b1"}, "tags": ["InwardPremium"], "refs": [], "sources": [["dbo", "currency"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": "iginsure://models\\scd\\scd.yml", "compiled_path": "target\\compiled\\iginsure\\models\\scd\\scd_currency.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "docs": {"show": false}, "tags": ["InwardPremium"]}, "created_at": 1701786801.7721756, "compiled_code": "-- This file is automatically generated\n\n\nwith\n\ncurrency as (\n    select * from \"IGI_PROD_DW\".\"dbo\".\"Currency\"\n),\n\nordered as (\n    select\n        lCurrencyKey,\n        sCcy,\n        sDescription,\n        sDescriptionSearch,\n        dROE,\n        bBase,\n        bPrime,\n        bEuro,\n        dtWithdrawn,\n        sSymbol,\n        lTypeofCodeSetKey,\n        sISOCurrencyNumber,\n        bWithdrawn,\n        dtJoinedEuro,\n        dw_loadts,\n        row_number() over (\n            partition by\n                lCurrencyKey,\n                sCcy,\n                sDescription,\n                sDescriptionSearch,\n                dROE,\n                bBase,\n                bPrime,\n                bEuro,\n                dtWithdrawn,\n                sSymbol,\n                lTypeofCodeSetKey,\n                sISOCurrencyNumber,\n                bWithdrawn,\n                dtJoinedEuro\n            order by\n                dw_loadts\n        ) as dw_extract_order\n    from\n        currency\n),\n\nfiltered as (\n    select * from ordered where dw_extract_order = 1\n),\n\nranged as (\n    select\n        lCurrencyKey,\n        sCcy,\n        sDescription,\n        sDescriptionSearch,\n        dROE,\n        bBase,\n        bPrime,\n        bEuro,\n        dtWithdrawn,\n        sSymbol,\n        lTypeofCodeSetKey,\n        sISOCurrencyNumber,\n        bWithdrawn,\n        dtJoinedEuro,\n        dw_loadts as _valid_from,\n        lead(dw_loadts) over (partition by lCurrencyKey order by dw_loadts) as _valid_to\n    from\n        filtered\n)\n\nselect * from ranged", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"scd_currency\""}, "model.iginsure.scd_currency_roe_history": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.iginsure.dbo.Currency_Roe_History"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "scd", "scd_currency_roe_history"], "unique_id": "model.iginsure.scd_currency_roe_history", "raw_code": "-- This file is automatically generated\r\n\r\nwith\r\n\r\ncurrency_roe_history as (\r\n    select * from {{ source('dbo', 'Currency_Roe_History') }}\r\n),\r\n\r\nordered as (\r\n    select\r\n        lCurrencyROEHistoryKey,\r\n        lCurrencyKey,\r\n        dtMonthEnd,\r\n        dtActiveFrom,\r\n        dtActiveTo,\r\n        dROE,\r\n        dw_loadts,\r\n        row_number() over (\r\n            partition by\r\n\r\n                lCurrencyROEHistoryKey,\r\n                lCurrencyKey,\r\n                dtMonthEnd,\r\n                dtActiveFrom,\r\n                dtActiveTo,\r\n                dROE,\r\n                dw_loadts\r\n            order by\r\n                dw_loadts\r\n        ) as dw_extract_order\r\n    from\r\n        currency_roe_history\r\n),\r\n\r\nfiltered as (\r\n    select * from ordered where dw_extract_order = 1\r\n),\r\n\r\nranged as (\r\n    select\r\n        lCurrencyROEHistoryKey,\r\n        lCurrencyKey,\r\n        dtMonthEnd,\r\n        dtActiveFrom,\r\n        dtActiveTo,\r\n        dROE,\r\n        dw_loadts as _valid_from,\r\n        lead(dw_loadts) over (partition by lCurrencyROEHistoryKey order by dw_loadts) as _valid_to\r\n    from\r\n        filtered\r\n)\r\n\r\nselect * from ranged", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "scd\\scd_currency_roe_history.sql", "original_file_path": "models\\scd\\scd_currency_roe_history.sql", "name": "scd_currency_roe_history", "alias": "scd_currency_roe_history", "checksum": {"name": "sha256", "checksum": "0186c8bb2c97277e320b8f6f8018c067ac7ae1bdc3eb7dbd8d49450f63b90778"}, "tags": [], "refs": [], "sources": [["dbo", "Currency_Roe_History"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\scd\\scd_currency_roe_history.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null}, "created_at": 1701786800.8981016, "compiled_code": "-- This file is automatically generated\n\nwith\n\ncurrency_roe_history as (\n    select * from \"IGI_PROD_DW\".\"dbo\".\"currencyroehistory\"\n),\n\nordered as (\n    select\n        lCurrencyROEHistoryKey,\n        lCurrencyKey,\n        dtMonthEnd,\n        dtActiveFrom,\n        dtActiveTo,\n        dROE,\n        dw_loadts,\n        row_number() over (\n            partition by\n\n                lCurrencyROEHistoryKey,\n                lCurrencyKey,\n                dtMonthEnd,\n                dtActiveFrom,\n                dtActiveTo,\n                dROE,\n                dw_loadts\n            order by\n                dw_loadts\n        ) as dw_extract_order\n    from\n        currency_roe_history\n),\n\nfiltered as (\n    select * from ordered where dw_extract_order = 1\n),\n\nranged as (\n    select\n        lCurrencyROEHistoryKey,\n        lCurrencyKey,\n        dtMonthEnd,\n        dtActiveFrom,\n        dtActiveTo,\n        dROE,\n        dw_loadts as _valid_from,\n        lead(dw_loadts) over (partition by lCurrencyROEHistoryKey order by dw_loadts) as _valid_to\n    from\n        filtered\n)\n\nselect * from ranged", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"scd_currency_roe_history\""}, "model.iginsure.scd_division": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.iginsure.dbo.division"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["InwardPremium"], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "scd", "scd_division"], "unique_id": "model.iginsure.scd_division", "raw_code": "-- This file is automatically generated\r\n{{\r\n  config(tags=['InwardPremium'])\r\n}}\r\n\r\nwith\r\n\r\ndivision as (\r\n    select * from {{ source('dbo', 'division') }}\r\n),\r\n\r\nordered as (\r\n    select\r\n        lDivisionKey,\r\n        lSecurityBit,\r\n        sCode,\r\n        sDivision,\r\n        sDivisionSearch,\r\n        sCompanyCode,\r\n        lDivisionContactKey,\r\n        lFunctionalCurrencyKey,\r\n        lTypeOfSettCurrencyMethod,\r\n        lPresentationCurrencyKey,\r\n        bMaintainSummaryIBNR,\r\n        nPeerReviewUnderwritersReqd,\r\n        sNotes,\r\n        bCloseClaimAFP,\r\n        bCannotPayClaimsLTR,\r\n        bAllowOverridePolicyReference,\r\n        bImmediateGeneratePolicyReference,\r\n        dw_loadts,\r\n        row_number() over (\r\n            partition by\r\n                lDivisionKey,\r\n                lSecurityBit,\r\n                sCode,\r\n                sDivision,\r\n                sDivisionSearch,\r\n                sCompanyCode,\r\n                lDivisionContactKey,\r\n                lFunctionalCurrencyKey,\r\n                lTypeOfSettCurrencyMethod,\r\n                lPresentationCurrencyKey,\r\n                bMaintainSummaryIBNR,\r\n                nPeerReviewUnderwritersReqd,\r\n                sNotes,\r\n                bCloseClaimAFP,\r\n                bCannotPayClaimsLTR,\r\n                bAllowOverridePolicyReference,\r\n                bImmediateGeneratePolicyReference\r\n            order by\r\n                dw_loadts\r\n        ) as dw_extract_order\r\n    from\r\n        division\r\n),\r\n\r\nfiltered as (\r\n    select * from ordered where dw_extract_order = 1\r\n),\r\n\r\nranged as (\r\n    select\r\n        lDivisionKey,\r\n        lSecurityBit,\r\n        sCode,\r\n        sDivision,\r\n        sDivisionSearch,\r\n        sCompanyCode,\r\n        lDivisionContactKey,\r\n        lFunctionalCurrencyKey,\r\n        lTypeOfSettCurrencyMethod,\r\n        lPresentationCurrencyKey,\r\n        bMaintainSummaryIBNR,\r\n        nPeerReviewUnderwritersReqd,\r\n        sNotes,\r\n        bCloseClaimAFP,\r\n        bCannotPayClaimsLTR,\r\n        bAllowOverridePolicyReference,\r\n        bImmediateGeneratePolicyReference,\r\n        dw_loadts as _valid_from,\r\n        lead(dw_loadts) over (partition by lDivisionKey order by dw_loadts) as _valid_to\r\n    from\r\n        filtered\r\n)\r\n\r\nselect * from ranged", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "scd\\scd_division.sql", "original_file_path": "models\\scd\\scd_division.sql", "name": "scd_division", "alias": "scd_division", "checksum": {"name": "sha256", "checksum": "784b0df2b9218d747435a1d04a4e21fc513f2c7aaba020b501eb736a8612bf6b"}, "tags": ["InwardPremium"], "refs": [], "sources": [["dbo", "division"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": "iginsure://models\\scd\\scd.yml", "compiled_path": "target\\compiled\\iginsure\\models\\scd\\scd_division.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "docs": {"show": false}, "tags": ["InwardPremium"]}, "created_at": 1701786801.7751698, "compiled_code": "-- This file is automatically generated\n\n\nwith\n\ndivision as (\n    select * from \"IGI_PROD_DW\".\"dbo\".\"Division\"\n),\n\nordered as (\n    select\n        lDivisionKey,\n        lSecurityBit,\n        sCode,\n        sDivision,\n        sDivisionSearch,\n        sCompanyCode,\n        lDivisionContactKey,\n        lFunctionalCurrencyKey,\n        lTypeOfSettCurrencyMethod,\n        lPresentationCurrencyKey,\n        bMaintainSummaryIBNR,\n        nPeerReviewUnderwritersReqd,\n        sNotes,\n        bCloseClaimAFP,\n        bCannotPayClaimsLTR,\n        bAllowOverridePolicyReference,\n        bImmediateGeneratePolicyReference,\n        dw_loadts,\n        row_number() over (\n            partition by\n                lDivisionKey,\n                lSecurityBit,\n                sCode,\n                sDivision,\n                sDivisionSearch,\n                sCompanyCode,\n                lDivisionContactKey,\n                lFunctionalCurrencyKey,\n                lTypeOfSettCurrencyMethod,\n                lPresentationCurrencyKey,\n                bMaintainSummaryIBNR,\n                nPeerReviewUnderwritersReqd,\n                sNotes,\n                bCloseClaimAFP,\n                bCannotPayClaimsLTR,\n                bAllowOverridePolicyReference,\n                bImmediateGeneratePolicyReference\n            order by\n                dw_loadts\n        ) as dw_extract_order\n    from\n        division\n),\n\nfiltered as (\n    select * from ordered where dw_extract_order = 1\n),\n\nranged as (\n    select\n        lDivisionKey,\n        lSecurityBit,\n        sCode,\n        sDivision,\n        sDivisionSearch,\n        sCompanyCode,\n        lDivisionContactKey,\n        lFunctionalCurrencyKey,\n        lTypeOfSettCurrencyMethod,\n        lPresentationCurrencyKey,\n        bMaintainSummaryIBNR,\n        nPeerReviewUnderwritersReqd,\n        sNotes,\n        bCloseClaimAFP,\n        bCannotPayClaimsLTR,\n        bAllowOverridePolicyReference,\n        bImmediateGeneratePolicyReference,\n        dw_loadts as _valid_from,\n        lead(dw_loadts) over (partition by lDivisionKey order by dw_loadts) as _valid_to\n    from\n        filtered\n)\n\nselect * from ranged", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"scd_division\""}, "model.iginsure.scd_entity_instance_states": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.iginsure.dbo.entity_instance_states"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["InwardPremium"], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "scd", "scd_entity_instance_states"], "unique_id": "model.iginsure.scd_entity_instance_states", "raw_code": "-- This file is automatically generated\r\n{{\r\n  config(tags=['InwardPremium'])\r\n}}\r\n\r\nwith\r\n\r\nentity_instance_states as (\r\n    select * from {{ source('dbo', 'entity_instance_states') }}\r\n),\r\n\r\nordered as (\r\n    select\r\n        lEntityInstanceStateKey,\r\n        lEntityKey,\r\n        lInstanceKey,\r\n        lEntityStateMemberKey,\r\n        bEntityStatePending,\r\n        lReadBitfield,\r\n        lWriteBitfield,\r\n        dw_loadts,\r\n        row_number() over (\r\n            partition by\r\n                lEntityInstanceStateKey,\r\n                lEntityKey,\r\n                lInstanceKey,\r\n                lEntityStateMemberKey,\r\n                bEntityStatePending,\r\n                lReadBitfield,\r\n                lWriteBitfield\r\n            order by\r\n                dw_loadts\r\n        ) as dw_extract_order\r\n    from\r\n        entity_instance_states\r\n),\r\n\r\nfiltered as (\r\n    select * from ordered where dw_extract_order = 1\r\n),\r\n\r\nranged as (\r\n    select\r\n        lEntityInstanceStateKey,\r\n        lEntityKey,\r\n        lInstanceKey,\r\n        lEntityStateMemberKey,\r\n        bEntityStatePending,\r\n        lReadBitfield,\r\n        lWriteBitfield,\r\n        dw_loadts as _valid_from,\r\n        lead(dw_loadts) over (partition by lEntityInstanceStateKey order by dw_loadts) as _valid_to\r\n    from\r\n        filtered\r\n)\r\n\r\nselect * from ranged", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "scd\\scd_entity_instance_states.sql", "original_file_path": "models\\scd\\scd_entity_instance_states.sql", "name": "scd_entity_instance_states", "alias": "scd_entity_instance_states", "checksum": {"name": "sha256", "checksum": "d60443df093b287f92a8609be503d6635dd177e9adc535edf2936724b81deb59"}, "tags": ["InwardPremium"], "refs": [], "sources": [["dbo", "entity_instance_states"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": "iginsure://models\\scd\\scd.yml", "compiled_path": "target\\compiled\\iginsure\\models\\scd\\scd_entity_instance_states.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "docs": {"show": false}, "tags": ["InwardPremium"]}, "created_at": 1701786801.7761734, "compiled_code": "-- This file is automatically generated\n\n\nwith\n\nentity_instance_states as (\n    select * from \"IGI_PROD_DW\".\"dbo\".\"EntityInstanceStates\"\n),\n\nordered as (\n    select\n        lEntityInstanceStateKey,\n        lEntityKey,\n        lInstanceKey,\n        lEntityStateMemberKey,\n        bEntityStatePending,\n        lReadBitfield,\n        lWriteBitfield,\n        dw_loadts,\n        row_number() over (\n            partition by\n                lEntityInstanceStateKey,\n                lEntityKey,\n                lInstanceKey,\n                lEntityStateMemberKey,\n                bEntityStatePending,\n                lReadBitfield,\n                lWriteBitfield\n            order by\n                dw_loadts\n        ) as dw_extract_order\n    from\n        entity_instance_states\n),\n\nfiltered as (\n    select * from ordered where dw_extract_order = 1\n),\n\nranged as (\n    select\n        lEntityInstanceStateKey,\n        lEntityKey,\n        lInstanceKey,\n        lEntityStateMemberKey,\n        bEntityStatePending,\n        lReadBitfield,\n        lWriteBitfield,\n        dw_loadts as _valid_from,\n        lead(dw_loadts) over (partition by lEntityInstanceStateKey order by dw_loadts) as _valid_to\n    from\n        filtered\n)\n\nselect * from ranged", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"scd_entity_instance_states\""}, "model.iginsure.scd_entity_matching_journal": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.iginsure.dbo.entity_matching_journal"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["InwardPremium"], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "scd", "scd_entity_matching_journal"], "unique_id": "model.iginsure.scd_entity_matching_journal", "raw_code": "-- This file is automatically generated\r\n{{\r\n  config(tags=['InwardPremium'])\r\n}}\r\n\r\nwith\r\n\r\nentity_matching_journal as (\r\n    select * from {{ source('dbo', 'entity_matching_journal') }}\r\n),\r\n\r\nordered as (\r\n    select\r\n        lEntityMatchingJournalKey,\r\n        lTasksEntityMatchingKey,\r\n        lLeftEntityKey,\r\n        lLeftEntityInstanceKey,\r\n        lRightEntityKey,\r\n        lRightEntityInstanceKey,\r\n        dtEffective,\r\n        dLeftAmount,\r\n        dRightAmount,\r\n        dLeftUnmatchedBalance,\r\n        dRightUnmatchedBalance,\r\n        lLeftCcyKey,\r\n        lRightCcyKey,\r\n        dLeftROEToBase,\r\n        dRightROEToBase,\r\n        lSecurityUserKey,\r\n        dtConfirmed,\r\n        lAccountPeriodKey,\r\n        dRightToLeftROE,\r\n        lTypeOfMatchHistoryKey,\r\n        lUnmatchedJournalKey,\r\n        bJournalProcessed,\r\n        dw_loadts,\r\n        row_number() over (\r\n            partition by\r\n                lEntityMatchingJournalKey,\r\n                lTasksEntityMatchingKey,\r\n                lLeftEntityKey,\r\n                lLeftEntityInstanceKey,\r\n                lRightEntityKey,\r\n                lRightEntityInstanceKey,\r\n                dtEffective,\r\n                dLeftAmount,\r\n                dRightAmount,\r\n                dLeftUnmatchedBalance,\r\n                dRightUnmatchedBalance,\r\n                lLeftCcyKey,\r\n                lRightCcyKey,\r\n                dLeftROEToBase,\r\n                dRightROEToBase,\r\n                lSecurityUserKey,\r\n                dtConfirmed,\r\n                lAccountPeriodKey,\r\n                dRightToLeftROE,\r\n                lTypeOfMatchHistoryKey,\r\n                lUnmatchedJournalKey,\r\n                bJournalProcessed\r\n            order by\r\n                dw_loadts\r\n        ) as dw_extract_order\r\n    from\r\n        entity_matching_journal\r\n),\r\n\r\nfiltered as (\r\n    select * from ordered where dw_extract_order = 1\r\n),\r\n\r\nranged as (\r\n    select\r\n        lEntityMatchingJournalKey,\r\n        lTasksEntityMatchingKey,\r\n        lLeftEntityKey,\r\n        lLeftEntityInstanceKey,\r\n        lRightEntityKey,\r\n        lRightEntityInstanceKey,\r\n        dtEffective,\r\n        dLeftAmount,\r\n        dRightAmount,\r\n        dLeftUnmatchedBalance,\r\n        dRightUnmatchedBalance,\r\n        lLeftCcyKey,\r\n        lRightCcyKey,\r\n        dLeftROEToBase,\r\n        dRightROEToBase,\r\n        lSecurityUserKey,\r\n        dtConfirmed,\r\n        lAccountPeriodKey,\r\n        dRightToLeftROE,\r\n        lTypeOfMatchHistoryKey,\r\n        lUnmatchedJournalKey,\r\n        bJournalProcessed,\r\n        dw_loadts as _valid_from,\r\n        lead(dw_loadts) over (partition by lEntityMatchingJournalKey order by dw_loadts) as _valid_to\r\n    from\r\n        filtered\r\n)\r\n\r\nselect * from ranged", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "scd\\scd_entity_matching_journal.sql", "original_file_path": "models\\scd\\scd_entity_matching_journal.sql", "name": "scd_entity_matching_journal", "alias": "scd_entity_matching_journal", "checksum": {"name": "sha256", "checksum": "7951bd459fee2f5eb8143c91acf9284dbaafe12cc5a99251f78642f0a5b24623"}, "tags": ["InwardPremium"], "refs": [], "sources": [["dbo", "entity_matching_journal"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": "iginsure://models\\scd\\scd.yml", "compiled_path": "target\\compiled\\iginsure\\models\\scd\\scd_entity_matching_journal.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "docs": {"show": false}, "tags": ["InwardPremium"]}, "created_at": 1701786801.7771735, "compiled_code": "-- This file is automatically generated\n\n\nwith\n\nentity_matching_journal as (\n    select * from \"IGI_PROD_DW\".\"dbo\".\"EntityMatchingJournal\"\n),\n\nordered as (\n    select\n        lEntityMatchingJournalKey,\n        lTasksEntityMatchingKey,\n        lLeftEntityKey,\n        lLeftEntityInstanceKey,\n        lRightEntityKey,\n        lRightEntityInstanceKey,\n        dtEffective,\n        dLeftAmount,\n        dRightAmount,\n        dLeftUnmatchedBalance,\n        dRightUnmatchedBalance,\n        lLeftCcyKey,\n        lRightCcyKey,\n        dLeftROEToBase,\n        dRightROEToBase,\n        lSecurityUserKey,\n        dtConfirmed,\n        lAccountPeriodKey,\n        dRightToLeftROE,\n        lTypeOfMatchHistoryKey,\n        lUnmatchedJournalKey,\n        bJournalProcessed,\n        dw_loadts,\n        row_number() over (\n            partition by\n                lEntityMatchingJournalKey,\n                lTasksEntityMatchingKey,\n                lLeftEntityKey,\n                lLeftEntityInstanceKey,\n                lRightEntityKey,\n                lRightEntityInstanceKey,\n                dtEffective,\n                dLeftAmount,\n                dRightAmount,\n                dLeftUnmatchedBalance,\n                dRightUnmatchedBalance,\n                lLeftCcyKey,\n                lRightCcyKey,\n                dLeftROEToBase,\n                dRightROEToBase,\n                lSecurityUserKey,\n                dtConfirmed,\n                lAccountPeriodKey,\n                dRightToLeftROE,\n                lTypeOfMatchHistoryKey,\n                lUnmatchedJournalKey,\n                bJournalProcessed\n            order by\n                dw_loadts\n        ) as dw_extract_order\n    from\n        entity_matching_journal\n),\n\nfiltered as (\n    select * from ordered where dw_extract_order = 1\n),\n\nranged as (\n    select\n        lEntityMatchingJournalKey,\n        lTasksEntityMatchingKey,\n        lLeftEntityKey,\n        lLeftEntityInstanceKey,\n        lRightEntityKey,\n        lRightEntityInstanceKey,\n        dtEffective,\n        dLeftAmount,\n        dRightAmount,\n        dLeftUnmatchedBalance,\n        dRightUnmatchedBalance,\n        lLeftCcyKey,\n        lRightCcyKey,\n        dLeftROEToBase,\n        dRightROEToBase,\n        lSecurityUserKey,\n        dtConfirmed,\n        lAccountPeriodKey,\n        dRightToLeftROE,\n        lTypeOfMatchHistoryKey,\n        lUnmatchedJournalKey,\n        bJournalProcessed,\n        dw_loadts as _valid_from,\n        lead(dw_loadts) over (partition by lEntityMatchingJournalKey order by dw_loadts) as _valid_to\n    from\n        filtered\n)\n\nselect * from ranged", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"scd_entity_matching_journal\""}, "model.iginsure.scd_entity_state_members": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.iginsure.dbo.entity_state_members"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["InwardPremium"], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "scd", "scd_entity_state_members"], "unique_id": "model.iginsure.scd_entity_state_members", "raw_code": "-- This file is automatically generated\r\n\r\n{{\r\n  config(tags=['InwardPremium'])\r\n}}\r\n\r\nwith\r\n\r\nentity_state_members as (\r\n    select * from {{ source('dbo', 'entity_state_members') }}\r\n),\r\n\r\nordered as (\r\n    select\r\n        LENTITYSTATEMEMBERKEY,\r\n        LENTITYSTATEKEY,\r\n        SENTITYSTATEMEMBER,\r\n        LICONKEY,\r\n        BINITIAL,\r\n        BDEFAULT,\r\n        BACTIVE,\r\n        NBIT,\r\n        LTASKLISTKEY,\r\n        BCREATABLE,\r\n        MetadataIdentifier,\r\n        lTargetEntityStateMemberKey,\r\n        bUIEditAvailable,\r\n        dw_loadts,\r\n        row_number() over (\r\n            partition by\r\n                LENTITYSTATEMEMBERKEY,\r\n                LENTITYSTATEKEY,\r\n                SENTITYSTATEMEMBER,\r\n                LICONKEY,\r\n                BINITIAL,\r\n                BDEFAULT,\r\n                BACTIVE,\r\n                NBIT,\r\n                LTASKLISTKEY,\r\n                BCREATABLE,\r\n                MetadataIdentifier,\r\n                lTargetEntityStateMemberKey,\r\n                bUIEditAvailable\r\n            order by\r\n                dw_loadts\r\n        ) as dw_extract_order\r\n    from\r\n        entity_state_members\r\n),\r\n\r\nfiltered as (\r\n    select * from ordered where dw_extract_order = 1\r\n),\r\n\r\nranged as (\r\n    select\r\n        LENTITYSTATEMEMBERKEY,\r\n        LENTITYSTATEKEY,\r\n        SENTITYSTATEMEMBER,\r\n        LICONKEY,\r\n        BINITIAL,\r\n        BDEFAULT,\r\n        BACTIVE,\r\n        NBIT,\r\n        LTASKLISTKEY,\r\n        BCREATABLE,\r\n        MetadataIdentifier,\r\n        lTargetEntityStateMemberKey,\r\n        bUIEditAvailable,\r\n        dw_loadts as _valid_from,\r\n        lead(dw_loadts) over (partition by LENTITYSTATEMEMBERKEY order by dw_loadts) as _valid_to\r\n    from\r\n        filtered\r\n)\r\n\r\nselect * from ranged", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "scd\\scd_entity_state_members.sql", "original_file_path": "models\\scd\\scd_entity_state_members.sql", "name": "scd_entity_state_members", "alias": "scd_entity_state_members", "checksum": {"name": "sha256", "checksum": "40d9af365b3fe3ce16d808a33245a2b7e97eb6a737276aa425807d9e0658aa08"}, "tags": ["InwardPremium"], "refs": [], "sources": [["dbo", "entity_state_members"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": "iginsure://models\\scd\\scd.yml", "compiled_path": "target\\compiled\\iginsure\\models\\scd\\scd_entity_state_members.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "docs": {"show": false}, "tags": ["InwardPremium"]}, "created_at": 1701786801.7791734, "compiled_code": "-- This file is automatically generated\n\n\n\nwith\n\nentity_state_members as (\n    select * from \"IGI_PROD_DW\".\"dbo\".\"ENTITYSTATEMEMBERS\"\n),\n\nordered as (\n    select\n        LENTITYSTATEMEMBERKEY,\n        LENTITYSTATEKEY,\n        SENTITYSTATEMEMBER,\n        LICONKEY,\n        BINITIAL,\n        BDEFAULT,\n        BACTIVE,\n        NBIT,\n        LTASKLISTKEY,\n        BCREATABLE,\n        MetadataIdentifier,\n        lTargetEntityStateMemberKey,\n        bUIEditAvailable,\n        dw_loadts,\n        row_number() over (\n            partition by\n                LENTITYSTATEMEMBERKEY,\n                LENTITYSTATEKEY,\n                SENTITYSTATEMEMBER,\n                LICONKEY,\n                BINITIAL,\n                BDEFAULT,\n                BACTIVE,\n                NBIT,\n                LTASKLISTKEY,\n                BCREATABLE,\n                MetadataIdentifier,\n                lTargetEntityStateMemberKey,\n                bUIEditAvailable\n            order by\n                dw_loadts\n        ) as dw_extract_order\n    from\n        entity_state_members\n),\n\nfiltered as (\n    select * from ordered where dw_extract_order = 1\n),\n\nranged as (\n    select\n        LENTITYSTATEMEMBERKEY,\n        LENTITYSTATEKEY,\n        SENTITYSTATEMEMBER,\n        LICONKEY,\n        BINITIAL,\n        BDEFAULT,\n        BACTIVE,\n        NBIT,\n        LTASKLISTKEY,\n        BCREATABLE,\n        MetadataIdentifier,\n        lTargetEntityStateMemberKey,\n        bUIEditAvailable,\n        dw_loadts as _valid_from,\n        lead(dw_loadts) over (partition by LENTITYSTATEMEMBERKEY order by dw_loadts) as _valid_to\n    from\n        filtered\n)\n\nselect * from ranged", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"scd_entity_state_members\""}, "model.iginsure.scd_entity_type": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.iginsure.dbo.entity_type"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "scd", "scd_entity_type"], "unique_id": "model.iginsure.scd_entity_type", "raw_code": "-- This file is automatically generated\r\n\r\nwith\r\n\r\nentity_type as (\r\n    select * from {{ source('dbo', 'entity_type') }}\r\n),\r\n\r\nordered as (\r\n    select\r\n        LENTITYKEY,\r\n        SENTITY,\r\n        SENTITYPLURAL,\r\n        SENTITYSHORT,\r\n        SENTITYPLURALSHORT,\r\n        STABLE,\r\n        LICONKEY,\r\n        LENTITYFAMILYKEY,\r\n        LENTITYSTATEKEY,\r\n        LSTATEHOLDINGENTITYKEY,\r\n        LSENTITYRELATIONSHIPKEY,\r\n        BVERSIONINGENTITY,\r\n        BISVERSIONED,\r\n        LVERSIONENTITYKEY,\r\n        LVENTITYRELATIONSHIPKEY,\r\n        BOPENDIRECT,\r\n        BVOLUMINOUS,\r\n        BINDEX,\r\n        BCOPYABLE,\r\n        BBASE,\r\n        BCANENQUIRE,\r\n        BMULTIPLEENTITY,\r\n        SNOTE,\r\n        LCREATETASKLISTKEY,\r\n        LEDITTASKLISTKEY,\r\n        LDELETETASKLISTKEY,\r\n        BLINKENTITY,\r\n        LTYPEOFLINKENTITYKEY,\r\n        LINVERSELINKENTITYPROPERTYKEY,\r\n        NDBSOURCE,\r\n        NSTATEHOLDING,\r\n        BNEWDIRECT,\r\n        NENTITYTYPE,\r\n        LLANGLOOKUPENTITYKEY,\r\n        NIPTYPE,\r\n        LIPCONTROLENTITYKEY,\r\n        lDefaultOpenEnquiryKey,\r\n        lAliasLookupEntityKey,\r\n        lTypeOfIndexGroupKey,\r\n        bAllowFileAttachments,\r\n        MetadataIdentifier,\r\n        BDEFAULTENQUIRY,\r\n        dw_loadts,\r\n        row_number() over (\r\n            partition by\r\n                LENTITYKEY,\r\n                SENTITY,\r\n                SENTITYPLURAL,\r\n                SENTITYSHORT,\r\n                SENTITYPLURALSHORT,\r\n                STABLE,\r\n                LICONKEY,\r\n                LENTITYFAMILYKEY,\r\n                LENTITYSTATEKEY,\r\n                LSTATEHOLDINGENTITYKEY,\r\n                LSENTITYRELATIONSHIPKEY,\r\n                BVERSIONINGENTITY,\r\n                BISVERSIONED,\r\n                LVERSIONENTITYKEY,\r\n                LVENTITYRELATIONSHIPKEY,\r\n                BOPENDIRECT,\r\n                BVOLUMINOUS,\r\n                BINDEX,\r\n                BCOPYABLE,\r\n                BBASE,\r\n                BCANENQUIRE,\r\n                BMULTIPLEENTITY,\r\n                SNOTE,\r\n                LCREATETASKLISTKEY,\r\n                LEDITTASKLISTKEY,\r\n                LDELETETASKLISTKEY,\r\n                BLINKENTITY,\r\n                LTYPEOFLINKENTITYKEY,\r\n                LINVERSELINKENTITYPROPERTYKEY,\r\n                NDBSOURCE,\r\n                NSTATEHOLDING,\r\n                BNEWDIRECT,\r\n                NENTITYTYPE,\r\n                LLANGLOOKUPENTITYKEY,\r\n                NIPTYPE,\r\n                LIPCONTROLENTITYKEY,\r\n                lDefaultOpenEnquiryKey,\r\n                lAliasLookupEntityKey,\r\n                lTypeOfIndexGroupKey,\r\n                bAllowFileAttachments,\r\n                MetadataIdentifier,\r\n                BDEFAULTENQUIRY\r\n            order by\r\n                dw_loadts\r\n        ) as dw_extract_order\r\n    from\r\n        entity_type\r\n),\r\n\r\nfiltered as (\r\n    select * from ordered where dw_extract_order = 1\r\n),\r\n\r\nranged as (\r\n    select\r\n        LENTITYKEY,\r\n        SENTITY,\r\n        SENTITYPLURAL,\r\n        SENTITYSHORT,\r\n        SENTITYPLURALSHORT,\r\n        STABLE,\r\n        LICONKEY,\r\n        LENTITYFAMILYKEY,\r\n        LENTITYSTATEKEY,\r\n        LSTATEHOLDINGENTITYKEY,\r\n        LSENTITYRELATIONSHIPKEY,\r\n        BVERSIONINGENTITY,\r\n        BISVERSIONED,\r\n        LVERSIONENTITYKEY,\r\n        LVENTITYRELATIONSHIPKEY,\r\n        BOPENDIRECT,\r\n        BVOLUMINOUS,\r\n        BINDEX,\r\n        BCOPYABLE,\r\n        BBASE,\r\n        BCANENQUIRE,\r\n        BMULTIPLEENTITY,\r\n        SNOTE,\r\n        LCREATETASKLISTKEY,\r\n        LEDITTASKLISTKEY,\r\n        LDELETETASKLISTKEY,\r\n        BLINKENTITY,\r\n        LTYPEOFLINKENTITYKEY,\r\n        LINVERSELINKENTITYPROPERTYKEY,\r\n        NDBSOURCE,\r\n        NSTATEHOLDING,\r\n        BNEWDIRECT,\r\n        NENTITYTYPE,\r\n        LLANGLOOKUPENTITYKEY,\r\n        NIPTYPE,\r\n        LIPCONTROLENTITYKEY,\r\n        lDefaultOpenEnquiryKey,\r\n        lAliasLookupEntityKey,\r\n        lTypeOfIndexGroupKey,\r\n        bAllowFileAttachments,\r\n        MetadataIdentifier,\r\n        BDEFAULTENQUIRY,\r\n        dw_loadts as _valid_from,\r\n        lead(dw_loadts) over (partition by LENTITYKEY order by dw_loadts) as _valid_to\r\n    from\r\n        filtered\r\n)\r\n\r\nselect * from ranged", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "scd\\scd_entity_type.sql", "original_file_path": "models\\scd\\scd_entity_type.sql", "name": "scd_entity_type", "alias": "scd_entity_type", "checksum": {"name": "sha256", "checksum": "c8c92e8a93afa12baee1343ee2172678edc424e3ca2820bc2e5ea3bf3d2f027c"}, "tags": [], "refs": [], "sources": [["dbo", "entity_type"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": "iginsure://models\\scd\\scd.yml", "compiled_path": "target\\compiled\\iginsure\\models\\scd\\scd_entity_type.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "docs": {"show": false}}, "created_at": 1701786801.7801695, "compiled_code": "-- This file is automatically generated\n\nwith\n\nentity_type as (\n    select * from \"IGI_PROD_DW\".\"dbo\".\"ENTITY\"\n),\n\nordered as (\n    select\n        LENTITYKEY,\n        SENTITY,\n        SENTITYPLURAL,\n        SENTITYSHORT,\n        SENTITYPLURALSHORT,\n        STABLE,\n        LICONKEY,\n        LENTITYFAMILYKEY,\n        LENTITYSTATEKEY,\n        LSTATEHOLDINGENTITYKEY,\n        LSENTITYRELATIONSHIPKEY,\n        BVERSIONINGENTITY,\n        BISVERSIONED,\n        LVERSIONENTITYKEY,\n        LVENTITYRELATIONSHIPKEY,\n        BOPENDIRECT,\n        BVOLUMINOUS,\n        BINDEX,\n        BCOPYABLE,\n        BBASE,\n        BCANENQUIRE,\n        BMULTIPLEENTITY,\n        SNOTE,\n        LCREATETASKLISTKEY,\n        LEDITTASKLISTKEY,\n        LDELETETASKLISTKEY,\n        BLINKENTITY,\n        LTYPEOFLINKENTITYKEY,\n        LINVERSELINKENTITYPROPERTYKEY,\n        NDBSOURCE,\n        NSTATEHOLDING,\n        BNEWDIRECT,\n        NENTITYTYPE,\n        LLANGLOOKUPENTITYKEY,\n        NIPTYPE,\n        LIPCONTROLENTITYKEY,\n        lDefaultOpenEnquiryKey,\n        lAliasLookupEntityKey,\n        lTypeOfIndexGroupKey,\n        bAllowFileAttachments,\n        MetadataIdentifier,\n        BDEFAULTENQUIRY,\n        dw_loadts,\n        row_number() over (\n            partition by\n                LENTITYKEY,\n                SENTITY,\n                SENTITYPLURAL,\n                SENTITYSHORT,\n                SENTITYPLURALSHORT,\n                STABLE,\n                LICONKEY,\n                LENTITYFAMILYKEY,\n                LENTITYSTATEKEY,\n                LSTATEHOLDINGENTITYKEY,\n                LSENTITYRELATIONSHIPKEY,\n                BVERSIONINGENTITY,\n                BISVERSIONED,\n                LVERSIONENTITYKEY,\n                LVENTITYRELATIONSHIPKEY,\n                BOPENDIRECT,\n                BVOLUMINOUS,\n                BINDEX,\n                BCOPYABLE,\n                BBASE,\n                BCANENQUIRE,\n                BMULTIPLEENTITY,\n                SNOTE,\n                LCREATETASKLISTKEY,\n                LEDITTASKLISTKEY,\n                LDELETETASKLISTKEY,\n                BLINKENTITY,\n                LTYPEOFLINKENTITYKEY,\n                LINVERSELINKENTITYPROPERTYKEY,\n                NDBSOURCE,\n                NSTATEHOLDING,\n                BNEWDIRECT,\n                NENTITYTYPE,\n                LLANGLOOKUPENTITYKEY,\n                NIPTYPE,\n                LIPCONTROLENTITYKEY,\n                lDefaultOpenEnquiryKey,\n                lAliasLookupEntityKey,\n                lTypeOfIndexGroupKey,\n                bAllowFileAttachments,\n                MetadataIdentifier,\n                BDEFAULTENQUIRY\n            order by\n                dw_loadts\n        ) as dw_extract_order\n    from\n        entity_type\n),\n\nfiltered as (\n    select * from ordered where dw_extract_order = 1\n),\n\nranged as (\n    select\n        LENTITYKEY,\n        SENTITY,\n        SENTITYPLURAL,\n        SENTITYSHORT,\n        SENTITYPLURALSHORT,\n        STABLE,\n        LICONKEY,\n        LENTITYFAMILYKEY,\n        LENTITYSTATEKEY,\n        LSTATEHOLDINGENTITYKEY,\n        LSENTITYRELATIONSHIPKEY,\n        BVERSIONINGENTITY,\n        BISVERSIONED,\n        LVERSIONENTITYKEY,\n        LVENTITYRELATIONSHIPKEY,\n        BOPENDIRECT,\n        BVOLUMINOUS,\n        BINDEX,\n        BCOPYABLE,\n        BBASE,\n        BCANENQUIRE,\n        BMULTIPLEENTITY,\n        SNOTE,\n        LCREATETASKLISTKEY,\n        LEDITTASKLISTKEY,\n        LDELETETASKLISTKEY,\n        BLINKENTITY,\n        LTYPEOFLINKENTITYKEY,\n        LINVERSELINKENTITYPROPERTYKEY,\n        NDBSOURCE,\n        NSTATEHOLDING,\n        BNEWDIRECT,\n        NENTITYTYPE,\n        LLANGLOOKUPENTITYKEY,\n        NIPTYPE,\n        LIPCONTROLENTITYKEY,\n        lDefaultOpenEnquiryKey,\n        lAliasLookupEntityKey,\n        lTypeOfIndexGroupKey,\n        bAllowFileAttachments,\n        MetadataIdentifier,\n        BDEFAULTENQUIRY,\n        dw_loadts as _valid_from,\n        lead(dw_loadts) over (partition by LENTITYKEY order by dw_loadts) as _valid_to\n    from\n        filtered\n)\n\nselect * from ranged", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"scd_entity_type\""}, "model.iginsure.scd_journal_activity": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.iginsure.dbo.journal_activity"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "scd", "scd_journal_activity"], "unique_id": "model.iginsure.scd_journal_activity", "raw_code": "-- This file is automatically generated\r\n\r\nwith\r\n\r\njournal_activity as (\r\n    select * from {{ source('dbo', 'journal_activity') }}\r\n),\r\n\r\nordered as (\r\n    select\r\n        lJournalActivityKey,\r\n        lTemplateJournalActivityKey,\r\n        lSourceEntityKey,\r\n        lSourceInstanceKey,\r\n        dtEntryDate,\r\n        bUseAccountPeriodRates,\r\n        lTemplateLossGainKey,\r\n        dw_loadts,\r\n        row_number() over (\r\n            partition by\r\n                lJournalActivityKey,\r\n                lTemplateJournalActivityKey,\r\n                lSourceEntityKey,\r\n                lSourceInstanceKey,\r\n                dtEntryDate,\r\n                bUseAccountPeriodRates,\r\n                lTemplateLossGainKey\r\n            order by\r\n                dw_loadts\r\n        ) as dw_extract_order\r\n    from\r\n        journal_activity\r\n),\r\n\r\nfiltered as (\r\n    select * from ordered where dw_extract_order = 1\r\n),\r\n\r\nranged as (\r\n    select\r\n        lJournalActivityKey,\r\n        lTemplateJournalActivityKey,\r\n        lSourceEntityKey,\r\n        lSourceInstanceKey,\r\n        dtEntryDate,\r\n        bUseAccountPeriodRates,\r\n        lTemplateLossGainKey,\r\n        dw_loadts as _valid_from,\r\n        lead(dw_loadts) over (partition by lJournalActivityKey order by dw_loadts) as _valid_to\r\n    from\r\n        filtered\r\n)\r\n\r\nselect * from ranged", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "scd\\scd_journal_activity.sql", "original_file_path": "models\\scd\\scd_journal_activity.sql", "name": "scd_journal_activity", "alias": "scd_journal_activity", "checksum": {"name": "sha256", "checksum": "55cbbe99f97c69992a639927e13fc9faf4fbbc1f1531b3e31c230266759421fa"}, "tags": [], "refs": [], "sources": [["dbo", "journal_activity"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": "iginsure://models\\scd\\scd.yml", "compiled_path": "target\\compiled\\iginsure\\models\\scd\\scd_journal_activity.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "docs": {"show": false}}, "created_at": 1701786801.7811732, "compiled_code": "-- This file is automatically generated\n\nwith\n\njournal_activity as (\n    select * from \"IGI_PROD_DW\".\"dbo\".\"JournalActivity\"\n),\n\nordered as (\n    select\n        lJournalActivityKey,\n        lTemplateJournalActivityKey,\n        lSourceEntityKey,\n        lSourceInstanceKey,\n        dtEntryDate,\n        bUseAccountPeriodRates,\n        lTemplateLossGainKey,\n        dw_loadts,\n        row_number() over (\n            partition by\n                lJournalActivityKey,\n                lTemplateJournalActivityKey,\n                lSourceEntityKey,\n                lSourceInstanceKey,\n                dtEntryDate,\n                bUseAccountPeriodRates,\n                lTemplateLossGainKey\n            order by\n                dw_loadts\n        ) as dw_extract_order\n    from\n        journal_activity\n),\n\nfiltered as (\n    select * from ordered where dw_extract_order = 1\n),\n\nranged as (\n    select\n        lJournalActivityKey,\n        lTemplateJournalActivityKey,\n        lSourceEntityKey,\n        lSourceInstanceKey,\n        dtEntryDate,\n        bUseAccountPeriodRates,\n        lTemplateLossGainKey,\n        dw_loadts as _valid_from,\n        lead(dw_loadts) over (partition by lJournalActivityKey order by dw_loadts) as _valid_to\n    from\n        filtered\n)\n\nselect * from ranged", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"scd_journal_activity\""}, "model.iginsure.scd_journal_line_item": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.iginsure.dbo.journal_line_item"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "scd", "scd_journal_line_item"], "unique_id": "model.iginsure.scd_journal_line_item", "raw_code": "-- This file is automatically generated\r\n\r\nwith\r\n\r\njournal_line_item as (\r\n    select * from {{ source('dbo', 'journal_line_item') }}\r\n),\r\n\r\nordered as (\r\n    select\r\n        lJournalLineItemKey,\r\n        lJournalPairKey,\r\n        lJournalActivityKey,\r\n        lTypeOfDebitCreditKey,\r\n        lAccountKey,\r\n        lOriginalCurrencyKey,\r\n        dOriginalROE,\r\n        dOriginalAmount,\r\n        lReportingCurrencyKey,\r\n        dReportingROE,\r\n        dReportingAmount,\r\n        dw_loadts,\r\n        row_number() over (\r\n            partition by\r\n                lJournalLineItemKey,\r\n                lJournalPairKey,\r\n                lJournalActivityKey,\r\n                lTypeOfDebitCreditKey,\r\n                lAccountKey,\r\n                lOriginalCurrencyKey,\r\n                dOriginalROE,\r\n                dOriginalAmount,\r\n                lReportingCurrencyKey,\r\n                dReportingROE,\r\n                dReportingAmount\r\n            order by\r\n                dw_loadts\r\n        ) as dw_extract_order\r\n    from\r\n        journal_line_item\r\n),\r\n\r\nfiltered as (\r\n    select * from ordered where dw_extract_order = 1\r\n),\r\n\r\nranged as (\r\n    select\r\n        lJournalLineItemKey,\r\n        lJournalPairKey,\r\n        lJournalActivityKey,\r\n        lTypeOfDebitCreditKey,\r\n        lAccountKey,\r\n        lOriginalCurrencyKey,\r\n        dOriginalROE,\r\n        dOriginalAmount,\r\n        lReportingCurrencyKey,\r\n        dReportingROE,\r\n        dReportingAmount,\r\n        dw_loadts as _valid_from,\r\n        lead(dw_loadts) over (partition by lJournalLineItemKey order by dw_loadts) as _valid_to\r\n    from\r\n        filtered\r\n)\r\n\r\nselect * from ranged", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "scd\\scd_journal_line_item.sql", "original_file_path": "models\\scd\\scd_journal_line_item.sql", "name": "scd_journal_line_item", "alias": "scd_journal_line_item", "checksum": {"name": "sha256", "checksum": "8bfe22a828542ec3374056b2eb3a577b19df5c3d0b9694f3d4626b8825ab059c"}, "tags": [], "refs": [], "sources": [["dbo", "journal_line_item"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": "iginsure://models\\scd\\scd.yml", "compiled_path": "target\\compiled\\iginsure\\models\\scd\\scd_journal_line_item.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "docs": {"show": false}}, "created_at": 1701786801.782173, "compiled_code": "-- This file is automatically generated\n\nwith\n\njournal_line_item as (\n    select * from \"IGI_PROD_DW\".\"dbo\".\"JournalLineItem\"\n),\n\nordered as (\n    select\n        lJournalLineItemKey,\n        lJournalPairKey,\n        lJournalActivityKey,\n        lTypeOfDebitCreditKey,\n        lAccountKey,\n        lOriginalCurrencyKey,\n        dOriginalROE,\n        dOriginalAmount,\n        lReportingCurrencyKey,\n        dReportingROE,\n        dReportingAmount,\n        dw_loadts,\n        row_number() over (\n            partition by\n                lJournalLineItemKey,\n                lJournalPairKey,\n                lJournalActivityKey,\n                lTypeOfDebitCreditKey,\n                lAccountKey,\n                lOriginalCurrencyKey,\n                dOriginalROE,\n                dOriginalAmount,\n                lReportingCurrencyKey,\n                dReportingROE,\n                dReportingAmount\n            order by\n                dw_loadts\n        ) as dw_extract_order\n    from\n        journal_line_item\n),\n\nfiltered as (\n    select * from ordered where dw_extract_order = 1\n),\n\nranged as (\n    select\n        lJournalLineItemKey,\n        lJournalPairKey,\n        lJournalActivityKey,\n        lTypeOfDebitCreditKey,\n        lAccountKey,\n        lOriginalCurrencyKey,\n        dOriginalROE,\n        dOriginalAmount,\n        lReportingCurrencyKey,\n        dReportingROE,\n        dReportingAmount,\n        dw_loadts as _valid_from,\n        lead(dw_loadts) over (partition by lJournalLineItemKey order by dw_loadts) as _valid_to\n    from\n        filtered\n)\n\nselect * from ranged", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"scd_journal_line_item\""}, "model.iginsure.scd_journal_pair": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.iginsure.dbo.journal_pair"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "scd", "scd_journal_pair"], "unique_id": "model.iginsure.scd_journal_pair", "raw_code": "-- This file is automatically generated\r\n\r\nwith\r\n\r\njournal_pair as (\r\n    select * from {{ source('dbo', 'journal_pair') }}\r\n),\r\n\r\nordered as (\r\n    select\r\n        lJournalPairKey,\r\n        lJournalActivityKey,\r\n        lTemplateJournalEntryKey,\r\n        lJournalKey,\r\n        lAccrualStatusKey,\r\n        lAccountPeriodKey,\r\n        dtROE,\r\n        lEntityKey,\r\n        lInstanceKey,\r\n        lGroupByEntityKey,\r\n        lGroupByInstanceKey,\r\n        sDescription,\r\n        lDivisionKey,\r\n        lSubDivisionKey,\r\n        lTypeOfJournalExportGroupKey,\r\n        dw_loadts,\r\n        row_number() over (\r\n            partition by\r\n                lJournalPairKey,\r\n                lJournalActivityKey,\r\n                lTemplateJournalEntryKey,\r\n                lJournalKey,\r\n                lAccrualStatusKey,\r\n                lAccountPeriodKey,\r\n                dtROE,\r\n                lEntityKey,\r\n                lInstanceKey,\r\n                lGroupByEntityKey,\r\n                lGroupByInstanceKey,\r\n                sDescription,\r\n                lDivisionKey,\r\n                lSubDivisionKey,\r\n                lTypeOfJournalExportGroupKey\r\n            order by\r\n                dw_loadts\r\n        ) as dw_extract_order\r\n    from\r\n        journal_pair\r\n),\r\n\r\nfiltered as (\r\n    select * from ordered where dw_extract_order = 1\r\n),\r\n\r\nranged as (\r\n    select\r\n        lJournalPairKey,\r\n        lJournalActivityKey,\r\n        lTemplateJournalEntryKey,\r\n        lJournalKey,\r\n        lAccrualStatusKey,\r\n        lAccountPeriodKey,\r\n        dtROE,\r\n        lEntityKey,\r\n        lInstanceKey,\r\n        lGroupByEntityKey,\r\n        lGroupByInstanceKey,\r\n        sDescription,\r\n        lDivisionKey,\r\n        lSubDivisionKey,\r\n        lTypeOfJournalExportGroupKey,\r\n        dw_loadts as _valid_from,\r\n        lead(dw_loadts) over (partition by lJournalPairKey order by dw_loadts) as _valid_to\r\n    from\r\n        filtered\r\n)\r\n\r\nselect * from ranged", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "scd\\scd_journal_pair.sql", "original_file_path": "models\\scd\\scd_journal_pair.sql", "name": "scd_journal_pair", "alias": "scd_journal_pair", "checksum": {"name": "sha256", "checksum": "2342c1fafcbeb999187e75ce5180d0b282c392c9c0395db237ca9ad2ca6cb053"}, "tags": [], "refs": [], "sources": [["dbo", "journal_pair"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": "iginsure://models\\scd\\scd.yml", "compiled_path": "target\\compiled\\iginsure\\models\\scd\\scd_journal_pair.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "docs": {"show": false}}, "created_at": 1701786801.7860858, "compiled_code": "-- This file is automatically generated\n\nwith\n\njournal_pair as (\n    select * from \"IGI_PROD_DW\".\"dbo\".\"JournalPair\"\n),\n\nordered as (\n    select\n        lJournalPairKey,\n        lJournalActivityKey,\n        lTemplateJournalEntryKey,\n        lJournalKey,\n        lAccrualStatusKey,\n        lAccountPeriodKey,\n        dtROE,\n        lEntityKey,\n        lInstanceKey,\n        lGroupByEntityKey,\n        lGroupByInstanceKey,\n        sDescription,\n        lDivisionKey,\n        lSubDivisionKey,\n        lTypeOfJournalExportGroupKey,\n        dw_loadts,\n        row_number() over (\n            partition by\n                lJournalPairKey,\n                lJournalActivityKey,\n                lTemplateJournalEntryKey,\n                lJournalKey,\n                lAccrualStatusKey,\n                lAccountPeriodKey,\n                dtROE,\n                lEntityKey,\n                lInstanceKey,\n                lGroupByEntityKey,\n                lGroupByInstanceKey,\n                sDescription,\n                lDivisionKey,\n                lSubDivisionKey,\n                lTypeOfJournalExportGroupKey\n            order by\n                dw_loadts\n        ) as dw_extract_order\n    from\n        journal_pair\n),\n\nfiltered as (\n    select * from ordered where dw_extract_order = 1\n),\n\nranged as (\n    select\n        lJournalPairKey,\n        lJournalActivityKey,\n        lTemplateJournalEntryKey,\n        lJournalKey,\n        lAccrualStatusKey,\n        lAccountPeriodKey,\n        dtROE,\n        lEntityKey,\n        lInstanceKey,\n        lGroupByEntityKey,\n        lGroupByInstanceKey,\n        sDescription,\n        lDivisionKey,\n        lSubDivisionKey,\n        lTypeOfJournalExportGroupKey,\n        dw_loadts as _valid_from,\n        lead(dw_loadts) over (partition by lJournalPairKey order by dw_loadts) as _valid_to\n    from\n        filtered\n)\n\nselect * from ranged", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"scd_journal_pair\""}, "model.iginsure.scd_journal_template": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.iginsure.dbo.journal_template"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "scd", "scd_journal_template"], "unique_id": "model.iginsure.scd_journal_template", "raw_code": "-- This file is automatically generated\r\n\r\nwith\r\n\r\njournal_template as (\r\n    select * from {{ source('dbo', 'journal_template') }}\r\n),\r\n\r\nordered as (\r\n    select\r\n        lTemplateJournalActivityKey,\r\n        lSourceEntityKey,\r\n        lSourceInstancePropertyKey,\r\n        lSourceEntityStateKey,\r\n        lDivisionERKey,\r\n        lDivisionEPKey,\r\n        lSubDivisionERKey,\r\n        lSubDivisionEPKey,\r\n        lAccountPeriodERKey,\r\n        lAccountPeriodEPKey,\r\n        lROEDateERKey,\r\n        lROEDateEPKey,\r\n        bUseAccountPeriodRates,\r\n        bPostNetResult,\r\n        sTemplateDescription,\r\n        bHardCodeAccelerated,\r\n        dw_loadts,\r\n        row_number() over (\r\n            partition by\r\n                lTemplateJournalActivityKey,\r\n                lSourceEntityKey,\r\n                lSourceInstancePropertyKey,\r\n                lSourceEntityStateKey,\r\n                lDivisionERKey,\r\n                lDivisionEPKey,\r\n                lSubDivisionERKey,\r\n                lSubDivisionEPKey,\r\n                lAccountPeriodERKey,\r\n                lAccountPeriodEPKey,\r\n                lROEDateERKey,\r\n                lROEDateEPKey,\r\n                bUseAccountPeriodRates,\r\n                bPostNetResult,\r\n                sTemplateDescription,\r\n                bHardCodeAccelerated\r\n            order by\r\n                dw_loadts\r\n        ) as dw_extract_order\r\n    from\r\n        journal_template\r\n),\r\n\r\nfiltered as (\r\n    select * from ordered where dw_extract_order = 1\r\n),\r\n\r\nranged as (\r\n    select\r\n        lTemplateJournalActivityKey,\r\n        lSourceEntityKey,\r\n        lSourceInstancePropertyKey,\r\n        lSourceEntityStateKey,\r\n        lDivisionERKey,\r\n        lDivisionEPKey,\r\n        lSubDivisionERKey,\r\n        lSubDivisionEPKey,\r\n        lAccountPeriodERKey,\r\n        lAccountPeriodEPKey,\r\n        lROEDateERKey,\r\n        lROEDateEPKey,\r\n        bUseAccountPeriodRates,\r\n        bPostNetResult,\r\n        sTemplateDescription,\r\n        bHardCodeAccelerated,\r\n        dw_loadts as _valid_from,\r\n        lead(dw_loadts) over (partition by lTemplateJournalActivityKey order by dw_loadts) as _valid_to\r\n    from\r\n        filtered\r\n)\r\n\r\nselect * from ranged", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "scd\\scd_journal_template.sql", "original_file_path": "models\\scd\\scd_journal_template.sql", "name": "scd_journal_template", "alias": "scd_journal_template", "checksum": {"name": "sha256", "checksum": "4091aa4a9f205f8458ee4195f587a63dd6bb0503162224da2c3902d97cbdbb0f"}, "tags": [], "refs": [], "sources": [["dbo", "journal_template"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": "iginsure://models\\scd\\scd.yml", "compiled_path": "target\\compiled\\iginsure\\models\\scd\\scd_journal_template.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "docs": {"show": false}}, "created_at": 1701786801.789081, "compiled_code": "-- This file is automatically generated\n\nwith\n\njournal_template as (\n    select * from \"IGI_PROD_DW\".\"dbo\".\"TemplateJournalActivity\"\n),\n\nordered as (\n    select\n        lTemplateJournalActivityKey,\n        lSourceEntityKey,\n        lSourceInstancePropertyKey,\n        lSourceEntityStateKey,\n        lDivisionERKey,\n        lDivisionEPKey,\n        lSubDivisionERKey,\n        lSubDivisionEPKey,\n        lAccountPeriodERKey,\n        lAccountPeriodEPKey,\n        lROEDateERKey,\n        lROEDateEPKey,\n        bUseAccountPeriodRates,\n        bPostNetResult,\n        sTemplateDescription,\n        bHardCodeAccelerated,\n        dw_loadts,\n        row_number() over (\n            partition by\n                lTemplateJournalActivityKey,\n                lSourceEntityKey,\n                lSourceInstancePropertyKey,\n                lSourceEntityStateKey,\n                lDivisionERKey,\n                lDivisionEPKey,\n                lSubDivisionERKey,\n                lSubDivisionEPKey,\n                lAccountPeriodERKey,\n                lAccountPeriodEPKey,\n                lROEDateERKey,\n                lROEDateEPKey,\n                bUseAccountPeriodRates,\n                bPostNetResult,\n                sTemplateDescription,\n                bHardCodeAccelerated\n            order by\n                dw_loadts\n        ) as dw_extract_order\n    from\n        journal_template\n),\n\nfiltered as (\n    select * from ordered where dw_extract_order = 1\n),\n\nranged as (\n    select\n        lTemplateJournalActivityKey,\n        lSourceEntityKey,\n        lSourceInstancePropertyKey,\n        lSourceEntityStateKey,\n        lDivisionERKey,\n        lDivisionEPKey,\n        lSubDivisionERKey,\n        lSubDivisionEPKey,\n        lAccountPeriodERKey,\n        lAccountPeriodEPKey,\n        lROEDateERKey,\n        lROEDateEPKey,\n        bUseAccountPeriodRates,\n        bPostNetResult,\n        sTemplateDescription,\n        bHardCodeAccelerated,\n        dw_loadts as _valid_from,\n        lead(dw_loadts) over (partition by lTemplateJournalActivityKey order by dw_loadts) as _valid_to\n    from\n        filtered\n)\n\nselect * from ranged", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"scd_journal_template\""}, "model.iginsure.scd_market_source": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.iginsure.dbo.market_source"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["InwardPremium"], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "scd", "scd_market_source"], "unique_id": "model.iginsure.scd_market_source", "raw_code": "-- This file is automatically generated\r\n\r\n{{\r\n  config(tags=['InwardPremium'])\r\n}}\r\n\r\nwith\r\n\r\nmarket_source as (\r\n    select * from {{ source('dbo', 'market_source') }}\r\n),\r\n\r\nordered as (\r\n    select\r\n        lMarketSourceKey,\r\n        sCode,\r\n        sMarketSource,\r\n        sMarketSourceSearch,\r\n        lTypeOfMarketSourceKey,\r\n        dw_loadts,\r\n        row_number() over (\r\n            partition by\r\n                lMarketSourceKey,\r\n                sCode,\r\n                sMarketSource,\r\n                sMarketSourceSearch,\r\n                lTypeOfMarketSourceKey\r\n            order by\r\n                dw_loadts\r\n        ) as dw_extract_order\r\n    from\r\n        market_source\r\n),\r\n\r\nfiltered as (\r\n    select * from ordered where dw_extract_order = 1\r\n),\r\n\r\nranged as (\r\n    select\r\n        lMarketSourceKey,\r\n        sCode,\r\n        sMarketSource,\r\n        sMarketSourceSearch,\r\n        lTypeOfMarketSourceKey,\r\n        dw_loadts as _valid_from,\r\n        lead(dw_loadts) over (partition by lMarketSourceKey order by dw_loadts) as _valid_to\r\n    from\r\n        filtered\r\n)\r\n\r\nselect * from ranged", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "scd\\scd_market_source.sql", "original_file_path": "models\\scd\\scd_market_source.sql", "name": "scd_market_source", "alias": "scd_market_source", "checksum": {"name": "sha256", "checksum": "7d50756a8ce7a96595c90177c25bf9fcbe40753adcd40f00370ac4f62c3d2bf6"}, "tags": ["InwardPremium"], "refs": [], "sources": [["dbo", "market_source"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": "iginsure://models\\scd\\scd.yml", "compiled_path": "target\\compiled\\iginsure\\models\\scd\\scd_market_source.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "docs": {"show": false}, "tags": ["InwardPremium"]}, "created_at": 1701786801.7900822, "compiled_code": "-- This file is automatically generated\n\n\n\nwith\n\nmarket_source as (\n    select * from \"IGI_PROD_DW\".\"dbo\".\"MarketSource\"\n),\n\nordered as (\n    select\n        lMarketSourceKey,\n        sCode,\n        sMarketSource,\n        sMarketSourceSearch,\n        lTypeOfMarketSourceKey,\n        dw_loadts,\n        row_number() over (\n            partition by\n                lMarketSourceKey,\n                sCode,\n                sMarketSource,\n                sMarketSourceSearch,\n                lTypeOfMarketSourceKey\n            order by\n                dw_loadts\n        ) as dw_extract_order\n    from\n        market_source\n),\n\nfiltered as (\n    select * from ordered where dw_extract_order = 1\n),\n\nranged as (\n    select\n        lMarketSourceKey,\n        sCode,\n        sMarketSource,\n        sMarketSourceSearch,\n        lTypeOfMarketSourceKey,\n        dw_loadts as _valid_from,\n        lead(dw_loadts) over (partition by lMarketSourceKey order by dw_loadts) as _valid_to\n    from\n        filtered\n)\n\nselect * from ranged", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"scd_market_source\""}, "model.iginsure.scd_policy": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.iginsure.dbo.policy"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["InwardPremium"], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "scd", "scd_policy"], "unique_id": "model.iginsure.scd_policy", "raw_code": "-- This file is automatically generated\r\n{{\r\n  config(tags=['InwardPremium'])\r\n}}\r\n\r\nwith\r\n\r\npolicy as (\r\n    select * from {{ source('dbo', 'policy') }}\r\n),\r\n\r\nordered as (\r\n    select\r\n        lPolicyKey,\r\n        lPolicyFolderKey,\r\n        lActivePolicyActivityKey,\r\n        sPolicyNo,\r\n        sQuoteNo,\r\n        nVersion,\r\n        lInsuredContactKey,\r\n        dtPeriodFrom,\r\n        dtPeriodTo,\r\n        dtPeriodToDisplay,\r\n        dtPeriodToOriginal,\r\n        dtPeriodToDisplayOriginal,\r\n        nPeriodFromYear,\r\n        bPeriodTBA,\r\n        bMidnightStartTime,\r\n        dtCancel,\r\n        lPolicyCurrencyKey,\r\n        dROE,\r\n        bRenewalCreated,\r\n        lRenewalPolicyKey,\r\n        dtUltimateExpiryDate,\r\n        sPreviousYearPolicyNo,\r\n        lTypeOfPolicyKey,\r\n        bConvertedPolicy,\r\n        lNewBusRenewPolicyActivityKey,\r\n        lCorrAnchorPolicyActivityKey,\r\n        bCloneComplete,\r\n        lProgramFolderKey,\r\n        lProgramYearKey,\r\n        bCreateDecFrom,\r\n        lMasterPolicyKey,\r\n        dtMasterPeriodFrom,\r\n        dtMasterPeriodTo,\r\n        nNextDeclaration,\r\n        nDec,\r\n        lActiveEndorsementActivityKey,\r\n        dt1stWritten,\r\n        lMasterPolicyFolderKey,\r\n        bOriginalPolicy,\r\n        nPreviousVersion,\r\n        lTypeofTBAPeriodKey,\r\n        nNumberOfMonths,\r\n        sReference,\r\n        bRegenerateReference,\r\n        lPresentationCurrencyKey,\r\n        bCopyCreated,\r\n        bReplacementEndorsements,\r\n        sSubmissionNo,\r\n        sBoundNo,\r\n        nNextClaimNo,\r\n        lPolicyLineChainKey,\r\n        bSkeleton,\r\n        lProducerContactKey,\r\n        lReinsuredContactKey,\r\n        lBrokerContactKey,\r\n        sUMR,\r\n        bAdjustable,\r\n        dtAdjustable,\r\n        bAdjusted,\r\n        bTreaty,\r\n        lEndorementSubClassificationKey,\r\n        bIsSequence,\r\n        sSequenceCaption,\r\n        bIsFixedROE,\r\n        lTypeOfProfitCentreKey,\r\n        nPeriodDaysPremium,\r\n        lSoapPolicyKey,\r\n        bIntegratedPolicy,\r\n        dw_loadts,\r\n        row_number() over (\r\n            partition by\r\n                lPolicyKey,\r\n                lPolicyFolderKey,\r\n                lActivePolicyActivityKey,\r\n                sPolicyNo,\r\n                sQuoteNo,\r\n                nVersion,\r\n                lInsuredContactKey,\r\n                dtPeriodFrom,\r\n                dtPeriodTo,\r\n                dtPeriodToDisplay,\r\n                dtPeriodToOriginal,\r\n                dtPeriodToDisplayOriginal,\r\n                nPeriodFromYear,\r\n                bPeriodTBA,\r\n                bMidnightStartTime,\r\n                dtCancel,\r\n                lPolicyCurrencyKey,\r\n                dROE,\r\n                bRenewalCreated,\r\n                lRenewalPolicyKey,\r\n                dtUltimateExpiryDate,\r\n                sPreviousYearPolicyNo,\r\n                lTypeOfPolicyKey,\r\n                bConvertedPolicy,\r\n                lNewBusRenewPolicyActivityKey,\r\n                lCorrAnchorPolicyActivityKey,\r\n                bCloneComplete,\r\n                lProgramFolderKey,\r\n                lProgramYearKey,\r\n                bCreateDecFrom,\r\n                lMasterPolicyKey,\r\n                dtMasterPeriodFrom,\r\n                dtMasterPeriodTo,\r\n                nNextDeclaration,\r\n                nDec,\r\n                lActiveEndorsementActivityKey,\r\n                dt1stWritten,\r\n                lMasterPolicyFolderKey,\r\n                bOriginalPolicy,\r\n                nPreviousVersion,\r\n                lTypeofTBAPeriodKey,\r\n                nNumberOfMonths,\r\n                sReference,\r\n                bRegenerateReference,\r\n                lPresentationCurrencyKey,\r\n                bCopyCreated,\r\n                bReplacementEndorsements,\r\n                sSubmissionNo,\r\n                sBoundNo,\r\n                nNextClaimNo,\r\n                lPolicyLineChainKey,\r\n                bSkeleton,\r\n                lProducerContactKey,\r\n                lReinsuredContactKey,\r\n                lBrokerContactKey,\r\n                sUMR,\r\n                bAdjustable,\r\n                dtAdjustable,\r\n                bAdjusted,\r\n                bTreaty,\r\n                lEndorementSubClassificationKey,\r\n                bIsSequence,\r\n                sSequenceCaption,\r\n                bIsFixedROE,\r\n                lTypeOfProfitCentreKey,\r\n                nPeriodDaysPremium,\r\n                lSoapPolicyKey,\r\n                bIntegratedPolicy\r\n            order by\r\n                dw_loadts\r\n        ) as dw_extract_order\r\n    from\r\n        policy\r\n),\r\n\r\nfiltered as (\r\n    select * from ordered where dw_extract_order = 1\r\n),\r\n\r\nranged as (\r\n    select\r\n        lPolicyKey,\r\n        lPolicyFolderKey,\r\n        lActivePolicyActivityKey,\r\n        sPolicyNo,\r\n        sQuoteNo,\r\n        nVersion,\r\n        lInsuredContactKey,\r\n        dtPeriodFrom,\r\n        dtPeriodTo,\r\n        dtPeriodToDisplay,\r\n        dtPeriodToOriginal,\r\n        dtPeriodToDisplayOriginal,\r\n        nPeriodFromYear,\r\n        bPeriodTBA,\r\n        bMidnightStartTime,\r\n        dtCancel,\r\n        lPolicyCurrencyKey,\r\n        dROE,\r\n        bRenewalCreated,\r\n        lRenewalPolicyKey,\r\n        dtUltimateExpiryDate,\r\n        sPreviousYearPolicyNo,\r\n        lTypeOfPolicyKey,\r\n        bConvertedPolicy,\r\n        lNewBusRenewPolicyActivityKey,\r\n        lCorrAnchorPolicyActivityKey,\r\n        bCloneComplete,\r\n        lProgramFolderKey,\r\n        lProgramYearKey,\r\n        bCreateDecFrom,\r\n        lMasterPolicyKey,\r\n        dtMasterPeriodFrom,\r\n        dtMasterPeriodTo,\r\n        nNextDeclaration,\r\n        nDec,\r\n        lActiveEndorsementActivityKey,\r\n        dt1stWritten,\r\n        lMasterPolicyFolderKey,\r\n        bOriginalPolicy,\r\n        nPreviousVersion,\r\n        lTypeofTBAPeriodKey,\r\n        nNumberOfMonths,\r\n        sReference,\r\n        bRegenerateReference,\r\n        lPresentationCurrencyKey,\r\n        bCopyCreated,\r\n        bReplacementEndorsements,\r\n        sSubmissionNo,\r\n        sBoundNo,\r\n        nNextClaimNo,\r\n        lPolicyLineChainKey,\r\n        bSkeleton,\r\n        lProducerContactKey,\r\n        lReinsuredContactKey,\r\n        lBrokerContactKey,\r\n        sUMR,\r\n        bAdjustable,\r\n        dtAdjustable,\r\n        bAdjusted,\r\n        bTreaty,\r\n        lEndorementSubClassificationKey,\r\n        bIsSequence,\r\n        sSequenceCaption,\r\n        bIsFixedROE,\r\n        lTypeOfProfitCentreKey,\r\n        nPeriodDaysPremium,\r\n        lSoapPolicyKey,\r\n        bIntegratedPolicy,\r\n        dw_loadts as _valid_from,\r\n        lead(dw_loadts) over (partition by lPolicyKey order by dw_loadts) as _valid_to\r\n    from\r\n        filtered\r\n)\r\n\r\nselect * from ranged", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "scd\\scd_policy.sql", "original_file_path": "models\\scd\\scd_policy.sql", "name": "scd_policy", "alias": "scd_policy", "checksum": {"name": "sha256", "checksum": "97831933dd56b79ed636705e5fb0adbe5b8999b467502a383875717d1b8500eb"}, "tags": ["InwardPremium"], "refs": [], "sources": [["dbo", "policy"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": "iginsure://models\\scd\\scd.yml", "compiled_path": "target\\compiled\\iginsure\\models\\scd\\scd_policy.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "docs": {"show": false}, "tags": ["InwardPremium"]}, "created_at": 1701786801.796081, "compiled_code": "-- This file is automatically generated\n\n\nwith\n\npolicy as (\n    select * from \"IGI_PROD_DW\".\"dbo\".\"Policy\"\n),\n\nordered as (\n    select\n        lPolicyKey,\n        lPolicyFolderKey,\n        lActivePolicyActivityKey,\n        sPolicyNo,\n        sQuoteNo,\n        nVersion,\n        lInsuredContactKey,\n        dtPeriodFrom,\n        dtPeriodTo,\n        dtPeriodToDisplay,\n        dtPeriodToOriginal,\n        dtPeriodToDisplayOriginal,\n        nPeriodFromYear,\n        bPeriodTBA,\n        bMidnightStartTime,\n        dtCancel,\n        lPolicyCurrencyKey,\n        dROE,\n        bRenewalCreated,\n        lRenewalPolicyKey,\n        dtUltimateExpiryDate,\n        sPreviousYearPolicyNo,\n        lTypeOfPolicyKey,\n        bConvertedPolicy,\n        lNewBusRenewPolicyActivityKey,\n        lCorrAnchorPolicyActivityKey,\n        bCloneComplete,\n        lProgramFolderKey,\n        lProgramYearKey,\n        bCreateDecFrom,\n        lMasterPolicyKey,\n        dtMasterPeriodFrom,\n        dtMasterPeriodTo,\n        nNextDeclaration,\n        nDec,\n        lActiveEndorsementActivityKey,\n        dt1stWritten,\n        lMasterPolicyFolderKey,\n        bOriginalPolicy,\n        nPreviousVersion,\n        lTypeofTBAPeriodKey,\n        nNumberOfMonths,\n        sReference,\n        bRegenerateReference,\n        lPresentationCurrencyKey,\n        bCopyCreated,\n        bReplacementEndorsements,\n        sSubmissionNo,\n        sBoundNo,\n        nNextClaimNo,\n        lPolicyLineChainKey,\n        bSkeleton,\n        lProducerContactKey,\n        lReinsuredContactKey,\n        lBrokerContactKey,\n        sUMR,\n        bAdjustable,\n        dtAdjustable,\n        bAdjusted,\n        bTreaty,\n        lEndorementSubClassificationKey,\n        bIsSequence,\n        sSequenceCaption,\n        bIsFixedROE,\n        lTypeOfProfitCentreKey,\n        nPeriodDaysPremium,\n        lSoapPolicyKey,\n        bIntegratedPolicy,\n        dw_loadts,\n        row_number() over (\n            partition by\n                lPolicyKey,\n                lPolicyFolderKey,\n                lActivePolicyActivityKey,\n                sPolicyNo,\n                sQuoteNo,\n                nVersion,\n                lInsuredContactKey,\n                dtPeriodFrom,\n                dtPeriodTo,\n                dtPeriodToDisplay,\n                dtPeriodToOriginal,\n                dtPeriodToDisplayOriginal,\n                nPeriodFromYear,\n                bPeriodTBA,\n                bMidnightStartTime,\n                dtCancel,\n                lPolicyCurrencyKey,\n                dROE,\n                bRenewalCreated,\n                lRenewalPolicyKey,\n                dtUltimateExpiryDate,\n                sPreviousYearPolicyNo,\n                lTypeOfPolicyKey,\n                bConvertedPolicy,\n                lNewBusRenewPolicyActivityKey,\n                lCorrAnchorPolicyActivityKey,\n                bCloneComplete,\n                lProgramFolderKey,\n                lProgramYearKey,\n                bCreateDecFrom,\n                lMasterPolicyKey,\n                dtMasterPeriodFrom,\n                dtMasterPeriodTo,\n                nNextDeclaration,\n                nDec,\n                lActiveEndorsementActivityKey,\n                dt1stWritten,\n                lMasterPolicyFolderKey,\n                bOriginalPolicy,\n                nPreviousVersion,\n                lTypeofTBAPeriodKey,\n                nNumberOfMonths,\n                sReference,\n                bRegenerateReference,\n                lPresentationCurrencyKey,\n                bCopyCreated,\n                bReplacementEndorsements,\n                sSubmissionNo,\n                sBoundNo,\n                nNextClaimNo,\n                lPolicyLineChainKey,\n                bSkeleton,\n                lProducerContactKey,\n                lReinsuredContactKey,\n                lBrokerContactKey,\n                sUMR,\n                bAdjustable,\n                dtAdjustable,\n                bAdjusted,\n                bTreaty,\n                lEndorementSubClassificationKey,\n                bIsSequence,\n                sSequenceCaption,\n                bIsFixedROE,\n                lTypeOfProfitCentreKey,\n                nPeriodDaysPremium,\n                lSoapPolicyKey,\n                bIntegratedPolicy\n            order by\n                dw_loadts\n        ) as dw_extract_order\n    from\n        policy\n),\n\nfiltered as (\n    select * from ordered where dw_extract_order = 1\n),\n\nranged as (\n    select\n        lPolicyKey,\n        lPolicyFolderKey,\n        lActivePolicyActivityKey,\n        sPolicyNo,\n        sQuoteNo,\n        nVersion,\n        lInsuredContactKey,\n        dtPeriodFrom,\n        dtPeriodTo,\n        dtPeriodToDisplay,\n        dtPeriodToOriginal,\n        dtPeriodToDisplayOriginal,\n        nPeriodFromYear,\n        bPeriodTBA,\n        bMidnightStartTime,\n        dtCancel,\n        lPolicyCurrencyKey,\n        dROE,\n        bRenewalCreated,\n        lRenewalPolicyKey,\n        dtUltimateExpiryDate,\n        sPreviousYearPolicyNo,\n        lTypeOfPolicyKey,\n        bConvertedPolicy,\n        lNewBusRenewPolicyActivityKey,\n        lCorrAnchorPolicyActivityKey,\n        bCloneComplete,\n        lProgramFolderKey,\n        lProgramYearKey,\n        bCreateDecFrom,\n        lMasterPolicyKey,\n        dtMasterPeriodFrom,\n        dtMasterPeriodTo,\n        nNextDeclaration,\n        nDec,\n        lActiveEndorsementActivityKey,\n        dt1stWritten,\n        lMasterPolicyFolderKey,\n        bOriginalPolicy,\n        nPreviousVersion,\n        lTypeofTBAPeriodKey,\n        nNumberOfMonths,\n        sReference,\n        bRegenerateReference,\n        lPresentationCurrencyKey,\n        bCopyCreated,\n        bReplacementEndorsements,\n        sSubmissionNo,\n        sBoundNo,\n        nNextClaimNo,\n        lPolicyLineChainKey,\n        bSkeleton,\n        lProducerContactKey,\n        lReinsuredContactKey,\n        lBrokerContactKey,\n        sUMR,\n        bAdjustable,\n        dtAdjustable,\n        bAdjusted,\n        bTreaty,\n        lEndorementSubClassificationKey,\n        bIsSequence,\n        sSequenceCaption,\n        bIsFixedROE,\n        lTypeOfProfitCentreKey,\n        nPeriodDaysPremium,\n        lSoapPolicyKey,\n        bIntegratedPolicy,\n        dw_loadts as _valid_from,\n        lead(dw_loadts) over (partition by lPolicyKey order by dw_loadts) as _valid_to\n    from\n        filtered\n)\n\nselect * from ranged", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"scd_policy\""}, "model.iginsure.scd_policy_activity": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.iginsure.dbo.policy_activity"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["InwardPremium"], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "scd", "scd_policy_activity"], "unique_id": "model.iginsure.scd_policy_activity", "raw_code": "-- This file is automatically generated\r\n\r\n{{\r\n  config(tags=['InwardPremium'])\r\n}}\r\n\r\nwith\r\n\r\npolicy_activity as (\r\n    select * from {{ source('dbo', 'policy_activity') }}\r\n),\r\n\r\nordered as (\r\n    select\r\n        lPolicyActivityKey,\r\n        lPolicyKey,\r\n        lPolicyFolderKey,\r\n        lTypeOfPolicyActivityKey,\r\n        lTypeOfEndorsementKey,\r\n        lTypeOfCorrectionKey,\r\n        nVersion,\r\n        lAuthorityCheckJoinKey,\r\n        lBoundAccountPeriodKey,\r\n        lWrittenAccountPeriodKey,\r\n        lSignedAccountPeriodKey,\r\n        dtCreated,\r\n        sPolicyNo,\r\n        sQuoteNo,\r\n        dtPeriodFrom,\r\n        dtPeriodTo,\r\n        dtPeriodToDisplay,\r\n        dtPeriodToTruncated,\r\n        nPeriodDaysPremium,\r\n        nPeriodDaysTruncated,\r\n        nPeriodDaysEarning,\r\n        bFullySuperceded,\r\n        bPeriodTBA,\r\n        dtSubmissionReceived,\r\n        dtSubmissionRespondBy,\r\n        dtQuoted,\r\n        dtQuoteOpenUntil,\r\n        bPriorActs,\r\n        dtRetroactiveDate,\r\n        dtTailEffectiveDate,\r\n        dtTailExpiryDate,\r\n        bMidnightStartTime,\r\n        dtNoticeOfCancellation,\r\n        nNoticeOfCancellationDays,\r\n        dtCancel,\r\n        lTypeOfCancellationKey,\r\n        lTypeOfCancelledByKey,\r\n        lPolicyActivityCurrencyKey,\r\n        dROE,\r\n        bSingleMarket,\r\n        bDeclaration,\r\n        lTypeOfPlacementKey,\r\n        bEndorsing,\r\n        bPartSigned,\r\n        lBrokerContactKey,\r\n        lBrokerLiaisonKey,\r\n        sBrokerReference,\r\n        lInsuredContactKey,\r\n        lTypeOfSICKey,\r\n        dtPriorAndPendingLitigation,\r\n        lTypeOfFSACategoryKey,\r\n        sSubmissionDescription,\r\n        dPeriodAnnualFactor,\r\n        lAgreementFolderKey,\r\n        lAgreementYearKey,\r\n        lAgreementActivityKey,\r\n        lAgreementPeriodKey,\r\n        lAgreementContactKey,\r\n        lAgreementContactBranchKey,\r\n        lTypeOfInsuranceKey,\r\n        lReinsuredContactKey,\r\n        bDelinked,\r\n        dCancelRateFactor,\r\n        bCloneComplete,\r\n        bCreateFac,\r\n        bFacCreated,\r\n        lAutoCreatedFacRIFolderKey,\r\n        lSurplusBrokerContactKey,\r\n        lSurplusBrokerLiaisonKey,\r\n        lTypeOfSurplusLineIndicatorKey,\r\n        sSurplusLineLicenseNoBroker,\r\n        sSurplusLineCertificatNoBroker,\r\n        bCopiedVersion,\r\n        lProductKey,\r\n        nCountCancellationReason,\r\n        nCountNonRenewReason,\r\n        nCountReinstatementReason,\r\n        nCountDeclinedReason,\r\n        nCountQuoteDeclinedReason,\r\n        lSurplusLineStateKey,\r\n        lAccountContactKey,\r\n        lProductVersionCarrierKey,\r\n        lProductVersionTemplateKey,\r\n        bInPeerReview,\r\n        bPeerReviewComplete,\r\n        dtPeerReviewComplete,\r\n        nPeerReviewUnderwritersReqd,\r\n        nCountPeerReviewComplete,\r\n        bRunOffPolicy,\r\n        lExpiringInsurerContactKey,\r\n        sExpiringInsurerReference,\r\n        lSecondaryBrokerContactKey,\r\n        lSecondBrokerContactLiaisonkey,\r\n        dtIssuanceReviewed,\r\n        sSurplusLineAddress1,\r\n        sSurplusLineAddress2,\r\n        sSurplusLineCity,\r\n        sSurplusLinePostCode,\r\n        sSurplusLinePhone,\r\n        sSurplusLineLicenseNoAgent,\r\n        sSurplusLineCertificateNoAgent,\r\n        sIssuanceAddressTo,\r\n        sIssuanceAddress1,\r\n        sIssuanceAddress2,\r\n        sIssuanceAddressCity,\r\n        lIssuanceAddressStateKey,\r\n        sIssuanceAddressPostCode,\r\n        lTypeOfAdmittedKey,\r\n        sSecondaryBrokerContact,\r\n        sSecondaryBrokerContactLiaison,\r\n        bConvertedPolicy,\r\n        bProductImported,\r\n        bIssuanceAddressSameAsInsureds,\r\n        bNonRenew,\r\n        lProducingOfficekey,\r\n        lPolicyClassKey,\r\n        sUMR,\r\n        sPolicyDescription,\r\n        lContractCertainKey,\r\n        dtWorksExpiryDate,\r\n        bIsContra,\r\n        nMaximumPeriod,\r\n        lProgramFolderKey,\r\n        lProgramYearKey,\r\n        bQuoteNTUReasonEntered,\r\n        bUndoQuoteNTUReasonEntered,\r\n        lUWHoldingContactKey,\r\n        nProductVersion,\r\n        lProductTemplateSectionAddkey,\r\n        lLawCountryKey,\r\n        lJurisdictionCountryKey,\r\n        sLocalReference,\r\n        lInsuredDomicileCountryKey,\r\n        lInsuredDomicileStatekey,\r\n        sInsuredPerContractWording,\r\n        bProductRuleResult,\r\n        lInforceAccumulationReportKey,\r\n        lQuoteAccumulationReportKey,\r\n        bCopyMasterCoverOntoDec,\r\n        lDeclarationProductKey,\r\n        bPolicyIsTransitBased,\r\n        bAuthorisationResult,\r\n        bMasterPolicyUpdated,\r\n        bProductHardRuleResult,\r\n        nDefaultQuoteDays,\r\n        lServiceofSuitKey,\r\n        lCreatedBy,\r\n        bLocationBasedProduct,\r\n        bProcessDeductions,\r\n        nUnassignedUnderwriters,\r\n        bUseAccountSubmission,\r\n        lCloneParentKey,\r\n        lTypeOfProductGroupKey,\r\n        nNumberOfLines,\r\n        lTypeofUSClassificationKey,\r\n        lJurisdictionStateKey,\r\n        lSurplusLineCountryKey,\r\n        bRenewalFlagProperty,\r\n        dtAgreementPeriodToMax,\r\n        bAuthorisedBroker,\r\n        bAgreementCountryScopeWrldwide,\r\n        nNullAgreementSections,\r\n        bMarketSourceIsMessaging,\r\n        lCoverholderContactKey,\r\n        bRiskBordereau,\r\n        bClaimBordereau,\r\n        bPremiumBordereau,\r\n        lTypeofReportingBasis,\r\n        lReportingFrequency,\r\n        bOnAgreement,\r\n        lMasterPolicyActivityKey,\r\n        bBinderPolicy,\r\n        nNumberOfSections,\r\n        lMasterPolicySectionToAddKey,\r\n        bBinderHasCountryScope,\r\n        bBinderHasCurrencyScope,\r\n        dtMaximumExpiryDate,\r\n        bBinderScopeSubCodesRequired,\r\n        bLloydsBordereau,\r\n        sContactAddress1,\r\n        sContactAddress2,\r\n        sContactAddressCity,\r\n        sContactAddressPostCode,\r\n        lContactAddressStateKey,\r\n        sContactAddressTo,\r\n        bLinesWritten,\r\n        lPolicySummaryViewScreenKey,\r\n        nLinesVoidedorSigned,\r\n        bPassThroughWritten,\r\n        lTypeOfIndustryVerticalKey,\r\n        lImplementationSetupForNewOldRIKey,\r\n        bEnableNewRI,\r\n        bAuthorisedSurplusBroker,\r\n        bAuthorisedSecondaryBroker,\r\n        lTypeOfCancellationReasonKey,\r\n        dtLastVerEffectiveDate,\r\n        dtReinstatementDate,\r\n        sSurplusLinesSLANumber,\r\n        dtPolicyIssuedDate,\r\n        sOverridePolicyReference,\r\n        bAllowOverridePolicyReference,\r\n        nTotalBinderProportionPc,\r\n        nCountLinesSigned,\r\n        bRunPropRIGeneration,\r\n        bRIProfileEdited,\r\n        bReferenceUnique,\r\n        LTypeofRefError,\r\n        lTypeofInsuredPolicyholderLloyds,\r\n        nInsuredTotalNumberofEmployees,\r\n        dInsuredRevenueTurnover,\r\n        bReferredToLondon,\r\n        bIsCountryinEEA,\r\n        nCountCodeSplitsNotDone,\r\n        bPeriodReturnEndorsement,\r\n        bContraPeriodValueReturn,\r\n        dReplaceGrossForPeriod,\r\n        nDaysPolicyFromActivityExp,\r\n        bAggregationRequired,\r\n        bEndorsementAggregationRequired,\r\n        bDeclarationException,\r\n        bDeclarationExceptionApproved,\r\n        LMAJORTERRITORYKEY,\r\n        LTERRITORYKEY,\r\n        sSubmissionNo,\r\n        sBoundNo,\r\n        lProducerContactKey,\r\n        bInsuredPossibleDuplicate,\r\n        dtPhase1From,\r\n        dtPhase1To,\r\n        dPhase1PC,\r\n        dtPhase2From,\r\n        dtPhase2To,\r\n        dPhase2PC,\r\n        dtPhase3From,\r\n        dtPhase3To,\r\n        dPhase3PC,\r\n        nEarningPeriodDays,\r\n        bFailedComplianceChecks,\r\n        bComplianceChecksOverride,\r\n        lTypeofActivitySourceKey,\r\n        nBrokerVersionNumber,\r\n        bBound,\r\n        lTypeOFMasterFacilityKey,\r\n        lTypeOFFacilityKey,\r\n        lTypeOFAuthorityLevelKey,\r\n        lTypeOFSettlementKey,\r\n        bTreaty,\r\n        lQuoted,\r\n        lOfferValidityPeriod,\r\n        dtFinalslipReceived,\r\n        bRIAutoProfilingRequired,\r\n        sNotes,\r\n        lEndorementSubClassificationKey,\r\n        sAssuredDescription,\r\n        bIsReversal,\r\n        bIsFixedROE,\r\n        lCurrentPolicyCurrencyKey,\r\n        dCurrentCurrencyROE,\r\n        nCountAgencyFees,\r\n        bFailedLegalChecks,\r\n        bLegalChecksOverride,\r\n        bSubmissionReviewCreated,\r\n        dtWrittenDate,\r\n        lIsBound,\r\n        bPremiumAuthorized,\r\n        bRequiresKYCDivision,\r\n        bAgnecyFeesAmountTrigger,\r\n        bAgnecyFeesTypeTrigger,\r\n        bAgnecyFeesOrderTrigger,\r\n        bAgnecyFeesIncompatibleTrigger,\r\n        bAgnecyFeesOverwriteTrigger,\r\n        bCoverageElementRequired,\r\n        bEnableClassonCFI,\r\n        dw_loadts,\r\n        row_number() over (\r\n            partition by\r\n                lPolicyActivityKey,\r\n                lPolicyKey,\r\n                lPolicyFolderKey,\r\n                lTypeOfPolicyActivityKey,\r\n                lTypeOfEndorsementKey,\r\n                lTypeOfCorrectionKey,\r\n                nVersion,\r\n                lAuthorityCheckJoinKey,\r\n                lBoundAccountPeriodKey,\r\n                lWrittenAccountPeriodKey,\r\n                lSignedAccountPeriodKey,\r\n                dtCreated,\r\n                sPolicyNo,\r\n                sQuoteNo,\r\n                dtPeriodFrom,\r\n                dtPeriodTo,\r\n                dtPeriodToDisplay,\r\n                dtPeriodToTruncated,\r\n                nPeriodDaysPremium,\r\n                nPeriodDaysTruncated,\r\n                nPeriodDaysEarning,\r\n                bFullySuperceded,\r\n                bPeriodTBA,\r\n                dtSubmissionReceived,\r\n                dtSubmissionRespondBy,\r\n                dtQuoted,\r\n                dtQuoteOpenUntil,\r\n                bPriorActs,\r\n                dtRetroactiveDate,\r\n                dtTailEffectiveDate,\r\n                dtTailExpiryDate,\r\n                bMidnightStartTime,\r\n                dtNoticeOfCancellation,\r\n                nNoticeOfCancellationDays,\r\n                dtCancel,\r\n                lTypeOfCancellationKey,\r\n                lTypeOfCancelledByKey,\r\n                lPolicyActivityCurrencyKey,\r\n                dROE,\r\n                bSingleMarket,\r\n                bDeclaration,\r\n                lTypeOfPlacementKey,\r\n                bEndorsing,\r\n                bPartSigned,\r\n                lBrokerContactKey,\r\n                lBrokerLiaisonKey,\r\n                sBrokerReference,\r\n                lInsuredContactKey,\r\n                lTypeOfSICKey,\r\n                dtPriorAndPendingLitigation,\r\n                lTypeOfFSACategoryKey,\r\n                sSubmissionDescription,\r\n                dPeriodAnnualFactor,\r\n                lAgreementFolderKey,\r\n                lAgreementYearKey,\r\n                lAgreementActivityKey,\r\n                lAgreementPeriodKey,\r\n                lAgreementContactKey,\r\n                lAgreementContactBranchKey,\r\n                lTypeOfInsuranceKey,\r\n                lReinsuredContactKey,\r\n                bDelinked,\r\n                dCancelRateFactor,\r\n                bCloneComplete,\r\n                bCreateFac,\r\n                bFacCreated,\r\n                lAutoCreatedFacRIFolderKey,\r\n                lSurplusBrokerContactKey,\r\n                lSurplusBrokerLiaisonKey,\r\n                lTypeOfSurplusLineIndicatorKey,\r\n                sSurplusLineLicenseNoBroker,\r\n                sSurplusLineCertificatNoBroker,\r\n                bCopiedVersion,\r\n                lProductKey,\r\n                nCountCancellationReason,\r\n                nCountNonRenewReason,\r\n                nCountReinstatementReason,\r\n                nCountDeclinedReason,\r\n                nCountQuoteDeclinedReason,\r\n                lSurplusLineStateKey,\r\n                lAccountContactKey,\r\n                lProductVersionCarrierKey,\r\n                lProductVersionTemplateKey,\r\n                bInPeerReview,\r\n                bPeerReviewComplete,\r\n                dtPeerReviewComplete,\r\n                nPeerReviewUnderwritersReqd,\r\n                nCountPeerReviewComplete,\r\n                bRunOffPolicy,\r\n                lExpiringInsurerContactKey,\r\n                sExpiringInsurerReference,\r\n                lSecondaryBrokerContactKey,\r\n                lSecondBrokerContactLiaisonkey,\r\n                dtIssuanceReviewed,\r\n                sSurplusLineAddress1,\r\n                sSurplusLineAddress2,\r\n                sSurplusLineCity,\r\n                sSurplusLinePostCode,\r\n                sSurplusLinePhone,\r\n                sSurplusLineLicenseNoAgent,\r\n                sSurplusLineCertificateNoAgent,\r\n                sIssuanceAddressTo,\r\n                sIssuanceAddress1,\r\n                sIssuanceAddress2,\r\n                sIssuanceAddressCity,\r\n                lIssuanceAddressStateKey,\r\n                sIssuanceAddressPostCode,\r\n                lTypeOfAdmittedKey,\r\n                sSecondaryBrokerContact,\r\n                sSecondaryBrokerContactLiaison,\r\n                bConvertedPolicy,\r\n                bProductImported,\r\n                bIssuanceAddressSameAsInsureds,\r\n                bNonRenew,\r\n                lProducingOfficekey,\r\n                lPolicyClassKey,\r\n                sUMR,\r\n                sPolicyDescription,\r\n                lContractCertainKey,\r\n                dtWorksExpiryDate,\r\n                bIsContra,\r\n                nMaximumPeriod,\r\n                lProgramFolderKey,\r\n                lProgramYearKey,\r\n                bQuoteNTUReasonEntered,\r\n                bUndoQuoteNTUReasonEntered,\r\n                lUWHoldingContactKey,\r\n                nProductVersion,\r\n                lProductTemplateSectionAddkey,\r\n                lLawCountryKey,\r\n                lJurisdictionCountryKey,\r\n                sLocalReference,\r\n                lInsuredDomicileCountryKey,\r\n                lInsuredDomicileStatekey,\r\n                sInsuredPerContractWording,\r\n                bProductRuleResult,\r\n                lInforceAccumulationReportKey,\r\n                lQuoteAccumulationReportKey,\r\n                bCopyMasterCoverOntoDec,\r\n                lDeclarationProductKey,\r\n                bPolicyIsTransitBased,\r\n                bAuthorisationResult,\r\n                bMasterPolicyUpdated,\r\n                bProductHardRuleResult,\r\n                nDefaultQuoteDays,\r\n                lServiceofSuitKey,\r\n                lCreatedBy,\r\n                bLocationBasedProduct,\r\n                bProcessDeductions,\r\n                nUnassignedUnderwriters,\r\n                bUseAccountSubmission,\r\n                lCloneParentKey,\r\n                lTypeOfProductGroupKey,\r\n                nNumberOfLines,\r\n                lTypeofUSClassificationKey,\r\n                lJurisdictionStateKey,\r\n                lSurplusLineCountryKey,\r\n                bRenewalFlagProperty,\r\n                dtAgreementPeriodToMax,\r\n                bAuthorisedBroker,\r\n                bAgreementCountryScopeWrldwide,\r\n                nNullAgreementSections,\r\n                bMarketSourceIsMessaging,\r\n                lCoverholderContactKey,\r\n                bRiskBordereau,\r\n                bClaimBordereau,\r\n                bPremiumBordereau,\r\n                lTypeofReportingBasis,\r\n                lReportingFrequency,\r\n                bOnAgreement,\r\n                lMasterPolicyActivityKey,\r\n                bBinderPolicy,\r\n                nNumberOfSections,\r\n                lMasterPolicySectionToAddKey,\r\n                bBinderHasCountryScope,\r\n                bBinderHasCurrencyScope,\r\n                dtMaximumExpiryDate,\r\n                bBinderScopeSubCodesRequired,\r\n                bLloydsBordereau,\r\n                sContactAddress1,\r\n                sContactAddress2,\r\n                sContactAddressCity,\r\n                sContactAddressPostCode,\r\n                lContactAddressStateKey,\r\n                sContactAddressTo,\r\n                bLinesWritten,\r\n                lPolicySummaryViewScreenKey,\r\n                nLinesVoidedorSigned,\r\n                bPassThroughWritten,\r\n                lTypeOfIndustryVerticalKey,\r\n                lImplementationSetupForNewOldRIKey,\r\n                bEnableNewRI,\r\n                bAuthorisedSurplusBroker,\r\n                bAuthorisedSecondaryBroker,\r\n                lTypeOfCancellationReasonKey,\r\n                dtLastVerEffectiveDate,\r\n                dtReinstatementDate,\r\n                sSurplusLinesSLANumber,\r\n                dtPolicyIssuedDate,\r\n                sOverridePolicyReference,\r\n                bAllowOverridePolicyReference,\r\n                nTotalBinderProportionPc,\r\n                nCountLinesSigned,\r\n                bRunPropRIGeneration,\r\n                bRIProfileEdited,\r\n                bReferenceUnique,\r\n                LTypeofRefError,\r\n                lTypeofInsuredPolicyholderLloyds,\r\n                nInsuredTotalNumberofEmployees,\r\n                dInsuredRevenueTurnover,\r\n                bReferredToLondon,\r\n                bIsCountryinEEA,\r\n                nCountCodeSplitsNotDone,\r\n                bPeriodReturnEndorsement,\r\n                bContraPeriodValueReturn,\r\n                dReplaceGrossForPeriod,\r\n                nDaysPolicyFromActivityExp,\r\n                bAggregationRequired,\r\n                bEndorsementAggregationRequired,\r\n                bDeclarationException,\r\n                bDeclarationExceptionApproved,\r\n                LMAJORTERRITORYKEY,\r\n                LTERRITORYKEY,\r\n                sSubmissionNo,\r\n                sBoundNo,\r\n                lProducerContactKey,\r\n                bInsuredPossibleDuplicate,\r\n                dtPhase1From,\r\n                dtPhase1To,\r\n                dPhase1PC,\r\n                dtPhase2From,\r\n                dtPhase2To,\r\n                dPhase2PC,\r\n                dtPhase3From,\r\n                dtPhase3To,\r\n                dPhase3PC,\r\n                nEarningPeriodDays,\r\n                bFailedComplianceChecks,\r\n                bComplianceChecksOverride,\r\n                lTypeofActivitySourceKey,\r\n                nBrokerVersionNumber,\r\n                bBound,\r\n                lTypeOFMasterFacilityKey,\r\n                lTypeOFFacilityKey,\r\n                lTypeOFAuthorityLevelKey,\r\n                lTypeOFSettlementKey,\r\n                bTreaty,\r\n                lQuoted,\r\n                lOfferValidityPeriod,\r\n                dtFinalslipReceived,\r\n                bRIAutoProfilingRequired,\r\n                sNotes,\r\n                lEndorementSubClassificationKey,\r\n                sAssuredDescription,\r\n                bIsReversal,\r\n                bIsFixedROE,\r\n                lCurrentPolicyCurrencyKey,\r\n                dCurrentCurrencyROE,\r\n                nCountAgencyFees,\r\n                bFailedLegalChecks,\r\n                bLegalChecksOverride,\r\n                bSubmissionReviewCreated,\r\n                dtWrittenDate,\r\n                lIsBound,\r\n                bPremiumAuthorized,\r\n                bRequiresKYCDivision,\r\n                bAgnecyFeesAmountTrigger,\r\n                bAgnecyFeesTypeTrigger,\r\n                bAgnecyFeesOrderTrigger,\r\n                bAgnecyFeesIncompatibleTrigger,\r\n                bAgnecyFeesOverwriteTrigger,\r\n                bCoverageElementRequired,\r\n                bEnableClassonCFI\r\n            order by\r\n                dw_loadts\r\n        ) as dw_extract_order\r\n    from\r\n        policy_activity\r\n),\r\n\r\nfiltered as (\r\n    select * from ordered where dw_extract_order = 1\r\n),\r\n\r\nranged as (\r\n    select\r\n        lPolicyActivityKey,\r\n        lPolicyKey,\r\n        lPolicyFolderKey,\r\n        lTypeOfPolicyActivityKey,\r\n        lTypeOfEndorsementKey,\r\n        lTypeOfCorrectionKey,\r\n        nVersion,\r\n        lAuthorityCheckJoinKey,\r\n        lBoundAccountPeriodKey,\r\n        lWrittenAccountPeriodKey,\r\n        lSignedAccountPeriodKey,\r\n        dtCreated,\r\n        sPolicyNo,\r\n        sQuoteNo,\r\n        dtPeriodFrom,\r\n        dtPeriodTo,\r\n        dtPeriodToDisplay,\r\n        dtPeriodToTruncated,\r\n        nPeriodDaysPremium,\r\n        nPeriodDaysTruncated,\r\n        nPeriodDaysEarning,\r\n        bFullySuperceded,\r\n        bPeriodTBA,\r\n        dtSubmissionReceived,\r\n        dtSubmissionRespondBy,\r\n        dtQuoted,\r\n        dtQuoteOpenUntil,\r\n        bPriorActs,\r\n        dtRetroactiveDate,\r\n        dtTailEffectiveDate,\r\n        dtTailExpiryDate,\r\n        bMidnightStartTime,\r\n        dtNoticeOfCancellation,\r\n        nNoticeOfCancellationDays,\r\n        dtCancel,\r\n        lTypeOfCancellationKey,\r\n        lTypeOfCancelledByKey,\r\n        lPolicyActivityCurrencyKey,\r\n        dROE,\r\n        bSingleMarket,\r\n        bDeclaration,\r\n        lTypeOfPlacementKey,\r\n        bEndorsing,\r\n        bPartSigned,\r\n        lBrokerContactKey,\r\n        lBrokerLiaisonKey,\r\n        sBrokerReference,\r\n        lInsuredContactKey,\r\n        lTypeOfSICKey,\r\n        dtPriorAndPendingLitigation,\r\n        lTypeOfFSACategoryKey,\r\n        sSubmissionDescription,\r\n        dPeriodAnnualFactor,\r\n        lAgreementFolderKey,\r\n        lAgreementYearKey,\r\n        lAgreementActivityKey,\r\n        lAgreementPeriodKey,\r\n        lAgreementContactKey,\r\n        lAgreementContactBranchKey,\r\n        lTypeOfInsuranceKey,\r\n        lReinsuredContactKey,\r\n        bDelinked,\r\n        dCancelRateFactor,\r\n        bCloneComplete,\r\n        bCreateFac,\r\n        bFacCreated,\r\n        lAutoCreatedFacRIFolderKey,\r\n        lSurplusBrokerContactKey,\r\n        lSurplusBrokerLiaisonKey,\r\n        lTypeOfSurplusLineIndicatorKey,\r\n        sSurplusLineLicenseNoBroker,\r\n        sSurplusLineCertificatNoBroker,\r\n        bCopiedVersion,\r\n        lProductKey,\r\n        nCountCancellationReason,\r\n        nCountNonRenewReason,\r\n        nCountReinstatementReason,\r\n        nCountDeclinedReason,\r\n        nCountQuoteDeclinedReason,\r\n        lSurplusLineStateKey,\r\n        lAccountContactKey,\r\n        lProductVersionCarrierKey,\r\n        lProductVersionTemplateKey,\r\n        bInPeerReview,\r\n        bPeerReviewComplete,\r\n        dtPeerReviewComplete,\r\n        nPeerReviewUnderwritersReqd,\r\n        nCountPeerReviewComplete,\r\n        bRunOffPolicy,\r\n        lExpiringInsurerContactKey,\r\n        sExpiringInsurerReference,\r\n        lSecondaryBrokerContactKey,\r\n        lSecondBrokerContactLiaisonkey,\r\n        dtIssuanceReviewed,\r\n        sSurplusLineAddress1,\r\n        sSurplusLineAddress2,\r\n        sSurplusLineCity,\r\n        sSurplusLinePostCode,\r\n        sSurplusLinePhone,\r\n        sSurplusLineLicenseNoAgent,\r\n        sSurplusLineCertificateNoAgent,\r\n        sIssuanceAddressTo,\r\n        sIssuanceAddress1,\r\n        sIssuanceAddress2,\r\n        sIssuanceAddressCity,\r\n        lIssuanceAddressStateKey,\r\n        sIssuanceAddressPostCode,\r\n        lTypeOfAdmittedKey,\r\n        sSecondaryBrokerContact,\r\n        sSecondaryBrokerContactLiaison,\r\n        bConvertedPolicy,\r\n        bProductImported,\r\n        bIssuanceAddressSameAsInsureds,\r\n        bNonRenew,\r\n        lProducingOfficekey,\r\n        lPolicyClassKey,\r\n        sUMR,\r\n        sPolicyDescription,\r\n        lContractCertainKey,\r\n        dtWorksExpiryDate,\r\n        bIsContra,\r\n        nMaximumPeriod,\r\n        lProgramFolderKey,\r\n        lProgramYearKey,\r\n        bQuoteNTUReasonEntered,\r\n        bUndoQuoteNTUReasonEntered,\r\n        lUWHoldingContactKey,\r\n        nProductVersion,\r\n        lProductTemplateSectionAddkey,\r\n        lLawCountryKey,\r\n        lJurisdictionCountryKey,\r\n        sLocalReference,\r\n        lInsuredDomicileCountryKey,\r\n        lInsuredDomicileStatekey,\r\n        sInsuredPerContractWording,\r\n        bProductRuleResult,\r\n        lInforceAccumulationReportKey,\r\n        lQuoteAccumulationReportKey,\r\n        bCopyMasterCoverOntoDec,\r\n        lDeclarationProductKey,\r\n        bPolicyIsTransitBased,\r\n        bAuthorisationResult,\r\n        bMasterPolicyUpdated,\r\n        bProductHardRuleResult,\r\n        nDefaultQuoteDays,\r\n        lServiceofSuitKey,\r\n        lCreatedBy,\r\n        bLocationBasedProduct,\r\n        bProcessDeductions,\r\n        nUnassignedUnderwriters,\r\n        bUseAccountSubmission,\r\n        lCloneParentKey,\r\n        lTypeOfProductGroupKey,\r\n        nNumberOfLines,\r\n        lTypeofUSClassificationKey,\r\n        lJurisdictionStateKey,\r\n        lSurplusLineCountryKey,\r\n        bRenewalFlagProperty,\r\n        dtAgreementPeriodToMax,\r\n        bAuthorisedBroker,\r\n        bAgreementCountryScopeWrldwide,\r\n        nNullAgreementSections,\r\n        bMarketSourceIsMessaging,\r\n        lCoverholderContactKey,\r\n        bRiskBordereau,\r\n        bClaimBordereau,\r\n        bPremiumBordereau,\r\n        lTypeofReportingBasis,\r\n        lReportingFrequency,\r\n        bOnAgreement,\r\n        lMasterPolicyActivityKey,\r\n        bBinderPolicy,\r\n        nNumberOfSections,\r\n        lMasterPolicySectionToAddKey,\r\n        bBinderHasCountryScope,\r\n        bBinderHasCurrencyScope,\r\n        dtMaximumExpiryDate,\r\n        bBinderScopeSubCodesRequired,\r\n        bLloydsBordereau,\r\n        sContactAddress1,\r\n        sContactAddress2,\r\n        sContactAddressCity,\r\n        sContactAddressPostCode,\r\n        lContactAddressStateKey,\r\n        sContactAddressTo,\r\n        bLinesWritten,\r\n        lPolicySummaryViewScreenKey,\r\n        nLinesVoidedorSigned,\r\n        bPassThroughWritten,\r\n        lTypeOfIndustryVerticalKey,\r\n        lImplementationSetupForNewOldRIKey,\r\n        bEnableNewRI,\r\n        bAuthorisedSurplusBroker,\r\n        bAuthorisedSecondaryBroker,\r\n        lTypeOfCancellationReasonKey,\r\n        dtLastVerEffectiveDate,\r\n        dtReinstatementDate,\r\n        sSurplusLinesSLANumber,\r\n        dtPolicyIssuedDate,\r\n        sOverridePolicyReference,\r\n        bAllowOverridePolicyReference,\r\n        nTotalBinderProportionPc,\r\n        nCountLinesSigned,\r\n        bRunPropRIGeneration,\r\n        bRIProfileEdited,\r\n        bReferenceUnique,\r\n        LTypeofRefError,\r\n        lTypeofInsuredPolicyholderLloyds,\r\n        nInsuredTotalNumberofEmployees,\r\n        dInsuredRevenueTurnover,\r\n        bReferredToLondon,\r\n        bIsCountryinEEA,\r\n        nCountCodeSplitsNotDone,\r\n        bPeriodReturnEndorsement,\r\n        bContraPeriodValueReturn,\r\n        dReplaceGrossForPeriod,\r\n        nDaysPolicyFromActivityExp,\r\n        bAggregationRequired,\r\n        bEndorsementAggregationRequired,\r\n        bDeclarationException,\r\n        bDeclarationExceptionApproved,\r\n        LMAJORTERRITORYKEY,\r\n        LTERRITORYKEY,\r\n        sSubmissionNo,\r\n        sBoundNo,\r\n        lProducerContactKey,\r\n        bInsuredPossibleDuplicate,\r\n        dtPhase1From,\r\n        dtPhase1To,\r\n        dPhase1PC,\r\n        dtPhase2From,\r\n        dtPhase2To,\r\n        dPhase2PC,\r\n        dtPhase3From,\r\n        dtPhase3To,\r\n        dPhase3PC,\r\n        nEarningPeriodDays,\r\n        bFailedComplianceChecks,\r\n        bComplianceChecksOverride,\r\n        lTypeofActivitySourceKey,\r\n        nBrokerVersionNumber,\r\n        bBound,\r\n        lTypeOFMasterFacilityKey,\r\n        lTypeOFFacilityKey,\r\n        lTypeOFAuthorityLevelKey,\r\n        lTypeOFSettlementKey,\r\n        bTreaty,\r\n        lQuoted,\r\n        lOfferValidityPeriod,\r\n        dtFinalslipReceived,\r\n        bRIAutoProfilingRequired,\r\n        sNotes,\r\n        lEndorementSubClassificationKey,\r\n        sAssuredDescription,\r\n        bIsReversal,\r\n        bIsFixedROE,\r\n        lCurrentPolicyCurrencyKey,\r\n        dCurrentCurrencyROE,\r\n        nCountAgencyFees,\r\n        bFailedLegalChecks,\r\n        bLegalChecksOverride,\r\n        bSubmissionReviewCreated,\r\n        dtWrittenDate,\r\n        lIsBound,\r\n        bPremiumAuthorized,\r\n        bRequiresKYCDivision,\r\n        bAgnecyFeesAmountTrigger,\r\n        bAgnecyFeesTypeTrigger,\r\n        bAgnecyFeesOrderTrigger,\r\n        bAgnecyFeesIncompatibleTrigger,\r\n        bAgnecyFeesOverwriteTrigger,\r\n        bCoverageElementRequired,\r\n        bEnableClassonCFI,\r\n        dw_loadts as _valid_from,\r\n        lead(dw_loadts) over (partition by lPolicyActivityKey order by dw_loadts) as _valid_to\r\n    from\r\n        filtered\r\n)\r\n\r\nselect * from ranged", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "scd\\scd_policy_activity.sql", "original_file_path": "models\\scd\\scd_policy_activity.sql", "name": "scd_policy_activity", "alias": "scd_policy_activity", "checksum": {"name": "sha256", "checksum": "336d4bc6956f3a7467f8c2a35f3b5a407675bca282ea07bb4890eb30041d5f91"}, "tags": ["InwardPremium"], "refs": [], "sources": [["dbo", "policy_activity"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": "iginsure://models\\scd\\scd.yml", "compiled_path": "target\\compiled\\iginsure\\models\\scd\\scd_policy_activity.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "docs": {"show": false}, "tags": ["InwardPremium"]}, "created_at": 1701786801.7910817, "compiled_code": "-- This file is automatically generated\n\n\n\nwith\n\npolicy_activity as (\n    select * from \"IGI_PROD_DW\".\"dbo\".\"PolicyActivity\"\n),\n\nordered as (\n    select\n        lPolicyActivityKey,\n        lPolicyKey,\n        lPolicyFolderKey,\n        lTypeOfPolicyActivityKey,\n        lTypeOfEndorsementKey,\n        lTypeOfCorrectionKey,\n        nVersion,\n        lAuthorityCheckJoinKey,\n        lBoundAccountPeriodKey,\n        lWrittenAccountPeriodKey,\n        lSignedAccountPeriodKey,\n        dtCreated,\n        sPolicyNo,\n        sQuoteNo,\n        dtPeriodFrom,\n        dtPeriodTo,\n        dtPeriodToDisplay,\n        dtPeriodToTruncated,\n        nPeriodDaysPremium,\n        nPeriodDaysTruncated,\n        nPeriodDaysEarning,\n        bFullySuperceded,\n        bPeriodTBA,\n        dtSubmissionReceived,\n        dtSubmissionRespondBy,\n        dtQuoted,\n        dtQuoteOpenUntil,\n        bPriorActs,\n        dtRetroactiveDate,\n        dtTailEffectiveDate,\n        dtTailExpiryDate,\n        bMidnightStartTime,\n        dtNoticeOfCancellation,\n        nNoticeOfCancellationDays,\n        dtCancel,\n        lTypeOfCancellationKey,\n        lTypeOfCancelledByKey,\n        lPolicyActivityCurrencyKey,\n        dROE,\n        bSingleMarket,\n        bDeclaration,\n        lTypeOfPlacementKey,\n        bEndorsing,\n        bPartSigned,\n        lBrokerContactKey,\n        lBrokerLiaisonKey,\n        sBrokerReference,\n        lInsuredContactKey,\n        lTypeOfSICKey,\n        dtPriorAndPendingLitigation,\n        lTypeOfFSACategoryKey,\n        sSubmissionDescription,\n        dPeriodAnnualFactor,\n        lAgreementFolderKey,\n        lAgreementYearKey,\n        lAgreementActivityKey,\n        lAgreementPeriodKey,\n        lAgreementContactKey,\n        lAgreementContactBranchKey,\n        lTypeOfInsuranceKey,\n        lReinsuredContactKey,\n        bDelinked,\n        dCancelRateFactor,\n        bCloneComplete,\n        bCreateFac,\n        bFacCreated,\n        lAutoCreatedFacRIFolderKey,\n        lSurplusBrokerContactKey,\n        lSurplusBrokerLiaisonKey,\n        lTypeOfSurplusLineIndicatorKey,\n        sSurplusLineLicenseNoBroker,\n        sSurplusLineCertificatNoBroker,\n        bCopiedVersion,\n        lProductKey,\n        nCountCancellationReason,\n        nCountNonRenewReason,\n        nCountReinstatementReason,\n        nCountDeclinedReason,\n        nCountQuoteDeclinedReason,\n        lSurplusLineStateKey,\n        lAccountContactKey,\n        lProductVersionCarrierKey,\n        lProductVersionTemplateKey,\n        bInPeerReview,\n        bPeerReviewComplete,\n        dtPeerReviewComplete,\n        nPeerReviewUnderwritersReqd,\n        nCountPeerReviewComplete,\n        bRunOffPolicy,\n        lExpiringInsurerContactKey,\n        sExpiringInsurerReference,\n        lSecondaryBrokerContactKey,\n        lSecondBrokerContactLiaisonkey,\n        dtIssuanceReviewed,\n        sSurplusLineAddress1,\n        sSurplusLineAddress2,\n        sSurplusLineCity,\n        sSurplusLinePostCode,\n        sSurplusLinePhone,\n        sSurplusLineLicenseNoAgent,\n        sSurplusLineCertificateNoAgent,\n        sIssuanceAddressTo,\n        sIssuanceAddress1,\n        sIssuanceAddress2,\n        sIssuanceAddressCity,\n        lIssuanceAddressStateKey,\n        sIssuanceAddressPostCode,\n        lTypeOfAdmittedKey,\n        sSecondaryBrokerContact,\n        sSecondaryBrokerContactLiaison,\n        bConvertedPolicy,\n        bProductImported,\n        bIssuanceAddressSameAsInsureds,\n        bNonRenew,\n        lProducingOfficekey,\n        lPolicyClassKey,\n        sUMR,\n        sPolicyDescription,\n        lContractCertainKey,\n        dtWorksExpiryDate,\n        bIsContra,\n        nMaximumPeriod,\n        lProgramFolderKey,\n        lProgramYearKey,\n        bQuoteNTUReasonEntered,\n        bUndoQuoteNTUReasonEntered,\n        lUWHoldingContactKey,\n        nProductVersion,\n        lProductTemplateSectionAddkey,\n        lLawCountryKey,\n        lJurisdictionCountryKey,\n        sLocalReference,\n        lInsuredDomicileCountryKey,\n        lInsuredDomicileStatekey,\n        sInsuredPerContractWording,\n        bProductRuleResult,\n        lInforceAccumulationReportKey,\n        lQuoteAccumulationReportKey,\n        bCopyMasterCoverOntoDec,\n        lDeclarationProductKey,\n        bPolicyIsTransitBased,\n        bAuthorisationResult,\n        bMasterPolicyUpdated,\n        bProductHardRuleResult,\n        nDefaultQuoteDays,\n        lServiceofSuitKey,\n        lCreatedBy,\n        bLocationBasedProduct,\n        bProcessDeductions,\n        nUnassignedUnderwriters,\n        bUseAccountSubmission,\n        lCloneParentKey,\n        lTypeOfProductGroupKey,\n        nNumberOfLines,\n        lTypeofUSClassificationKey,\n        lJurisdictionStateKey,\n        lSurplusLineCountryKey,\n        bRenewalFlagProperty,\n        dtAgreementPeriodToMax,\n        bAuthorisedBroker,\n        bAgreementCountryScopeWrldwide,\n        nNullAgreementSections,\n        bMarketSourceIsMessaging,\n        lCoverholderContactKey,\n        bRiskBordereau,\n        bClaimBordereau,\n        bPremiumBordereau,\n        lTypeofReportingBasis,\n        lReportingFrequency,\n        bOnAgreement,\n        lMasterPolicyActivityKey,\n        bBinderPolicy,\n        nNumberOfSections,\n        lMasterPolicySectionToAddKey,\n        bBinderHasCountryScope,\n        bBinderHasCurrencyScope,\n        dtMaximumExpiryDate,\n        bBinderScopeSubCodesRequired,\n        bLloydsBordereau,\n        sContactAddress1,\n        sContactAddress2,\n        sContactAddressCity,\n        sContactAddressPostCode,\n        lContactAddressStateKey,\n        sContactAddressTo,\n        bLinesWritten,\n        lPolicySummaryViewScreenKey,\n        nLinesVoidedorSigned,\n        bPassThroughWritten,\n        lTypeOfIndustryVerticalKey,\n        lImplementationSetupForNewOldRIKey,\n        bEnableNewRI,\n        bAuthorisedSurplusBroker,\n        bAuthorisedSecondaryBroker,\n        lTypeOfCancellationReasonKey,\n        dtLastVerEffectiveDate,\n        dtReinstatementDate,\n        sSurplusLinesSLANumber,\n        dtPolicyIssuedDate,\n        sOverridePolicyReference,\n        bAllowOverridePolicyReference,\n        nTotalBinderProportionPc,\n        nCountLinesSigned,\n        bRunPropRIGeneration,\n        bRIProfileEdited,\n        bReferenceUnique,\n        LTypeofRefError,\n        lTypeofInsuredPolicyholderLloyds,\n        nInsuredTotalNumberofEmployees,\n        dInsuredRevenueTurnover,\n        bReferredToLondon,\n        bIsCountryinEEA,\n        nCountCodeSplitsNotDone,\n        bPeriodReturnEndorsement,\n        bContraPeriodValueReturn,\n        dReplaceGrossForPeriod,\n        nDaysPolicyFromActivityExp,\n        bAggregationRequired,\n        bEndorsementAggregationRequired,\n        bDeclarationException,\n        bDeclarationExceptionApproved,\n        LMAJORTERRITORYKEY,\n        LTERRITORYKEY,\n        sSubmissionNo,\n        sBoundNo,\n        lProducerContactKey,\n        bInsuredPossibleDuplicate,\n        dtPhase1From,\n        dtPhase1To,\n        dPhase1PC,\n        dtPhase2From,\n        dtPhase2To,\n        dPhase2PC,\n        dtPhase3From,\n        dtPhase3To,\n        dPhase3PC,\n        nEarningPeriodDays,\n        bFailedComplianceChecks,\n        bComplianceChecksOverride,\n        lTypeofActivitySourceKey,\n        nBrokerVersionNumber,\n        bBound,\n        lTypeOFMasterFacilityKey,\n        lTypeOFFacilityKey,\n        lTypeOFAuthorityLevelKey,\n        lTypeOFSettlementKey,\n        bTreaty,\n        lQuoted,\n        lOfferValidityPeriod,\n        dtFinalslipReceived,\n        bRIAutoProfilingRequired,\n        sNotes,\n        lEndorementSubClassificationKey,\n        sAssuredDescription,\n        bIsReversal,\n        bIsFixedROE,\n        lCurrentPolicyCurrencyKey,\n        dCurrentCurrencyROE,\n        nCountAgencyFees,\n        bFailedLegalChecks,\n        bLegalChecksOverride,\n        bSubmissionReviewCreated,\n        dtWrittenDate,\n        lIsBound,\n        bPremiumAuthorized,\n        bRequiresKYCDivision,\n        bAgnecyFeesAmountTrigger,\n        bAgnecyFeesTypeTrigger,\n        bAgnecyFeesOrderTrigger,\n        bAgnecyFeesIncompatibleTrigger,\n        bAgnecyFeesOverwriteTrigger,\n        bCoverageElementRequired,\n        bEnableClassonCFI,\n        dw_loadts,\n        row_number() over (\n            partition by\n                lPolicyActivityKey,\n                lPolicyKey,\n                lPolicyFolderKey,\n                lTypeOfPolicyActivityKey,\n                lTypeOfEndorsementKey,\n                lTypeOfCorrectionKey,\n                nVersion,\n                lAuthorityCheckJoinKey,\n                lBoundAccountPeriodKey,\n                lWrittenAccountPeriodKey,\n                lSignedAccountPeriodKey,\n                dtCreated,\n                sPolicyNo,\n                sQuoteNo,\n                dtPeriodFrom,\n                dtPeriodTo,\n                dtPeriodToDisplay,\n                dtPeriodToTruncated,\n                nPeriodDaysPremium,\n                nPeriodDaysTruncated,\n                nPeriodDaysEarning,\n                bFullySuperceded,\n                bPeriodTBA,\n                dtSubmissionReceived,\n                dtSubmissionRespondBy,\n                dtQuoted,\n                dtQuoteOpenUntil,\n                bPriorActs,\n                dtRetroactiveDate,\n                dtTailEffectiveDate,\n                dtTailExpiryDate,\n                bMidnightStartTime,\n                dtNoticeOfCancellation,\n                nNoticeOfCancellationDays,\n                dtCancel,\n                lTypeOfCancellationKey,\n                lTypeOfCancelledByKey,\n                lPolicyActivityCurrencyKey,\n                dROE,\n                bSingleMarket,\n                bDeclaration,\n                lTypeOfPlacementKey,\n                bEndorsing,\n                bPartSigned,\n                lBrokerContactKey,\n                lBrokerLiaisonKey,\n                sBrokerReference,\n                lInsuredContactKey,\n                lTypeOfSICKey,\n                dtPriorAndPendingLitigation,\n                lTypeOfFSACategoryKey,\n                sSubmissionDescription,\n                dPeriodAnnualFactor,\n                lAgreementFolderKey,\n                lAgreementYearKey,\n                lAgreementActivityKey,\n                lAgreementPeriodKey,\n                lAgreementContactKey,\n                lAgreementContactBranchKey,\n                lTypeOfInsuranceKey,\n                lReinsuredContactKey,\n                bDelinked,\n                dCancelRateFactor,\n                bCloneComplete,\n                bCreateFac,\n                bFacCreated,\n                lAutoCreatedFacRIFolderKey,\n                lSurplusBrokerContactKey,\n                lSurplusBrokerLiaisonKey,\n                lTypeOfSurplusLineIndicatorKey,\n                sSurplusLineLicenseNoBroker,\n                sSurplusLineCertificatNoBroker,\n                bCopiedVersion,\n                lProductKey,\n                nCountCancellationReason,\n                nCountNonRenewReason,\n                nCountReinstatementReason,\n                nCountDeclinedReason,\n                nCountQuoteDeclinedReason,\n                lSurplusLineStateKey,\n                lAccountContactKey,\n                lProductVersionCarrierKey,\n                lProductVersionTemplateKey,\n                bInPeerReview,\n                bPeerReviewComplete,\n                dtPeerReviewComplete,\n                nPeerReviewUnderwritersReqd,\n                nCountPeerReviewComplete,\n                bRunOffPolicy,\n                lExpiringInsurerContactKey,\n                sExpiringInsurerReference,\n                lSecondaryBrokerContactKey,\n                lSecondBrokerContactLiaisonkey,\n                dtIssuanceReviewed,\n                sSurplusLineAddress1,\n                sSurplusLineAddress2,\n                sSurplusLineCity,\n                sSurplusLinePostCode,\n                sSurplusLinePhone,\n                sSurplusLineLicenseNoAgent,\n                sSurplusLineCertificateNoAgent,\n                sIssuanceAddressTo,\n                sIssuanceAddress1,\n                sIssuanceAddress2,\n                sIssuanceAddressCity,\n                lIssuanceAddressStateKey,\n                sIssuanceAddressPostCode,\n                lTypeOfAdmittedKey,\n                sSecondaryBrokerContact,\n                sSecondaryBrokerContactLiaison,\n                bConvertedPolicy,\n                bProductImported,\n                bIssuanceAddressSameAsInsureds,\n                bNonRenew,\n                lProducingOfficekey,\n                lPolicyClassKey,\n                sUMR,\n                sPolicyDescription,\n                lContractCertainKey,\n                dtWorksExpiryDate,\n                bIsContra,\n                nMaximumPeriod,\n                lProgramFolderKey,\n                lProgramYearKey,\n                bQuoteNTUReasonEntered,\n                bUndoQuoteNTUReasonEntered,\n                lUWHoldingContactKey,\n                nProductVersion,\n                lProductTemplateSectionAddkey,\n                lLawCountryKey,\n                lJurisdictionCountryKey,\n                sLocalReference,\n                lInsuredDomicileCountryKey,\n                lInsuredDomicileStatekey,\n                sInsuredPerContractWording,\n                bProductRuleResult,\n                lInforceAccumulationReportKey,\n                lQuoteAccumulationReportKey,\n                bCopyMasterCoverOntoDec,\n                lDeclarationProductKey,\n                bPolicyIsTransitBased,\n                bAuthorisationResult,\n                bMasterPolicyUpdated,\n                bProductHardRuleResult,\n                nDefaultQuoteDays,\n                lServiceofSuitKey,\n                lCreatedBy,\n                bLocationBasedProduct,\n                bProcessDeductions,\n                nUnassignedUnderwriters,\n                bUseAccountSubmission,\n                lCloneParentKey,\n                lTypeOfProductGroupKey,\n                nNumberOfLines,\n                lTypeofUSClassificationKey,\n                lJurisdictionStateKey,\n                lSurplusLineCountryKey,\n                bRenewalFlagProperty,\n                dtAgreementPeriodToMax,\n                bAuthorisedBroker,\n                bAgreementCountryScopeWrldwide,\n                nNullAgreementSections,\n                bMarketSourceIsMessaging,\n                lCoverholderContactKey,\n                bRiskBordereau,\n                bClaimBordereau,\n                bPremiumBordereau,\n                lTypeofReportingBasis,\n                lReportingFrequency,\n                bOnAgreement,\n                lMasterPolicyActivityKey,\n                bBinderPolicy,\n                nNumberOfSections,\n                lMasterPolicySectionToAddKey,\n                bBinderHasCountryScope,\n                bBinderHasCurrencyScope,\n                dtMaximumExpiryDate,\n                bBinderScopeSubCodesRequired,\n                bLloydsBordereau,\n                sContactAddress1,\n                sContactAddress2,\n                sContactAddressCity,\n                sContactAddressPostCode,\n                lContactAddressStateKey,\n                sContactAddressTo,\n                bLinesWritten,\n                lPolicySummaryViewScreenKey,\n                nLinesVoidedorSigned,\n                bPassThroughWritten,\n                lTypeOfIndustryVerticalKey,\n                lImplementationSetupForNewOldRIKey,\n                bEnableNewRI,\n                bAuthorisedSurplusBroker,\n                bAuthorisedSecondaryBroker,\n                lTypeOfCancellationReasonKey,\n                dtLastVerEffectiveDate,\n                dtReinstatementDate,\n                sSurplusLinesSLANumber,\n                dtPolicyIssuedDate,\n                sOverridePolicyReference,\n                bAllowOverridePolicyReference,\n                nTotalBinderProportionPc,\n                nCountLinesSigned,\n                bRunPropRIGeneration,\n                bRIProfileEdited,\n                bReferenceUnique,\n                LTypeofRefError,\n                lTypeofInsuredPolicyholderLloyds,\n                nInsuredTotalNumberofEmployees,\n                dInsuredRevenueTurnover,\n                bReferredToLondon,\n                bIsCountryinEEA,\n                nCountCodeSplitsNotDone,\n                bPeriodReturnEndorsement,\n                bContraPeriodValueReturn,\n                dReplaceGrossForPeriod,\n                nDaysPolicyFromActivityExp,\n                bAggregationRequired,\n                bEndorsementAggregationRequired,\n                bDeclarationException,\n                bDeclarationExceptionApproved,\n                LMAJORTERRITORYKEY,\n                LTERRITORYKEY,\n                sSubmissionNo,\n                sBoundNo,\n                lProducerContactKey,\n                bInsuredPossibleDuplicate,\n                dtPhase1From,\n                dtPhase1To,\n                dPhase1PC,\n                dtPhase2From,\n                dtPhase2To,\n                dPhase2PC,\n                dtPhase3From,\n                dtPhase3To,\n                dPhase3PC,\n                nEarningPeriodDays,\n                bFailedComplianceChecks,\n                bComplianceChecksOverride,\n                lTypeofActivitySourceKey,\n                nBrokerVersionNumber,\n                bBound,\n                lTypeOFMasterFacilityKey,\n                lTypeOFFacilityKey,\n                lTypeOFAuthorityLevelKey,\n                lTypeOFSettlementKey,\n                bTreaty,\n                lQuoted,\n                lOfferValidityPeriod,\n                dtFinalslipReceived,\n                bRIAutoProfilingRequired,\n                sNotes,\n                lEndorementSubClassificationKey,\n                sAssuredDescription,\n                bIsReversal,\n                bIsFixedROE,\n                lCurrentPolicyCurrencyKey,\n                dCurrentCurrencyROE,\n                nCountAgencyFees,\n                bFailedLegalChecks,\n                bLegalChecksOverride,\n                bSubmissionReviewCreated,\n                dtWrittenDate,\n                lIsBound,\n                bPremiumAuthorized,\n                bRequiresKYCDivision,\n                bAgnecyFeesAmountTrigger,\n                bAgnecyFeesTypeTrigger,\n                bAgnecyFeesOrderTrigger,\n                bAgnecyFeesIncompatibleTrigger,\n                bAgnecyFeesOverwriteTrigger,\n                bCoverageElementRequired,\n                bEnableClassonCFI\n            order by\n                dw_loadts\n        ) as dw_extract_order\n    from\n        policy_activity\n),\n\nfiltered as (\n    select * from ordered where dw_extract_order = 1\n),\n\nranged as (\n    select\n        lPolicyActivityKey,\n        lPolicyKey,\n        lPolicyFolderKey,\n        lTypeOfPolicyActivityKey,\n        lTypeOfEndorsementKey,\n        lTypeOfCorrectionKey,\n        nVersion,\n        lAuthorityCheckJoinKey,\n        lBoundAccountPeriodKey,\n        lWrittenAccountPeriodKey,\n        lSignedAccountPeriodKey,\n        dtCreated,\n        sPolicyNo,\n        sQuoteNo,\n        dtPeriodFrom,\n        dtPeriodTo,\n        dtPeriodToDisplay,\n        dtPeriodToTruncated,\n        nPeriodDaysPremium,\n        nPeriodDaysTruncated,\n        nPeriodDaysEarning,\n        bFullySuperceded,\n        bPeriodTBA,\n        dtSubmissionReceived,\n        dtSubmissionRespondBy,\n        dtQuoted,\n        dtQuoteOpenUntil,\n        bPriorActs,\n        dtRetroactiveDate,\n        dtTailEffectiveDate,\n        dtTailExpiryDate,\n        bMidnightStartTime,\n        dtNoticeOfCancellation,\n        nNoticeOfCancellationDays,\n        dtCancel,\n        lTypeOfCancellationKey,\n        lTypeOfCancelledByKey,\n        lPolicyActivityCurrencyKey,\n        dROE,\n        bSingleMarket,\n        bDeclaration,\n        lTypeOfPlacementKey,\n        bEndorsing,\n        bPartSigned,\n        lBrokerContactKey,\n        lBrokerLiaisonKey,\n        sBrokerReference,\n        lInsuredContactKey,\n        lTypeOfSICKey,\n        dtPriorAndPendingLitigation,\n        lTypeOfFSACategoryKey,\n        sSubmissionDescription,\n        dPeriodAnnualFactor,\n        lAgreementFolderKey,\n        lAgreementYearKey,\n        lAgreementActivityKey,\n        lAgreementPeriodKey,\n        lAgreementContactKey,\n        lAgreementContactBranchKey,\n        lTypeOfInsuranceKey,\n        lReinsuredContactKey,\n        bDelinked,\n        dCancelRateFactor,\n        bCloneComplete,\n        bCreateFac,\n        bFacCreated,\n        lAutoCreatedFacRIFolderKey,\n        lSurplusBrokerContactKey,\n        lSurplusBrokerLiaisonKey,\n        lTypeOfSurplusLineIndicatorKey,\n        sSurplusLineLicenseNoBroker,\n        sSurplusLineCertificatNoBroker,\n        bCopiedVersion,\n        lProductKey,\n        nCountCancellationReason,\n        nCountNonRenewReason,\n        nCountReinstatementReason,\n        nCountDeclinedReason,\n        nCountQuoteDeclinedReason,\n        lSurplusLineStateKey,\n        lAccountContactKey,\n        lProductVersionCarrierKey,\n        lProductVersionTemplateKey,\n        bInPeerReview,\n        bPeerReviewComplete,\n        dtPeerReviewComplete,\n        nPeerReviewUnderwritersReqd,\n        nCountPeerReviewComplete,\n        bRunOffPolicy,\n        lExpiringInsurerContactKey,\n        sExpiringInsurerReference,\n        lSecondaryBrokerContactKey,\n        lSecondBrokerContactLiaisonkey,\n        dtIssuanceReviewed,\n        sSurplusLineAddress1,\n        sSurplusLineAddress2,\n        sSurplusLineCity,\n        sSurplusLinePostCode,\n        sSurplusLinePhone,\n        sSurplusLineLicenseNoAgent,\n        sSurplusLineCertificateNoAgent,\n        sIssuanceAddressTo,\n        sIssuanceAddress1,\n        sIssuanceAddress2,\n        sIssuanceAddressCity,\n        lIssuanceAddressStateKey,\n        sIssuanceAddressPostCode,\n        lTypeOfAdmittedKey,\n        sSecondaryBrokerContact,\n        sSecondaryBrokerContactLiaison,\n        bConvertedPolicy,\n        bProductImported,\n        bIssuanceAddressSameAsInsureds,\n        bNonRenew,\n        lProducingOfficekey,\n        lPolicyClassKey,\n        sUMR,\n        sPolicyDescription,\n        lContractCertainKey,\n        dtWorksExpiryDate,\n        bIsContra,\n        nMaximumPeriod,\n        lProgramFolderKey,\n        lProgramYearKey,\n        bQuoteNTUReasonEntered,\n        bUndoQuoteNTUReasonEntered,\n        lUWHoldingContactKey,\n        nProductVersion,\n        lProductTemplateSectionAddkey,\n        lLawCountryKey,\n        lJurisdictionCountryKey,\n        sLocalReference,\n        lInsuredDomicileCountryKey,\n        lInsuredDomicileStatekey,\n        sInsuredPerContractWording,\n        bProductRuleResult,\n        lInforceAccumulationReportKey,\n        lQuoteAccumulationReportKey,\n        bCopyMasterCoverOntoDec,\n        lDeclarationProductKey,\n        bPolicyIsTransitBased,\n        bAuthorisationResult,\n        bMasterPolicyUpdated,\n        bProductHardRuleResult,\n        nDefaultQuoteDays,\n        lServiceofSuitKey,\n        lCreatedBy,\n        bLocationBasedProduct,\n        bProcessDeductions,\n        nUnassignedUnderwriters,\n        bUseAccountSubmission,\n        lCloneParentKey,\n        lTypeOfProductGroupKey,\n        nNumberOfLines,\n        lTypeofUSClassificationKey,\n        lJurisdictionStateKey,\n        lSurplusLineCountryKey,\n        bRenewalFlagProperty,\n        dtAgreementPeriodToMax,\n        bAuthorisedBroker,\n        bAgreementCountryScopeWrldwide,\n        nNullAgreementSections,\n        bMarketSourceIsMessaging,\n        lCoverholderContactKey,\n        bRiskBordereau,\n        bClaimBordereau,\n        bPremiumBordereau,\n        lTypeofReportingBasis,\n        lReportingFrequency,\n        bOnAgreement,\n        lMasterPolicyActivityKey,\n        bBinderPolicy,\n        nNumberOfSections,\n        lMasterPolicySectionToAddKey,\n        bBinderHasCountryScope,\n        bBinderHasCurrencyScope,\n        dtMaximumExpiryDate,\n        bBinderScopeSubCodesRequired,\n        bLloydsBordereau,\n        sContactAddress1,\n        sContactAddress2,\n        sContactAddressCity,\n        sContactAddressPostCode,\n        lContactAddressStateKey,\n        sContactAddressTo,\n        bLinesWritten,\n        lPolicySummaryViewScreenKey,\n        nLinesVoidedorSigned,\n        bPassThroughWritten,\n        lTypeOfIndustryVerticalKey,\n        lImplementationSetupForNewOldRIKey,\n        bEnableNewRI,\n        bAuthorisedSurplusBroker,\n        bAuthorisedSecondaryBroker,\n        lTypeOfCancellationReasonKey,\n        dtLastVerEffectiveDate,\n        dtReinstatementDate,\n        sSurplusLinesSLANumber,\n        dtPolicyIssuedDate,\n        sOverridePolicyReference,\n        bAllowOverridePolicyReference,\n        nTotalBinderProportionPc,\n        nCountLinesSigned,\n        bRunPropRIGeneration,\n        bRIProfileEdited,\n        bReferenceUnique,\n        LTypeofRefError,\n        lTypeofInsuredPolicyholderLloyds,\n        nInsuredTotalNumberofEmployees,\n        dInsuredRevenueTurnover,\n        bReferredToLondon,\n        bIsCountryinEEA,\n        nCountCodeSplitsNotDone,\n        bPeriodReturnEndorsement,\n        bContraPeriodValueReturn,\n        dReplaceGrossForPeriod,\n        nDaysPolicyFromActivityExp,\n        bAggregationRequired,\n        bEndorsementAggregationRequired,\n        bDeclarationException,\n        bDeclarationExceptionApproved,\n        LMAJORTERRITORYKEY,\n        LTERRITORYKEY,\n        sSubmissionNo,\n        sBoundNo,\n        lProducerContactKey,\n        bInsuredPossibleDuplicate,\n        dtPhase1From,\n        dtPhase1To,\n        dPhase1PC,\n        dtPhase2From,\n        dtPhase2To,\n        dPhase2PC,\n        dtPhase3From,\n        dtPhase3To,\n        dPhase3PC,\n        nEarningPeriodDays,\n        bFailedComplianceChecks,\n        bComplianceChecksOverride,\n        lTypeofActivitySourceKey,\n        nBrokerVersionNumber,\n        bBound,\n        lTypeOFMasterFacilityKey,\n        lTypeOFFacilityKey,\n        lTypeOFAuthorityLevelKey,\n        lTypeOFSettlementKey,\n        bTreaty,\n        lQuoted,\n        lOfferValidityPeriod,\n        dtFinalslipReceived,\n        bRIAutoProfilingRequired,\n        sNotes,\n        lEndorementSubClassificationKey,\n        sAssuredDescription,\n        bIsReversal,\n        bIsFixedROE,\n        lCurrentPolicyCurrencyKey,\n        dCurrentCurrencyROE,\n        nCountAgencyFees,\n        bFailedLegalChecks,\n        bLegalChecksOverride,\n        bSubmissionReviewCreated,\n        dtWrittenDate,\n        lIsBound,\n        bPremiumAuthorized,\n        bRequiresKYCDivision,\n        bAgnecyFeesAmountTrigger,\n        bAgnecyFeesTypeTrigger,\n        bAgnecyFeesOrderTrigger,\n        bAgnecyFeesIncompatibleTrigger,\n        bAgnecyFeesOverwriteTrigger,\n        bCoverageElementRequired,\n        bEnableClassonCFI,\n        dw_loadts as _valid_from,\n        lead(dw_loadts) over (partition by lPolicyActivityKey order by dw_loadts) as _valid_to\n    from\n        filtered\n)\n\nselect * from ranged", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"scd_policy_activity\""}, "model.iginsure.scd_policy_liability": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.iginsure.dbo.policy_liability"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["InwardPremium"], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "scd", "scd_policy_liability"], "unique_id": "model.iginsure.scd_policy_liability", "raw_code": "-- This file is automatically generated\r\n\r\n{{\r\n  config(tags=['InwardPremium'])\r\n}}\r\nwith\r\n\r\npolicy_liability as (\r\n    select * from {{ source('dbo', 'policy_liability') }}\r\n),\r\n\r\nordered as (\r\n    select\r\n        lPolicyLiabilityKey,\r\n        lPolicySectionKey,\r\n        lPolicyActivityKey,\r\n        lPolicyKey,\r\n        lPolicyFolderKey,\r\n        lPolicyLiabilityChainKey,\r\n        lAuthorityCheckJoinKey,\r\n        bProductPriming,\r\n        lAgreementLiabilityKey,\r\n        lProductTemplateLiabilityKey,\r\n        bMandatory,\r\n        bPrintOnDecSheet,\r\n        nOrder,\r\n        bMasterLimit,\r\n        bGetsMasterLimit,\r\n        bLimitLessThanParentLimit,\r\n        bDefaultedMasterLimitEditable,\r\n        bRatedPremiumIsProRated,\r\n        nPeriodDays,\r\n        lTypeOfSubClassKey,\r\n        lTypeOfPlacementKey,\r\n        lTypeOfLimitBasisKey,\r\n        lTypeOfClaimBasisKey,\r\n        dLimit,\r\n        dExcessOf,\r\n        dExposure,\r\n        dLimitAggregate,\r\n        lPLTypeOfDeductibleKey,\r\n        dDeductible,\r\n        lDeductibleRatingLookupKey,\r\n        lDeductibleTemplateRatingKey,\r\n        lLiabilityPremiumCcyKey,\r\n        dLiabilityPremiumROE,\r\n        dPremiumSplitPc,\r\n        bPremiumApplicable,\r\n        bRated,\r\n        bPremiumAggregated,\r\n        lTypeOfRateKey,\r\n        dLookedUpRate,\r\n        lTemplateRatingKey,\r\n        lRatingLookupKey,\r\n        lTypeOfRatingBasisKey,\r\n        dRatingBasisAmount,\r\n        dPreviousRatingBasisAmount,\r\n        dVersionRatingBasisAmount,\r\n        dRatingModifier,\r\n        lTypeOfPremiumBasisKey,\r\n        dMinimumDepositPc,\r\n        dVersionDepositPremium100,\r\n        dVersionAdjustmentPremium100,\r\n        dVersionBasePremium100,\r\n        dVersionGrossThisTime100,\r\n        dVersionRatedPremium100,\r\n        dVersionAdditionsThisTime100,\r\n        dVersionDeductionsThisTime100,\r\n        dVersionAdditionsPayaway100,\r\n        dVersionDeductionsPayaway100,\r\n        dVersDednsPassedToInsured100,\r\n        dVersionBrokerDeductible100,\r\n        dVersionNetToInsured100,\r\n        dVersionCashReceivable100,\r\n        dVersionNetThisTime100,\r\n        dVersionDeductionsThisTimeShareTT,\r\n        dVersnDeductionsPayawayShareW,\r\n        dVersionNetThisTimeShareTT,\r\n        dVersionAdjustmentPremiumS,\r\n        dVersionAdditionsPayawayShareS,\r\n        dVerDednsPassedToInsuredShareS,\r\n        dVersionBasePremiumShareTT,\r\n        dVersionRatedPremiumShareTT,\r\n        dVersionDepositPremiumShareTT,\r\n        dVersionGrossThisTimeShareTT,\r\n        dVersionAdditionsThisTimeShareTT,\r\n        dVersionBrokerDeductibleShareT,\r\n        dVersionNetToInsuredShareT,\r\n        dVersionCashReceivableShareT,\r\n        dPreviousDepositPremium100,\r\n        dPreviousBasePremium100,\r\n        dPreviousGrossThisTime100,\r\n        dPreviousRatedPremium100,\r\n        dPreviousAdditionsThisTime100,\r\n        dPreviousDeductionsThisTime100,\r\n        dPreviousNetThisTime100,\r\n        dTotalDepositPremium100,\r\n        dTotalBasePremium100,\r\n        dTotalRatedPremium100,\r\n        dTotalGrossThisTime100,\r\n        dTotalAdditionsThisTime100,\r\n        dTotalDeductionsThisTime100,\r\n        dTotalNetThisTime100,\r\n        dTotalDeductionsThisTimeShareTT,\r\n        dTotalNetThisTimeShareTT,\r\n        dTotalRatedPremiumShareTT,\r\n        dTotalAdditionsThisTimeShareTT,\r\n        dTotalBasePremiumShareTT,\r\n        dTotalGrossThisTimeShareTT,\r\n        lEPICurrencyKey,\r\n        dEPIROE,\r\n        dVersionGrossGrossWritten100,\r\n        dVersionGrossGrossWrittenShareTT,\r\n        dVersionDeductionsWritten100,\r\n        dVersionDeductionsWrittenShareTT,\r\n        dVersionNetWritten100,\r\n        dVersionNetWrittenShareTT,\r\n        lPLRiskSettlementCurrency,\r\n        dPLRiskSettROE,\r\n        dCurrentInstalmentTotal100,\r\n        bBurningCosts,\r\n        dLowerBurningCostRate,\r\n        dUpperBurningCostRate,\r\n        lTypeOfRateModifierBasisKey,\r\n        nPolicyTermFullMonths,\r\n        nPolicyTermPartMonths,\r\n        nPolicyTermRemainingDays,\r\n        bSponsored,\r\n        lTerritoryKey,\r\n        dMinimumPC,\r\n        dVersionMinimumPremium100,\r\n        dVersionMinimumPremiumShareTT,\r\n        dPreviousMinimumPremium100,\r\n        dTotalMinimumPremium100,\r\n        dTotalMinimumPremiumShareTT,\r\n        dVersionGrossGrossThisTime100,\r\n        dVersionGrossGrossThisTimeShareTT,\r\n        lProductTemplateSectionKey,\r\n        dPreviousGrossGrossWritten100,\r\n        dTotalGrossGrossWritten100,\r\n        dTotalGrossGrossWrittenShareTT,\r\n        dRate,\r\n        dTotalDepositPremiumShareTT,\r\n        dVersionRatedPremium100Save,\r\n        dVersionGrossPremium100Save,\r\n        dEPI100Save,\r\n        bInheritDeductible,\r\n        boverridable,\r\n        dVersnGrossGrossPremium100Save,\r\n        dLookedUpMasterRate,\r\n        lMasterPolicyLiabilityKey,\r\n        lPolicyLiabilityMasterRateKey,\r\n        lMastPolLiabilityChainKey,\r\n        lMasterTemplateRatingKey,\r\n        lLimitCurrencyKey,\r\n        dLimitCurrencyROE,\r\n        lAreaKey,\r\n        bBasePremiumAggregated,\r\n        dtTransitFrom,\r\n        dtTransitTo,\r\n        nTransitDays,\r\n        dLimitInBaseCcy,\r\n        bDefaultRatingBasisAmtToLimit,\r\n        sCoverage,\r\n        sCoverageCode,\r\n        dPreviousGrossGrossThisTime100,\r\n        dTotalGrossGrossThisTime100,\r\n        dTotalGrossGrossThisTimeShareTT,\r\n        dPreviousAdditionsWritten100,\r\n        dTotalAdditionsWritten100,\r\n        dVersionAdditionsWritten100,\r\n        dVersionAdditionsWrittenShareTT,\r\n        dPreviousDeductionsWritten100,\r\n        dTotalDeductionsWritten100,\r\n        dTotalDeductionsWrittenShareTT,\r\n        dPreviousNetWritten100,\r\n        dTotalNetWritten100,\r\n        dVersionGrossWritten100,\r\n        dVersionGrossWrittenShareTT,\r\n        dTotalGrossWritten100,\r\n        dPreviousGrossWritten100,\r\n        dTotalGrossWrittenShareTT,\r\n        dTotalAdditionsWrittenShareTT,\r\n        dTotalNetWrittenShareTT,\r\n        bExcludeTaxDeduction,\r\n        dAgreementLimit,\r\n        dAgreementAggregateLimit,\r\n        dVersionNetPremToInsurerShareTT,\r\n        dVersionNetPremToInsurer100,\r\n        dVersionWNetPremToInsurerShareTT,\r\n        dVersionWNetPremToInsurer100,\r\n        dRatedPremiumOverride,\r\n        dActualRatedPremium100,\r\n        bNewCoverage,\r\n        bBinderCurrencyRestriction,\r\n        lLimitAIOr100Key,\r\n        dCoverageAmountPc,\r\n        lCoveragePcOfSubClassKey,\r\n        lTypeOfCoverageGreaterLessThanKey,\r\n        lCoverageGreaterLessThanOperatorKey,\r\n        dCoverageDailyAmount,\r\n        nCoverageDays,\r\n        nCoverageWaitingPeriodDays,\r\n        dCoverageWaitingPeriodAmount,\r\n        lExcessCurrencyKey,\r\n        lExcessAIOr100Key,\r\n        dExcessROE,\r\n        bAsScheduledLimitOccurence,\r\n        bAsScheduledExcessOf,\r\n        bAsScheduledLimitAggregate,\r\n        bAsScheduledDailyAmount,\r\n        bAsScheduledNoOfDays,\r\n        bAsScheduledWaitingPeriodDays,\r\n        lTypeofDeductibleBasedOnKey,\r\n        lDeductibleCcyKey,\r\n        lDedductibleAIor100Key,\r\n        dDeductiblePC,\r\n        dMinDeductible,\r\n        dMaxDeductible,\r\n        bAsScheduledDeductible,\r\n        bAsScheduledDeductiblePC,\r\n        bAsScheduledDeductibleMin,\r\n        bAsScheduledDeductibleMax,\r\n        bAsScheduleWaitingPeriodAmount,\r\n        lCoverageSetKey,\r\n        bIsAIHidden,\r\n        lTypeOfCoverageOptionKey,\r\n        dOccurrenceCompareAmount,\r\n        dPMLPC,\r\n        lTypeOfCoverageComparisonKey,\r\n        dCessionPc,\r\n        bAsScheduledPMLPc,\r\n        lPMLOption,\r\n        lExcessOption,\r\n        sCoverageNarrative,\r\n        dGrossForPeriod,\r\n        dGrossForPeriodSave,\r\n        dReplaceGrossForPeriod,\r\n        dEventLimit100,\r\n        dMaxEventLimitShare,\r\n        dTSI,\r\n        lTypeofLoadingFactor,\r\n        dStoreTotalDepositPremium100,\r\n        dStorePreviousDepositPremium100,\r\n        bCoverageElementMandatory,\r\n        nCountCoverageElement,\r\n        bCoverageElementRequired,\r\n        lPreviousTypeOfPremiumBasisKey,\r\n        dw_loadts,\r\n        row_number() over (\r\n            partition by\r\n                lPolicyLiabilityKey,\r\n                lPolicySectionKey,\r\n                lPolicyActivityKey,\r\n                lPolicyKey,\r\n                lPolicyFolderKey,\r\n                lPolicyLiabilityChainKey,\r\n                lAuthorityCheckJoinKey,\r\n                bProductPriming,\r\n                lAgreementLiabilityKey,\r\n                lProductTemplateLiabilityKey,\r\n                bMandatory,\r\n                bPrintOnDecSheet,\r\n                nOrder,\r\n                bMasterLimit,\r\n                bGetsMasterLimit,\r\n                bLimitLessThanParentLimit,\r\n                bDefaultedMasterLimitEditable,\r\n                bRatedPremiumIsProRated,\r\n                nPeriodDays,\r\n                lTypeOfSubClassKey,\r\n                lTypeOfPlacementKey,\r\n                lTypeOfLimitBasisKey,\r\n                lTypeOfClaimBasisKey,\r\n                dLimit,\r\n                dExcessOf,\r\n                dExposure,\r\n                dLimitAggregate,\r\n                lPLTypeOfDeductibleKey,\r\n                dDeductible,\r\n                lDeductibleRatingLookupKey,\r\n                lDeductibleTemplateRatingKey,\r\n                lLiabilityPremiumCcyKey,\r\n                dLiabilityPremiumROE,\r\n                dPremiumSplitPc,\r\n                bPremiumApplicable,\r\n                bRated,\r\n                bPremiumAggregated,\r\n                lTypeOfRateKey,\r\n                dLookedUpRate,\r\n                lTemplateRatingKey,\r\n                lRatingLookupKey,\r\n                lTypeOfRatingBasisKey,\r\n                dRatingBasisAmount,\r\n                dPreviousRatingBasisAmount,\r\n                dVersionRatingBasisAmount,\r\n                dRatingModifier,\r\n                lTypeOfPremiumBasisKey,\r\n                dMinimumDepositPc,\r\n                dVersionDepositPremium100,\r\n                dVersionAdjustmentPremium100,\r\n                dVersionBasePremium100,\r\n                dVersionGrossThisTime100,\r\n                dVersionRatedPremium100,\r\n                dVersionAdditionsThisTime100,\r\n                dVersionDeductionsThisTime100,\r\n                dVersionAdditionsPayaway100,\r\n                dVersionDeductionsPayaway100,\r\n                dVersDednsPassedToInsured100,\r\n                dVersionBrokerDeductible100,\r\n                dVersionNetToInsured100,\r\n                dVersionCashReceivable100,\r\n                dVersionNetThisTime100,\r\n                dVersionDeductionsThisTimeShareTT,\r\n                dVersnDeductionsPayawayShareW,\r\n                dVersionNetThisTimeShareTT,\r\n                dVersionAdjustmentPremiumS,\r\n                dVersionAdditionsPayawayShareS,\r\n                dVerDednsPassedToInsuredShareS,\r\n                dVersionBasePremiumShareTT,\r\n                dVersionRatedPremiumShareTT,\r\n                dVersionDepositPremiumShareTT,\r\n                dVersionGrossThisTimeShareTT,\r\n                dVersionAdditionsThisTimeShareTT,\r\n                dVersionBrokerDeductibleShareT,\r\n                dVersionNetToInsuredShareT,\r\n                dVersionCashReceivableShareT,\r\n                dPreviousDepositPremium100,\r\n                dPreviousBasePremium100,\r\n                dPreviousGrossThisTime100,\r\n                dPreviousRatedPremium100,\r\n                dPreviousAdditionsThisTime100,\r\n                dPreviousDeductionsThisTime100,\r\n                dPreviousNetThisTime100,\r\n                dTotalDepositPremium100,\r\n                dTotalBasePremium100,\r\n                dTotalRatedPremium100,\r\n                dTotalGrossThisTime100,\r\n                dTotalAdditionsThisTime100,\r\n                dTotalDeductionsThisTime100,\r\n                dTotalNetThisTime100,\r\n                dTotalDeductionsThisTimeShareTT,\r\n                dTotalNetThisTimeShareTT,\r\n                dTotalRatedPremiumShareTT,\r\n                dTotalAdditionsThisTimeShareTT,\r\n                dTotalBasePremiumShareTT,\r\n                dTotalGrossThisTimeShareTT,\r\n                lEPICurrencyKey,\r\n                dEPIROE,\r\n                dVersionGrossGrossWritten100,\r\n                dVersionGrossGrossWrittenShareTT,\r\n                dVersionDeductionsWritten100,\r\n                dVersionDeductionsWrittenShareTT,\r\n                dVersionNetWritten100,\r\n                dVersionNetWrittenShareTT,\r\n                lPLRiskSettlementCurrency,\r\n                dPLRiskSettROE,\r\n                dCurrentInstalmentTotal100,\r\n                bBurningCosts,\r\n                dLowerBurningCostRate,\r\n                dUpperBurningCostRate,\r\n                lTypeOfRateModifierBasisKey,\r\n                nPolicyTermFullMonths,\r\n                nPolicyTermPartMonths,\r\n                nPolicyTermRemainingDays,\r\n                bSponsored,\r\n                lTerritoryKey,\r\n                dMinimumPC,\r\n                dVersionMinimumPremium100,\r\n                dVersionMinimumPremiumShareTT,\r\n                dPreviousMinimumPremium100,\r\n                dTotalMinimumPremium100,\r\n                dTotalMinimumPremiumShareTT,\r\n                dVersionGrossGrossThisTime100,\r\n                dVersionGrossGrossThisTimeShareTT,\r\n                lProductTemplateSectionKey,\r\n                dPreviousGrossGrossWritten100,\r\n                dTotalGrossGrossWritten100,\r\n                dTotalGrossGrossWrittenShareTT,\r\n                dRate,\r\n                dTotalDepositPremiumShareTT,\r\n                dVersionRatedPremium100Save,\r\n                dVersionGrossPremium100Save,\r\n                dEPI100Save,\r\n                bInheritDeductible,\r\n                boverridable,\r\n                dVersnGrossGrossPremium100Save,\r\n                dLookedUpMasterRate,\r\n                lMasterPolicyLiabilityKey,\r\n                lPolicyLiabilityMasterRateKey,\r\n                lMastPolLiabilityChainKey,\r\n                lMasterTemplateRatingKey,\r\n                lLimitCurrencyKey,\r\n                dLimitCurrencyROE,\r\n                lAreaKey,\r\n                bBasePremiumAggregated,\r\n                dtTransitFrom,\r\n                dtTransitTo,\r\n                nTransitDays,\r\n                dLimitInBaseCcy,\r\n                bDefaultRatingBasisAmtToLimit,\r\n                sCoverage,\r\n                sCoverageCode,\r\n                dPreviousGrossGrossThisTime100,\r\n                dTotalGrossGrossThisTime100,\r\n                dTotalGrossGrossThisTimeShareTT,\r\n                dPreviousAdditionsWritten100,\r\n                dTotalAdditionsWritten100,\r\n                dVersionAdditionsWritten100,\r\n                dVersionAdditionsWrittenShareTT,\r\n                dPreviousDeductionsWritten100,\r\n                dTotalDeductionsWritten100,\r\n                dTotalDeductionsWrittenShareTT,\r\n                dPreviousNetWritten100,\r\n                dTotalNetWritten100,\r\n                dVersionGrossWritten100,\r\n                dVersionGrossWrittenShareTT,\r\n                dTotalGrossWritten100,\r\n                dPreviousGrossWritten100,\r\n                dTotalGrossWrittenShareTT,\r\n                dTotalAdditionsWrittenShareTT,\r\n                dTotalNetWrittenShareTT,\r\n                bExcludeTaxDeduction,\r\n                dAgreementLimit,\r\n                dAgreementAggregateLimit,\r\n                dVersionNetPremToInsurerShareTT,\r\n                dVersionNetPremToInsurer100,\r\n                dVersionWNetPremToInsurerShareTT,\r\n                dVersionWNetPremToInsurer100,\r\n                dRatedPremiumOverride,\r\n                dActualRatedPremium100,\r\n                bNewCoverage,\r\n                bBinderCurrencyRestriction,\r\n                lLimitAIOr100Key,\r\n                dCoverageAmountPc,\r\n                lCoveragePcOfSubClassKey,\r\n                lTypeOfCoverageGreaterLessThanKey,\r\n                lCoverageGreaterLessThanOperatorKey,\r\n                dCoverageDailyAmount,\r\n                nCoverageDays,\r\n                nCoverageWaitingPeriodDays,\r\n                dCoverageWaitingPeriodAmount,\r\n                lExcessCurrencyKey,\r\n                lExcessAIOr100Key,\r\n                dExcessROE,\r\n                bAsScheduledLimitOccurence,\r\n                bAsScheduledExcessOf,\r\n                bAsScheduledLimitAggregate,\r\n                bAsScheduledDailyAmount,\r\n                bAsScheduledNoOfDays,\r\n                bAsScheduledWaitingPeriodDays,\r\n                lTypeofDeductibleBasedOnKey,\r\n                lDeductibleCcyKey,\r\n                lDedductibleAIor100Key,\r\n                dDeductiblePC,\r\n                dMinDeductible,\r\n                dMaxDeductible,\r\n                bAsScheduledDeductible,\r\n                bAsScheduledDeductiblePC,\r\n                bAsScheduledDeductibleMin,\r\n                bAsScheduledDeductibleMax,\r\n                bAsScheduleWaitingPeriodAmount,\r\n                lCoverageSetKey,\r\n                bIsAIHidden,\r\n                lTypeOfCoverageOptionKey,\r\n                dOccurrenceCompareAmount,\r\n                dPMLPC,\r\n                lTypeOfCoverageComparisonKey,\r\n                dCessionPc,\r\n                bAsScheduledPMLPc,\r\n                lPMLOption,\r\n                lExcessOption,\r\n                sCoverageNarrative,\r\n                dGrossForPeriod,\r\n                dGrossForPeriodSave,\r\n                dReplaceGrossForPeriod,\r\n                dEventLimit100,\r\n                dMaxEventLimitShare,\r\n                dTSI,\r\n                lTypeofLoadingFactor,\r\n                dStoreTotalDepositPremium100,\r\n                dStorePreviousDepositPremium100,\r\n                bCoverageElementMandatory,\r\n                nCountCoverageElement,\r\n                bCoverageElementRequired,\r\n                lPreviousTypeOfPremiumBasisKey\r\n            order by\r\n                dw_loadts\r\n        ) as dw_extract_order\r\n    from\r\n        policy_liability\r\n),\r\n\r\nfiltered as (\r\n    select * from ordered where dw_extract_order = 1\r\n),\r\n\r\nranged as (\r\n    select\r\n        lPolicyLiabilityKey,\r\n        lPolicySectionKey,\r\n        lPolicyActivityKey,\r\n        lPolicyKey,\r\n        lPolicyFolderKey,\r\n        lPolicyLiabilityChainKey,\r\n        lAuthorityCheckJoinKey,\r\n        bProductPriming,\r\n        lAgreementLiabilityKey,\r\n        lProductTemplateLiabilityKey,\r\n        bMandatory,\r\n        bPrintOnDecSheet,\r\n        nOrder,\r\n        bMasterLimit,\r\n        bGetsMasterLimit,\r\n        bLimitLessThanParentLimit,\r\n        bDefaultedMasterLimitEditable,\r\n        bRatedPremiumIsProRated,\r\n        nPeriodDays,\r\n        lTypeOfSubClassKey,\r\n        lTypeOfPlacementKey,\r\n        lTypeOfLimitBasisKey,\r\n        lTypeOfClaimBasisKey,\r\n        dLimit,\r\n        dExcessOf,\r\n        dExposure,\r\n        dLimitAggregate,\r\n        lPLTypeOfDeductibleKey,\r\n        dDeductible,\r\n        lDeductibleRatingLookupKey,\r\n        lDeductibleTemplateRatingKey,\r\n        lLiabilityPremiumCcyKey,\r\n        dLiabilityPremiumROE,\r\n        dPremiumSplitPc,\r\n        bPremiumApplicable,\r\n        bRated,\r\n        bPremiumAggregated,\r\n        lTypeOfRateKey,\r\n        dLookedUpRate,\r\n        lTemplateRatingKey,\r\n        lRatingLookupKey,\r\n        lTypeOfRatingBasisKey,\r\n        dRatingBasisAmount,\r\n        dPreviousRatingBasisAmount,\r\n        dVersionRatingBasisAmount,\r\n        dRatingModifier,\r\n        lTypeOfPremiumBasisKey,\r\n        dMinimumDepositPc,\r\n        dVersionDepositPremium100,\r\n        dVersionAdjustmentPremium100,\r\n        dVersionBasePremium100,\r\n        dVersionGrossThisTime100,\r\n        dVersionRatedPremium100,\r\n        dVersionAdditionsThisTime100,\r\n        dVersionDeductionsThisTime100,\r\n        dVersionAdditionsPayaway100,\r\n        dVersionDeductionsPayaway100,\r\n        dVersDednsPassedToInsured100,\r\n        dVersionBrokerDeductible100,\r\n        dVersionNetToInsured100,\r\n        dVersionCashReceivable100,\r\n        dVersionNetThisTime100,\r\n        dVersionDeductionsThisTimeShareTT,\r\n        dVersnDeductionsPayawayShareW,\r\n        dVersionNetThisTimeShareTT,\r\n        dVersionAdjustmentPremiumS,\r\n        dVersionAdditionsPayawayShareS,\r\n        dVerDednsPassedToInsuredShareS,\r\n        dVersionBasePremiumShareTT,\r\n        dVersionRatedPremiumShareTT,\r\n        dVersionDepositPremiumShareTT,\r\n        dVersionGrossThisTimeShareTT,\r\n        dVersionAdditionsThisTimeShareTT,\r\n        dVersionBrokerDeductibleShareT,\r\n        dVersionNetToInsuredShareT,\r\n        dVersionCashReceivableShareT,\r\n        dPreviousDepositPremium100,\r\n        dPreviousBasePremium100,\r\n        dPreviousGrossThisTime100,\r\n        dPreviousRatedPremium100,\r\n        dPreviousAdditionsThisTime100,\r\n        dPreviousDeductionsThisTime100,\r\n        dPreviousNetThisTime100,\r\n        dTotalDepositPremium100,\r\n        dTotalBasePremium100,\r\n        dTotalRatedPremium100,\r\n        dTotalGrossThisTime100,\r\n        dTotalAdditionsThisTime100,\r\n        dTotalDeductionsThisTime100,\r\n        dTotalNetThisTime100,\r\n        dTotalDeductionsThisTimeShareTT,\r\n        dTotalNetThisTimeShareTT,\r\n        dTotalRatedPremiumShareTT,\r\n        dTotalAdditionsThisTimeShareTT,\r\n        dTotalBasePremiumShareTT,\r\n        dTotalGrossThisTimeShareTT,\r\n        lEPICurrencyKey,\r\n        dEPIROE,\r\n        dVersionGrossGrossWritten100,\r\n        dVersionGrossGrossWrittenShareTT,\r\n        dVersionDeductionsWritten100,\r\n        dVersionDeductionsWrittenShareTT,\r\n        dVersionNetWritten100,\r\n        dVersionNetWrittenShareTT,\r\n        lPLRiskSettlementCurrency,\r\n        dPLRiskSettROE,\r\n        dCurrentInstalmentTotal100,\r\n        bBurningCosts,\r\n        dLowerBurningCostRate,\r\n        dUpperBurningCostRate,\r\n        lTypeOfRateModifierBasisKey,\r\n        nPolicyTermFullMonths,\r\n        nPolicyTermPartMonths,\r\n        nPolicyTermRemainingDays,\r\n        bSponsored,\r\n        lTerritoryKey,\r\n        dMinimumPC,\r\n        dVersionMinimumPremium100,\r\n        dVersionMinimumPremiumShareTT,\r\n        dPreviousMinimumPremium100,\r\n        dTotalMinimumPremium100,\r\n        dTotalMinimumPremiumShareTT,\r\n        dVersionGrossGrossThisTime100,\r\n        dVersionGrossGrossThisTimeShareTT,\r\n        lProductTemplateSectionKey,\r\n        dPreviousGrossGrossWritten100,\r\n        dTotalGrossGrossWritten100,\r\n        dTotalGrossGrossWrittenShareTT,\r\n        dRate,\r\n        dTotalDepositPremiumShareTT,\r\n        dVersionRatedPremium100Save,\r\n        dVersionGrossPremium100Save,\r\n        dEPI100Save,\r\n        bInheritDeductible,\r\n        boverridable,\r\n        dVersnGrossGrossPremium100Save,\r\n        dLookedUpMasterRate,\r\n        lMasterPolicyLiabilityKey,\r\n        lPolicyLiabilityMasterRateKey,\r\n        lMastPolLiabilityChainKey,\r\n        lMasterTemplateRatingKey,\r\n        lLimitCurrencyKey,\r\n        dLimitCurrencyROE,\r\n        lAreaKey,\r\n        bBasePremiumAggregated,\r\n        dtTransitFrom,\r\n        dtTransitTo,\r\n        nTransitDays,\r\n        dLimitInBaseCcy,\r\n        bDefaultRatingBasisAmtToLimit,\r\n        sCoverage,\r\n        sCoverageCode,\r\n        dPreviousGrossGrossThisTime100,\r\n        dTotalGrossGrossThisTime100,\r\n        dTotalGrossGrossThisTimeShareTT,\r\n        dPreviousAdditionsWritten100,\r\n        dTotalAdditionsWritten100,\r\n        dVersionAdditionsWritten100,\r\n        dVersionAdditionsWrittenShareTT,\r\n        dPreviousDeductionsWritten100,\r\n        dTotalDeductionsWritten100,\r\n        dTotalDeductionsWrittenShareTT,\r\n        dPreviousNetWritten100,\r\n        dTotalNetWritten100,\r\n        dVersionGrossWritten100,\r\n        dVersionGrossWrittenShareTT,\r\n        dTotalGrossWritten100,\r\n        dPreviousGrossWritten100,\r\n        dTotalGrossWrittenShareTT,\r\n        dTotalAdditionsWrittenShareTT,\r\n        dTotalNetWrittenShareTT,\r\n        bExcludeTaxDeduction,\r\n        dAgreementLimit,\r\n        dAgreementAggregateLimit,\r\n        dVersionNetPremToInsurerShareTT,\r\n        dVersionNetPremToInsurer100,\r\n        dVersionWNetPremToInsurerShareTT,\r\n        dVersionWNetPremToInsurer100,\r\n        dRatedPremiumOverride,\r\n        dActualRatedPremium100,\r\n        bNewCoverage,\r\n        bBinderCurrencyRestriction,\r\n        lLimitAIOr100Key,\r\n        dCoverageAmountPc,\r\n        lCoveragePcOfSubClassKey,\r\n        lTypeOfCoverageGreaterLessThanKey,\r\n        lCoverageGreaterLessThanOperatorKey,\r\n        dCoverageDailyAmount,\r\n        nCoverageDays,\r\n        nCoverageWaitingPeriodDays,\r\n        dCoverageWaitingPeriodAmount,\r\n        lExcessCurrencyKey,\r\n        lExcessAIOr100Key,\r\n        dExcessROE,\r\n        bAsScheduledLimitOccurence,\r\n        bAsScheduledExcessOf,\r\n        bAsScheduledLimitAggregate,\r\n        bAsScheduledDailyAmount,\r\n        bAsScheduledNoOfDays,\r\n        bAsScheduledWaitingPeriodDays,\r\n        lTypeofDeductibleBasedOnKey,\r\n        lDeductibleCcyKey,\r\n        lDedductibleAIor100Key,\r\n        dDeductiblePC,\r\n        dMinDeductible,\r\n        dMaxDeductible,\r\n        bAsScheduledDeductible,\r\n        bAsScheduledDeductiblePC,\r\n        bAsScheduledDeductibleMin,\r\n        bAsScheduledDeductibleMax,\r\n        bAsScheduleWaitingPeriodAmount,\r\n        lCoverageSetKey,\r\n        bIsAIHidden,\r\n        lTypeOfCoverageOptionKey,\r\n        dOccurrenceCompareAmount,\r\n        dPMLPC,\r\n        lTypeOfCoverageComparisonKey,\r\n        dCessionPc,\r\n        bAsScheduledPMLPc,\r\n        lPMLOption,\r\n        lExcessOption,\r\n        sCoverageNarrative,\r\n        dGrossForPeriod,\r\n        dGrossForPeriodSave,\r\n        dReplaceGrossForPeriod,\r\n        dEventLimit100,\r\n        dMaxEventLimitShare,\r\n        dTSI,\r\n        lTypeofLoadingFactor,\r\n        dStoreTotalDepositPremium100,\r\n        dStorePreviousDepositPremium100,\r\n        bCoverageElementMandatory,\r\n        nCountCoverageElement,\r\n        bCoverageElementRequired,\r\n        lPreviousTypeOfPremiumBasisKey,\r\n        dw_loadts as _valid_from,\r\n        lead(dw_loadts) over (partition by lPolicyLiabilityKey order by dw_loadts) as _valid_to\r\n    from\r\n        filtered\r\n)\r\n\r\nselect * from ranged", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "scd\\scd_policy_liability.sql", "original_file_path": "models\\scd\\scd_policy_liability.sql", "name": "scd_policy_liability", "alias": "scd_policy_liability", "checksum": {"name": "sha256", "checksum": "dbfd4c2d0ed0a002f4c2fbde10cecd247b3842bd9434ba81390f4dcb91837a87"}, "tags": ["InwardPremium"], "refs": [], "sources": [["dbo", "policy_liability"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": "iginsure://models\\scd\\scd.yml", "compiled_path": "target\\compiled\\iginsure\\models\\scd\\scd_policy_liability.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "docs": {"show": false}, "tags": ["InwardPremium"]}, "created_at": 1701786801.7930806, "compiled_code": "-- This file is automatically generated\n\n\nwith\n\npolicy_liability as (\n    select * from \"IGI_PROD_DW\".\"dbo\".\"PolicyLiability\"\n),\n\nordered as (\n    select\n        lPolicyLiabilityKey,\n        lPolicySectionKey,\n        lPolicyActivityKey,\n        lPolicyKey,\n        lPolicyFolderKey,\n        lPolicyLiabilityChainKey,\n        lAuthorityCheckJoinKey,\n        bProductPriming,\n        lAgreementLiabilityKey,\n        lProductTemplateLiabilityKey,\n        bMandatory,\n        bPrintOnDecSheet,\n        nOrder,\n        bMasterLimit,\n        bGetsMasterLimit,\n        bLimitLessThanParentLimit,\n        bDefaultedMasterLimitEditable,\n        bRatedPremiumIsProRated,\n        nPeriodDays,\n        lTypeOfSubClassKey,\n        lTypeOfPlacementKey,\n        lTypeOfLimitBasisKey,\n        lTypeOfClaimBasisKey,\n        dLimit,\n        dExcessOf,\n        dExposure,\n        dLimitAggregate,\n        lPLTypeOfDeductibleKey,\n        dDeductible,\n        lDeductibleRatingLookupKey,\n        lDeductibleTemplateRatingKey,\n        lLiabilityPremiumCcyKey,\n        dLiabilityPremiumROE,\n        dPremiumSplitPc,\n        bPremiumApplicable,\n        bRated,\n        bPremiumAggregated,\n        lTypeOfRateKey,\n        dLookedUpRate,\n        lTemplateRatingKey,\n        lRatingLookupKey,\n        lTypeOfRatingBasisKey,\n        dRatingBasisAmount,\n        dPreviousRatingBasisAmount,\n        dVersionRatingBasisAmount,\n        dRatingModifier,\n        lTypeOfPremiumBasisKey,\n        dMinimumDepositPc,\n        dVersionDepositPremium100,\n        dVersionAdjustmentPremium100,\n        dVersionBasePremium100,\n        dVersionGrossThisTime100,\n        dVersionRatedPremium100,\n        dVersionAdditionsThisTime100,\n        dVersionDeductionsThisTime100,\n        dVersionAdditionsPayaway100,\n        dVersionDeductionsPayaway100,\n        dVersDednsPassedToInsured100,\n        dVersionBrokerDeductible100,\n        dVersionNetToInsured100,\n        dVersionCashReceivable100,\n        dVersionNetThisTime100,\n        dVersionDeductionsThisTimeShareTT,\n        dVersnDeductionsPayawayShareW,\n        dVersionNetThisTimeShareTT,\n        dVersionAdjustmentPremiumS,\n        dVersionAdditionsPayawayShareS,\n        dVerDednsPassedToInsuredShareS,\n        dVersionBasePremiumShareTT,\n        dVersionRatedPremiumShareTT,\n        dVersionDepositPremiumShareTT,\n        dVersionGrossThisTimeShareTT,\n        dVersionAdditionsThisTimeShareTT,\n        dVersionBrokerDeductibleShareT,\n        dVersionNetToInsuredShareT,\n        dVersionCashReceivableShareT,\n        dPreviousDepositPremium100,\n        dPreviousBasePremium100,\n        dPreviousGrossThisTime100,\n        dPreviousRatedPremium100,\n        dPreviousAdditionsThisTime100,\n        dPreviousDeductionsThisTime100,\n        dPreviousNetThisTime100,\n        dTotalDepositPremium100,\n        dTotalBasePremium100,\n        dTotalRatedPremium100,\n        dTotalGrossThisTime100,\n        dTotalAdditionsThisTime100,\n        dTotalDeductionsThisTime100,\n        dTotalNetThisTime100,\n        dTotalDeductionsThisTimeShareTT,\n        dTotalNetThisTimeShareTT,\n        dTotalRatedPremiumShareTT,\n        dTotalAdditionsThisTimeShareTT,\n        dTotalBasePremiumShareTT,\n        dTotalGrossThisTimeShareTT,\n        lEPICurrencyKey,\n        dEPIROE,\n        dVersionGrossGrossWritten100,\n        dVersionGrossGrossWrittenShareTT,\n        dVersionDeductionsWritten100,\n        dVersionDeductionsWrittenShareTT,\n        dVersionNetWritten100,\n        dVersionNetWrittenShareTT,\n        lPLRiskSettlementCurrency,\n        dPLRiskSettROE,\n        dCurrentInstalmentTotal100,\n        bBurningCosts,\n        dLowerBurningCostRate,\n        dUpperBurningCostRate,\n        lTypeOfRateModifierBasisKey,\n        nPolicyTermFullMonths,\n        nPolicyTermPartMonths,\n        nPolicyTermRemainingDays,\n        bSponsored,\n        lTerritoryKey,\n        dMinimumPC,\n        dVersionMinimumPremium100,\n        dVersionMinimumPremiumShareTT,\n        dPreviousMinimumPremium100,\n        dTotalMinimumPremium100,\n        dTotalMinimumPremiumShareTT,\n        dVersionGrossGrossThisTime100,\n        dVersionGrossGrossThisTimeShareTT,\n        lProductTemplateSectionKey,\n        dPreviousGrossGrossWritten100,\n        dTotalGrossGrossWritten100,\n        dTotalGrossGrossWrittenShareTT,\n        dRate,\n        dTotalDepositPremiumShareTT,\n        dVersionRatedPremium100Save,\n        dVersionGrossPremium100Save,\n        dEPI100Save,\n        bInheritDeductible,\n        boverridable,\n        dVersnGrossGrossPremium100Save,\n        dLookedUpMasterRate,\n        lMasterPolicyLiabilityKey,\n        lPolicyLiabilityMasterRateKey,\n        lMastPolLiabilityChainKey,\n        lMasterTemplateRatingKey,\n        lLimitCurrencyKey,\n        dLimitCurrencyROE,\n        lAreaKey,\n        bBasePremiumAggregated,\n        dtTransitFrom,\n        dtTransitTo,\n        nTransitDays,\n        dLimitInBaseCcy,\n        bDefaultRatingBasisAmtToLimit,\n        sCoverage,\n        sCoverageCode,\n        dPreviousGrossGrossThisTime100,\n        dTotalGrossGrossThisTime100,\n        dTotalGrossGrossThisTimeShareTT,\n        dPreviousAdditionsWritten100,\n        dTotalAdditionsWritten100,\n        dVersionAdditionsWritten100,\n        dVersionAdditionsWrittenShareTT,\n        dPreviousDeductionsWritten100,\n        dTotalDeductionsWritten100,\n        dTotalDeductionsWrittenShareTT,\n        dPreviousNetWritten100,\n        dTotalNetWritten100,\n        dVersionGrossWritten100,\n        dVersionGrossWrittenShareTT,\n        dTotalGrossWritten100,\n        dPreviousGrossWritten100,\n        dTotalGrossWrittenShareTT,\n        dTotalAdditionsWrittenShareTT,\n        dTotalNetWrittenShareTT,\n        bExcludeTaxDeduction,\n        dAgreementLimit,\n        dAgreementAggregateLimit,\n        dVersionNetPremToInsurerShareTT,\n        dVersionNetPremToInsurer100,\n        dVersionWNetPremToInsurerShareTT,\n        dVersionWNetPremToInsurer100,\n        dRatedPremiumOverride,\n        dActualRatedPremium100,\n        bNewCoverage,\n        bBinderCurrencyRestriction,\n        lLimitAIOr100Key,\n        dCoverageAmountPc,\n        lCoveragePcOfSubClassKey,\n        lTypeOfCoverageGreaterLessThanKey,\n        lCoverageGreaterLessThanOperatorKey,\n        dCoverageDailyAmount,\n        nCoverageDays,\n        nCoverageWaitingPeriodDays,\n        dCoverageWaitingPeriodAmount,\n        lExcessCurrencyKey,\n        lExcessAIOr100Key,\n        dExcessROE,\n        bAsScheduledLimitOccurence,\n        bAsScheduledExcessOf,\n        bAsScheduledLimitAggregate,\n        bAsScheduledDailyAmount,\n        bAsScheduledNoOfDays,\n        bAsScheduledWaitingPeriodDays,\n        lTypeofDeductibleBasedOnKey,\n        lDeductibleCcyKey,\n        lDedductibleAIor100Key,\n        dDeductiblePC,\n        dMinDeductible,\n        dMaxDeductible,\n        bAsScheduledDeductible,\n        bAsScheduledDeductiblePC,\n        bAsScheduledDeductibleMin,\n        bAsScheduledDeductibleMax,\n        bAsScheduleWaitingPeriodAmount,\n        lCoverageSetKey,\n        bIsAIHidden,\n        lTypeOfCoverageOptionKey,\n        dOccurrenceCompareAmount,\n        dPMLPC,\n        lTypeOfCoverageComparisonKey,\n        dCessionPc,\n        bAsScheduledPMLPc,\n        lPMLOption,\n        lExcessOption,\n        sCoverageNarrative,\n        dGrossForPeriod,\n        dGrossForPeriodSave,\n        dReplaceGrossForPeriod,\n        dEventLimit100,\n        dMaxEventLimitShare,\n        dTSI,\n        lTypeofLoadingFactor,\n        dStoreTotalDepositPremium100,\n        dStorePreviousDepositPremium100,\n        bCoverageElementMandatory,\n        nCountCoverageElement,\n        bCoverageElementRequired,\n        lPreviousTypeOfPremiumBasisKey,\n        dw_loadts,\n        row_number() over (\n            partition by\n                lPolicyLiabilityKey,\n                lPolicySectionKey,\n                lPolicyActivityKey,\n                lPolicyKey,\n                lPolicyFolderKey,\n                lPolicyLiabilityChainKey,\n                lAuthorityCheckJoinKey,\n                bProductPriming,\n                lAgreementLiabilityKey,\n                lProductTemplateLiabilityKey,\n                bMandatory,\n                bPrintOnDecSheet,\n                nOrder,\n                bMasterLimit,\n                bGetsMasterLimit,\n                bLimitLessThanParentLimit,\n                bDefaultedMasterLimitEditable,\n                bRatedPremiumIsProRated,\n                nPeriodDays,\n                lTypeOfSubClassKey,\n                lTypeOfPlacementKey,\n                lTypeOfLimitBasisKey,\n                lTypeOfClaimBasisKey,\n                dLimit,\n                dExcessOf,\n                dExposure,\n                dLimitAggregate,\n                lPLTypeOfDeductibleKey,\n                dDeductible,\n                lDeductibleRatingLookupKey,\n                lDeductibleTemplateRatingKey,\n                lLiabilityPremiumCcyKey,\n                dLiabilityPremiumROE,\n                dPremiumSplitPc,\n                bPremiumApplicable,\n                bRated,\n                bPremiumAggregated,\n                lTypeOfRateKey,\n                dLookedUpRate,\n                lTemplateRatingKey,\n                lRatingLookupKey,\n                lTypeOfRatingBasisKey,\n                dRatingBasisAmount,\n                dPreviousRatingBasisAmount,\n                dVersionRatingBasisAmount,\n                dRatingModifier,\n                lTypeOfPremiumBasisKey,\n                dMinimumDepositPc,\n                dVersionDepositPremium100,\n                dVersionAdjustmentPremium100,\n                dVersionBasePremium100,\n                dVersionGrossThisTime100,\n                dVersionRatedPremium100,\n                dVersionAdditionsThisTime100,\n                dVersionDeductionsThisTime100,\n                dVersionAdditionsPayaway100,\n                dVersionDeductionsPayaway100,\n                dVersDednsPassedToInsured100,\n                dVersionBrokerDeductible100,\n                dVersionNetToInsured100,\n                dVersionCashReceivable100,\n                dVersionNetThisTime100,\n                dVersionDeductionsThisTimeShareTT,\n                dVersnDeductionsPayawayShareW,\n                dVersionNetThisTimeShareTT,\n                dVersionAdjustmentPremiumS,\n                dVersionAdditionsPayawayShareS,\n                dVerDednsPassedToInsuredShareS,\n                dVersionBasePremiumShareTT,\n                dVersionRatedPremiumShareTT,\n                dVersionDepositPremiumShareTT,\n                dVersionGrossThisTimeShareTT,\n                dVersionAdditionsThisTimeShareTT,\n                dVersionBrokerDeductibleShareT,\n                dVersionNetToInsuredShareT,\n                dVersionCashReceivableShareT,\n                dPreviousDepositPremium100,\n                dPreviousBasePremium100,\n                dPreviousGrossThisTime100,\n                dPreviousRatedPremium100,\n                dPreviousAdditionsThisTime100,\n                dPreviousDeductionsThisTime100,\n                dPreviousNetThisTime100,\n                dTotalDepositPremium100,\n                dTotalBasePremium100,\n                dTotalRatedPremium100,\n                dTotalGrossThisTime100,\n                dTotalAdditionsThisTime100,\n                dTotalDeductionsThisTime100,\n                dTotalNetThisTime100,\n                dTotalDeductionsThisTimeShareTT,\n                dTotalNetThisTimeShareTT,\n                dTotalRatedPremiumShareTT,\n                dTotalAdditionsThisTimeShareTT,\n                dTotalBasePremiumShareTT,\n                dTotalGrossThisTimeShareTT,\n                lEPICurrencyKey,\n                dEPIROE,\n                dVersionGrossGrossWritten100,\n                dVersionGrossGrossWrittenShareTT,\n                dVersionDeductionsWritten100,\n                dVersionDeductionsWrittenShareTT,\n                dVersionNetWritten100,\n                dVersionNetWrittenShareTT,\n                lPLRiskSettlementCurrency,\n                dPLRiskSettROE,\n                dCurrentInstalmentTotal100,\n                bBurningCosts,\n                dLowerBurningCostRate,\n                dUpperBurningCostRate,\n                lTypeOfRateModifierBasisKey,\n                nPolicyTermFullMonths,\n                nPolicyTermPartMonths,\n                nPolicyTermRemainingDays,\n                bSponsored,\n                lTerritoryKey,\n                dMinimumPC,\n                dVersionMinimumPremium100,\n                dVersionMinimumPremiumShareTT,\n                dPreviousMinimumPremium100,\n                dTotalMinimumPremium100,\n                dTotalMinimumPremiumShareTT,\n                dVersionGrossGrossThisTime100,\n                dVersionGrossGrossThisTimeShareTT,\n                lProductTemplateSectionKey,\n                dPreviousGrossGrossWritten100,\n                dTotalGrossGrossWritten100,\n                dTotalGrossGrossWrittenShareTT,\n                dRate,\n                dTotalDepositPremiumShareTT,\n                dVersionRatedPremium100Save,\n                dVersionGrossPremium100Save,\n                dEPI100Save,\n                bInheritDeductible,\n                boverridable,\n                dVersnGrossGrossPremium100Save,\n                dLookedUpMasterRate,\n                lMasterPolicyLiabilityKey,\n                lPolicyLiabilityMasterRateKey,\n                lMastPolLiabilityChainKey,\n                lMasterTemplateRatingKey,\n                lLimitCurrencyKey,\n                dLimitCurrencyROE,\n                lAreaKey,\n                bBasePremiumAggregated,\n                dtTransitFrom,\n                dtTransitTo,\n                nTransitDays,\n                dLimitInBaseCcy,\n                bDefaultRatingBasisAmtToLimit,\n                sCoverage,\n                sCoverageCode,\n                dPreviousGrossGrossThisTime100,\n                dTotalGrossGrossThisTime100,\n                dTotalGrossGrossThisTimeShareTT,\n                dPreviousAdditionsWritten100,\n                dTotalAdditionsWritten100,\n                dVersionAdditionsWritten100,\n                dVersionAdditionsWrittenShareTT,\n                dPreviousDeductionsWritten100,\n                dTotalDeductionsWritten100,\n                dTotalDeductionsWrittenShareTT,\n                dPreviousNetWritten100,\n                dTotalNetWritten100,\n                dVersionGrossWritten100,\n                dVersionGrossWrittenShareTT,\n                dTotalGrossWritten100,\n                dPreviousGrossWritten100,\n                dTotalGrossWrittenShareTT,\n                dTotalAdditionsWrittenShareTT,\n                dTotalNetWrittenShareTT,\n                bExcludeTaxDeduction,\n                dAgreementLimit,\n                dAgreementAggregateLimit,\n                dVersionNetPremToInsurerShareTT,\n                dVersionNetPremToInsurer100,\n                dVersionWNetPremToInsurerShareTT,\n                dVersionWNetPremToInsurer100,\n                dRatedPremiumOverride,\n                dActualRatedPremium100,\n                bNewCoverage,\n                bBinderCurrencyRestriction,\n                lLimitAIOr100Key,\n                dCoverageAmountPc,\n                lCoveragePcOfSubClassKey,\n                lTypeOfCoverageGreaterLessThanKey,\n                lCoverageGreaterLessThanOperatorKey,\n                dCoverageDailyAmount,\n                nCoverageDays,\n                nCoverageWaitingPeriodDays,\n                dCoverageWaitingPeriodAmount,\n                lExcessCurrencyKey,\n                lExcessAIOr100Key,\n                dExcessROE,\n                bAsScheduledLimitOccurence,\n                bAsScheduledExcessOf,\n                bAsScheduledLimitAggregate,\n                bAsScheduledDailyAmount,\n                bAsScheduledNoOfDays,\n                bAsScheduledWaitingPeriodDays,\n                lTypeofDeductibleBasedOnKey,\n                lDeductibleCcyKey,\n                lDedductibleAIor100Key,\n                dDeductiblePC,\n                dMinDeductible,\n                dMaxDeductible,\n                bAsScheduledDeductible,\n                bAsScheduledDeductiblePC,\n                bAsScheduledDeductibleMin,\n                bAsScheduledDeductibleMax,\n                bAsScheduleWaitingPeriodAmount,\n                lCoverageSetKey,\n                bIsAIHidden,\n                lTypeOfCoverageOptionKey,\n                dOccurrenceCompareAmount,\n                dPMLPC,\n                lTypeOfCoverageComparisonKey,\n                dCessionPc,\n                bAsScheduledPMLPc,\n                lPMLOption,\n                lExcessOption,\n                sCoverageNarrative,\n                dGrossForPeriod,\n                dGrossForPeriodSave,\n                dReplaceGrossForPeriod,\n                dEventLimit100,\n                dMaxEventLimitShare,\n                dTSI,\n                lTypeofLoadingFactor,\n                dStoreTotalDepositPremium100,\n                dStorePreviousDepositPremium100,\n                bCoverageElementMandatory,\n                nCountCoverageElement,\n                bCoverageElementRequired,\n                lPreviousTypeOfPremiumBasisKey\n            order by\n                dw_loadts\n        ) as dw_extract_order\n    from\n        policy_liability\n),\n\nfiltered as (\n    select * from ordered where dw_extract_order = 1\n),\n\nranged as (\n    select\n        lPolicyLiabilityKey,\n        lPolicySectionKey,\n        lPolicyActivityKey,\n        lPolicyKey,\n        lPolicyFolderKey,\n        lPolicyLiabilityChainKey,\n        lAuthorityCheckJoinKey,\n        bProductPriming,\n        lAgreementLiabilityKey,\n        lProductTemplateLiabilityKey,\n        bMandatory,\n        bPrintOnDecSheet,\n        nOrder,\n        bMasterLimit,\n        bGetsMasterLimit,\n        bLimitLessThanParentLimit,\n        bDefaultedMasterLimitEditable,\n        bRatedPremiumIsProRated,\n        nPeriodDays,\n        lTypeOfSubClassKey,\n        lTypeOfPlacementKey,\n        lTypeOfLimitBasisKey,\n        lTypeOfClaimBasisKey,\n        dLimit,\n        dExcessOf,\n        dExposure,\n        dLimitAggregate,\n        lPLTypeOfDeductibleKey,\n        dDeductible,\n        lDeductibleRatingLookupKey,\n        lDeductibleTemplateRatingKey,\n        lLiabilityPremiumCcyKey,\n        dLiabilityPremiumROE,\n        dPremiumSplitPc,\n        bPremiumApplicable,\n        bRated,\n        bPremiumAggregated,\n        lTypeOfRateKey,\n        dLookedUpRate,\n        lTemplateRatingKey,\n        lRatingLookupKey,\n        lTypeOfRatingBasisKey,\n        dRatingBasisAmount,\n        dPreviousRatingBasisAmount,\n        dVersionRatingBasisAmount,\n        dRatingModifier,\n        lTypeOfPremiumBasisKey,\n        dMinimumDepositPc,\n        dVersionDepositPremium100,\n        dVersionAdjustmentPremium100,\n        dVersionBasePremium100,\n        dVersionGrossThisTime100,\n        dVersionRatedPremium100,\n        dVersionAdditionsThisTime100,\n        dVersionDeductionsThisTime100,\n        dVersionAdditionsPayaway100,\n        dVersionDeductionsPayaway100,\n        dVersDednsPassedToInsured100,\n        dVersionBrokerDeductible100,\n        dVersionNetToInsured100,\n        dVersionCashReceivable100,\n        dVersionNetThisTime100,\n        dVersionDeductionsThisTimeShareTT,\n        dVersnDeductionsPayawayShareW,\n        dVersionNetThisTimeShareTT,\n        dVersionAdjustmentPremiumS,\n        dVersionAdditionsPayawayShareS,\n        dVerDednsPassedToInsuredShareS,\n        dVersionBasePremiumShareTT,\n        dVersionRatedPremiumShareTT,\n        dVersionDepositPremiumShareTT,\n        dVersionGrossThisTimeShareTT,\n        dVersionAdditionsThisTimeShareTT,\n        dVersionBrokerDeductibleShareT,\n        dVersionNetToInsuredShareT,\n        dVersionCashReceivableShareT,\n        dPreviousDepositPremium100,\n        dPreviousBasePremium100,\n        dPreviousGrossThisTime100,\n        dPreviousRatedPremium100,\n        dPreviousAdditionsThisTime100,\n        dPreviousDeductionsThisTime100,\n        dPreviousNetThisTime100,\n        dTotalDepositPremium100,\n        dTotalBasePremium100,\n        dTotalRatedPremium100,\n        dTotalGrossThisTime100,\n        dTotalAdditionsThisTime100,\n        dTotalDeductionsThisTime100,\n        dTotalNetThisTime100,\n        dTotalDeductionsThisTimeShareTT,\n        dTotalNetThisTimeShareTT,\n        dTotalRatedPremiumShareTT,\n        dTotalAdditionsThisTimeShareTT,\n        dTotalBasePremiumShareTT,\n        dTotalGrossThisTimeShareTT,\n        lEPICurrencyKey,\n        dEPIROE,\n        dVersionGrossGrossWritten100,\n        dVersionGrossGrossWrittenShareTT,\n        dVersionDeductionsWritten100,\n        dVersionDeductionsWrittenShareTT,\n        dVersionNetWritten100,\n        dVersionNetWrittenShareTT,\n        lPLRiskSettlementCurrency,\n        dPLRiskSettROE,\n        dCurrentInstalmentTotal100,\n        bBurningCosts,\n        dLowerBurningCostRate,\n        dUpperBurningCostRate,\n        lTypeOfRateModifierBasisKey,\n        nPolicyTermFullMonths,\n        nPolicyTermPartMonths,\n        nPolicyTermRemainingDays,\n        bSponsored,\n        lTerritoryKey,\n        dMinimumPC,\n        dVersionMinimumPremium100,\n        dVersionMinimumPremiumShareTT,\n        dPreviousMinimumPremium100,\n        dTotalMinimumPremium100,\n        dTotalMinimumPremiumShareTT,\n        dVersionGrossGrossThisTime100,\n        dVersionGrossGrossThisTimeShareTT,\n        lProductTemplateSectionKey,\n        dPreviousGrossGrossWritten100,\n        dTotalGrossGrossWritten100,\n        dTotalGrossGrossWrittenShareTT,\n        dRate,\n        dTotalDepositPremiumShareTT,\n        dVersionRatedPremium100Save,\n        dVersionGrossPremium100Save,\n        dEPI100Save,\n        bInheritDeductible,\n        boverridable,\n        dVersnGrossGrossPremium100Save,\n        dLookedUpMasterRate,\n        lMasterPolicyLiabilityKey,\n        lPolicyLiabilityMasterRateKey,\n        lMastPolLiabilityChainKey,\n        lMasterTemplateRatingKey,\n        lLimitCurrencyKey,\n        dLimitCurrencyROE,\n        lAreaKey,\n        bBasePremiumAggregated,\n        dtTransitFrom,\n        dtTransitTo,\n        nTransitDays,\n        dLimitInBaseCcy,\n        bDefaultRatingBasisAmtToLimit,\n        sCoverage,\n        sCoverageCode,\n        dPreviousGrossGrossThisTime100,\n        dTotalGrossGrossThisTime100,\n        dTotalGrossGrossThisTimeShareTT,\n        dPreviousAdditionsWritten100,\n        dTotalAdditionsWritten100,\n        dVersionAdditionsWritten100,\n        dVersionAdditionsWrittenShareTT,\n        dPreviousDeductionsWritten100,\n        dTotalDeductionsWritten100,\n        dTotalDeductionsWrittenShareTT,\n        dPreviousNetWritten100,\n        dTotalNetWritten100,\n        dVersionGrossWritten100,\n        dVersionGrossWrittenShareTT,\n        dTotalGrossWritten100,\n        dPreviousGrossWritten100,\n        dTotalGrossWrittenShareTT,\n        dTotalAdditionsWrittenShareTT,\n        dTotalNetWrittenShareTT,\n        bExcludeTaxDeduction,\n        dAgreementLimit,\n        dAgreementAggregateLimit,\n        dVersionNetPremToInsurerShareTT,\n        dVersionNetPremToInsurer100,\n        dVersionWNetPremToInsurerShareTT,\n        dVersionWNetPremToInsurer100,\n        dRatedPremiumOverride,\n        dActualRatedPremium100,\n        bNewCoverage,\n        bBinderCurrencyRestriction,\n        lLimitAIOr100Key,\n        dCoverageAmountPc,\n        lCoveragePcOfSubClassKey,\n        lTypeOfCoverageGreaterLessThanKey,\n        lCoverageGreaterLessThanOperatorKey,\n        dCoverageDailyAmount,\n        nCoverageDays,\n        nCoverageWaitingPeriodDays,\n        dCoverageWaitingPeriodAmount,\n        lExcessCurrencyKey,\n        lExcessAIOr100Key,\n        dExcessROE,\n        bAsScheduledLimitOccurence,\n        bAsScheduledExcessOf,\n        bAsScheduledLimitAggregate,\n        bAsScheduledDailyAmount,\n        bAsScheduledNoOfDays,\n        bAsScheduledWaitingPeriodDays,\n        lTypeofDeductibleBasedOnKey,\n        lDeductibleCcyKey,\n        lDedductibleAIor100Key,\n        dDeductiblePC,\n        dMinDeductible,\n        dMaxDeductible,\n        bAsScheduledDeductible,\n        bAsScheduledDeductiblePC,\n        bAsScheduledDeductibleMin,\n        bAsScheduledDeductibleMax,\n        bAsScheduleWaitingPeriodAmount,\n        lCoverageSetKey,\n        bIsAIHidden,\n        lTypeOfCoverageOptionKey,\n        dOccurrenceCompareAmount,\n        dPMLPC,\n        lTypeOfCoverageComparisonKey,\n        dCessionPc,\n        bAsScheduledPMLPc,\n        lPMLOption,\n        lExcessOption,\n        sCoverageNarrative,\n        dGrossForPeriod,\n        dGrossForPeriodSave,\n        dReplaceGrossForPeriod,\n        dEventLimit100,\n        dMaxEventLimitShare,\n        dTSI,\n        lTypeofLoadingFactor,\n        dStoreTotalDepositPremium100,\n        dStorePreviousDepositPremium100,\n        bCoverageElementMandatory,\n        nCountCoverageElement,\n        bCoverageElementRequired,\n        lPreviousTypeOfPremiumBasisKey,\n        dw_loadts as _valid_from,\n        lead(dw_loadts) over (partition by lPolicyLiabilityKey order by dw_loadts) as _valid_to\n    from\n        filtered\n)\n\nselect * from ranged", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"scd_policy_liability\""}, "model.iginsure.scd_policy_line": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.iginsure.dbo.policy_line"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["InwardPremium"], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "scd", "scd_policy_line"], "unique_id": "model.iginsure.scd_policy_line", "raw_code": "-- This file is automatically generated\r\n\r\n{{\r\n  config(tags=['InwardPremium'])\r\n}}\r\nwith\r\n\r\npolicy_line as (\r\n    select * from {{ source('dbo', 'policy_line') }}\r\n),\r\n\r\nordered as (\r\n    select\r\n        lPolicyLineKey,\r\n        lPolicyActivityKey,\r\n        lPolicyKey,\r\n        lPolicyFolderKey,\r\n        lMarketSourceKey,\r\n        lDivisionKey,\r\n        lSubDivisionKey,\r\n        lMarketDivisionKey,\r\n        lMarketSubDivisionKey,\r\n        lMarketAreaKey,\r\n        sPolicyLineReference,\r\n        dtDateWritten,\r\n        dParticipationPc,\r\n        dWrittenLinePc,\r\n        dWrittenLineLimitShare,\r\n        dWrittenLineLimit100,\r\n        dEstimatedSigningPc,\r\n        dBrokersOrderPc,\r\n        dActualEstimatedLinePc,\r\n        dtDateSigned,\r\n        dSignedLinePc,\r\n        dSignedOrderPc,\r\n        dActualSignedLinePc,\r\n        dSignedDownPc,\r\n        dVersionActualSignedLinePc,\r\n        dWorkingLinePc,\r\n        dPreviousActualSignedLinePc,\r\n        dOverrideSignedLinePC,\r\n        dOverrideSignedOrderPC,\r\n        lWrittenAccountPeriodKey,\r\n        lSignedAccountPeriodKey,\r\n        lTypeOfEstimatedLineKey,\r\n        bSignDownPossible,\r\n        bSignedByDelink,\r\n        bWrittenLineToStand,\r\n        lTypeofLeaderKey,\r\n        lLeaderContactKey,\r\n        dLeadUWLinePC,\r\n        bCoinsuranceExists,\r\n        sLeadReference,\r\n        bCoinsurancePremiumAccounting,\r\n        bCoinsuranceClaimAccounting,\r\n        dCoinsuranceTotalPC,\r\n        lTypeOfMarketSourceKey,\r\n        bSubscriptionMarket,\r\n        bLeader,\r\n        lTypeOfBillingKey,\r\n        bLeaderManagesAdditions,\r\n        lFrontingCompanyContactKey,\r\n        sFrontingOfficeRef,\r\n        dFrontingOrderPC,\r\n        lSummaryCcyKey,\r\n        dSummaryCcyROE,\r\n        nCountSoleLeader,\r\n        lBoundAccountPeriodKey,\r\n        lProductCarrierKey,\r\n        lProductCarrierStateKey,\r\n        lCarrierContactKey,\r\n        lProductKey,\r\n        lProductVersionCarrierKey,\r\n        lProductVersionTemplateKey,\r\n        lAddressCountryKey,\r\n        lAddressStateKey,\r\n        bKeyAddrStateUsedInProdCarrier,\r\n        bDocumentCarrier,\r\n        dtCancel,\r\n        bProductRuleResult,\r\n        bProductHardRuleResult,\r\n        nCountDeclinedReason,\r\n        bAuthorisationResult,\r\n        bNewLineThisActivity,\r\n        bNewLineThisEndorsement,\r\n        dtPeriodFrom,\r\n        bUndoQuoteNTUReasonEntered,\r\n        bQuoteNTUReasonEntered,\r\n        lUnderWriterContactKey,\r\n        lUnderwritingAssistContactKey,\r\n        lPolicyLineChainKey,\r\n        bRunSigningProcess,\r\n        bMsgProcessed,\r\n        lTypeOfDivisionKey,\r\n        nMGACounter,\r\n        bPeerReviewRequired,\r\n        nNumberofReviewers,\r\n        nNumberofChecks,\r\n        nNumberofCompleteChecks,\r\n        lFirstPeerReviewApprovedBy,\r\n        lSecondPeerReviewApprovedBy,\r\n        bMasterPolicyUpdated,\r\n        nUnassignedUnderwriters,\r\n        lWorkingAccountPeriodKey,\r\n        binvoicecreated,\r\n        nSigningOverridden,\r\n        dDelinkedSignedLinePC,\r\n        dDelinkedBrokerOrderPC,\r\n        bRunDelinkedSigningProcessFlag,\r\n        nSectionsCoveredbyLine,\r\n        lTypeOfProfitCentreKey,\r\n        lAgreementActivityKey,\r\n        dCodeSplitsTotalpc,\r\n        bLimitWithinAgreement,\r\n        bPremiumWithinAgreement,\r\n        bCountryUsedInProductTemplate,\r\n        sPolicyLineReferenceOverride,\r\n        bReferenceUnique,\r\n        bEffectiveDateOutOfRange,\r\n        bVoided,\r\n        sDivisionText,\r\n        sSubDivisionText,\r\n        sCombinedDivisionText,\r\n        lLatestUWAssistContactKey,\r\n        lLatestUWAssistDefaultDivisionKey,\r\n        lLatestUWAssistDefaultSubDivisionKey,\r\n        lPresentationCurrencyKey,\r\n        bCloseClaimAFP,\r\n        bCannotPayClaimsLTR,\r\n        bAllowOverridePolicyReference,\r\n        bImmediateGeneratePolicyReference,\r\n        bAllowOverridePolicyReferenceFlag,\r\n        bFirstPolicyLineRow,\r\n        lBrokerContactKey,\r\n        lProducerContactKey,\r\n        lInsuredContactKey,\r\n        lReassuredContactKey,\r\n        bFrontingFeeCheck,\r\n        bHasBeenSigned,\r\n        lSigningPolicyLineChainKey,\r\n        dPMLLimit100,\r\n        dPMLLimitShare,\r\n        dFACLimit100,\r\n        dPMLLimitNetofFac100,\r\n        dPMLLimitNetofFacShare,\r\n        dMaxPMLLimitShare,\r\n        dMaxEventLimitShare,\r\n        bLimitChecked,\r\n        bLimitOverride,\r\n        dFACLimitShare,\r\n        dEventLimit100,\r\n        dEventLimitShare,\r\n        bCreateFac,\r\n        lAutoCreatedFacRIFolderKey,\r\n        bFacCreated,\r\n        bLimitAllowed,\r\n        dPolicyLineLimitCurrencyKey,\r\n        dPolicyLineLimitROE,\r\n        dMaxPMLLimit,\r\n        dMaxEventLimit,\r\n        lIGIAgreementParty,\r\n        bNRMLossEffected,\r\n        dtTechnicalWrittenSigned,\r\n        lOriginalBrokerContactKey,\r\n        lSurplusBrokerContactKey,\r\n        lFileHandlerContactKey,\r\n        lAdminFileHandlerContactKey,\r\n        lRecommendedUWContactKey,\r\n        lzoneCountryKey,\r\n        lterritorykey,\r\n        lSolvencyCountryKey,\r\n        lSlipLeaderContactKey,\r\n        nNoOfReinstatements,\r\n        lReinstatementCCYKey,\r\n        dReinstatementAggLimit,\r\n        lTypeofBaseofReinstatementkey,\r\n        lTypeofStampCodeKey,\r\n        lTypeofCyberRiskKey,\r\n        dTSI,\r\n        lTypeOfERPNoOfYears,\r\n        lTypeofProjectKey,\r\n        lTypeofNetRateMovementkey,\r\n        dNetRateMovement,\r\n        bAuthorisedProducer,\r\n        bAuthorisedInsured,\r\n        bAuthorisedReassured,\r\n        bAuthorisedBroker,\r\n        dPremiumAmountShareT,\r\n        bRIAutoProfilingRequired,\r\n        nNextClaimNo,\r\n        lUnapprovedBrokerKey,\r\n        lDomicileCountryKey,\r\n        lTypeofSanctionsClauseKey,\r\n        bPPL,\r\n        lTypeofPolicyLineKey,\r\n        dtUWyear,\r\n        sPolicyLineBKReference,\r\n        lTypeofTreatyStatusKey,\r\n        lProductVersionTemplateCloneKey,\r\n        bDoNotGenerateRI,\r\n        lMasterPolicyActivityKey,\r\n        dAuthorizedPrem,\r\n        bPremiumAuthorized,\r\n        bRequiresKYCDivision,\r\n        bisSignlineApproved,\r\n        lLinkRenewalPolicyKey,\r\n        bLinkRenewalRule,\r\n        lTypeOfPolicyActivityKey,\r\n        lPricingTypekey,\r\n        lPricingTimekey,\r\n        lModelSequencekey,\r\n        dPlanAdequacy,\r\n        dTechnicalAdequacy,\r\n        dGrossPremium,\r\n        dGrossNetPremium,\r\n        dExposurePremium,\r\n        dNonProgrammeDeductable,\r\n        dTermsConditions,\r\n        dGrossRateMovementBasic,\r\n        dNetRateMovementBasic,\r\n        dGrossRateMovementFull,\r\n        dNetRateMovementFull,\r\n        dw_loadts,\r\n        row_number() over (\r\n            partition by\r\n                lPolicyLineKey,\r\n                lPolicyActivityKey,\r\n                lPolicyKey,\r\n                lPolicyFolderKey,\r\n                lMarketSourceKey,\r\n                lDivisionKey,\r\n                lSubDivisionKey,\r\n                lMarketDivisionKey,\r\n                lMarketSubDivisionKey,\r\n                lMarketAreaKey,\r\n                sPolicyLineReference,\r\n                dtDateWritten,\r\n                dParticipationPc,\r\n                dWrittenLinePc,\r\n                dWrittenLineLimitShare,\r\n                dWrittenLineLimit100,\r\n                dEstimatedSigningPc,\r\n                dBrokersOrderPc,\r\n                dActualEstimatedLinePc,\r\n                dtDateSigned,\r\n                dSignedLinePc,\r\n                dSignedOrderPc,\r\n                dActualSignedLinePc,\r\n                dSignedDownPc,\r\n                dVersionActualSignedLinePc,\r\n                dWorkingLinePc,\r\n                dPreviousActualSignedLinePc,\r\n                dOverrideSignedLinePC,\r\n                dOverrideSignedOrderPC,\r\n                lWrittenAccountPeriodKey,\r\n                lSignedAccountPeriodKey,\r\n                lTypeOfEstimatedLineKey,\r\n                bSignDownPossible,\r\n                bSignedByDelink,\r\n                bWrittenLineToStand,\r\n                lTypeofLeaderKey,\r\n                lLeaderContactKey,\r\n                dLeadUWLinePC,\r\n                bCoinsuranceExists,\r\n                sLeadReference,\r\n                bCoinsurancePremiumAccounting,\r\n                bCoinsuranceClaimAccounting,\r\n                dCoinsuranceTotalPC,\r\n                lTypeOfMarketSourceKey,\r\n                bSubscriptionMarket,\r\n                bLeader,\r\n                lTypeOfBillingKey,\r\n                bLeaderManagesAdditions,\r\n                lFrontingCompanyContactKey,\r\n                sFrontingOfficeRef,\r\n                dFrontingOrderPC,\r\n                lSummaryCcyKey,\r\n                dSummaryCcyROE,\r\n                nCountSoleLeader,\r\n                lBoundAccountPeriodKey,\r\n                lProductCarrierKey,\r\n                lProductCarrierStateKey,\r\n                lCarrierContactKey,\r\n                lProductKey,\r\n                lProductVersionCarrierKey,\r\n                lProductVersionTemplateKey,\r\n                lAddressCountryKey,\r\n                lAddressStateKey,\r\n                bKeyAddrStateUsedInProdCarrier,\r\n                bDocumentCarrier,\r\n                dtCancel,\r\n                bProductRuleResult,\r\n                bProductHardRuleResult,\r\n                nCountDeclinedReason,\r\n                bAuthorisationResult,\r\n                bNewLineThisActivity,\r\n                bNewLineThisEndorsement,\r\n                dtPeriodFrom,\r\n                bUndoQuoteNTUReasonEntered,\r\n                bQuoteNTUReasonEntered,\r\n                lUnderWriterContactKey,\r\n                lUnderwritingAssistContactKey,\r\n                lPolicyLineChainKey,\r\n                bRunSigningProcess,\r\n                bMsgProcessed,\r\n                lTypeOfDivisionKey,\r\n                nMGACounter,\r\n                bPeerReviewRequired,\r\n                nNumberofReviewers,\r\n                nNumberofChecks,\r\n                nNumberofCompleteChecks,\r\n                lFirstPeerReviewApprovedBy,\r\n                lSecondPeerReviewApprovedBy,\r\n                bMasterPolicyUpdated,\r\n                nUnassignedUnderwriters,\r\n                lWorkingAccountPeriodKey,\r\n                binvoicecreated,\r\n                nSigningOverridden,\r\n                dDelinkedSignedLinePC,\r\n                dDelinkedBrokerOrderPC,\r\n                bRunDelinkedSigningProcessFlag,\r\n                nSectionsCoveredbyLine,\r\n                lTypeOfProfitCentreKey,\r\n                lAgreementActivityKey,\r\n                dCodeSplitsTotalpc,\r\n                bLimitWithinAgreement,\r\n                bPremiumWithinAgreement,\r\n                bCountryUsedInProductTemplate,\r\n                sPolicyLineReferenceOverride,\r\n                bReferenceUnique,\r\n                bEffectiveDateOutOfRange,\r\n                bVoided,\r\n                sDivisionText,\r\n                sSubDivisionText,\r\n                sCombinedDivisionText,\r\n                lLatestUWAssistContactKey,\r\n                lLatestUWAssistDefaultDivisionKey,\r\n                lLatestUWAssistDefaultSubDivisionKey,\r\n                lPresentationCurrencyKey,\r\n                bCloseClaimAFP,\r\n                bCannotPayClaimsLTR,\r\n                bAllowOverridePolicyReference,\r\n                bImmediateGeneratePolicyReference,\r\n                bAllowOverridePolicyReferenceFlag,\r\n                bFirstPolicyLineRow,\r\n                lBrokerContactKey,\r\n                lProducerContactKey,\r\n                lInsuredContactKey,\r\n                lReassuredContactKey,\r\n                bFrontingFeeCheck,\r\n                bHasBeenSigned,\r\n                lSigningPolicyLineChainKey,\r\n                dPMLLimit100,\r\n                dPMLLimitShare,\r\n                dFACLimit100,\r\n                dPMLLimitNetofFac100,\r\n                dPMLLimitNetofFacShare,\r\n                dMaxPMLLimitShare,\r\n                dMaxEventLimitShare,\r\n                bLimitChecked,\r\n                bLimitOverride,\r\n                dFACLimitShare,\r\n                dEventLimit100,\r\n                dEventLimitShare,\r\n                bCreateFac,\r\n                lAutoCreatedFacRIFolderKey,\r\n                bFacCreated,\r\n                bLimitAllowed,\r\n                dPolicyLineLimitCurrencyKey,\r\n                dPolicyLineLimitROE,\r\n                dMaxPMLLimit,\r\n                dMaxEventLimit,\r\n                lIGIAgreementParty,\r\n                bNRMLossEffected,\r\n                dtTechnicalWrittenSigned,\r\n                lOriginalBrokerContactKey,\r\n                lSurplusBrokerContactKey,\r\n                lFileHandlerContactKey,\r\n                lAdminFileHandlerContactKey,\r\n                lRecommendedUWContactKey,\r\n                lzoneCountryKey,\r\n                lterritorykey,\r\n                lSolvencyCountryKey,\r\n                lSlipLeaderContactKey,\r\n                nNoOfReinstatements,\r\n                lReinstatementCCYKey,\r\n                dReinstatementAggLimit,\r\n                lTypeofBaseofReinstatementkey,\r\n                lTypeofStampCodeKey,\r\n                lTypeofCyberRiskKey,\r\n                dTSI,\r\n                lTypeOfERPNoOfYears,\r\n                lTypeofProjectKey,\r\n                lTypeofNetRateMovementkey,\r\n                dNetRateMovement,\r\n                bAuthorisedProducer,\r\n                bAuthorisedInsured,\r\n                bAuthorisedReassured,\r\n                bAuthorisedBroker,\r\n                dPremiumAmountShareT,\r\n                bRIAutoProfilingRequired,\r\n                nNextClaimNo,\r\n                lUnapprovedBrokerKey,\r\n                lDomicileCountryKey,\r\n                lTypeofSanctionsClauseKey,\r\n                bPPL,\r\n                lTypeofPolicyLineKey,\r\n                dtUWyear,\r\n                sPolicyLineBKReference,\r\n                lTypeofTreatyStatusKey,\r\n                lProductVersionTemplateCloneKey,\r\n                bDoNotGenerateRI,\r\n                lMasterPolicyActivityKey,\r\n                dAuthorizedPrem,\r\n                bPremiumAuthorized,\r\n                bRequiresKYCDivision,\r\n                bisSignlineApproved,\r\n                lLinkRenewalPolicyKey,\r\n                bLinkRenewalRule,\r\n                lTypeOfPolicyActivityKey,\r\n                lPricingTypekey,\r\n                lPricingTimekey,\r\n                lModelSequencekey,\r\n                dPlanAdequacy,\r\n                dTechnicalAdequacy,\r\n                dGrossPremium,\r\n                dGrossNetPremium,\r\n                dExposurePremium,\r\n                dNonProgrammeDeductable,\r\n                dTermsConditions,\r\n                dGrossRateMovementBasic,\r\n                dNetRateMovementBasic,\r\n                dGrossRateMovementFull,\r\n                dNetRateMovementFull\r\n            order by\r\n                dw_loadts\r\n        ) as dw_extract_order\r\n    from\r\n        policy_line\r\n),\r\n\r\nfiltered as (\r\n    select * from ordered where dw_extract_order = 1\r\n),\r\n\r\nranged as (\r\n    select\r\n        lPolicyLineKey,\r\n        lPolicyActivityKey,\r\n        lPolicyKey,\r\n        lPolicyFolderKey,\r\n        lMarketSourceKey,\r\n        lDivisionKey,\r\n        lSubDivisionKey,\r\n        lMarketDivisionKey,\r\n        lMarketSubDivisionKey,\r\n        lMarketAreaKey,\r\n        sPolicyLineReference,\r\n        dtDateWritten,\r\n        dParticipationPc,\r\n        dWrittenLinePc,\r\n        dWrittenLineLimitShare,\r\n        dWrittenLineLimit100,\r\n        dEstimatedSigningPc,\r\n        dBrokersOrderPc,\r\n        dActualEstimatedLinePc,\r\n        dtDateSigned,\r\n        dSignedLinePc,\r\n        dSignedOrderPc,\r\n        dActualSignedLinePc,\r\n        dSignedDownPc,\r\n        dVersionActualSignedLinePc,\r\n        dWorkingLinePc,\r\n        dPreviousActualSignedLinePc,\r\n        dOverrideSignedLinePC,\r\n        dOverrideSignedOrderPC,\r\n        lWrittenAccountPeriodKey,\r\n        lSignedAccountPeriodKey,\r\n        lTypeOfEstimatedLineKey,\r\n        bSignDownPossible,\r\n        bSignedByDelink,\r\n        bWrittenLineToStand,\r\n        lTypeofLeaderKey,\r\n        lLeaderContactKey,\r\n        dLeadUWLinePC,\r\n        bCoinsuranceExists,\r\n        sLeadReference,\r\n        bCoinsurancePremiumAccounting,\r\n        bCoinsuranceClaimAccounting,\r\n        dCoinsuranceTotalPC,\r\n        lTypeOfMarketSourceKey,\r\n        bSubscriptionMarket,\r\n        bLeader,\r\n        lTypeOfBillingKey,\r\n        bLeaderManagesAdditions,\r\n        lFrontingCompanyContactKey,\r\n        sFrontingOfficeRef,\r\n        dFrontingOrderPC,\r\n        lSummaryCcyKey,\r\n        dSummaryCcyROE,\r\n        nCountSoleLeader,\r\n        lBoundAccountPeriodKey,\r\n        lProductCarrierKey,\r\n        lProductCarrierStateKey,\r\n        lCarrierContactKey,\r\n        lProductKey,\r\n        lProductVersionCarrierKey,\r\n        lProductVersionTemplateKey,\r\n        lAddressCountryKey,\r\n        lAddressStateKey,\r\n        bKeyAddrStateUsedInProdCarrier,\r\n        bDocumentCarrier,\r\n        dtCancel,\r\n        bProductRuleResult,\r\n        bProductHardRuleResult,\r\n        nCountDeclinedReason,\r\n        bAuthorisationResult,\r\n        bNewLineThisActivity,\r\n        bNewLineThisEndorsement,\r\n        dtPeriodFrom,\r\n        bUndoQuoteNTUReasonEntered,\r\n        bQuoteNTUReasonEntered,\r\n        lUnderWriterContactKey,\r\n        lUnderwritingAssistContactKey,\r\n        lPolicyLineChainKey,\r\n        bRunSigningProcess,\r\n        bMsgProcessed,\r\n        lTypeOfDivisionKey,\r\n        nMGACounter,\r\n        bPeerReviewRequired,\r\n        nNumberofReviewers,\r\n        nNumberofChecks,\r\n        nNumberofCompleteChecks,\r\n        lFirstPeerReviewApprovedBy,\r\n        lSecondPeerReviewApprovedBy,\r\n        bMasterPolicyUpdated,\r\n        nUnassignedUnderwriters,\r\n        lWorkingAccountPeriodKey,\r\n        binvoicecreated,\r\n        nSigningOverridden,\r\n        dDelinkedSignedLinePC,\r\n        dDelinkedBrokerOrderPC,\r\n        bRunDelinkedSigningProcessFlag,\r\n        nSectionsCoveredbyLine,\r\n        lTypeOfProfitCentreKey,\r\n        lAgreementActivityKey,\r\n        dCodeSplitsTotalpc,\r\n        bLimitWithinAgreement,\r\n        bPremiumWithinAgreement,\r\n        bCountryUsedInProductTemplate,\r\n        sPolicyLineReferenceOverride,\r\n        bReferenceUnique,\r\n        bEffectiveDateOutOfRange,\r\n        bVoided,\r\n        sDivisionText,\r\n        sSubDivisionText,\r\n        sCombinedDivisionText,\r\n        lLatestUWAssistContactKey,\r\n        lLatestUWAssistDefaultDivisionKey,\r\n        lLatestUWAssistDefaultSubDivisionKey,\r\n        lPresentationCurrencyKey,\r\n        bCloseClaimAFP,\r\n        bCannotPayClaimsLTR,\r\n        bAllowOverridePolicyReference,\r\n        bImmediateGeneratePolicyReference,\r\n        bAllowOverridePolicyReferenceFlag,\r\n        bFirstPolicyLineRow,\r\n        lBrokerContactKey,\r\n        lProducerContactKey,\r\n        lInsuredContactKey,\r\n        lReassuredContactKey,\r\n        bFrontingFeeCheck,\r\n        bHasBeenSigned,\r\n        lSigningPolicyLineChainKey,\r\n        dPMLLimit100,\r\n        dPMLLimitShare,\r\n        dFACLimit100,\r\n        dPMLLimitNetofFac100,\r\n        dPMLLimitNetofFacShare,\r\n        dMaxPMLLimitShare,\r\n        dMaxEventLimitShare,\r\n        bLimitChecked,\r\n        bLimitOverride,\r\n        dFACLimitShare,\r\n        dEventLimit100,\r\n        dEventLimitShare,\r\n        bCreateFac,\r\n        lAutoCreatedFacRIFolderKey,\r\n        bFacCreated,\r\n        bLimitAllowed,\r\n        dPolicyLineLimitCurrencyKey,\r\n        dPolicyLineLimitROE,\r\n        dMaxPMLLimit,\r\n        dMaxEventLimit,\r\n        lIGIAgreementParty,\r\n        bNRMLossEffected,\r\n        dtTechnicalWrittenSigned,\r\n        lOriginalBrokerContactKey,\r\n        lSurplusBrokerContactKey,\r\n        lFileHandlerContactKey,\r\n        lAdminFileHandlerContactKey,\r\n        lRecommendedUWContactKey,\r\n        lzoneCountryKey,\r\n        lterritorykey,\r\n        lSolvencyCountryKey,\r\n        lSlipLeaderContactKey,\r\n        nNoOfReinstatements,\r\n        lReinstatementCCYKey,\r\n        dReinstatementAggLimit,\r\n        lTypeofBaseofReinstatementkey,\r\n        lTypeofStampCodeKey,\r\n        lTypeofCyberRiskKey,\r\n        dTSI,\r\n        lTypeOfERPNoOfYears,\r\n        lTypeofProjectKey,\r\n        lTypeofNetRateMovementkey,\r\n        dNetRateMovement,\r\n        bAuthorisedProducer,\r\n        bAuthorisedInsured,\r\n        bAuthorisedReassured,\r\n        bAuthorisedBroker,\r\n        dPremiumAmountShareT,\r\n        bRIAutoProfilingRequired,\r\n        nNextClaimNo,\r\n        lUnapprovedBrokerKey,\r\n        lDomicileCountryKey,\r\n        lTypeofSanctionsClauseKey,\r\n        bPPL,\r\n        lTypeofPolicyLineKey,\r\n        dtUWyear,\r\n        sPolicyLineBKReference,\r\n        lTypeofTreatyStatusKey,\r\n        lProductVersionTemplateCloneKey,\r\n        bDoNotGenerateRI,\r\n        lMasterPolicyActivityKey,\r\n        dAuthorizedPrem,\r\n        bPremiumAuthorized,\r\n        bRequiresKYCDivision,\r\n        bisSignlineApproved,\r\n        lLinkRenewalPolicyKey,\r\n        bLinkRenewalRule,\r\n        lTypeOfPolicyActivityKey,\r\n        lPricingTypekey,\r\n        lPricingTimekey,\r\n        lModelSequencekey,\r\n        dPlanAdequacy,\r\n        dTechnicalAdequacy,\r\n        dGrossPremium,\r\n        dGrossNetPremium,\r\n        dExposurePremium,\r\n        dNonProgrammeDeductable,\r\n        dTermsConditions,\r\n        dGrossRateMovementBasic,\r\n        dNetRateMovementBasic,\r\n        dGrossRateMovementFull,\r\n        dNetRateMovementFull,\r\n        dw_loadts as _valid_from,\r\n        lead(dw_loadts) over (partition by lPolicyLineKey order by dw_loadts) as _valid_to\r\n    from\r\n        filtered\r\n)\r\n\r\nselect * from ranged", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "scd\\scd_policy_line.sql", "original_file_path": "models\\scd\\scd_policy_line.sql", "name": "scd_policy_line", "alias": "scd_policy_line", "checksum": {"name": "sha256", "checksum": "564898efddc49af6361ee812de969fac69590ca70a77bb2fa753fc87aef61022"}, "tags": ["InwardPremium"], "refs": [], "sources": [["dbo", "policy_line"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": "iginsure://models\\scd\\scd.yml", "compiled_path": "target\\compiled\\iginsure\\models\\scd\\scd_policy_line.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "docs": {"show": false}, "tags": ["InwardPremium"]}, "created_at": 1701786801.7940807, "compiled_code": "-- This file is automatically generated\n\n\nwith\n\npolicy_line as (\n    select * from \"IGI_PROD_DW\".\"dbo\".\"PolicyLine\"\n),\n\nordered as (\n    select\n        lPolicyLineKey,\n        lPolicyActivityKey,\n        lPolicyKey,\n        lPolicyFolderKey,\n        lMarketSourceKey,\n        lDivisionKey,\n        lSubDivisionKey,\n        lMarketDivisionKey,\n        lMarketSubDivisionKey,\n        lMarketAreaKey,\n        sPolicyLineReference,\n        dtDateWritten,\n        dParticipationPc,\n        dWrittenLinePc,\n        dWrittenLineLimitShare,\n        dWrittenLineLimit100,\n        dEstimatedSigningPc,\n        dBrokersOrderPc,\n        dActualEstimatedLinePc,\n        dtDateSigned,\n        dSignedLinePc,\n        dSignedOrderPc,\n        dActualSignedLinePc,\n        dSignedDownPc,\n        dVersionActualSignedLinePc,\n        dWorkingLinePc,\n        dPreviousActualSignedLinePc,\n        dOverrideSignedLinePC,\n        dOverrideSignedOrderPC,\n        lWrittenAccountPeriodKey,\n        lSignedAccountPeriodKey,\n        lTypeOfEstimatedLineKey,\n        bSignDownPossible,\n        bSignedByDelink,\n        bWrittenLineToStand,\n        lTypeofLeaderKey,\n        lLeaderContactKey,\n        dLeadUWLinePC,\n        bCoinsuranceExists,\n        sLeadReference,\n        bCoinsurancePremiumAccounting,\n        bCoinsuranceClaimAccounting,\n        dCoinsuranceTotalPC,\n        lTypeOfMarketSourceKey,\n        bSubscriptionMarket,\n        bLeader,\n        lTypeOfBillingKey,\n        bLeaderManagesAdditions,\n        lFrontingCompanyContactKey,\n        sFrontingOfficeRef,\n        dFrontingOrderPC,\n        lSummaryCcyKey,\n        dSummaryCcyROE,\n        nCountSoleLeader,\n        lBoundAccountPeriodKey,\n        lProductCarrierKey,\n        lProductCarrierStateKey,\n        lCarrierContactKey,\n        lProductKey,\n        lProductVersionCarrierKey,\n        lProductVersionTemplateKey,\n        lAddressCountryKey,\n        lAddressStateKey,\n        bKeyAddrStateUsedInProdCarrier,\n        bDocumentCarrier,\n        dtCancel,\n        bProductRuleResult,\n        bProductHardRuleResult,\n        nCountDeclinedReason,\n        bAuthorisationResult,\n        bNewLineThisActivity,\n        bNewLineThisEndorsement,\n        dtPeriodFrom,\n        bUndoQuoteNTUReasonEntered,\n        bQuoteNTUReasonEntered,\n        lUnderWriterContactKey,\n        lUnderwritingAssistContactKey,\n        lPolicyLineChainKey,\n        bRunSigningProcess,\n        bMsgProcessed,\n        lTypeOfDivisionKey,\n        nMGACounter,\n        bPeerReviewRequired,\n        nNumberofReviewers,\n        nNumberofChecks,\n        nNumberofCompleteChecks,\n        lFirstPeerReviewApprovedBy,\n        lSecondPeerReviewApprovedBy,\n        bMasterPolicyUpdated,\n        nUnassignedUnderwriters,\n        lWorkingAccountPeriodKey,\n        binvoicecreated,\n        nSigningOverridden,\n        dDelinkedSignedLinePC,\n        dDelinkedBrokerOrderPC,\n        bRunDelinkedSigningProcessFlag,\n        nSectionsCoveredbyLine,\n        lTypeOfProfitCentreKey,\n        lAgreementActivityKey,\n        dCodeSplitsTotalpc,\n        bLimitWithinAgreement,\n        bPremiumWithinAgreement,\n        bCountryUsedInProductTemplate,\n        sPolicyLineReferenceOverride,\n        bReferenceUnique,\n        bEffectiveDateOutOfRange,\n        bVoided,\n        sDivisionText,\n        sSubDivisionText,\n        sCombinedDivisionText,\n        lLatestUWAssistContactKey,\n        lLatestUWAssistDefaultDivisionKey,\n        lLatestUWAssistDefaultSubDivisionKey,\n        lPresentationCurrencyKey,\n        bCloseClaimAFP,\n        bCannotPayClaimsLTR,\n        bAllowOverridePolicyReference,\n        bImmediateGeneratePolicyReference,\n        bAllowOverridePolicyReferenceFlag,\n        bFirstPolicyLineRow,\n        lBrokerContactKey,\n        lProducerContactKey,\n        lInsuredContactKey,\n        lReassuredContactKey,\n        bFrontingFeeCheck,\n        bHasBeenSigned,\n        lSigningPolicyLineChainKey,\n        dPMLLimit100,\n        dPMLLimitShare,\n        dFACLimit100,\n        dPMLLimitNetofFac100,\n        dPMLLimitNetofFacShare,\n        dMaxPMLLimitShare,\n        dMaxEventLimitShare,\n        bLimitChecked,\n        bLimitOverride,\n        dFACLimitShare,\n        dEventLimit100,\n        dEventLimitShare,\n        bCreateFac,\n        lAutoCreatedFacRIFolderKey,\n        bFacCreated,\n        bLimitAllowed,\n        dPolicyLineLimitCurrencyKey,\n        dPolicyLineLimitROE,\n        dMaxPMLLimit,\n        dMaxEventLimit,\n        lIGIAgreementParty,\n        bNRMLossEffected,\n        dtTechnicalWrittenSigned,\n        lOriginalBrokerContactKey,\n        lSurplusBrokerContactKey,\n        lFileHandlerContactKey,\n        lAdminFileHandlerContactKey,\n        lRecommendedUWContactKey,\n        lzoneCountryKey,\n        lterritorykey,\n        lSolvencyCountryKey,\n        lSlipLeaderContactKey,\n        nNoOfReinstatements,\n        lReinstatementCCYKey,\n        dReinstatementAggLimit,\n        lTypeofBaseofReinstatementkey,\n        lTypeofStampCodeKey,\n        lTypeofCyberRiskKey,\n        dTSI,\n        lTypeOfERPNoOfYears,\n        lTypeofProjectKey,\n        lTypeofNetRateMovementkey,\n        dNetRateMovement,\n        bAuthorisedProducer,\n        bAuthorisedInsured,\n        bAuthorisedReassured,\n        bAuthorisedBroker,\n        dPremiumAmountShareT,\n        bRIAutoProfilingRequired,\n        nNextClaimNo,\n        lUnapprovedBrokerKey,\n        lDomicileCountryKey,\n        lTypeofSanctionsClauseKey,\n        bPPL,\n        lTypeofPolicyLineKey,\n        dtUWyear,\n        sPolicyLineBKReference,\n        lTypeofTreatyStatusKey,\n        lProductVersionTemplateCloneKey,\n        bDoNotGenerateRI,\n        lMasterPolicyActivityKey,\n        dAuthorizedPrem,\n        bPremiumAuthorized,\n        bRequiresKYCDivision,\n        bisSignlineApproved,\n        lLinkRenewalPolicyKey,\n        bLinkRenewalRule,\n        lTypeOfPolicyActivityKey,\n        lPricingTypekey,\n        lPricingTimekey,\n        lModelSequencekey,\n        dPlanAdequacy,\n        dTechnicalAdequacy,\n        dGrossPremium,\n        dGrossNetPremium,\n        dExposurePremium,\n        dNonProgrammeDeductable,\n        dTermsConditions,\n        dGrossRateMovementBasic,\n        dNetRateMovementBasic,\n        dGrossRateMovementFull,\n        dNetRateMovementFull,\n        dw_loadts,\n        row_number() over (\n            partition by\n                lPolicyLineKey,\n                lPolicyActivityKey,\n                lPolicyKey,\n                lPolicyFolderKey,\n                lMarketSourceKey,\n                lDivisionKey,\n                lSubDivisionKey,\n                lMarketDivisionKey,\n                lMarketSubDivisionKey,\n                lMarketAreaKey,\n                sPolicyLineReference,\n                dtDateWritten,\n                dParticipationPc,\n                dWrittenLinePc,\n                dWrittenLineLimitShare,\n                dWrittenLineLimit100,\n                dEstimatedSigningPc,\n                dBrokersOrderPc,\n                dActualEstimatedLinePc,\n                dtDateSigned,\n                dSignedLinePc,\n                dSignedOrderPc,\n                dActualSignedLinePc,\n                dSignedDownPc,\n                dVersionActualSignedLinePc,\n                dWorkingLinePc,\n                dPreviousActualSignedLinePc,\n                dOverrideSignedLinePC,\n                dOverrideSignedOrderPC,\n                lWrittenAccountPeriodKey,\n                lSignedAccountPeriodKey,\n                lTypeOfEstimatedLineKey,\n                bSignDownPossible,\n                bSignedByDelink,\n                bWrittenLineToStand,\n                lTypeofLeaderKey,\n                lLeaderContactKey,\n                dLeadUWLinePC,\n                bCoinsuranceExists,\n                sLeadReference,\n                bCoinsurancePremiumAccounting,\n                bCoinsuranceClaimAccounting,\n                dCoinsuranceTotalPC,\n                lTypeOfMarketSourceKey,\n                bSubscriptionMarket,\n                bLeader,\n                lTypeOfBillingKey,\n                bLeaderManagesAdditions,\n                lFrontingCompanyContactKey,\n                sFrontingOfficeRef,\n                dFrontingOrderPC,\n                lSummaryCcyKey,\n                dSummaryCcyROE,\n                nCountSoleLeader,\n                lBoundAccountPeriodKey,\n                lProductCarrierKey,\n                lProductCarrierStateKey,\n                lCarrierContactKey,\n                lProductKey,\n                lProductVersionCarrierKey,\n                lProductVersionTemplateKey,\n                lAddressCountryKey,\n                lAddressStateKey,\n                bKeyAddrStateUsedInProdCarrier,\n                bDocumentCarrier,\n                dtCancel,\n                bProductRuleResult,\n                bProductHardRuleResult,\n                nCountDeclinedReason,\n                bAuthorisationResult,\n                bNewLineThisActivity,\n                bNewLineThisEndorsement,\n                dtPeriodFrom,\n                bUndoQuoteNTUReasonEntered,\n                bQuoteNTUReasonEntered,\n                lUnderWriterContactKey,\n                lUnderwritingAssistContactKey,\n                lPolicyLineChainKey,\n                bRunSigningProcess,\n                bMsgProcessed,\n                lTypeOfDivisionKey,\n                nMGACounter,\n                bPeerReviewRequired,\n                nNumberofReviewers,\n                nNumberofChecks,\n                nNumberofCompleteChecks,\n                lFirstPeerReviewApprovedBy,\n                lSecondPeerReviewApprovedBy,\n                bMasterPolicyUpdated,\n                nUnassignedUnderwriters,\n                lWorkingAccountPeriodKey,\n                binvoicecreated,\n                nSigningOverridden,\n                dDelinkedSignedLinePC,\n                dDelinkedBrokerOrderPC,\n                bRunDelinkedSigningProcessFlag,\n                nSectionsCoveredbyLine,\n                lTypeOfProfitCentreKey,\n                lAgreementActivityKey,\n                dCodeSplitsTotalpc,\n                bLimitWithinAgreement,\n                bPremiumWithinAgreement,\n                bCountryUsedInProductTemplate,\n                sPolicyLineReferenceOverride,\n                bReferenceUnique,\n                bEffectiveDateOutOfRange,\n                bVoided,\n                sDivisionText,\n                sSubDivisionText,\n                sCombinedDivisionText,\n                lLatestUWAssistContactKey,\n                lLatestUWAssistDefaultDivisionKey,\n                lLatestUWAssistDefaultSubDivisionKey,\n                lPresentationCurrencyKey,\n                bCloseClaimAFP,\n                bCannotPayClaimsLTR,\n                bAllowOverridePolicyReference,\n                bImmediateGeneratePolicyReference,\n                bAllowOverridePolicyReferenceFlag,\n                bFirstPolicyLineRow,\n                lBrokerContactKey,\n                lProducerContactKey,\n                lInsuredContactKey,\n                lReassuredContactKey,\n                bFrontingFeeCheck,\n                bHasBeenSigned,\n                lSigningPolicyLineChainKey,\n                dPMLLimit100,\n                dPMLLimitShare,\n                dFACLimit100,\n                dPMLLimitNetofFac100,\n                dPMLLimitNetofFacShare,\n                dMaxPMLLimitShare,\n                dMaxEventLimitShare,\n                bLimitChecked,\n                bLimitOverride,\n                dFACLimitShare,\n                dEventLimit100,\n                dEventLimitShare,\n                bCreateFac,\n                lAutoCreatedFacRIFolderKey,\n                bFacCreated,\n                bLimitAllowed,\n                dPolicyLineLimitCurrencyKey,\n                dPolicyLineLimitROE,\n                dMaxPMLLimit,\n                dMaxEventLimit,\n                lIGIAgreementParty,\n                bNRMLossEffected,\n                dtTechnicalWrittenSigned,\n                lOriginalBrokerContactKey,\n                lSurplusBrokerContactKey,\n                lFileHandlerContactKey,\n                lAdminFileHandlerContactKey,\n                lRecommendedUWContactKey,\n                lzoneCountryKey,\n                lterritorykey,\n                lSolvencyCountryKey,\n                lSlipLeaderContactKey,\n                nNoOfReinstatements,\n                lReinstatementCCYKey,\n                dReinstatementAggLimit,\n                lTypeofBaseofReinstatementkey,\n                lTypeofStampCodeKey,\n                lTypeofCyberRiskKey,\n                dTSI,\n                lTypeOfERPNoOfYears,\n                lTypeofProjectKey,\n                lTypeofNetRateMovementkey,\n                dNetRateMovement,\n                bAuthorisedProducer,\n                bAuthorisedInsured,\n                bAuthorisedReassured,\n                bAuthorisedBroker,\n                dPremiumAmountShareT,\n                bRIAutoProfilingRequired,\n                nNextClaimNo,\n                lUnapprovedBrokerKey,\n                lDomicileCountryKey,\n                lTypeofSanctionsClauseKey,\n                bPPL,\n                lTypeofPolicyLineKey,\n                dtUWyear,\n                sPolicyLineBKReference,\n                lTypeofTreatyStatusKey,\n                lProductVersionTemplateCloneKey,\n                bDoNotGenerateRI,\n                lMasterPolicyActivityKey,\n                dAuthorizedPrem,\n                bPremiumAuthorized,\n                bRequiresKYCDivision,\n                bisSignlineApproved,\n                lLinkRenewalPolicyKey,\n                bLinkRenewalRule,\n                lTypeOfPolicyActivityKey,\n                lPricingTypekey,\n                lPricingTimekey,\n                lModelSequencekey,\n                dPlanAdequacy,\n                dTechnicalAdequacy,\n                dGrossPremium,\n                dGrossNetPremium,\n                dExposurePremium,\n                dNonProgrammeDeductable,\n                dTermsConditions,\n                dGrossRateMovementBasic,\n                dNetRateMovementBasic,\n                dGrossRateMovementFull,\n                dNetRateMovementFull\n            order by\n                dw_loadts\n        ) as dw_extract_order\n    from\n        policy_line\n),\n\nfiltered as (\n    select * from ordered where dw_extract_order = 1\n),\n\nranged as (\n    select\n        lPolicyLineKey,\n        lPolicyActivityKey,\n        lPolicyKey,\n        lPolicyFolderKey,\n        lMarketSourceKey,\n        lDivisionKey,\n        lSubDivisionKey,\n        lMarketDivisionKey,\n        lMarketSubDivisionKey,\n        lMarketAreaKey,\n        sPolicyLineReference,\n        dtDateWritten,\n        dParticipationPc,\n        dWrittenLinePc,\n        dWrittenLineLimitShare,\n        dWrittenLineLimit100,\n        dEstimatedSigningPc,\n        dBrokersOrderPc,\n        dActualEstimatedLinePc,\n        dtDateSigned,\n        dSignedLinePc,\n        dSignedOrderPc,\n        dActualSignedLinePc,\n        dSignedDownPc,\n        dVersionActualSignedLinePc,\n        dWorkingLinePc,\n        dPreviousActualSignedLinePc,\n        dOverrideSignedLinePC,\n        dOverrideSignedOrderPC,\n        lWrittenAccountPeriodKey,\n        lSignedAccountPeriodKey,\n        lTypeOfEstimatedLineKey,\n        bSignDownPossible,\n        bSignedByDelink,\n        bWrittenLineToStand,\n        lTypeofLeaderKey,\n        lLeaderContactKey,\n        dLeadUWLinePC,\n        bCoinsuranceExists,\n        sLeadReference,\n        bCoinsurancePremiumAccounting,\n        bCoinsuranceClaimAccounting,\n        dCoinsuranceTotalPC,\n        lTypeOfMarketSourceKey,\n        bSubscriptionMarket,\n        bLeader,\n        lTypeOfBillingKey,\n        bLeaderManagesAdditions,\n        lFrontingCompanyContactKey,\n        sFrontingOfficeRef,\n        dFrontingOrderPC,\n        lSummaryCcyKey,\n        dSummaryCcyROE,\n        nCountSoleLeader,\n        lBoundAccountPeriodKey,\n        lProductCarrierKey,\n        lProductCarrierStateKey,\n        lCarrierContactKey,\n        lProductKey,\n        lProductVersionCarrierKey,\n        lProductVersionTemplateKey,\n        lAddressCountryKey,\n        lAddressStateKey,\n        bKeyAddrStateUsedInProdCarrier,\n        bDocumentCarrier,\n        dtCancel,\n        bProductRuleResult,\n        bProductHardRuleResult,\n        nCountDeclinedReason,\n        bAuthorisationResult,\n        bNewLineThisActivity,\n        bNewLineThisEndorsement,\n        dtPeriodFrom,\n        bUndoQuoteNTUReasonEntered,\n        bQuoteNTUReasonEntered,\n        lUnderWriterContactKey,\n        lUnderwritingAssistContactKey,\n        lPolicyLineChainKey,\n        bRunSigningProcess,\n        bMsgProcessed,\n        lTypeOfDivisionKey,\n        nMGACounter,\n        bPeerReviewRequired,\n        nNumberofReviewers,\n        nNumberofChecks,\n        nNumberofCompleteChecks,\n        lFirstPeerReviewApprovedBy,\n        lSecondPeerReviewApprovedBy,\n        bMasterPolicyUpdated,\n        nUnassignedUnderwriters,\n        lWorkingAccountPeriodKey,\n        binvoicecreated,\n        nSigningOverridden,\n        dDelinkedSignedLinePC,\n        dDelinkedBrokerOrderPC,\n        bRunDelinkedSigningProcessFlag,\n        nSectionsCoveredbyLine,\n        lTypeOfProfitCentreKey,\n        lAgreementActivityKey,\n        dCodeSplitsTotalpc,\n        bLimitWithinAgreement,\n        bPremiumWithinAgreement,\n        bCountryUsedInProductTemplate,\n        sPolicyLineReferenceOverride,\n        bReferenceUnique,\n        bEffectiveDateOutOfRange,\n        bVoided,\n        sDivisionText,\n        sSubDivisionText,\n        sCombinedDivisionText,\n        lLatestUWAssistContactKey,\n        lLatestUWAssistDefaultDivisionKey,\n        lLatestUWAssistDefaultSubDivisionKey,\n        lPresentationCurrencyKey,\n        bCloseClaimAFP,\n        bCannotPayClaimsLTR,\n        bAllowOverridePolicyReference,\n        bImmediateGeneratePolicyReference,\n        bAllowOverridePolicyReferenceFlag,\n        bFirstPolicyLineRow,\n        lBrokerContactKey,\n        lProducerContactKey,\n        lInsuredContactKey,\n        lReassuredContactKey,\n        bFrontingFeeCheck,\n        bHasBeenSigned,\n        lSigningPolicyLineChainKey,\n        dPMLLimit100,\n        dPMLLimitShare,\n        dFACLimit100,\n        dPMLLimitNetofFac100,\n        dPMLLimitNetofFacShare,\n        dMaxPMLLimitShare,\n        dMaxEventLimitShare,\n        bLimitChecked,\n        bLimitOverride,\n        dFACLimitShare,\n        dEventLimit100,\n        dEventLimitShare,\n        bCreateFac,\n        lAutoCreatedFacRIFolderKey,\n        bFacCreated,\n        bLimitAllowed,\n        dPolicyLineLimitCurrencyKey,\n        dPolicyLineLimitROE,\n        dMaxPMLLimit,\n        dMaxEventLimit,\n        lIGIAgreementParty,\n        bNRMLossEffected,\n        dtTechnicalWrittenSigned,\n        lOriginalBrokerContactKey,\n        lSurplusBrokerContactKey,\n        lFileHandlerContactKey,\n        lAdminFileHandlerContactKey,\n        lRecommendedUWContactKey,\n        lzoneCountryKey,\n        lterritorykey,\n        lSolvencyCountryKey,\n        lSlipLeaderContactKey,\n        nNoOfReinstatements,\n        lReinstatementCCYKey,\n        dReinstatementAggLimit,\n        lTypeofBaseofReinstatementkey,\n        lTypeofStampCodeKey,\n        lTypeofCyberRiskKey,\n        dTSI,\n        lTypeOfERPNoOfYears,\n        lTypeofProjectKey,\n        lTypeofNetRateMovementkey,\n        dNetRateMovement,\n        bAuthorisedProducer,\n        bAuthorisedInsured,\n        bAuthorisedReassured,\n        bAuthorisedBroker,\n        dPremiumAmountShareT,\n        bRIAutoProfilingRequired,\n        nNextClaimNo,\n        lUnapprovedBrokerKey,\n        lDomicileCountryKey,\n        lTypeofSanctionsClauseKey,\n        bPPL,\n        lTypeofPolicyLineKey,\n        dtUWyear,\n        sPolicyLineBKReference,\n        lTypeofTreatyStatusKey,\n        lProductVersionTemplateCloneKey,\n        bDoNotGenerateRI,\n        lMasterPolicyActivityKey,\n        dAuthorizedPrem,\n        bPremiumAuthorized,\n        bRequiresKYCDivision,\n        bisSignlineApproved,\n        lLinkRenewalPolicyKey,\n        bLinkRenewalRule,\n        lTypeOfPolicyActivityKey,\n        lPricingTypekey,\n        lPricingTimekey,\n        lModelSequencekey,\n        dPlanAdequacy,\n        dTechnicalAdequacy,\n        dGrossPremium,\n        dGrossNetPremium,\n        dExposurePremium,\n        dNonProgrammeDeductable,\n        dTermsConditions,\n        dGrossRateMovementBasic,\n        dNetRateMovementBasic,\n        dGrossRateMovementFull,\n        dNetRateMovementFull,\n        dw_loadts as _valid_from,\n        lead(dw_loadts) over (partition by lPolicyLineKey order by dw_loadts) as _valid_to\n    from\n        filtered\n)\n\nselect * from ranged", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"scd_policy_line\""}, "model.iginsure.scd_policy_reinsurance_profile": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.iginsure.dbo.Policy_Reinsurance_Profile"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["InwardPremium"], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "scd", "scd_policy_reinsurance_profile"], "unique_id": "model.iginsure.scd_policy_reinsurance_profile", "raw_code": "-- This file is automatically generated\r\n{{\r\n  config(tags=['InwardPremium'])\r\n}}\r\n\r\nwith\r\n\r\nPolicy_Reinsurance_Profile as (\r\n    select * from {{ source('dbo', 'Policy_Reinsurance_Profile') }}\r\n),\r\n\r\n\r\n\r\nordered as (\r\n    select\r\n        lPolicyRIProfileKey,\r\n        lPolicyKey,\r\n        lPolicyActivityKey,\r\n        lPolicyLineKey,\r\n        lPolicySectionKey,\r\n        lPolicyLiabilityKey,\r\n        lPolicyLineLiabilityKey,\r\n        nLevel,\r\n        nLayer,\r\n        nSequence,\r\n        lRIPolicyKey,\r\n        lRIActivityKey,\r\n        lTypeofRIPolicyKey,\r\n        lTypeofRIBasisKey,\r\n        lLayerGrossNetKey,\r\n        lCommissionGrosSNetKey,\r\n        bFixedCession,\r\n        dCessionPC,\r\n        dOverridePC,\r\n        dSurplusCessionPC,\r\n        bAutoProfiled,\r\n        lRISchemeKey,\r\n        lRISectionKey,\r\n        lRISchemeInwardsCoverKey,\r\n        nUniqueCheck,\r\n        bDisabled,\r\n        bCoveragesIncluded,\r\n        doverridePremiumPerc,\r\n        bOverrideDate,\r\n        dOverridePremiumAmt,\r\n        dPremiumAmountShareT,\r\n        dCoverageCessionPC,\r\n        sTreatyNotes,\r\n        dw_loadts,\r\n        row_number() over (\r\n            partition by\r\n\r\n                lPolicyRIProfileKey,\r\n                lPolicyKey,\r\n                lPolicyActivityKey,\r\n                lPolicyLineKey,\r\n                lPolicySectionKey,\r\n                lPolicyLiabilityKey,\r\n                lPolicyLineLiabilityKey,\r\n                nLevel,\r\n                nLayer,\r\n                nSequence,\r\n                lRIPolicyKey,\r\n                lRIActivityKey,\r\n                lTypeofRIPolicyKey,\r\n                lTypeofRIBasisKey,\r\n                lLayerGrossNetKey,\r\n                lCommissionGrosSNetKey,\r\n                bFixedCession,\r\n                dCessionPC,\r\n                dOverridePC,\r\n                dSurplusCessionPC,\r\n                bAutoProfiled,\r\n                lRISchemeKey,\r\n                lRISectionKey,\r\n                lRISchemeInwardsCoverKey,\r\n                nUniqueCheck,\r\n                bDisabled,\r\n                bCoveragesIncluded,\r\n                doverridePremiumPerc,\r\n                bOverrideDate,\r\n                dOverridePremiumAmt,\r\n                dPremiumAmountShareT,\r\n                dCoverageCessionPC,\r\n                sTreatyNotes,\r\n                dw_loadts\r\n                \r\n            order by\r\n                dw_loadts\r\n        ) as dw_extract_order\r\n    from\r\n        Policy_Reinsurance_Profile\r\n),\r\n\r\nfiltered as (\r\n    select * from ordered where dw_extract_order = 1\r\n),\r\n\r\nranged as (\r\n    select\r\n      \r\n        lPolicyRIProfileKey,\r\n        lPolicyKey,\r\n        lPolicyActivityKey,\r\n        lPolicyLineKey,\r\n        lPolicySectionKey,\r\n        lPolicyLiabilityKey,\r\n        lPolicyLineLiabilityKey,\r\n        nLevel,\r\n        nLayer,\r\n        nSequence,\r\n        lRIPolicyKey,\r\n        lRIActivityKey,\r\n        lTypeofRIPolicyKey,\r\n        lTypeofRIBasisKey,\r\n        lLayerGrossNetKey,\r\n        lCommissionGrosSNetKey,\r\n        bFixedCession,\r\n        dCessionPC,\r\n        dOverridePC,\r\n        dSurplusCessionPC,\r\n        bAutoProfiled,\r\n        lRISchemeKey,\r\n        lRISectionKey,\r\n        lRISchemeInwardsCoverKey,\r\n        nUniqueCheck,\r\n        bDisabled,\r\n        bCoveragesIncluded,\r\n        doverridePremiumPerc,\r\n        bOverrideDate,\r\n        dOverridePremiumAmt,\r\n        dPremiumAmountShareT,\r\n        dCoverageCessionPC,\r\n        sTreatyNotes,\r\n        dw_loadts as _valid_from,\r\n        lead(dw_loadts) over (partition by lPolicyRIProfileKey order by dw_loadts) as _valid_to\r\n    from\r\n        filtered\r\n)\r\n\r\nselect * from ranged", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "scd\\scd_policy_reinsurance_profile.sql", "original_file_path": "models\\scd\\scd_policy_reinsurance_profile.sql", "name": "scd_policy_reinsurance_profile", "alias": "scd_policy_reinsurance_profile", "checksum": {"name": "sha256", "checksum": "84c790ba931d54e7ba2982c34656f941d29765f886cbb9f4f470e1db4b99dbd0"}, "tags": ["InwardPremium"], "refs": [], "sources": [["dbo", "Policy_Reinsurance_Profile"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\scd\\scd_policy_reinsurance_profile.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "tags": ["InwardPremium"]}, "created_at": 1701786800.9383879, "compiled_code": "-- This file is automatically generated\n\n\nwith\n\nPolicy_Reinsurance_Profile as (\n    select * from \"IGI_PROD_DW\".\"dbo\".\"PolicyReinsuranceProfile\"\n),\n\n\n\nordered as (\n    select\n        lPolicyRIProfileKey,\n        lPolicyKey,\n        lPolicyActivityKey,\n        lPolicyLineKey,\n        lPolicySectionKey,\n        lPolicyLiabilityKey,\n        lPolicyLineLiabilityKey,\n        nLevel,\n        nLayer,\n        nSequence,\n        lRIPolicyKey,\n        lRIActivityKey,\n        lTypeofRIPolicyKey,\n        lTypeofRIBasisKey,\n        lLayerGrossNetKey,\n        lCommissionGrosSNetKey,\n        bFixedCession,\n        dCessionPC,\n        dOverridePC,\n        dSurplusCessionPC,\n        bAutoProfiled,\n        lRISchemeKey,\n        lRISectionKey,\n        lRISchemeInwardsCoverKey,\n        nUniqueCheck,\n        bDisabled,\n        bCoveragesIncluded,\n        doverridePremiumPerc,\n        bOverrideDate,\n        dOverridePremiumAmt,\n        dPremiumAmountShareT,\n        dCoverageCessionPC,\n        sTreatyNotes,\n        dw_loadts,\n        row_number() over (\n            partition by\n\n                lPolicyRIProfileKey,\n                lPolicyKey,\n                lPolicyActivityKey,\n                lPolicyLineKey,\n                lPolicySectionKey,\n                lPolicyLiabilityKey,\n                lPolicyLineLiabilityKey,\n                nLevel,\n                nLayer,\n                nSequence,\n                lRIPolicyKey,\n                lRIActivityKey,\n                lTypeofRIPolicyKey,\n                lTypeofRIBasisKey,\n                lLayerGrossNetKey,\n                lCommissionGrosSNetKey,\n                bFixedCession,\n                dCessionPC,\n                dOverridePC,\n                dSurplusCessionPC,\n                bAutoProfiled,\n                lRISchemeKey,\n                lRISectionKey,\n                lRISchemeInwardsCoverKey,\n                nUniqueCheck,\n                bDisabled,\n                bCoveragesIncluded,\n                doverridePremiumPerc,\n                bOverrideDate,\n                dOverridePremiumAmt,\n                dPremiumAmountShareT,\n                dCoverageCessionPC,\n                sTreatyNotes,\n                dw_loadts\n                \n            order by\n                dw_loadts\n        ) as dw_extract_order\n    from\n        Policy_Reinsurance_Profile\n),\n\nfiltered as (\n    select * from ordered where dw_extract_order = 1\n),\n\nranged as (\n    select\n      \n        lPolicyRIProfileKey,\n        lPolicyKey,\n        lPolicyActivityKey,\n        lPolicyLineKey,\n        lPolicySectionKey,\n        lPolicyLiabilityKey,\n        lPolicyLineLiabilityKey,\n        nLevel,\n        nLayer,\n        nSequence,\n        lRIPolicyKey,\n        lRIActivityKey,\n        lTypeofRIPolicyKey,\n        lTypeofRIBasisKey,\n        lLayerGrossNetKey,\n        lCommissionGrosSNetKey,\n        bFixedCession,\n        dCessionPC,\n        dOverridePC,\n        dSurplusCessionPC,\n        bAutoProfiled,\n        lRISchemeKey,\n        lRISectionKey,\n        lRISchemeInwardsCoverKey,\n        nUniqueCheck,\n        bDisabled,\n        bCoveragesIncluded,\n        doverridePremiumPerc,\n        bOverrideDate,\n        dOverridePremiumAmt,\n        dPremiumAmountShareT,\n        dCoverageCessionPC,\n        sTreatyNotes,\n        dw_loadts as _valid_from,\n        lead(dw_loadts) over (partition by lPolicyRIProfileKey order by dw_loadts) as _valid_to\n    from\n        filtered\n)\n\nselect * from ranged", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"scd_policy_reinsurance_profile\""}, "model.iginsure.scd_policy_section": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.iginsure.dbo.policy_section"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["InwardPremium"], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "scd", "scd_policy_section"], "unique_id": "model.iginsure.scd_policy_section", "raw_code": "-- This file is automatically generated\r\n{{\r\n  config(tags=['InwardPremium'])\r\n}}\r\n\r\nwith\r\n\r\npolicy_section as (\r\n    select * from {{ source('dbo', 'policy_section') }}\r\n),\r\n\r\nordered as (\r\n    select\r\n        lPolicySectionKey,\r\n        lPolicyActivityKey,\r\n        lPolicyKey,\r\n        lPolicyFolderKey,\r\n        nSequence,\r\n        lAuthorityCheckJoinKey,\r\n        lPolicySectionChainKey,\r\n        bNewSectionThisActivity,\r\n        bNewSectionThisEndorsement,\r\n        bProductPriming,\r\n        lProductTemplateSectionKey,\r\n        lAgreementSectionKey,\r\n        lTypeOfSatelliteTableKey,\r\n        lTypeOfPolicySectionScreenKey,\r\n        sSectionReference,\r\n        sUniqueMarketReference,\r\n        sOpenXposureLinkReference,\r\n        lCreatedByContactKey,\r\n        dtCreated,\r\n        lTypeOfLayerKey,\r\n        b100PcRisk,\r\n        bPrimaryLayer,\r\n        lTypeOfClassKey,\r\n        sClass,\r\n        lTypeOfPlacementKey,\r\n        bSingleMarket,\r\n        dtPeriodFrom,\r\n        dtPeriodTo,\r\n        dtPeriodToDisplay,\r\n        nPeriodDays,\r\n        bMidnightStartTime,\r\n        dtCancel,\r\n        lPolicySectionCurrencyKey,\r\n        dROE,\r\n        dWorkingLinePc,\r\n        dActualEstimatedLinePc,\r\n        dActualSignedLinePc,\r\n        sBrokerReference,\r\n        lTypeOfLimitBasisKey,\r\n        lLimTypeOfApplicablePeriodKey,\r\n        dMasterLimit,\r\n        dLimit,\r\n        dLimitShareT,\r\n        dExcessOf,\r\n        dLimitAggregate,\r\n        bSingleAggregate,\r\n        dTIV,\r\n        dCatPc,\r\n        dUnderlyingLimitOccurrence,\r\n        dUnderlyingLimitAggregate,\r\n        dSelfInsuredRetentionOccurrenc,\r\n        dSelfInsuredRetentionAggregate,\r\n        dSelfInsuredRetentionDeductibl,\r\n        lTypeOfDefenseLimitsKey,\r\n        lTypeOfExposureCalculationKey,\r\n        dExposure100,\r\n        dExposureT,\r\n        lAllRiskTypeOfDeductibleKey,\r\n        lARDTypeOfApplicablePeriodKey,\r\n        dAllRiskDeductible,\r\n        dAllRiskMinDeductible,\r\n        dAllRiskMaxDeductible,\r\n        dAllRiskDeductibleAggregate,\r\n        lTypeOfDeductionProcessingKey,\r\n        dDeductionsPc,\r\n        lTypeOfProductRatingKey,\r\n        lTypeOfPremiumEntryKey,\r\n        dTotalPremiumSplitPc,\r\n        dGrossPremium100,\r\n        dApportionRatedPremium100,\r\n        lTypeOfPaymentTermKey,\r\n        lTypeOfTaxEntryKey,\r\n        lTypeOfTaxRatingElementKey,\r\n        dTaxRatingAmount,\r\n        dTaxScheduleSplitAmountTotal,\r\n        dTaxScheduleSplitPcTotal,\r\n        dTaxScheduleSplitPremiumTotal,\r\n        dTaxScheduleInsuredTotal,\r\n        dTaxScheduleInsurerTotal,\r\n        dTaxInsuredRate,\r\n        dTaxInsurerRate,\r\n        dEnterInsuredTax,\r\n        dEnterInsurerTax,\r\n        dWorkingInsuredTax,\r\n        dWorkingInsurerTax,\r\n        nNonCriticalSubjectivityDays,\r\n        nEndorsementNumberCounter,\r\n        bStatCodeManual,\r\n        lProductTypeOfLayerKey,\r\n        lTypeOfLimitCaptureKey,\r\n        bRated,\r\n        dRateOnLine,\r\n        lTerritorykey,\r\n        lBrokerContactKey,\r\n        bMasterSection,\r\n        lInsuredContactKey,\r\n        bUnlimitedReinstatements,\r\n        bReinstatementsApplicable,\r\n        nNoOfReinstatements,\r\n        nAvailableReinstatements,\r\n        bProrata,\r\n        dReinstatementPc,\r\n        dTotalEPI100,\r\n        dTaxExemptpc,\r\n        dTaxExemptAmount,\r\n        bClonedPolicyFolder,\r\n        bMandatory,\r\n        lLocationAddressKey,\r\n        sLocationAddress1,\r\n        sLocationAddress2,\r\n        sLocationAddressCity,\r\n        SLocationAddressPostCode,\r\n        lLocationAddressCityKey,\r\n        lLocationAddressStateKey,\r\n        lLocationAddressCountryKey,\r\n        lLocationAddressPostCodeKey,\r\n        dLocationLatitude,\r\n        dLocationLongitude,\r\n        lLocationAddressCountyKey,\r\n        bEUMember,\r\n        sRiskNarrative,\r\n        sMPLNotes,\r\n        lEffectiveDateHour,\r\n        lEffectiveDateMinute,\r\n        bPeriodTBA,\r\n        dtQuoteOpenUntil,\r\n        bPrimaryLocation,\r\n        bLocAddressCountryHasStates,\r\n        bLocAddressStateRequiredOnAddr,\r\n        bMakePrimaryLocation,\r\n        lTypeOfRateModifierBasisKey,\r\n        dRatingModifier,\r\n        lTypeOfAddressEntryKey,\r\n        lMasterPolicySectionChainKey,\r\n        nProductOrder,\r\n        lTypeOfPolicySectionKey,\r\n        lLocationAddressZipCityKey,\r\n        lLocationAddressZipStateKey,\r\n        lLocationAddressCityStateKey,\r\n        dLimitInBaseCcy,\r\n        dTotalCommissionPC,\r\n        dMaximumCommissionPc,\r\n        bPreventPolicyDeductionRecalc,\r\n        lMultiLineYNkey,\r\n        nLinesPerSection,\r\n        sLocationCountryText,\r\n        sLocationCityText,\r\n        sConveyanceNotes,\r\n        sGeoGraphicalLimitsNotes,\r\n        dAgreementSectionPML,\r\n        bAgreementPMLChecks,\r\n        dAgreementSectionROE,\r\n        LAgreementSectionCCYKey,\r\n        lOverrideAgreementClassKey,\r\n        lJurisdictionCountrykey,\r\n        lJurisdictionStatekey,\r\n        lScheduleCountry,\r\n        lScheduleState,\r\n        bCreatedBySchedule,\r\n        lAgreementSettCcyKey,\r\n        dtFirstInstalmentDueDate,\r\n        nFixedInstalmentNumber,\r\n        bCustomInstalments,\r\n        lDueDateModifierKey,\r\n        nInterval,\r\n        nTermsOfTradeDays,\r\n        lTypeOfInstalmentKey,\r\n        bOverideToSingle,\r\n        lPolicySectionDefaultAddKey,\r\n        bLocationBasedSection,\r\n        sLocationFullAddress,\r\n        bOnAgreement,\r\n        lEarningPatternKey,\r\n        lWritingPatternKey,\r\n        lEditScreenKey,\r\n        lViewSingleLineScreenKey,\r\n        lViewMultiLineScreenKey,\r\n        sAdditionalCoverNotes,\r\n        dTotalInstalmentsPC,\r\n        bAgreementOverrideComplete,\r\n        dMaxAgreementOccurrenceLimit,\r\n        dMaxAgreementAggregateLimit,\r\n        dGrossPremiumTotalSharePrev,\r\n        dLimitShareTechnicalPrevious,\r\n        lAgreementSectionChainKey,\r\n        bLimitWithinAgreement,\r\n        bPremiumWithinAgreement,\r\n        bSectionExpired,\r\n        bSectionAgreementAccumulated,\r\n        dGrossPremiumTotalShare,\r\n        dAgreementPremiumIncomeLimit,\r\n        dPreviousEndorsementLimit,\r\n        dLimitShareTBound,\r\n        dGrossPremiumShareBound,\r\n        bLocationCountryIsMandatory,\r\n        bLocationAddressIsMandatory,\r\n        nCodeSplitNotDone,\r\n        dCessionPC,\r\n        dCashCallLimit,\r\n        nNoLines,\r\n        dMaxCapacity,\r\n        bPremiumReserveRetained,\r\n        bLossReserveRetained,\r\n        dAttritionalLossRatioPC,\r\n        dLargeLossRatioPC,\r\n        dCatLoadingPC,\r\n        dProjectedLossRatioPC,\r\n        dEstimatedProfitCommissionPC,\r\n        dCombinedRatioPC,\r\n        dPortfolioPremiumInPC,\r\n        dPortfolioPremiumIn,\r\n        dPortfolioLossInPC,\r\n        lNumberOfSlidesKey,\r\n        lTypeOfPremiumBaseKey,\r\n        dPremiumCommission,\r\n        dtFirstAdjustment,\r\n        lTypeOfAdjustmentFrequencyKey,\r\n        dtFinalAdjustment,\r\n        dCedingCommissionPC,\r\n        dProfitCommissionPc,\r\n        dManagementExpensesPC,\r\n        dOtherDeductionsPC,\r\n        dProfitPC,\r\n        nNumberClauses,\r\n        bSetAutoPolicyDeductions,\r\n        nNoInvalidAgreementPML,\r\n        bInitialiseAutoDeductions,\r\n        bShowROE,\r\n        bRatingBasisVisible,\r\n        bDisplayMD,\r\n        bCoverageElementsRated,\r\n        lMasterPolicySectionKey,\r\n        bBinderPolicy,\r\n        bAutoAdd,\r\n        lImplementationSetupForNewOldRIKey,\r\n        bEnableNewRI,\r\n        bEnterTaxScheduleCountryPc,\r\n        bIsAIHidden,\r\n        bUnattached,\r\n        lOSFICodeKey,\r\n        nTotalBinderProportionPc,\r\n        lTypeOfDeductibleBasisKey,\r\n        n1stInstTermsOfTradeDays,\r\n        dEventLimit100,\r\n        dMaxPMLLimitShare,\r\n        dMaxEventLimitShare,\r\n        ltypeofPremiumPaymentWarrantyKey,\r\n        lClassificationKey,\r\n        lSubClassKey,\r\n        lSolvencyIIKey,\r\n        lEndorementSubClassificationKey,\r\n        dLimitOrig,\r\n        sPolicySectionBKReference,\r\n        nCountAgencyFees,\r\n        nSubdivision,\r\n        bUseLimitROE,\r\n        lporductkey,\r\n        bAgnecyFeesOverrideTrigger,\r\n        bConfrimInstallment,\r\n        dEventLimit100USD,\r\n        dEventLimitShareUSD,\r\n        dEventLimitShareOrig,\r\n        dPMLShareOrig,\r\n        bProductLimitCheck,\r\n        bProductLimitOverride,\r\n        dw_loadts,\r\n        row_number() over (\r\n            partition by\r\n                lPolicySectionKey,\r\n                lPolicyActivityKey,\r\n                lPolicyKey,\r\n                lPolicyFolderKey,\r\n                nSequence,\r\n                lAuthorityCheckJoinKey,\r\n                lPolicySectionChainKey,\r\n                bNewSectionThisActivity,\r\n                bNewSectionThisEndorsement,\r\n                bProductPriming,\r\n                lProductTemplateSectionKey,\r\n                lAgreementSectionKey,\r\n                lTypeOfSatelliteTableKey,\r\n                lTypeOfPolicySectionScreenKey,\r\n                sSectionReference,\r\n                sUniqueMarketReference,\r\n                sOpenXposureLinkReference,\r\n                lCreatedByContactKey,\r\n                dtCreated,\r\n                lTypeOfLayerKey,\r\n                b100PcRisk,\r\n                bPrimaryLayer,\r\n                lTypeOfClassKey,\r\n                sClass,\r\n                lTypeOfPlacementKey,\r\n                bSingleMarket,\r\n                dtPeriodFrom,\r\n                dtPeriodTo,\r\n                dtPeriodToDisplay,\r\n                nPeriodDays,\r\n                bMidnightStartTime,\r\n                dtCancel,\r\n                lPolicySectionCurrencyKey,\r\n                dROE,\r\n                dWorkingLinePc,\r\n                dActualEstimatedLinePc,\r\n                dActualSignedLinePc,\r\n                sBrokerReference,\r\n                lTypeOfLimitBasisKey,\r\n                lLimTypeOfApplicablePeriodKey,\r\n                dMasterLimit,\r\n                dLimit,\r\n                dLimitShareT,\r\n                dExcessOf,\r\n                dLimitAggregate,\r\n                bSingleAggregate,\r\n                dTIV,\r\n                dCatPc,\r\n                dUnderlyingLimitOccurrence,\r\n                dUnderlyingLimitAggregate,\r\n                dSelfInsuredRetentionOccurrenc,\r\n                dSelfInsuredRetentionAggregate,\r\n                dSelfInsuredRetentionDeductibl,\r\n                lTypeOfDefenseLimitsKey,\r\n                lTypeOfExposureCalculationKey,\r\n                dExposure100,\r\n                dExposureT,\r\n                lAllRiskTypeOfDeductibleKey,\r\n                lARDTypeOfApplicablePeriodKey,\r\n                dAllRiskDeductible,\r\n                dAllRiskMinDeductible,\r\n                dAllRiskMaxDeductible,\r\n                dAllRiskDeductibleAggregate,\r\n                lTypeOfDeductionProcessingKey,\r\n                dDeductionsPc,\r\n                lTypeOfProductRatingKey,\r\n                lTypeOfPremiumEntryKey,\r\n                dTotalPremiumSplitPc,\r\n                dGrossPremium100,\r\n                dApportionRatedPremium100,\r\n                lTypeOfPaymentTermKey,\r\n                lTypeOfTaxEntryKey,\r\n                lTypeOfTaxRatingElementKey,\r\n                dTaxRatingAmount,\r\n                dTaxScheduleSplitAmountTotal,\r\n                dTaxScheduleSplitPcTotal,\r\n                dTaxScheduleSplitPremiumTotal,\r\n                dTaxScheduleInsuredTotal,\r\n                dTaxScheduleInsurerTotal,\r\n                dTaxInsuredRate,\r\n                dTaxInsurerRate,\r\n                dEnterInsuredTax,\r\n                dEnterInsurerTax,\r\n                dWorkingInsuredTax,\r\n                dWorkingInsurerTax,\r\n                nNonCriticalSubjectivityDays,\r\n                nEndorsementNumberCounter,\r\n                bStatCodeManual,\r\n                lProductTypeOfLayerKey,\r\n                lTypeOfLimitCaptureKey,\r\n                bRated,\r\n                dRateOnLine,\r\n                lTerritorykey,\r\n                lBrokerContactKey,\r\n                bMasterSection,\r\n                lInsuredContactKey,\r\n                bUnlimitedReinstatements,\r\n                bReinstatementsApplicable,\r\n                nNoOfReinstatements,\r\n                nAvailableReinstatements,\r\n                bProrata,\r\n                dReinstatementPc,\r\n                dTotalEPI100,\r\n                dTaxExemptpc,\r\n                dTaxExemptAmount,\r\n                bClonedPolicyFolder,\r\n                bMandatory,\r\n                lLocationAddressKey,\r\n                sLocationAddress1,\r\n                sLocationAddress2,\r\n                sLocationAddressCity,\r\n                SLocationAddressPostCode,\r\n                lLocationAddressCityKey,\r\n                lLocationAddressStateKey,\r\n                lLocationAddressCountryKey,\r\n                lLocationAddressPostCodeKey,\r\n                dLocationLatitude,\r\n                dLocationLongitude,\r\n                lLocationAddressCountyKey,\r\n                bEUMember,\r\n                sRiskNarrative,\r\n                sMPLNotes,\r\n                lEffectiveDateHour,\r\n                lEffectiveDateMinute,\r\n                bPeriodTBA,\r\n                dtQuoteOpenUntil,\r\n                bPrimaryLocation,\r\n                bLocAddressCountryHasStates,\r\n                bLocAddressStateRequiredOnAddr,\r\n                bMakePrimaryLocation,\r\n                lTypeOfRateModifierBasisKey,\r\n                dRatingModifier,\r\n                lTypeOfAddressEntryKey,\r\n                lMasterPolicySectionChainKey,\r\n                nProductOrder,\r\n                lTypeOfPolicySectionKey,\r\n                lLocationAddressZipCityKey,\r\n                lLocationAddressZipStateKey,\r\n                lLocationAddressCityStateKey,\r\n                dLimitInBaseCcy,\r\n                dTotalCommissionPC,\r\n                dMaximumCommissionPc,\r\n                bPreventPolicyDeductionRecalc,\r\n                lMultiLineYNkey,\r\n                nLinesPerSection,\r\n                sLocationCountryText,\r\n                sLocationCityText,\r\n                sConveyanceNotes,\r\n                sGeoGraphicalLimitsNotes,\r\n                dAgreementSectionPML,\r\n                bAgreementPMLChecks,\r\n                dAgreementSectionROE,\r\n                LAgreementSectionCCYKey,\r\n                lOverrideAgreementClassKey,\r\n                lJurisdictionCountrykey,\r\n                lJurisdictionStatekey,\r\n                lScheduleCountry,\r\n                lScheduleState,\r\n                bCreatedBySchedule,\r\n                lAgreementSettCcyKey,\r\n                dtFirstInstalmentDueDate,\r\n                nFixedInstalmentNumber,\r\n                bCustomInstalments,\r\n                lDueDateModifierKey,\r\n                nInterval,\r\n                nTermsOfTradeDays,\r\n                lTypeOfInstalmentKey,\r\n                bOverideToSingle,\r\n                lPolicySectionDefaultAddKey,\r\n                bLocationBasedSection,\r\n                sLocationFullAddress,\r\n                bOnAgreement,\r\n                lEarningPatternKey,\r\n                lWritingPatternKey,\r\n                lEditScreenKey,\r\n                lViewSingleLineScreenKey,\r\n                lViewMultiLineScreenKey,\r\n                sAdditionalCoverNotes,\r\n                dTotalInstalmentsPC,\r\n                bAgreementOverrideComplete,\r\n                dMaxAgreementOccurrenceLimit,\r\n                dMaxAgreementAggregateLimit,\r\n                dGrossPremiumTotalSharePrev,\r\n                dLimitShareTechnicalPrevious,\r\n                lAgreementSectionChainKey,\r\n                bLimitWithinAgreement,\r\n                bPremiumWithinAgreement,\r\n                bSectionExpired,\r\n                bSectionAgreementAccumulated,\r\n                dGrossPremiumTotalShare,\r\n                dAgreementPremiumIncomeLimit,\r\n                dPreviousEndorsementLimit,\r\n                dLimitShareTBound,\r\n                dGrossPremiumShareBound,\r\n                bLocationCountryIsMandatory,\r\n                bLocationAddressIsMandatory,\r\n                nCodeSplitNotDone,\r\n                dCessionPC,\r\n                dCashCallLimit,\r\n                nNoLines,\r\n                dMaxCapacity,\r\n                bPremiumReserveRetained,\r\n                bLossReserveRetained,\r\n                dAttritionalLossRatioPC,\r\n                dLargeLossRatioPC,\r\n                dCatLoadingPC,\r\n                dProjectedLossRatioPC,\r\n                dEstimatedProfitCommissionPC,\r\n                dCombinedRatioPC,\r\n                dPortfolioPremiumInPC,\r\n                dPortfolioPremiumIn,\r\n                dPortfolioLossInPC,\r\n                lNumberOfSlidesKey,\r\n                lTypeOfPremiumBaseKey,\r\n                dPremiumCommission,\r\n                dtFirstAdjustment,\r\n                lTypeOfAdjustmentFrequencyKey,\r\n                dtFinalAdjustment,\r\n                dCedingCommissionPC,\r\n                dProfitCommissionPc,\r\n                dManagementExpensesPC,\r\n                dOtherDeductionsPC,\r\n                dProfitPC,\r\n                nNumberClauses,\r\n                bSetAutoPolicyDeductions,\r\n                nNoInvalidAgreementPML,\r\n                bInitialiseAutoDeductions,\r\n                bShowROE,\r\n                bRatingBasisVisible,\r\n                bDisplayMD,\r\n                bCoverageElementsRated,\r\n                lMasterPolicySectionKey,\r\n                bBinderPolicy,\r\n                bAutoAdd,\r\n                lImplementationSetupForNewOldRIKey,\r\n                bEnableNewRI,\r\n                bEnterTaxScheduleCountryPc,\r\n                bIsAIHidden,\r\n                bUnattached,\r\n                lOSFICodeKey,\r\n                nTotalBinderProportionPc,\r\n                lTypeOfDeductibleBasisKey,\r\n                n1stInstTermsOfTradeDays,\r\n                dEventLimit100,\r\n                dMaxPMLLimitShare,\r\n                dMaxEventLimitShare,\r\n                ltypeofPremiumPaymentWarrantyKey,\r\n                lClassificationKey,\r\n                lSubClassKey,\r\n                lSolvencyIIKey,\r\n                lEndorementSubClassificationKey,\r\n                dLimitOrig,\r\n                sPolicySectionBKReference,\r\n                nCountAgencyFees,\r\n                nSubdivision,\r\n                bUseLimitROE,\r\n                lporductkey,\r\n                bAgnecyFeesOverrideTrigger,\r\n                bConfrimInstallment,\r\n                dEventLimit100USD,\r\n                dEventLimitShareUSD,\r\n                dEventLimitShareOrig,\r\n                dPMLShareOrig,\r\n                bProductLimitCheck,\r\n                bProductLimitOverride\r\n            order by\r\n                dw_loadts\r\n        ) as dw_extract_order\r\n    from\r\n        policy_section\r\n),\r\n\r\nfiltered as (\r\n    select * from ordered where dw_extract_order = 1\r\n),\r\n\r\nranged as (\r\n    select\r\n        lPolicySectionKey,\r\n        lPolicyActivityKey,\r\n        lPolicyKey,\r\n        lPolicyFolderKey,\r\n        nSequence,\r\n        lAuthorityCheckJoinKey,\r\n        lPolicySectionChainKey,\r\n        bNewSectionThisActivity,\r\n        bNewSectionThisEndorsement,\r\n        bProductPriming,\r\n        lProductTemplateSectionKey,\r\n        lAgreementSectionKey,\r\n        lTypeOfSatelliteTableKey,\r\n        lTypeOfPolicySectionScreenKey,\r\n        sSectionReference,\r\n        sUniqueMarketReference,\r\n        sOpenXposureLinkReference,\r\n        lCreatedByContactKey,\r\n        dtCreated,\r\n        lTypeOfLayerKey,\r\n        b100PcRisk,\r\n        bPrimaryLayer,\r\n        lTypeOfClassKey,\r\n        sClass,\r\n        lTypeOfPlacementKey,\r\n        bSingleMarket,\r\n        dtPeriodFrom,\r\n        dtPeriodTo,\r\n        dtPeriodToDisplay,\r\n        nPeriodDays,\r\n        bMidnightStartTime,\r\n        dtCancel,\r\n        lPolicySectionCurrencyKey,\r\n        dROE,\r\n        dWorkingLinePc,\r\n        dActualEstimatedLinePc,\r\n        dActualSignedLinePc,\r\n        sBrokerReference,\r\n        lTypeOfLimitBasisKey,\r\n        lLimTypeOfApplicablePeriodKey,\r\n        dMasterLimit,\r\n        dLimit,\r\n        dLimitShareT,\r\n        dExcessOf,\r\n        dLimitAggregate,\r\n        bSingleAggregate,\r\n        dTIV,\r\n        dCatPc,\r\n        dUnderlyingLimitOccurrence,\r\n        dUnderlyingLimitAggregate,\r\n        dSelfInsuredRetentionOccurrenc,\r\n        dSelfInsuredRetentionAggregate,\r\n        dSelfInsuredRetentionDeductibl,\r\n        lTypeOfDefenseLimitsKey,\r\n        lTypeOfExposureCalculationKey,\r\n        dExposure100,\r\n        dExposureT,\r\n        lAllRiskTypeOfDeductibleKey,\r\n        lARDTypeOfApplicablePeriodKey,\r\n        dAllRiskDeductible,\r\n        dAllRiskMinDeductible,\r\n        dAllRiskMaxDeductible,\r\n        dAllRiskDeductibleAggregate,\r\n        lTypeOfDeductionProcessingKey,\r\n        dDeductionsPc,\r\n        lTypeOfProductRatingKey,\r\n        lTypeOfPremiumEntryKey,\r\n        dTotalPremiumSplitPc,\r\n        dGrossPremium100,\r\n        dApportionRatedPremium100,\r\n        lTypeOfPaymentTermKey,\r\n        lTypeOfTaxEntryKey,\r\n        lTypeOfTaxRatingElementKey,\r\n        dTaxRatingAmount,\r\n        dTaxScheduleSplitAmountTotal,\r\n        dTaxScheduleSplitPcTotal,\r\n        dTaxScheduleSplitPremiumTotal,\r\n        dTaxScheduleInsuredTotal,\r\n        dTaxScheduleInsurerTotal,\r\n        dTaxInsuredRate,\r\n        dTaxInsurerRate,\r\n        dEnterInsuredTax,\r\n        dEnterInsurerTax,\r\n        dWorkingInsuredTax,\r\n        dWorkingInsurerTax,\r\n        nNonCriticalSubjectivityDays,\r\n        nEndorsementNumberCounter,\r\n        bStatCodeManual,\r\n        lProductTypeOfLayerKey,\r\n        lTypeOfLimitCaptureKey,\r\n        bRated,\r\n        dRateOnLine,\r\n        lTerritorykey,\r\n        lBrokerContactKey,\r\n        bMasterSection,\r\n        lInsuredContactKey,\r\n        bUnlimitedReinstatements,\r\n        bReinstatementsApplicable,\r\n        nNoOfReinstatements,\r\n        nAvailableReinstatements,\r\n        bProrata,\r\n        dReinstatementPc,\r\n        dTotalEPI100,\r\n        dTaxExemptpc,\r\n        dTaxExemptAmount,\r\n        bClonedPolicyFolder,\r\n        bMandatory,\r\n        lLocationAddressKey,\r\n        sLocationAddress1,\r\n        sLocationAddress2,\r\n        sLocationAddressCity,\r\n        SLocationAddressPostCode,\r\n        lLocationAddressCityKey,\r\n        lLocationAddressStateKey,\r\n        lLocationAddressCountryKey,\r\n        lLocationAddressPostCodeKey,\r\n        dLocationLatitude,\r\n        dLocationLongitude,\r\n        lLocationAddressCountyKey,\r\n        bEUMember,\r\n        sRiskNarrative,\r\n        sMPLNotes,\r\n        lEffectiveDateHour,\r\n        lEffectiveDateMinute,\r\n        bPeriodTBA,\r\n        dtQuoteOpenUntil,\r\n        bPrimaryLocation,\r\n        bLocAddressCountryHasStates,\r\n        bLocAddressStateRequiredOnAddr,\r\n        bMakePrimaryLocation,\r\n        lTypeOfRateModifierBasisKey,\r\n        dRatingModifier,\r\n        lTypeOfAddressEntryKey,\r\n        lMasterPolicySectionChainKey,\r\n        nProductOrder,\r\n        lTypeOfPolicySectionKey,\r\n        lLocationAddressZipCityKey,\r\n        lLocationAddressZipStateKey,\r\n        lLocationAddressCityStateKey,\r\n        dLimitInBaseCcy,\r\n        dTotalCommissionPC,\r\n        dMaximumCommissionPc,\r\n        bPreventPolicyDeductionRecalc,\r\n        lMultiLineYNkey,\r\n        nLinesPerSection,\r\n        sLocationCountryText,\r\n        sLocationCityText,\r\n        sConveyanceNotes,\r\n        sGeoGraphicalLimitsNotes,\r\n        dAgreementSectionPML,\r\n        bAgreementPMLChecks,\r\n        dAgreementSectionROE,\r\n        LAgreementSectionCCYKey,\r\n        lOverrideAgreementClassKey,\r\n        lJurisdictionCountrykey,\r\n        lJurisdictionStatekey,\r\n        lScheduleCountry,\r\n        lScheduleState,\r\n        bCreatedBySchedule,\r\n        lAgreementSettCcyKey,\r\n        dtFirstInstalmentDueDate,\r\n        nFixedInstalmentNumber,\r\n        bCustomInstalments,\r\n        lDueDateModifierKey,\r\n        nInterval,\r\n        nTermsOfTradeDays,\r\n        lTypeOfInstalmentKey,\r\n        bOverideToSingle,\r\n        lPolicySectionDefaultAddKey,\r\n        bLocationBasedSection,\r\n        sLocationFullAddress,\r\n        bOnAgreement,\r\n        lEarningPatternKey,\r\n        lWritingPatternKey,\r\n        lEditScreenKey,\r\n        lViewSingleLineScreenKey,\r\n        lViewMultiLineScreenKey,\r\n        sAdditionalCoverNotes,\r\n        dTotalInstalmentsPC,\r\n        bAgreementOverrideComplete,\r\n        dMaxAgreementOccurrenceLimit,\r\n        dMaxAgreementAggregateLimit,\r\n        dGrossPremiumTotalSharePrev,\r\n        dLimitShareTechnicalPrevious,\r\n        lAgreementSectionChainKey,\r\n        bLimitWithinAgreement,\r\n        bPremiumWithinAgreement,\r\n        bSectionExpired,\r\n        bSectionAgreementAccumulated,\r\n        dGrossPremiumTotalShare,\r\n        dAgreementPremiumIncomeLimit,\r\n        dPreviousEndorsementLimit,\r\n        dLimitShareTBound,\r\n        dGrossPremiumShareBound,\r\n        bLocationCountryIsMandatory,\r\n        bLocationAddressIsMandatory,\r\n        nCodeSplitNotDone,\r\n        dCessionPC,\r\n        dCashCallLimit,\r\n        nNoLines,\r\n        dMaxCapacity,\r\n        bPremiumReserveRetained,\r\n        bLossReserveRetained,\r\n        dAttritionalLossRatioPC,\r\n        dLargeLossRatioPC,\r\n        dCatLoadingPC,\r\n        dProjectedLossRatioPC,\r\n        dEstimatedProfitCommissionPC,\r\n        dCombinedRatioPC,\r\n        dPortfolioPremiumInPC,\r\n        dPortfolioPremiumIn,\r\n        dPortfolioLossInPC,\r\n        lNumberOfSlidesKey,\r\n        lTypeOfPremiumBaseKey,\r\n        dPremiumCommission,\r\n        dtFirstAdjustment,\r\n        lTypeOfAdjustmentFrequencyKey,\r\n        dtFinalAdjustment,\r\n        dCedingCommissionPC,\r\n        dProfitCommissionPc,\r\n        dManagementExpensesPC,\r\n        dOtherDeductionsPC,\r\n        dProfitPC,\r\n        nNumberClauses,\r\n        bSetAutoPolicyDeductions,\r\n        nNoInvalidAgreementPML,\r\n        bInitialiseAutoDeductions,\r\n        bShowROE,\r\n        bRatingBasisVisible,\r\n        bDisplayMD,\r\n        bCoverageElementsRated,\r\n        lMasterPolicySectionKey,\r\n        bBinderPolicy,\r\n        bAutoAdd,\r\n        lImplementationSetupForNewOldRIKey,\r\n        bEnableNewRI,\r\n        bEnterTaxScheduleCountryPc,\r\n        bIsAIHidden,\r\n        bUnattached,\r\n        lOSFICodeKey,\r\n        nTotalBinderProportionPc,\r\n        lTypeOfDeductibleBasisKey,\r\n        n1stInstTermsOfTradeDays,\r\n        dEventLimit100,\r\n        dMaxPMLLimitShare,\r\n        dMaxEventLimitShare,\r\n        ltypeofPremiumPaymentWarrantyKey,\r\n        lClassificationKey,\r\n        lSubClassKey,\r\n        lSolvencyIIKey,\r\n        lEndorementSubClassificationKey,\r\n        dLimitOrig,\r\n        sPolicySectionBKReference,\r\n        nCountAgencyFees,\r\n        nSubdivision,\r\n        bUseLimitROE,\r\n        lporductkey,\r\n        bAgnecyFeesOverrideTrigger,\r\n        bConfrimInstallment,\r\n        dEventLimit100USD,\r\n        dEventLimitShareUSD,\r\n        dEventLimitShareOrig,\r\n        dPMLShareOrig,\r\n        bProductLimitCheck,\r\n        bProductLimitOverride,\r\n        dw_loadts as _valid_from,\r\n        lead(dw_loadts) over (partition by lPolicySectionKey order by dw_loadts) as _valid_to\r\n    from\r\n        filtered\r\n)\r\n\r\nselect * from ranged", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "scd\\scd_policy_section.sql", "original_file_path": "models\\scd\\scd_policy_section.sql", "name": "scd_policy_section", "alias": "scd_policy_section", "checksum": {"name": "sha256", "checksum": "088a65407dc7ccc2eb9fb010020ef1ce8af29a5a929ba351a4bf0426066bd1ca"}, "tags": ["InwardPremium"], "refs": [], "sources": [["dbo", "policy_section"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": "iginsure://models\\scd\\scd.yml", "compiled_path": "target\\compiled\\iginsure\\models\\scd\\scd_policy_section.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "docs": {"show": false}, "tags": ["InwardPremium"]}, "created_at": 1701786801.7950811, "compiled_code": "-- This file is automatically generated\n\n\nwith\n\npolicy_section as (\n    select * from \"IGI_PROD_DW\".\"dbo\".\"PolicySection\"\n),\n\nordered as (\n    select\n        lPolicySectionKey,\n        lPolicyActivityKey,\n        lPolicyKey,\n        lPolicyFolderKey,\n        nSequence,\n        lAuthorityCheckJoinKey,\n        lPolicySectionChainKey,\n        bNewSectionThisActivity,\n        bNewSectionThisEndorsement,\n        bProductPriming,\n        lProductTemplateSectionKey,\n        lAgreementSectionKey,\n        lTypeOfSatelliteTableKey,\n        lTypeOfPolicySectionScreenKey,\n        sSectionReference,\n        sUniqueMarketReference,\n        sOpenXposureLinkReference,\n        lCreatedByContactKey,\n        dtCreated,\n        lTypeOfLayerKey,\n        b100PcRisk,\n        bPrimaryLayer,\n        lTypeOfClassKey,\n        sClass,\n        lTypeOfPlacementKey,\n        bSingleMarket,\n        dtPeriodFrom,\n        dtPeriodTo,\n        dtPeriodToDisplay,\n        nPeriodDays,\n        bMidnightStartTime,\n        dtCancel,\n        lPolicySectionCurrencyKey,\n        dROE,\n        dWorkingLinePc,\n        dActualEstimatedLinePc,\n        dActualSignedLinePc,\n        sBrokerReference,\n        lTypeOfLimitBasisKey,\n        lLimTypeOfApplicablePeriodKey,\n        dMasterLimit,\n        dLimit,\n        dLimitShareT,\n        dExcessOf,\n        dLimitAggregate,\n        bSingleAggregate,\n        dTIV,\n        dCatPc,\n        dUnderlyingLimitOccurrence,\n        dUnderlyingLimitAggregate,\n        dSelfInsuredRetentionOccurrenc,\n        dSelfInsuredRetentionAggregate,\n        dSelfInsuredRetentionDeductibl,\n        lTypeOfDefenseLimitsKey,\n        lTypeOfExposureCalculationKey,\n        dExposure100,\n        dExposureT,\n        lAllRiskTypeOfDeductibleKey,\n        lARDTypeOfApplicablePeriodKey,\n        dAllRiskDeductible,\n        dAllRiskMinDeductible,\n        dAllRiskMaxDeductible,\n        dAllRiskDeductibleAggregate,\n        lTypeOfDeductionProcessingKey,\n        dDeductionsPc,\n        lTypeOfProductRatingKey,\n        lTypeOfPremiumEntryKey,\n        dTotalPremiumSplitPc,\n        dGrossPremium100,\n        dApportionRatedPremium100,\n        lTypeOfPaymentTermKey,\n        lTypeOfTaxEntryKey,\n        lTypeOfTaxRatingElementKey,\n        dTaxRatingAmount,\n        dTaxScheduleSplitAmountTotal,\n        dTaxScheduleSplitPcTotal,\n        dTaxScheduleSplitPremiumTotal,\n        dTaxScheduleInsuredTotal,\n        dTaxScheduleInsurerTotal,\n        dTaxInsuredRate,\n        dTaxInsurerRate,\n        dEnterInsuredTax,\n        dEnterInsurerTax,\n        dWorkingInsuredTax,\n        dWorkingInsurerTax,\n        nNonCriticalSubjectivityDays,\n        nEndorsementNumberCounter,\n        bStatCodeManual,\n        lProductTypeOfLayerKey,\n        lTypeOfLimitCaptureKey,\n        bRated,\n        dRateOnLine,\n        lTerritorykey,\n        lBrokerContactKey,\n        bMasterSection,\n        lInsuredContactKey,\n        bUnlimitedReinstatements,\n        bReinstatementsApplicable,\n        nNoOfReinstatements,\n        nAvailableReinstatements,\n        bProrata,\n        dReinstatementPc,\n        dTotalEPI100,\n        dTaxExemptpc,\n        dTaxExemptAmount,\n        bClonedPolicyFolder,\n        bMandatory,\n        lLocationAddressKey,\n        sLocationAddress1,\n        sLocationAddress2,\n        sLocationAddressCity,\n        SLocationAddressPostCode,\n        lLocationAddressCityKey,\n        lLocationAddressStateKey,\n        lLocationAddressCountryKey,\n        lLocationAddressPostCodeKey,\n        dLocationLatitude,\n        dLocationLongitude,\n        lLocationAddressCountyKey,\n        bEUMember,\n        sRiskNarrative,\n        sMPLNotes,\n        lEffectiveDateHour,\n        lEffectiveDateMinute,\n        bPeriodTBA,\n        dtQuoteOpenUntil,\n        bPrimaryLocation,\n        bLocAddressCountryHasStates,\n        bLocAddressStateRequiredOnAddr,\n        bMakePrimaryLocation,\n        lTypeOfRateModifierBasisKey,\n        dRatingModifier,\n        lTypeOfAddressEntryKey,\n        lMasterPolicySectionChainKey,\n        nProductOrder,\n        lTypeOfPolicySectionKey,\n        lLocationAddressZipCityKey,\n        lLocationAddressZipStateKey,\n        lLocationAddressCityStateKey,\n        dLimitInBaseCcy,\n        dTotalCommissionPC,\n        dMaximumCommissionPc,\n        bPreventPolicyDeductionRecalc,\n        lMultiLineYNkey,\n        nLinesPerSection,\n        sLocationCountryText,\n        sLocationCityText,\n        sConveyanceNotes,\n        sGeoGraphicalLimitsNotes,\n        dAgreementSectionPML,\n        bAgreementPMLChecks,\n        dAgreementSectionROE,\n        LAgreementSectionCCYKey,\n        lOverrideAgreementClassKey,\n        lJurisdictionCountrykey,\n        lJurisdictionStatekey,\n        lScheduleCountry,\n        lScheduleState,\n        bCreatedBySchedule,\n        lAgreementSettCcyKey,\n        dtFirstInstalmentDueDate,\n        nFixedInstalmentNumber,\n        bCustomInstalments,\n        lDueDateModifierKey,\n        nInterval,\n        nTermsOfTradeDays,\n        lTypeOfInstalmentKey,\n        bOverideToSingle,\n        lPolicySectionDefaultAddKey,\n        bLocationBasedSection,\n        sLocationFullAddress,\n        bOnAgreement,\n        lEarningPatternKey,\n        lWritingPatternKey,\n        lEditScreenKey,\n        lViewSingleLineScreenKey,\n        lViewMultiLineScreenKey,\n        sAdditionalCoverNotes,\n        dTotalInstalmentsPC,\n        bAgreementOverrideComplete,\n        dMaxAgreementOccurrenceLimit,\n        dMaxAgreementAggregateLimit,\n        dGrossPremiumTotalSharePrev,\n        dLimitShareTechnicalPrevious,\n        lAgreementSectionChainKey,\n        bLimitWithinAgreement,\n        bPremiumWithinAgreement,\n        bSectionExpired,\n        bSectionAgreementAccumulated,\n        dGrossPremiumTotalShare,\n        dAgreementPremiumIncomeLimit,\n        dPreviousEndorsementLimit,\n        dLimitShareTBound,\n        dGrossPremiumShareBound,\n        bLocationCountryIsMandatory,\n        bLocationAddressIsMandatory,\n        nCodeSplitNotDone,\n        dCessionPC,\n        dCashCallLimit,\n        nNoLines,\n        dMaxCapacity,\n        bPremiumReserveRetained,\n        bLossReserveRetained,\n        dAttritionalLossRatioPC,\n        dLargeLossRatioPC,\n        dCatLoadingPC,\n        dProjectedLossRatioPC,\n        dEstimatedProfitCommissionPC,\n        dCombinedRatioPC,\n        dPortfolioPremiumInPC,\n        dPortfolioPremiumIn,\n        dPortfolioLossInPC,\n        lNumberOfSlidesKey,\n        lTypeOfPremiumBaseKey,\n        dPremiumCommission,\n        dtFirstAdjustment,\n        lTypeOfAdjustmentFrequencyKey,\n        dtFinalAdjustment,\n        dCedingCommissionPC,\n        dProfitCommissionPc,\n        dManagementExpensesPC,\n        dOtherDeductionsPC,\n        dProfitPC,\n        nNumberClauses,\n        bSetAutoPolicyDeductions,\n        nNoInvalidAgreementPML,\n        bInitialiseAutoDeductions,\n        bShowROE,\n        bRatingBasisVisible,\n        bDisplayMD,\n        bCoverageElementsRated,\n        lMasterPolicySectionKey,\n        bBinderPolicy,\n        bAutoAdd,\n        lImplementationSetupForNewOldRIKey,\n        bEnableNewRI,\n        bEnterTaxScheduleCountryPc,\n        bIsAIHidden,\n        bUnattached,\n        lOSFICodeKey,\n        nTotalBinderProportionPc,\n        lTypeOfDeductibleBasisKey,\n        n1stInstTermsOfTradeDays,\n        dEventLimit100,\n        dMaxPMLLimitShare,\n        dMaxEventLimitShare,\n        ltypeofPremiumPaymentWarrantyKey,\n        lClassificationKey,\n        lSubClassKey,\n        lSolvencyIIKey,\n        lEndorementSubClassificationKey,\n        dLimitOrig,\n        sPolicySectionBKReference,\n        nCountAgencyFees,\n        nSubdivision,\n        bUseLimitROE,\n        lporductkey,\n        bAgnecyFeesOverrideTrigger,\n        bConfrimInstallment,\n        dEventLimit100USD,\n        dEventLimitShareUSD,\n        dEventLimitShareOrig,\n        dPMLShareOrig,\n        bProductLimitCheck,\n        bProductLimitOverride,\n        dw_loadts,\n        row_number() over (\n            partition by\n                lPolicySectionKey,\n                lPolicyActivityKey,\n                lPolicyKey,\n                lPolicyFolderKey,\n                nSequence,\n                lAuthorityCheckJoinKey,\n                lPolicySectionChainKey,\n                bNewSectionThisActivity,\n                bNewSectionThisEndorsement,\n                bProductPriming,\n                lProductTemplateSectionKey,\n                lAgreementSectionKey,\n                lTypeOfSatelliteTableKey,\n                lTypeOfPolicySectionScreenKey,\n                sSectionReference,\n                sUniqueMarketReference,\n                sOpenXposureLinkReference,\n                lCreatedByContactKey,\n                dtCreated,\n                lTypeOfLayerKey,\n                b100PcRisk,\n                bPrimaryLayer,\n                lTypeOfClassKey,\n                sClass,\n                lTypeOfPlacementKey,\n                bSingleMarket,\n                dtPeriodFrom,\n                dtPeriodTo,\n                dtPeriodToDisplay,\n                nPeriodDays,\n                bMidnightStartTime,\n                dtCancel,\n                lPolicySectionCurrencyKey,\n                dROE,\n                dWorkingLinePc,\n                dActualEstimatedLinePc,\n                dActualSignedLinePc,\n                sBrokerReference,\n                lTypeOfLimitBasisKey,\n                lLimTypeOfApplicablePeriodKey,\n                dMasterLimit,\n                dLimit,\n                dLimitShareT,\n                dExcessOf,\n                dLimitAggregate,\n                bSingleAggregate,\n                dTIV,\n                dCatPc,\n                dUnderlyingLimitOccurrence,\n                dUnderlyingLimitAggregate,\n                dSelfInsuredRetentionOccurrenc,\n                dSelfInsuredRetentionAggregate,\n                dSelfInsuredRetentionDeductibl,\n                lTypeOfDefenseLimitsKey,\n                lTypeOfExposureCalculationKey,\n                dExposure100,\n                dExposureT,\n                lAllRiskTypeOfDeductibleKey,\n                lARDTypeOfApplicablePeriodKey,\n                dAllRiskDeductible,\n                dAllRiskMinDeductible,\n                dAllRiskMaxDeductible,\n                dAllRiskDeductibleAggregate,\n                lTypeOfDeductionProcessingKey,\n                dDeductionsPc,\n                lTypeOfProductRatingKey,\n                lTypeOfPremiumEntryKey,\n                dTotalPremiumSplitPc,\n                dGrossPremium100,\n                dApportionRatedPremium100,\n                lTypeOfPaymentTermKey,\n                lTypeOfTaxEntryKey,\n                lTypeOfTaxRatingElementKey,\n                dTaxRatingAmount,\n                dTaxScheduleSplitAmountTotal,\n                dTaxScheduleSplitPcTotal,\n                dTaxScheduleSplitPremiumTotal,\n                dTaxScheduleInsuredTotal,\n                dTaxScheduleInsurerTotal,\n                dTaxInsuredRate,\n                dTaxInsurerRate,\n                dEnterInsuredTax,\n                dEnterInsurerTax,\n                dWorkingInsuredTax,\n                dWorkingInsurerTax,\n                nNonCriticalSubjectivityDays,\n                nEndorsementNumberCounter,\n                bStatCodeManual,\n                lProductTypeOfLayerKey,\n                lTypeOfLimitCaptureKey,\n                bRated,\n                dRateOnLine,\n                lTerritorykey,\n                lBrokerContactKey,\n                bMasterSection,\n                lInsuredContactKey,\n                bUnlimitedReinstatements,\n                bReinstatementsApplicable,\n                nNoOfReinstatements,\n                nAvailableReinstatements,\n                bProrata,\n                dReinstatementPc,\n                dTotalEPI100,\n                dTaxExemptpc,\n                dTaxExemptAmount,\n                bClonedPolicyFolder,\n                bMandatory,\n                lLocationAddressKey,\n                sLocationAddress1,\n                sLocationAddress2,\n                sLocationAddressCity,\n                SLocationAddressPostCode,\n                lLocationAddressCityKey,\n                lLocationAddressStateKey,\n                lLocationAddressCountryKey,\n                lLocationAddressPostCodeKey,\n                dLocationLatitude,\n                dLocationLongitude,\n                lLocationAddressCountyKey,\n                bEUMember,\n                sRiskNarrative,\n                sMPLNotes,\n                lEffectiveDateHour,\n                lEffectiveDateMinute,\n                bPeriodTBA,\n                dtQuoteOpenUntil,\n                bPrimaryLocation,\n                bLocAddressCountryHasStates,\n                bLocAddressStateRequiredOnAddr,\n                bMakePrimaryLocation,\n                lTypeOfRateModifierBasisKey,\n                dRatingModifier,\n                lTypeOfAddressEntryKey,\n                lMasterPolicySectionChainKey,\n                nProductOrder,\n                lTypeOfPolicySectionKey,\n                lLocationAddressZipCityKey,\n                lLocationAddressZipStateKey,\n                lLocationAddressCityStateKey,\n                dLimitInBaseCcy,\n                dTotalCommissionPC,\n                dMaximumCommissionPc,\n                bPreventPolicyDeductionRecalc,\n                lMultiLineYNkey,\n                nLinesPerSection,\n                sLocationCountryText,\n                sLocationCityText,\n                sConveyanceNotes,\n                sGeoGraphicalLimitsNotes,\n                dAgreementSectionPML,\n                bAgreementPMLChecks,\n                dAgreementSectionROE,\n                LAgreementSectionCCYKey,\n                lOverrideAgreementClassKey,\n                lJurisdictionCountrykey,\n                lJurisdictionStatekey,\n                lScheduleCountry,\n                lScheduleState,\n                bCreatedBySchedule,\n                lAgreementSettCcyKey,\n                dtFirstInstalmentDueDate,\n                nFixedInstalmentNumber,\n                bCustomInstalments,\n                lDueDateModifierKey,\n                nInterval,\n                nTermsOfTradeDays,\n                lTypeOfInstalmentKey,\n                bOverideToSingle,\n                lPolicySectionDefaultAddKey,\n                bLocationBasedSection,\n                sLocationFullAddress,\n                bOnAgreement,\n                lEarningPatternKey,\n                lWritingPatternKey,\n                lEditScreenKey,\n                lViewSingleLineScreenKey,\n                lViewMultiLineScreenKey,\n                sAdditionalCoverNotes,\n                dTotalInstalmentsPC,\n                bAgreementOverrideComplete,\n                dMaxAgreementOccurrenceLimit,\n                dMaxAgreementAggregateLimit,\n                dGrossPremiumTotalSharePrev,\n                dLimitShareTechnicalPrevious,\n                lAgreementSectionChainKey,\n                bLimitWithinAgreement,\n                bPremiumWithinAgreement,\n                bSectionExpired,\n                bSectionAgreementAccumulated,\n                dGrossPremiumTotalShare,\n                dAgreementPremiumIncomeLimit,\n                dPreviousEndorsementLimit,\n                dLimitShareTBound,\n                dGrossPremiumShareBound,\n                bLocationCountryIsMandatory,\n                bLocationAddressIsMandatory,\n                nCodeSplitNotDone,\n                dCessionPC,\n                dCashCallLimit,\n                nNoLines,\n                dMaxCapacity,\n                bPremiumReserveRetained,\n                bLossReserveRetained,\n                dAttritionalLossRatioPC,\n                dLargeLossRatioPC,\n                dCatLoadingPC,\n                dProjectedLossRatioPC,\n                dEstimatedProfitCommissionPC,\n                dCombinedRatioPC,\n                dPortfolioPremiumInPC,\n                dPortfolioPremiumIn,\n                dPortfolioLossInPC,\n                lNumberOfSlidesKey,\n                lTypeOfPremiumBaseKey,\n                dPremiumCommission,\n                dtFirstAdjustment,\n                lTypeOfAdjustmentFrequencyKey,\n                dtFinalAdjustment,\n                dCedingCommissionPC,\n                dProfitCommissionPc,\n                dManagementExpensesPC,\n                dOtherDeductionsPC,\n                dProfitPC,\n                nNumberClauses,\n                bSetAutoPolicyDeductions,\n                nNoInvalidAgreementPML,\n                bInitialiseAutoDeductions,\n                bShowROE,\n                bRatingBasisVisible,\n                bDisplayMD,\n                bCoverageElementsRated,\n                lMasterPolicySectionKey,\n                bBinderPolicy,\n                bAutoAdd,\n                lImplementationSetupForNewOldRIKey,\n                bEnableNewRI,\n                bEnterTaxScheduleCountryPc,\n                bIsAIHidden,\n                bUnattached,\n                lOSFICodeKey,\n                nTotalBinderProportionPc,\n                lTypeOfDeductibleBasisKey,\n                n1stInstTermsOfTradeDays,\n                dEventLimit100,\n                dMaxPMLLimitShare,\n                dMaxEventLimitShare,\n                ltypeofPremiumPaymentWarrantyKey,\n                lClassificationKey,\n                lSubClassKey,\n                lSolvencyIIKey,\n                lEndorementSubClassificationKey,\n                dLimitOrig,\n                sPolicySectionBKReference,\n                nCountAgencyFees,\n                nSubdivision,\n                bUseLimitROE,\n                lporductkey,\n                bAgnecyFeesOverrideTrigger,\n                bConfrimInstallment,\n                dEventLimit100USD,\n                dEventLimitShareUSD,\n                dEventLimitShareOrig,\n                dPMLShareOrig,\n                bProductLimitCheck,\n                bProductLimitOverride\n            order by\n                dw_loadts\n        ) as dw_extract_order\n    from\n        policy_section\n),\n\nfiltered as (\n    select * from ordered where dw_extract_order = 1\n),\n\nranged as (\n    select\n        lPolicySectionKey,\n        lPolicyActivityKey,\n        lPolicyKey,\n        lPolicyFolderKey,\n        nSequence,\n        lAuthorityCheckJoinKey,\n        lPolicySectionChainKey,\n        bNewSectionThisActivity,\n        bNewSectionThisEndorsement,\n        bProductPriming,\n        lProductTemplateSectionKey,\n        lAgreementSectionKey,\n        lTypeOfSatelliteTableKey,\n        lTypeOfPolicySectionScreenKey,\n        sSectionReference,\n        sUniqueMarketReference,\n        sOpenXposureLinkReference,\n        lCreatedByContactKey,\n        dtCreated,\n        lTypeOfLayerKey,\n        b100PcRisk,\n        bPrimaryLayer,\n        lTypeOfClassKey,\n        sClass,\n        lTypeOfPlacementKey,\n        bSingleMarket,\n        dtPeriodFrom,\n        dtPeriodTo,\n        dtPeriodToDisplay,\n        nPeriodDays,\n        bMidnightStartTime,\n        dtCancel,\n        lPolicySectionCurrencyKey,\n        dROE,\n        dWorkingLinePc,\n        dActualEstimatedLinePc,\n        dActualSignedLinePc,\n        sBrokerReference,\n        lTypeOfLimitBasisKey,\n        lLimTypeOfApplicablePeriodKey,\n        dMasterLimit,\n        dLimit,\n        dLimitShareT,\n        dExcessOf,\n        dLimitAggregate,\n        bSingleAggregate,\n        dTIV,\n        dCatPc,\n        dUnderlyingLimitOccurrence,\n        dUnderlyingLimitAggregate,\n        dSelfInsuredRetentionOccurrenc,\n        dSelfInsuredRetentionAggregate,\n        dSelfInsuredRetentionDeductibl,\n        lTypeOfDefenseLimitsKey,\n        lTypeOfExposureCalculationKey,\n        dExposure100,\n        dExposureT,\n        lAllRiskTypeOfDeductibleKey,\n        lARDTypeOfApplicablePeriodKey,\n        dAllRiskDeductible,\n        dAllRiskMinDeductible,\n        dAllRiskMaxDeductible,\n        dAllRiskDeductibleAggregate,\n        lTypeOfDeductionProcessingKey,\n        dDeductionsPc,\n        lTypeOfProductRatingKey,\n        lTypeOfPremiumEntryKey,\n        dTotalPremiumSplitPc,\n        dGrossPremium100,\n        dApportionRatedPremium100,\n        lTypeOfPaymentTermKey,\n        lTypeOfTaxEntryKey,\n        lTypeOfTaxRatingElementKey,\n        dTaxRatingAmount,\n        dTaxScheduleSplitAmountTotal,\n        dTaxScheduleSplitPcTotal,\n        dTaxScheduleSplitPremiumTotal,\n        dTaxScheduleInsuredTotal,\n        dTaxScheduleInsurerTotal,\n        dTaxInsuredRate,\n        dTaxInsurerRate,\n        dEnterInsuredTax,\n        dEnterInsurerTax,\n        dWorkingInsuredTax,\n        dWorkingInsurerTax,\n        nNonCriticalSubjectivityDays,\n        nEndorsementNumberCounter,\n        bStatCodeManual,\n        lProductTypeOfLayerKey,\n        lTypeOfLimitCaptureKey,\n        bRated,\n        dRateOnLine,\n        lTerritorykey,\n        lBrokerContactKey,\n        bMasterSection,\n        lInsuredContactKey,\n        bUnlimitedReinstatements,\n        bReinstatementsApplicable,\n        nNoOfReinstatements,\n        nAvailableReinstatements,\n        bProrata,\n        dReinstatementPc,\n        dTotalEPI100,\n        dTaxExemptpc,\n        dTaxExemptAmount,\n        bClonedPolicyFolder,\n        bMandatory,\n        lLocationAddressKey,\n        sLocationAddress1,\n        sLocationAddress2,\n        sLocationAddressCity,\n        SLocationAddressPostCode,\n        lLocationAddressCityKey,\n        lLocationAddressStateKey,\n        lLocationAddressCountryKey,\n        lLocationAddressPostCodeKey,\n        dLocationLatitude,\n        dLocationLongitude,\n        lLocationAddressCountyKey,\n        bEUMember,\n        sRiskNarrative,\n        sMPLNotes,\n        lEffectiveDateHour,\n        lEffectiveDateMinute,\n        bPeriodTBA,\n        dtQuoteOpenUntil,\n        bPrimaryLocation,\n        bLocAddressCountryHasStates,\n        bLocAddressStateRequiredOnAddr,\n        bMakePrimaryLocation,\n        lTypeOfRateModifierBasisKey,\n        dRatingModifier,\n        lTypeOfAddressEntryKey,\n        lMasterPolicySectionChainKey,\n        nProductOrder,\n        lTypeOfPolicySectionKey,\n        lLocationAddressZipCityKey,\n        lLocationAddressZipStateKey,\n        lLocationAddressCityStateKey,\n        dLimitInBaseCcy,\n        dTotalCommissionPC,\n        dMaximumCommissionPc,\n        bPreventPolicyDeductionRecalc,\n        lMultiLineYNkey,\n        nLinesPerSection,\n        sLocationCountryText,\n        sLocationCityText,\n        sConveyanceNotes,\n        sGeoGraphicalLimitsNotes,\n        dAgreementSectionPML,\n        bAgreementPMLChecks,\n        dAgreementSectionROE,\n        LAgreementSectionCCYKey,\n        lOverrideAgreementClassKey,\n        lJurisdictionCountrykey,\n        lJurisdictionStatekey,\n        lScheduleCountry,\n        lScheduleState,\n        bCreatedBySchedule,\n        lAgreementSettCcyKey,\n        dtFirstInstalmentDueDate,\n        nFixedInstalmentNumber,\n        bCustomInstalments,\n        lDueDateModifierKey,\n        nInterval,\n        nTermsOfTradeDays,\n        lTypeOfInstalmentKey,\n        bOverideToSingle,\n        lPolicySectionDefaultAddKey,\n        bLocationBasedSection,\n        sLocationFullAddress,\n        bOnAgreement,\n        lEarningPatternKey,\n        lWritingPatternKey,\n        lEditScreenKey,\n        lViewSingleLineScreenKey,\n        lViewMultiLineScreenKey,\n        sAdditionalCoverNotes,\n        dTotalInstalmentsPC,\n        bAgreementOverrideComplete,\n        dMaxAgreementOccurrenceLimit,\n        dMaxAgreementAggregateLimit,\n        dGrossPremiumTotalSharePrev,\n        dLimitShareTechnicalPrevious,\n        lAgreementSectionChainKey,\n        bLimitWithinAgreement,\n        bPremiumWithinAgreement,\n        bSectionExpired,\n        bSectionAgreementAccumulated,\n        dGrossPremiumTotalShare,\n        dAgreementPremiumIncomeLimit,\n        dPreviousEndorsementLimit,\n        dLimitShareTBound,\n        dGrossPremiumShareBound,\n        bLocationCountryIsMandatory,\n        bLocationAddressIsMandatory,\n        nCodeSplitNotDone,\n        dCessionPC,\n        dCashCallLimit,\n        nNoLines,\n        dMaxCapacity,\n        bPremiumReserveRetained,\n        bLossReserveRetained,\n        dAttritionalLossRatioPC,\n        dLargeLossRatioPC,\n        dCatLoadingPC,\n        dProjectedLossRatioPC,\n        dEstimatedProfitCommissionPC,\n        dCombinedRatioPC,\n        dPortfolioPremiumInPC,\n        dPortfolioPremiumIn,\n        dPortfolioLossInPC,\n        lNumberOfSlidesKey,\n        lTypeOfPremiumBaseKey,\n        dPremiumCommission,\n        dtFirstAdjustment,\n        lTypeOfAdjustmentFrequencyKey,\n        dtFinalAdjustment,\n        dCedingCommissionPC,\n        dProfitCommissionPc,\n        dManagementExpensesPC,\n        dOtherDeductionsPC,\n        dProfitPC,\n        nNumberClauses,\n        bSetAutoPolicyDeductions,\n        nNoInvalidAgreementPML,\n        bInitialiseAutoDeductions,\n        bShowROE,\n        bRatingBasisVisible,\n        bDisplayMD,\n        bCoverageElementsRated,\n        lMasterPolicySectionKey,\n        bBinderPolicy,\n        bAutoAdd,\n        lImplementationSetupForNewOldRIKey,\n        bEnableNewRI,\n        bEnterTaxScheduleCountryPc,\n        bIsAIHidden,\n        bUnattached,\n        lOSFICodeKey,\n        nTotalBinderProportionPc,\n        lTypeOfDeductibleBasisKey,\n        n1stInstTermsOfTradeDays,\n        dEventLimit100,\n        dMaxPMLLimitShare,\n        dMaxEventLimitShare,\n        ltypeofPremiumPaymentWarrantyKey,\n        lClassificationKey,\n        lSubClassKey,\n        lSolvencyIIKey,\n        lEndorementSubClassificationKey,\n        dLimitOrig,\n        sPolicySectionBKReference,\n        nCountAgencyFees,\n        nSubdivision,\n        bUseLimitROE,\n        lporductkey,\n        bAgnecyFeesOverrideTrigger,\n        bConfrimInstallment,\n        dEventLimit100USD,\n        dEventLimitShareUSD,\n        dEventLimitShareOrig,\n        dPMLShareOrig,\n        bProductLimitCheck,\n        bProductLimitOverride,\n        dw_loadts as _valid_from,\n        lead(dw_loadts) over (partition by lPolicySectionKey order by dw_loadts) as _valid_to\n    from\n        filtered\n)\n\nselect * from ranged", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"scd_policy_section\""}, "model.iginsure.scd_product": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.iginsure.dbo.product"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["InwardPremium"], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "scd", "scd_product"], "unique_id": "model.iginsure.scd_product", "raw_code": "-- This file is automatically generated\r\n{{\r\n  config(tags=['InwardPremium'])\r\n}}\r\n\r\nwith\r\n\r\nproduct as (\r\n    select * from {{ source('dbo', 'product') }}\r\n),\r\n\r\nordered as (\r\n    select\r\n        LPRODUCTKEY,\r\n        SPRODUCTCODE,\r\n        SPRODUCT,\r\n        SPRODUCTSEARCH,\r\n        lTypeOfProductGroupKey,\r\n        bAllowStandardPolicy,\r\n        bAllowAgreement,\r\n        sFormalProductName,\r\n        lActiveVersionCarrierKey,\r\n        lActiveVersionTemplateKey,\r\n        lAccRecFollowUpGroupKey,\r\n        bUseAccountSubmission,\r\n        lPolicySummaryViewScreenKey,\r\n        lWQContainerKey,\r\n        sLOBAccountCode,\r\n        dw_loadts,\r\n        row_number() over (\r\n            partition by\r\n                LPRODUCTKEY,\r\n                SPRODUCTCODE,\r\n                SPRODUCT,\r\n                SPRODUCTSEARCH,\r\n                lTypeOfProductGroupKey,\r\n                bAllowStandardPolicy,\r\n                bAllowAgreement,\r\n                sFormalProductName,\r\n                lActiveVersionCarrierKey,\r\n                lActiveVersionTemplateKey,\r\n                lAccRecFollowUpGroupKey,\r\n                bUseAccountSubmission,\r\n                lPolicySummaryViewScreenKey,\r\n                lWQContainerKey,\r\n                sLOBAccountCode\r\n            order by\r\n                dw_loadts\r\n        ) as dw_extract_order\r\n    from\r\n        product\r\n),\r\n\r\nfiltered as (\r\n    select * from ordered where dw_extract_order = 1\r\n),\r\n\r\nranged as (\r\n    select\r\n        LPRODUCTKEY,\r\n        SPRODUCTCODE,\r\n        SPRODUCT,\r\n        SPRODUCTSEARCH,\r\n        lTypeOfProductGroupKey,\r\n        bAllowStandardPolicy,\r\n        bAllowAgreement,\r\n        sFormalProductName,\r\n        lActiveVersionCarrierKey,\r\n        lActiveVersionTemplateKey,\r\n        lAccRecFollowUpGroupKey,\r\n        bUseAccountSubmission,\r\n        lPolicySummaryViewScreenKey,\r\n        lWQContainerKey,\r\n        sLOBAccountCode,\r\n        dw_loadts as _valid_from,\r\n        lead(dw_loadts) over (partition by LPRODUCTKEY order by dw_loadts) as _valid_to\r\n    from\r\n        filtered\r\n)\r\n\r\nselect * from ranged", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "scd\\scd_product.sql", "original_file_path": "models\\scd\\scd_product.sql", "name": "scd_product", "alias": "scd_product", "checksum": {"name": "sha256", "checksum": "40b5d36d2d527157eaec6e6898695b68dc1fe0c72a94dc037230b7499994953b"}, "tags": ["InwardPremium"], "refs": [], "sources": [["dbo", "product"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": "iginsure://models\\scd\\scd.yml", "compiled_path": "target\\compiled\\iginsure\\models\\scd\\scd_product.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "docs": {"show": false}, "tags": ["InwardPremium"]}, "created_at": 1701786801.798081, "compiled_code": "-- This file is automatically generated\n\n\nwith\n\nproduct as (\n    select * from \"IGI_PROD_DW\".\"dbo\".\"PRODUCT\"\n),\n\nordered as (\n    select\n        LPRODUCTKEY,\n        SPRODUCTCODE,\n        SPRODUCT,\n        SPRODUCTSEARCH,\n        lTypeOfProductGroupKey,\n        bAllowStandardPolicy,\n        bAllowAgreement,\n        sFormalProductName,\n        lActiveVersionCarrierKey,\n        lActiveVersionTemplateKey,\n        lAccRecFollowUpGroupKey,\n        bUseAccountSubmission,\n        lPolicySummaryViewScreenKey,\n        lWQContainerKey,\n        sLOBAccountCode,\n        dw_loadts,\n        row_number() over (\n            partition by\n                LPRODUCTKEY,\n                SPRODUCTCODE,\n                SPRODUCT,\n                SPRODUCTSEARCH,\n                lTypeOfProductGroupKey,\n                bAllowStandardPolicy,\n                bAllowAgreement,\n                sFormalProductName,\n                lActiveVersionCarrierKey,\n                lActiveVersionTemplateKey,\n                lAccRecFollowUpGroupKey,\n                bUseAccountSubmission,\n                lPolicySummaryViewScreenKey,\n                lWQContainerKey,\n                sLOBAccountCode\n            order by\n                dw_loadts\n        ) as dw_extract_order\n    from\n        product\n),\n\nfiltered as (\n    select * from ordered where dw_extract_order = 1\n),\n\nranged as (\n    select\n        LPRODUCTKEY,\n        SPRODUCTCODE,\n        SPRODUCT,\n        SPRODUCTSEARCH,\n        lTypeOfProductGroupKey,\n        bAllowStandardPolicy,\n        bAllowAgreement,\n        sFormalProductName,\n        lActiveVersionCarrierKey,\n        lActiveVersionTemplateKey,\n        lAccRecFollowUpGroupKey,\n        bUseAccountSubmission,\n        lPolicySummaryViewScreenKey,\n        lWQContainerKey,\n        sLOBAccountCode,\n        dw_loadts as _valid_from,\n        lead(dw_loadts) over (partition by LPRODUCTKEY order by dw_loadts) as _valid_to\n    from\n        filtered\n)\n\nselect * from ranged", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"scd_product\""}, "model.iginsure.scd_ri_activity": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.iginsure.dbo.ri_activity"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "scd", "scd_ri_activity"], "unique_id": "model.iginsure.scd_ri_activity", "raw_code": "-- This file is automatically generated\r\n\r\nwith\r\n\r\nri_activity as (\r\n    select * from {{ source('dbo', 'ri_activity') }}\r\n),\r\n\r\nordered as (\r\n    select\r\n        lRIActivityKey,\r\n        lRIPolicyKey,\r\n        lRIFolderKey,\r\n        lTypeOfPolicyActivityKey,\r\n        lAccountPeriodKey,\r\n        nSequence,\r\n        sReference,\r\n        dtOrderPlaced,\r\n        dtPeriodFrom,\r\n        dtPeriodTo,\r\n        nPeriodDays,\r\n        dtPeriodToTruncated,\r\n        nTermsOfTradeDays,\r\n        dtCancel,\r\n        bEndorsed,\r\n        lReinsuredDivisionKey,\r\n        lUnderwritingAssistContactKey,\r\n        lUnderwriterContactKey,\r\n        lRIActivityCurrencyKey,\r\n        dROE,\r\n        lTypeOfRIPolicyKey,\r\n        lTypeOfClaimBasisKey,\r\n        lTypeOfRIBasisKey,\r\n        lTypeOfRIExpiryKey,\r\n        lTypeOfRICategoryKey,\r\n        dtNoticeOfCancellation,\r\n        nNoticeOfCancellationDays,\r\n        nCountCancellationReason,\r\n        dCessionPC,\r\n        bFixedCession,\r\n        bEnableNewRI,\r\n        bProcessInstalments,\r\n        bGenReversalPropRIAmounts,\r\n        TypeOfEndorsementKey,\r\n        lSubDivisionKey,\r\n        dw_loadts,\r\n        row_number() over (\r\n            partition by\r\n                lRIActivityKey,\r\n                lRIPolicyKey,\r\n                lRIFolderKey,\r\n                lTypeOfPolicyActivityKey,\r\n                lAccountPeriodKey,\r\n                nSequence,\r\n                sReference,\r\n                dtOrderPlaced,\r\n                dtPeriodFrom,\r\n                dtPeriodTo,\r\n                nPeriodDays,\r\n                dtPeriodToTruncated,\r\n                nTermsOfTradeDays,\r\n                dtCancel,\r\n                bEndorsed,\r\n                lReinsuredDivisionKey,\r\n                lUnderwritingAssistContactKey,\r\n                lUnderwriterContactKey,\r\n                lRIActivityCurrencyKey,\r\n                dROE,\r\n                lTypeOfRIPolicyKey,\r\n                lTypeOfClaimBasisKey,\r\n                lTypeOfRIBasisKey,\r\n                lTypeOfRIExpiryKey,\r\n                lTypeOfRICategoryKey,\r\n                dtNoticeOfCancellation,\r\n                nNoticeOfCancellationDays,\r\n                nCountCancellationReason,\r\n                dCessionPC,\r\n                bFixedCession,\r\n                bEnableNewRI,\r\n                bProcessInstalments,\r\n                bGenReversalPropRIAmounts,\r\n                TypeOfEndorsementKey,\r\n                lSubDivisionKey\r\n            order by\r\n                dw_loadts\r\n        ) as dw_extract_order\r\n    from\r\n        ri_activity\r\n),\r\n\r\nfiltered as (\r\n    select * from ordered where dw_extract_order = 1\r\n),\r\n\r\nranged as (\r\n    select\r\n        lRIActivityKey,\r\n        lRIPolicyKey,\r\n        lRIFolderKey,\r\n        lTypeOfPolicyActivityKey,\r\n        lAccountPeriodKey,\r\n        nSequence,\r\n        sReference,\r\n        dtOrderPlaced,\r\n        dtPeriodFrom,\r\n        dtPeriodTo,\r\n        nPeriodDays,\r\n        dtPeriodToTruncated,\r\n        nTermsOfTradeDays,\r\n        dtCancel,\r\n        bEndorsed,\r\n        lReinsuredDivisionKey,\r\n        lUnderwritingAssistContactKey,\r\n        lUnderwriterContactKey,\r\n        lRIActivityCurrencyKey,\r\n        dROE,\r\n        lTypeOfRIPolicyKey,\r\n        lTypeOfClaimBasisKey,\r\n        lTypeOfRIBasisKey,\r\n        lTypeOfRIExpiryKey,\r\n        lTypeOfRICategoryKey,\r\n        dtNoticeOfCancellation,\r\n        nNoticeOfCancellationDays,\r\n        nCountCancellationReason,\r\n        dCessionPC,\r\n        bFixedCession,\r\n        bEnableNewRI,\r\n        bProcessInstalments,\r\n        bGenReversalPropRIAmounts,\r\n        TypeOfEndorsementKey,\r\n        lSubDivisionKey,\r\n        dw_loadts as _valid_from,\r\n        lead(dw_loadts) over (partition by lRIActivityKey order by dw_loadts) as _valid_to\r\n    from\r\n        filtered\r\n)\r\n\r\nselect * from ranged", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "scd\\scd_ri_activity.sql", "original_file_path": "models\\scd\\scd_ri_activity.sql", "name": "scd_ri_activity", "alias": "scd_ri_activity", "checksum": {"name": "sha256", "checksum": "eabbeaf6536963aae26987b83fe55c427a34194a95b1fc4ae76df2b1b12138d0"}, "tags": [], "refs": [], "sources": [["dbo", "ri_activity"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": "iginsure://models\\scd\\scd.yml", "compiled_path": "target\\compiled\\iginsure\\models\\scd\\scd_ri_activity.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "docs": {"show": false}}, "created_at": 1701786801.7990773, "compiled_code": "-- This file is automatically generated\n\nwith\n\nri_activity as (\n    select * from \"IGI_PROD_DW\".\"dbo\".\"RIActivity\"\n),\n\nordered as (\n    select\n        lRIActivityKey,\n        lRIPolicyKey,\n        lRIFolderKey,\n        lTypeOfPolicyActivityKey,\n        lAccountPeriodKey,\n        nSequence,\n        sReference,\n        dtOrderPlaced,\n        dtPeriodFrom,\n        dtPeriodTo,\n        nPeriodDays,\n        dtPeriodToTruncated,\n        nTermsOfTradeDays,\n        dtCancel,\n        bEndorsed,\n        lReinsuredDivisionKey,\n        lUnderwritingAssistContactKey,\n        lUnderwriterContactKey,\n        lRIActivityCurrencyKey,\n        dROE,\n        lTypeOfRIPolicyKey,\n        lTypeOfClaimBasisKey,\n        lTypeOfRIBasisKey,\n        lTypeOfRIExpiryKey,\n        lTypeOfRICategoryKey,\n        dtNoticeOfCancellation,\n        nNoticeOfCancellationDays,\n        nCountCancellationReason,\n        dCessionPC,\n        bFixedCession,\n        bEnableNewRI,\n        bProcessInstalments,\n        bGenReversalPropRIAmounts,\n        TypeOfEndorsementKey,\n        lSubDivisionKey,\n        dw_loadts,\n        row_number() over (\n            partition by\n                lRIActivityKey,\n                lRIPolicyKey,\n                lRIFolderKey,\n                lTypeOfPolicyActivityKey,\n                lAccountPeriodKey,\n                nSequence,\n                sReference,\n                dtOrderPlaced,\n                dtPeriodFrom,\n                dtPeriodTo,\n                nPeriodDays,\n                dtPeriodToTruncated,\n                nTermsOfTradeDays,\n                dtCancel,\n                bEndorsed,\n                lReinsuredDivisionKey,\n                lUnderwritingAssistContactKey,\n                lUnderwriterContactKey,\n                lRIActivityCurrencyKey,\n                dROE,\n                lTypeOfRIPolicyKey,\n                lTypeOfClaimBasisKey,\n                lTypeOfRIBasisKey,\n                lTypeOfRIExpiryKey,\n                lTypeOfRICategoryKey,\n                dtNoticeOfCancellation,\n                nNoticeOfCancellationDays,\n                nCountCancellationReason,\n                dCessionPC,\n                bFixedCession,\n                bEnableNewRI,\n                bProcessInstalments,\n                bGenReversalPropRIAmounts,\n                TypeOfEndorsementKey,\n                lSubDivisionKey\n            order by\n                dw_loadts\n        ) as dw_extract_order\n    from\n        ri_activity\n),\n\nfiltered as (\n    select * from ordered where dw_extract_order = 1\n),\n\nranged as (\n    select\n        lRIActivityKey,\n        lRIPolicyKey,\n        lRIFolderKey,\n        lTypeOfPolicyActivityKey,\n        lAccountPeriodKey,\n        nSequence,\n        sReference,\n        dtOrderPlaced,\n        dtPeriodFrom,\n        dtPeriodTo,\n        nPeriodDays,\n        dtPeriodToTruncated,\n        nTermsOfTradeDays,\n        dtCancel,\n        bEndorsed,\n        lReinsuredDivisionKey,\n        lUnderwritingAssistContactKey,\n        lUnderwriterContactKey,\n        lRIActivityCurrencyKey,\n        dROE,\n        lTypeOfRIPolicyKey,\n        lTypeOfClaimBasisKey,\n        lTypeOfRIBasisKey,\n        lTypeOfRIExpiryKey,\n        lTypeOfRICategoryKey,\n        dtNoticeOfCancellation,\n        nNoticeOfCancellationDays,\n        nCountCancellationReason,\n        dCessionPC,\n        bFixedCession,\n        bEnableNewRI,\n        bProcessInstalments,\n        bGenReversalPropRIAmounts,\n        TypeOfEndorsementKey,\n        lSubDivisionKey,\n        dw_loadts as _valid_from,\n        lead(dw_loadts) over (partition by lRIActivityKey order by dw_loadts) as _valid_to\n    from\n        filtered\n)\n\nselect * from ranged", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"scd_ri_activity\""}, "model.iginsure.scd_ri_policy": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.iginsure.dbo.ri_policy"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "scd", "scd_ri_policy"], "unique_id": "model.iginsure.scd_ri_policy", "raw_code": "-- This file is automatically generated\r\n\r\nwith\r\n\r\nri_policy as (\r\n    select * from {{ source('dbo', 'ri_policy') }}\r\n),\r\n\r\nordered as (\r\n    select\r\n        lRIPolicyKey,\r\n        lRIFolderKey,\r\n        lActiveRIActivityKey,\r\n        nVersion,\r\n        dtPeriodFrom,\r\n        dtPeriodTo,\r\n        nYearOfAccount,\r\n        sReference,\r\n        lRIPolicyCurrencyKey,\r\n        dRIPolicyROE,\r\n        bRenewalCreated,\r\n        lRenewalRIPolicyKey,\r\n        lClosedIntoRIPolicyKey,\r\n        dtClosedIntoDate,\r\n        lImplementationSetupForNewOldRIKey,\r\n        bEnableNewRI,\r\n        bAutoCreated,\r\n        lRIPolicyClosedIntoChainKey,\r\n        lTypeofRIClassKey,\r\n        sSourceReference,\r\n        nUWYear,\r\n        nPML,\r\n        nPMLPerc,\r\n        dw_loadts,\r\n        row_number() over (\r\n            partition by\r\n                lRIPolicyKey,\r\n                lRIFolderKey,\r\n                lActiveRIActivityKey,\r\n                nVersion,\r\n                dtPeriodFrom,\r\n                dtPeriodTo,\r\n                nYearOfAccount,\r\n                sReference,\r\n                lRIPolicyCurrencyKey,\r\n                dRIPolicyROE,\r\n                bRenewalCreated,\r\n                lRenewalRIPolicyKey,\r\n                lClosedIntoRIPolicyKey,\r\n                dtClosedIntoDate,\r\n                lImplementationSetupForNewOldRIKey,\r\n                bEnableNewRI,\r\n                bAutoCreated,\r\n                lRIPolicyClosedIntoChainKey,\r\n                lTypeofRIClassKey,\r\n                sSourceReference,\r\n                nUWYear,\r\n                nPML,\r\n                nPMLPerc\r\n            order by\r\n                dw_loadts\r\n        ) as dw_extract_order\r\n    from\r\n        ri_policy\r\n),\r\n\r\nfiltered as (\r\n    select * from ordered where dw_extract_order = 1\r\n),\r\n\r\nranged as (\r\n    select\r\n        lRIPolicyKey,\r\n        lRIFolderKey,\r\n        lActiveRIActivityKey,\r\n        nVersion,\r\n        dtPeriodFrom,\r\n        dtPeriodTo,\r\n        nYearOfAccount,\r\n        sReference,\r\n        lRIPolicyCurrencyKey,\r\n        dRIPolicyROE,\r\n        bRenewalCreated,\r\n        lRenewalRIPolicyKey,\r\n        lClosedIntoRIPolicyKey,\r\n        dtClosedIntoDate,\r\n        lImplementationSetupForNewOldRIKey,\r\n        bEnableNewRI,\r\n        bAutoCreated,\r\n        lRIPolicyClosedIntoChainKey,\r\n        lTypeofRIClassKey,\r\n        sSourceReference,\r\n        nUWYear,\r\n        nPML,\r\n        nPMLPerc,\r\n        dw_loadts as _valid_from,\r\n        lead(dw_loadts) over (partition by lRIPolicyKey order by dw_loadts) as _valid_to\r\n    from\r\n        filtered\r\n)\r\n\r\nselect * from ranged", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "scd\\scd_ri_policy.sql", "original_file_path": "models\\scd\\scd_ri_policy.sql", "name": "scd_ri_policy", "alias": "scd_ri_policy", "checksum": {"name": "sha256", "checksum": "713384d4b2ddf29ea81752ba78ddedf5a4e5b66f03691e2134385f0e8d8fa68c"}, "tags": [], "refs": [], "sources": [["dbo", "ri_policy"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": "iginsure://models\\scd\\scd.yml", "compiled_path": "target\\compiled\\iginsure\\models\\scd\\scd_ri_policy.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "docs": {"show": false}}, "created_at": 1701786801.8052633, "compiled_code": "-- This file is automatically generated\n\nwith\n\nri_policy as (\n    select * from \"IGI_PROD_DW\".\"dbo\".\"RIPolicy\"\n),\n\nordered as (\n    select\n        lRIPolicyKey,\n        lRIFolderKey,\n        lActiveRIActivityKey,\n        nVersion,\n        dtPeriodFrom,\n        dtPeriodTo,\n        nYearOfAccount,\n        sReference,\n        lRIPolicyCurrencyKey,\n        dRIPolicyROE,\n        bRenewalCreated,\n        lRenewalRIPolicyKey,\n        lClosedIntoRIPolicyKey,\n        dtClosedIntoDate,\n        lImplementationSetupForNewOldRIKey,\n        bEnableNewRI,\n        bAutoCreated,\n        lRIPolicyClosedIntoChainKey,\n        lTypeofRIClassKey,\n        sSourceReference,\n        nUWYear,\n        nPML,\n        nPMLPerc,\n        dw_loadts,\n        row_number() over (\n            partition by\n                lRIPolicyKey,\n                lRIFolderKey,\n                lActiveRIActivityKey,\n                nVersion,\n                dtPeriodFrom,\n                dtPeriodTo,\n                nYearOfAccount,\n                sReference,\n                lRIPolicyCurrencyKey,\n                dRIPolicyROE,\n                bRenewalCreated,\n                lRenewalRIPolicyKey,\n                lClosedIntoRIPolicyKey,\n                dtClosedIntoDate,\n                lImplementationSetupForNewOldRIKey,\n                bEnableNewRI,\n                bAutoCreated,\n                lRIPolicyClosedIntoChainKey,\n                lTypeofRIClassKey,\n                sSourceReference,\n                nUWYear,\n                nPML,\n                nPMLPerc\n            order by\n                dw_loadts\n        ) as dw_extract_order\n    from\n        ri_policy\n),\n\nfiltered as (\n    select * from ordered where dw_extract_order = 1\n),\n\nranged as (\n    select\n        lRIPolicyKey,\n        lRIFolderKey,\n        lActiveRIActivityKey,\n        nVersion,\n        dtPeriodFrom,\n        dtPeriodTo,\n        nYearOfAccount,\n        sReference,\n        lRIPolicyCurrencyKey,\n        dRIPolicyROE,\n        bRenewalCreated,\n        lRenewalRIPolicyKey,\n        lClosedIntoRIPolicyKey,\n        dtClosedIntoDate,\n        lImplementationSetupForNewOldRIKey,\n        bEnableNewRI,\n        bAutoCreated,\n        lRIPolicyClosedIntoChainKey,\n        lTypeofRIClassKey,\n        sSourceReference,\n        nUWYear,\n        nPML,\n        nPMLPerc,\n        dw_loadts as _valid_from,\n        lead(dw_loadts) over (partition by lRIPolicyKey order by dw_loadts) as _valid_to\n    from\n        filtered\n)\n\nselect * from ranged", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"scd_ri_policy\""}, "model.iginsure.scd_ri_policy_period": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.iginsure.dbo.ri_policy_period"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "scd", "scd_ri_policy_period"], "unique_id": "model.iginsure.scd_ri_policy_period", "raw_code": "-- This file is automatically generated\r\n\r\nwith\r\n\r\nri_policy_period as (\r\n    select * from {{ source('dbo', 'ri_policy_period') }}\r\n),\r\n\r\nordered as (\r\n    select\r\n        lRIPolicyPeriodKey,\r\n        lRIPolicyKey,\r\n        lRIFolderKey,\r\n        lAccountPeriodKey,\r\n        dw_loadts,\r\n        row_number() over (\r\n            partition by\r\n                lRIPolicyPeriodKey,\r\n                lRIPolicyKey,\r\n                lRIFolderKey,\r\n                lAccountPeriodKey\r\n            order by\r\n                dw_loadts\r\n        ) as dw_extract_order\r\n    from\r\n        ri_policy_period\r\n),\r\n\r\nfiltered as (\r\n    select * from ordered where dw_extract_order = 1\r\n),\r\n\r\nranged as (\r\n    select\r\n        lRIPolicyPeriodKey,\r\n        lRIPolicyKey,\r\n        lRIFolderKey,\r\n        lAccountPeriodKey,\r\n        dw_loadts as _valid_from,\r\n        lead(dw_loadts) over (partition by lRIPolicyPeriodKey order by dw_loadts) as _valid_to\r\n    from\r\n        filtered\r\n)\r\n\r\nselect * from ranged", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "scd\\scd_ri_policy_period.sql", "original_file_path": "models\\scd\\scd_ri_policy_period.sql", "name": "scd_ri_policy_period", "alias": "scd_ri_policy_period", "checksum": {"name": "sha256", "checksum": "097e6c7461e30db28cc817ae6a8c7e668405ea464feedbb0a1d3f6494dda3eb3"}, "tags": [], "refs": [], "sources": [["dbo", "ri_policy_period"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": "iginsure://models\\scd\\scd.yml", "compiled_path": "target\\compiled\\iginsure\\models\\scd\\scd_ri_policy_period.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "docs": {"show": false}}, "created_at": 1701786801.803263, "compiled_code": "-- This file is automatically generated\n\nwith\n\nri_policy_period as (\n    select * from \"IGI_PROD_DW\".\"dbo\".\"RIPolicyPeriod\"\n),\n\nordered as (\n    select\n        lRIPolicyPeriodKey,\n        lRIPolicyKey,\n        lRIFolderKey,\n        lAccountPeriodKey,\n        dw_loadts,\n        row_number() over (\n            partition by\n                lRIPolicyPeriodKey,\n                lRIPolicyKey,\n                lRIFolderKey,\n                lAccountPeriodKey\n            order by\n                dw_loadts\n        ) as dw_extract_order\n    from\n        ri_policy_period\n),\n\nfiltered as (\n    select * from ordered where dw_extract_order = 1\n),\n\nranged as (\n    select\n        lRIPolicyPeriodKey,\n        lRIPolicyKey,\n        lRIFolderKey,\n        lAccountPeriodKey,\n        dw_loadts as _valid_from,\n        lead(dw_loadts) over (partition by lRIPolicyPeriodKey order by dw_loadts) as _valid_to\n    from\n        filtered\n)\n\nselect * from ranged", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"scd_ri_policy_period\""}, "model.iginsure.scd_ri_policy_period_prop": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.iginsure.dbo.ri_policy_period_prop"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "scd", "scd_ri_policy_period_prop"], "unique_id": "model.iginsure.scd_ri_policy_period_prop", "raw_code": "-- This file is automatically generated\r\n\r\nwith\r\n\r\nri_policy_period_prop as (\r\n    select * from {{ source('dbo', 'ri_policy_period_prop') }}\r\n),\r\n\r\nordered as (\r\n    select\r\n        lRIPolicyPeriodPropKey,\r\n        lRIPolicyPeriodKey,\r\n        lRIPolicyKey,\r\n        lRIFolderKey,\r\n        lPolicyRIProfileKey,\r\n        lRISectionBrokerKey,\r\n        lRISectionBrokerSecurityKey,\r\n        lPolicyLiabilityKey,\r\n        lClaimMovementKey,\r\n        lEntityKey,\r\n        lInstanceKey,\r\n        lPolicyLineKey,\r\n        lPolicyActivityKey,\r\n        lPolicyLineLiabilityKey,\r\n        lPolicyLineSectionKey,\r\n        lInwardsCurrencyKey,\r\n        dInwardsROE,\r\n        dInwardsCessionPremiumS,\r\n        dInwardsCessionPremiumW,\r\n        dInwardsCessionPremiumT,\r\n        dInwardsBrokerCommissionS,\r\n        dInwardsBrokerCommissionW,\r\n        dInwardsBrokerCommissionT,\r\n        dInwardsCedingCommissionS,\r\n        dInwardsCedingCommissionW,\r\n        dInwardsCedingCommissionT,\r\n        dInwardsOverridingCommissionS,\r\n        dInwardsOverridingCommissionW,\r\n        dInwardsOverridingCommissionT,\r\n        dInwardsRecovery,\r\n        dInwardsOSRecovery,\r\n        dInwardsOSMovement,\r\n        lOutwardsCurrencyKey,\r\n        dOutwardsROE,\r\n        dOutwardsCessionPremiumS,\r\n        dOutwardsCessionPremiumW,\r\n        dOutwardsCessionPremiumT,\r\n        dOutwardsBrokerCommissionS,\r\n        dOutwardsBrokerCommissionW,\r\n        dOutwardsBrokerCommissionT,\r\n        dOutwardsCedingCommissionS,\r\n        dOutwardsCedingCommissionW,\r\n        dOutwardsCedingCommissionT,\r\n        dOutwardsOverridingCommissionS,\r\n        dOutwardsOverridingCommissionW,\r\n        dOutwardsOverridingCommissionT,\r\n        dOutwardsCombinationDeductionT,\r\n        dOutwardsRecovery,\r\n        dOutwardsOSRecovery,\r\n        dOutwardsOSMovement,\r\n        lTransactionTypeKey,\r\n        bInwardsRI,\r\n        dSurplusCessionPC,\r\n        lAccountsPayableReceivableKey,\r\n        lTypeOfContraKey,\r\n        lOrigRIPolicyPeriodPropKey,\r\n        nLevel,\r\n        nLayer,\r\n        nSequence,\r\n        lLayerGrossNetKey,\r\n        lCommissionGrossNetKey,\r\n        dCessionPC,\r\n        dTreatyProportionPC,\r\n        dOverridingCommissionPc,\r\n        dCedingCommissionPc,\r\n        dBrokerCommissionPc,\r\n        lRIGrossNetOfCommissionKey,\r\n        lPolicyKey,\r\n        dGrossEquivalentCessionPC,\r\n        bInError,\r\n        bPosted,\r\n        dtDue,\r\n        lPolicyLineLiabilityInstalKey,\r\n        dInwExcessOf,\r\n        dInwLimit,\r\n        dRIExcessOf,\r\n        dRILimit,\r\n        dLimitCessionProrataPC,\r\n        bInErrorOverCeded,\r\n        bInErrorNeedInwLimit,\r\n        nParentLevel,\r\n        nParentLayer,\r\n        bPostedToAPRs,\r\n        bPostedToJournals,\r\n        lPolicySectionKey,\r\n        bApplyLimitsToCessionPC,\r\n        dRIAppliedLimit,\r\n        dFinalCessionPC,\r\n        lContraRIPolicyPeriodPropKey,\r\n        dOverridePremiumCessionPC,\r\n        dInwardsdDeductionAmountT,\r\n        dInwardsNetPremiumT,\r\n        dOutwardsDeductionAmountT,\r\n        dOutwardsNetPremiumT,\r\n        bReinstatement,\r\n        lRIActivityKey,\r\n        lPolicyBrokerSummaryKey,\r\n        lPolicyActivityBrokerSummaryKey,\r\n        lPolicyLineBrokerSummaryKey,\r\n        lClaimMovementBrokerSummaryKey,\r\n        dw_loadts,\r\n        row_number() over (\r\n            partition by\r\n                lRIPolicyPeriodPropKey,\r\n                lRIPolicyPeriodKey,\r\n                lRIPolicyKey,\r\n                lRIFolderKey,\r\n                lPolicyRIProfileKey,\r\n                lRISectionBrokerKey,\r\n                lRISectionBrokerSecurityKey,\r\n                lPolicyLiabilityKey,\r\n                lClaimMovementKey,\r\n                lEntityKey,\r\n                lInstanceKey,\r\n                lPolicyLineKey,\r\n                lPolicyActivityKey,\r\n                lPolicyLineLiabilityKey,\r\n                lPolicyLineSectionKey,\r\n                lInwardsCurrencyKey,\r\n                dInwardsROE,\r\n                dInwardsCessionPremiumS,\r\n                dInwardsCessionPremiumW,\r\n                dInwardsCessionPremiumT,\r\n                dInwardsBrokerCommissionS,\r\n                dInwardsBrokerCommissionW,\r\n                dInwardsBrokerCommissionT,\r\n                dInwardsCedingCommissionS,\r\n                dInwardsCedingCommissionW,\r\n                dInwardsCedingCommissionT,\r\n                dInwardsOverridingCommissionS,\r\n                dInwardsOverridingCommissionW,\r\n                dInwardsOverridingCommissionT,\r\n                dInwardsRecovery,\r\n                dInwardsOSRecovery,\r\n                dInwardsOSMovement,\r\n                lOutwardsCurrencyKey,\r\n                dOutwardsROE,\r\n                dOutwardsCessionPremiumS,\r\n                dOutwardsCessionPremiumW,\r\n                dOutwardsCessionPremiumT,\r\n                dOutwardsBrokerCommissionS,\r\n                dOutwardsBrokerCommissionW,\r\n                dOutwardsBrokerCommissionT,\r\n                dOutwardsCedingCommissionS,\r\n                dOutwardsCedingCommissionW,\r\n                dOutwardsCedingCommissionT,\r\n                dOutwardsOverridingCommissionS,\r\n                dOutwardsOverridingCommissionW,\r\n                dOutwardsOverridingCommissionT,\r\n                dOutwardsCombinationDeductionT,\r\n                dOutwardsRecovery,\r\n                dOutwardsOSRecovery,\r\n                dOutwardsOSMovement,\r\n                lTransactionTypeKey,\r\n                bInwardsRI,\r\n                dSurplusCessionPC,\r\n                lAccountsPayableReceivableKey,\r\n                lTypeOfContraKey,\r\n                lOrigRIPolicyPeriodPropKey,\r\n                nLevel,\r\n                nLayer,\r\n                nSequence,\r\n                lLayerGrossNetKey,\r\n                lCommissionGrossNetKey,\r\n                dCessionPC,\r\n                dTreatyProportionPC,\r\n                dOverridingCommissionPc,\r\n                dCedingCommissionPc,\r\n                dBrokerCommissionPc,\r\n                lRIGrossNetOfCommissionKey,\r\n                lPolicyKey,\r\n                dGrossEquivalentCessionPC,\r\n                bInError,\r\n                bPosted,\r\n                dtDue,\r\n                lPolicyLineLiabilityInstalKey,\r\n                dInwExcessOf,\r\n                dInwLimit,\r\n                dRIExcessOf,\r\n                dRILimit,\r\n                dLimitCessionProrataPC,\r\n                bInErrorOverCeded,\r\n                bInErrorNeedInwLimit,\r\n                nParentLevel,\r\n                nParentLayer,\r\n                bPostedToAPRs,\r\n                bPostedToJournals,\r\n                lPolicySectionKey,\r\n                bApplyLimitsToCessionPC,\r\n                dRIAppliedLimit,\r\n                dFinalCessionPC,\r\n                lContraRIPolicyPeriodPropKey,\r\n                dOverridePremiumCessionPC,\r\n                dInwardsdDeductionAmountT,\r\n                dInwardsNetPremiumT,\r\n                dOutwardsDeductionAmountT,\r\n                dOutwardsNetPremiumT,\r\n                bReinstatement,\r\n                lRIActivityKey,\r\n                lPolicyBrokerSummaryKey,\r\n                lPolicyActivityBrokerSummaryKey,\r\n                lPolicyLineBrokerSummaryKey,\r\n                lClaimMovementBrokerSummaryKey\r\n            order by\r\n                dw_loadts\r\n        ) as dw_extract_order\r\n    from\r\n        ri_policy_period_prop\r\n),\r\n\r\nfiltered as (\r\n    select * from ordered where dw_extract_order = 1\r\n),\r\n\r\nranged as (\r\n    select\r\n        lRIPolicyPeriodPropKey,\r\n        lRIPolicyPeriodKey,\r\n        lRIPolicyKey,\r\n        lRIFolderKey,\r\n        lPolicyRIProfileKey,\r\n        lRISectionBrokerKey,\r\n        lRISectionBrokerSecurityKey,\r\n        lPolicyLiabilityKey,\r\n        lClaimMovementKey,\r\n        lEntityKey,\r\n        lInstanceKey,\r\n        lPolicyLineKey,\r\n        lPolicyActivityKey,\r\n        lPolicyLineLiabilityKey,\r\n        lPolicyLineSectionKey,\r\n        lInwardsCurrencyKey,\r\n        dInwardsROE,\r\n        dInwardsCessionPremiumS,\r\n        dInwardsCessionPremiumW,\r\n        dInwardsCessionPremiumT,\r\n        dInwardsBrokerCommissionS,\r\n        dInwardsBrokerCommissionW,\r\n        dInwardsBrokerCommissionT,\r\n        dInwardsCedingCommissionS,\r\n        dInwardsCedingCommissionW,\r\n        dInwardsCedingCommissionT,\r\n        dInwardsOverridingCommissionS,\r\n        dInwardsOverridingCommissionW,\r\n        dInwardsOverridingCommissionT,\r\n        dInwardsRecovery,\r\n        dInwardsOSRecovery,\r\n        dInwardsOSMovement,\r\n        lOutwardsCurrencyKey,\r\n        dOutwardsROE,\r\n        dOutwardsCessionPremiumS,\r\n        dOutwardsCessionPremiumW,\r\n        dOutwardsCessionPremiumT,\r\n        dOutwardsBrokerCommissionS,\r\n        dOutwardsBrokerCommissionW,\r\n        dOutwardsBrokerCommissionT,\r\n        dOutwardsCedingCommissionS,\r\n        dOutwardsCedingCommissionW,\r\n        dOutwardsCedingCommissionT,\r\n        dOutwardsOverridingCommissionS,\r\n        dOutwardsOverridingCommissionW,\r\n        dOutwardsOverridingCommissionT,\r\n        dOutwardsCombinationDeductionT,\r\n        dOutwardsRecovery,\r\n        dOutwardsOSRecovery,\r\n        dOutwardsOSMovement,\r\n        lTransactionTypeKey,\r\n        bInwardsRI,\r\n        dSurplusCessionPC,\r\n        lAccountsPayableReceivableKey,\r\n        lTypeOfContraKey,\r\n        lOrigRIPolicyPeriodPropKey,\r\n        nLevel,\r\n        nLayer,\r\n        nSequence,\r\n        lLayerGrossNetKey,\r\n        lCommissionGrossNetKey,\r\n        dCessionPC,\r\n        dTreatyProportionPC,\r\n        dOverridingCommissionPc,\r\n        dCedingCommissionPc,\r\n        dBrokerCommissionPc,\r\n        lRIGrossNetOfCommissionKey,\r\n        lPolicyKey,\r\n        dGrossEquivalentCessionPC,\r\n        bInError,\r\n        bPosted,\r\n        dtDue,\r\n        lPolicyLineLiabilityInstalKey,\r\n        dInwExcessOf,\r\n        dInwLimit,\r\n        dRIExcessOf,\r\n        dRILimit,\r\n        dLimitCessionProrataPC,\r\n        bInErrorOverCeded,\r\n        bInErrorNeedInwLimit,\r\n        nParentLevel,\r\n        nParentLayer,\r\n        bPostedToAPRs,\r\n        bPostedToJournals,\r\n        lPolicySectionKey,\r\n        bApplyLimitsToCessionPC,\r\n        dRIAppliedLimit,\r\n        dFinalCessionPC,\r\n        lContraRIPolicyPeriodPropKey,\r\n        dOverridePremiumCessionPC,\r\n        dInwardsdDeductionAmountT,\r\n        dInwardsNetPremiumT,\r\n        dOutwardsDeductionAmountT,\r\n        dOutwardsNetPremiumT,\r\n        bReinstatement,\r\n        lRIActivityKey,\r\n        lPolicyBrokerSummaryKey,\r\n        lPolicyActivityBrokerSummaryKey,\r\n        lPolicyLineBrokerSummaryKey,\r\n        lClaimMovementBrokerSummaryKey,\r\n        dw_loadts as _valid_from,\r\n        lead(dw_loadts) over (partition by lRIPolicyPeriodPropKey order by dw_loadts) as _valid_to\r\n    from\r\n        filtered\r\n)\r\n\r\nselect * from ranged", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "scd\\scd_ri_policy_period_prop.sql", "original_file_path": "models\\scd\\scd_ri_policy_period_prop.sql", "name": "scd_ri_policy_period_prop", "alias": "scd_ri_policy_period_prop", "checksum": {"name": "sha256", "checksum": "3849c7e9c0774797a51399344336c6d3114b1d616454cc6df845cec0f9a24ad3"}, "tags": [], "refs": [], "sources": [["dbo", "ri_policy_period_prop"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": "iginsure://models\\scd\\scd.yml", "compiled_path": "target\\compiled\\iginsure\\models\\scd\\scd_ri_policy_period_prop.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "docs": {"show": false}}, "created_at": 1701786801.8001094, "compiled_code": "-- This file is automatically generated\n\nwith\n\nri_policy_period_prop as (\n    select * from \"IGI_PROD_DW\".\"dbo\".\"RIPolicyPeriodProp\"\n),\n\nordered as (\n    select\n        lRIPolicyPeriodPropKey,\n        lRIPolicyPeriodKey,\n        lRIPolicyKey,\n        lRIFolderKey,\n        lPolicyRIProfileKey,\n        lRISectionBrokerKey,\n        lRISectionBrokerSecurityKey,\n        lPolicyLiabilityKey,\n        lClaimMovementKey,\n        lEntityKey,\n        lInstanceKey,\n        lPolicyLineKey,\n        lPolicyActivityKey,\n        lPolicyLineLiabilityKey,\n        lPolicyLineSectionKey,\n        lInwardsCurrencyKey,\n        dInwardsROE,\n        dInwardsCessionPremiumS,\n        dInwardsCessionPremiumW,\n        dInwardsCessionPremiumT,\n        dInwardsBrokerCommissionS,\n        dInwardsBrokerCommissionW,\n        dInwardsBrokerCommissionT,\n        dInwardsCedingCommissionS,\n        dInwardsCedingCommissionW,\n        dInwardsCedingCommissionT,\n        dInwardsOverridingCommissionS,\n        dInwardsOverridingCommissionW,\n        dInwardsOverridingCommissionT,\n        dInwardsRecovery,\n        dInwardsOSRecovery,\n        dInwardsOSMovement,\n        lOutwardsCurrencyKey,\n        dOutwardsROE,\n        dOutwardsCessionPremiumS,\n        dOutwardsCessionPremiumW,\n        dOutwardsCessionPremiumT,\n        dOutwardsBrokerCommissionS,\n        dOutwardsBrokerCommissionW,\n        dOutwardsBrokerCommissionT,\n        dOutwardsCedingCommissionS,\n        dOutwardsCedingCommissionW,\n        dOutwardsCedingCommissionT,\n        dOutwardsOverridingCommissionS,\n        dOutwardsOverridingCommissionW,\n        dOutwardsOverridingCommissionT,\n        dOutwardsCombinationDeductionT,\n        dOutwardsRecovery,\n        dOutwardsOSRecovery,\n        dOutwardsOSMovement,\n        lTransactionTypeKey,\n        bInwardsRI,\n        dSurplusCessionPC,\n        lAccountsPayableReceivableKey,\n        lTypeOfContraKey,\n        lOrigRIPolicyPeriodPropKey,\n        nLevel,\n        nLayer,\n        nSequence,\n        lLayerGrossNetKey,\n        lCommissionGrossNetKey,\n        dCessionPC,\n        dTreatyProportionPC,\n        dOverridingCommissionPc,\n        dCedingCommissionPc,\n        dBrokerCommissionPc,\n        lRIGrossNetOfCommissionKey,\n        lPolicyKey,\n        dGrossEquivalentCessionPC,\n        bInError,\n        bPosted,\n        dtDue,\n        lPolicyLineLiabilityInstalKey,\n        dInwExcessOf,\n        dInwLimit,\n        dRIExcessOf,\n        dRILimit,\n        dLimitCessionProrataPC,\n        bInErrorOverCeded,\n        bInErrorNeedInwLimit,\n        nParentLevel,\n        nParentLayer,\n        bPostedToAPRs,\n        bPostedToJournals,\n        lPolicySectionKey,\n        bApplyLimitsToCessionPC,\n        dRIAppliedLimit,\n        dFinalCessionPC,\n        lContraRIPolicyPeriodPropKey,\n        dOverridePremiumCessionPC,\n        dInwardsdDeductionAmountT,\n        dInwardsNetPremiumT,\n        dOutwardsDeductionAmountT,\n        dOutwardsNetPremiumT,\n        bReinstatement,\n        lRIActivityKey,\n        lPolicyBrokerSummaryKey,\n        lPolicyActivityBrokerSummaryKey,\n        lPolicyLineBrokerSummaryKey,\n        lClaimMovementBrokerSummaryKey,\n        dw_loadts,\n        row_number() over (\n            partition by\n                lRIPolicyPeriodPropKey,\n                lRIPolicyPeriodKey,\n                lRIPolicyKey,\n                lRIFolderKey,\n                lPolicyRIProfileKey,\n                lRISectionBrokerKey,\n                lRISectionBrokerSecurityKey,\n                lPolicyLiabilityKey,\n                lClaimMovementKey,\n                lEntityKey,\n                lInstanceKey,\n                lPolicyLineKey,\n                lPolicyActivityKey,\n                lPolicyLineLiabilityKey,\n                lPolicyLineSectionKey,\n                lInwardsCurrencyKey,\n                dInwardsROE,\n                dInwardsCessionPremiumS,\n                dInwardsCessionPremiumW,\n                dInwardsCessionPremiumT,\n                dInwardsBrokerCommissionS,\n                dInwardsBrokerCommissionW,\n                dInwardsBrokerCommissionT,\n                dInwardsCedingCommissionS,\n                dInwardsCedingCommissionW,\n                dInwardsCedingCommissionT,\n                dInwardsOverridingCommissionS,\n                dInwardsOverridingCommissionW,\n                dInwardsOverridingCommissionT,\n                dInwardsRecovery,\n                dInwardsOSRecovery,\n                dInwardsOSMovement,\n                lOutwardsCurrencyKey,\n                dOutwardsROE,\n                dOutwardsCessionPremiumS,\n                dOutwardsCessionPremiumW,\n                dOutwardsCessionPremiumT,\n                dOutwardsBrokerCommissionS,\n                dOutwardsBrokerCommissionW,\n                dOutwardsBrokerCommissionT,\n                dOutwardsCedingCommissionS,\n                dOutwardsCedingCommissionW,\n                dOutwardsCedingCommissionT,\n                dOutwardsOverridingCommissionS,\n                dOutwardsOverridingCommissionW,\n                dOutwardsOverridingCommissionT,\n                dOutwardsCombinationDeductionT,\n                dOutwardsRecovery,\n                dOutwardsOSRecovery,\n                dOutwardsOSMovement,\n                lTransactionTypeKey,\n                bInwardsRI,\n                dSurplusCessionPC,\n                lAccountsPayableReceivableKey,\n                lTypeOfContraKey,\n                lOrigRIPolicyPeriodPropKey,\n                nLevel,\n                nLayer,\n                nSequence,\n                lLayerGrossNetKey,\n                lCommissionGrossNetKey,\n                dCessionPC,\n                dTreatyProportionPC,\n                dOverridingCommissionPc,\n                dCedingCommissionPc,\n                dBrokerCommissionPc,\n                lRIGrossNetOfCommissionKey,\n                lPolicyKey,\n                dGrossEquivalentCessionPC,\n                bInError,\n                bPosted,\n                dtDue,\n                lPolicyLineLiabilityInstalKey,\n                dInwExcessOf,\n                dInwLimit,\n                dRIExcessOf,\n                dRILimit,\n                dLimitCessionProrataPC,\n                bInErrorOverCeded,\n                bInErrorNeedInwLimit,\n                nParentLevel,\n                nParentLayer,\n                bPostedToAPRs,\n                bPostedToJournals,\n                lPolicySectionKey,\n                bApplyLimitsToCessionPC,\n                dRIAppliedLimit,\n                dFinalCessionPC,\n                lContraRIPolicyPeriodPropKey,\n                dOverridePremiumCessionPC,\n                dInwardsdDeductionAmountT,\n                dInwardsNetPremiumT,\n                dOutwardsDeductionAmountT,\n                dOutwardsNetPremiumT,\n                bReinstatement,\n                lRIActivityKey,\n                lPolicyBrokerSummaryKey,\n                lPolicyActivityBrokerSummaryKey,\n                lPolicyLineBrokerSummaryKey,\n                lClaimMovementBrokerSummaryKey\n            order by\n                dw_loadts\n        ) as dw_extract_order\n    from\n        ri_policy_period_prop\n),\n\nfiltered as (\n    select * from ordered where dw_extract_order = 1\n),\n\nranged as (\n    select\n        lRIPolicyPeriodPropKey,\n        lRIPolicyPeriodKey,\n        lRIPolicyKey,\n        lRIFolderKey,\n        lPolicyRIProfileKey,\n        lRISectionBrokerKey,\n        lRISectionBrokerSecurityKey,\n        lPolicyLiabilityKey,\n        lClaimMovementKey,\n        lEntityKey,\n        lInstanceKey,\n        lPolicyLineKey,\n        lPolicyActivityKey,\n        lPolicyLineLiabilityKey,\n        lPolicyLineSectionKey,\n        lInwardsCurrencyKey,\n        dInwardsROE,\n        dInwardsCessionPremiumS,\n        dInwardsCessionPremiumW,\n        dInwardsCessionPremiumT,\n        dInwardsBrokerCommissionS,\n        dInwardsBrokerCommissionW,\n        dInwardsBrokerCommissionT,\n        dInwardsCedingCommissionS,\n        dInwardsCedingCommissionW,\n        dInwardsCedingCommissionT,\n        dInwardsOverridingCommissionS,\n        dInwardsOverridingCommissionW,\n        dInwardsOverridingCommissionT,\n        dInwardsRecovery,\n        dInwardsOSRecovery,\n        dInwardsOSMovement,\n        lOutwardsCurrencyKey,\n        dOutwardsROE,\n        dOutwardsCessionPremiumS,\n        dOutwardsCessionPremiumW,\n        dOutwardsCessionPremiumT,\n        dOutwardsBrokerCommissionS,\n        dOutwardsBrokerCommissionW,\n        dOutwardsBrokerCommissionT,\n        dOutwardsCedingCommissionS,\n        dOutwardsCedingCommissionW,\n        dOutwardsCedingCommissionT,\n        dOutwardsOverridingCommissionS,\n        dOutwardsOverridingCommissionW,\n        dOutwardsOverridingCommissionT,\n        dOutwardsCombinationDeductionT,\n        dOutwardsRecovery,\n        dOutwardsOSRecovery,\n        dOutwardsOSMovement,\n        lTransactionTypeKey,\n        bInwardsRI,\n        dSurplusCessionPC,\n        lAccountsPayableReceivableKey,\n        lTypeOfContraKey,\n        lOrigRIPolicyPeriodPropKey,\n        nLevel,\n        nLayer,\n        nSequence,\n        lLayerGrossNetKey,\n        lCommissionGrossNetKey,\n        dCessionPC,\n        dTreatyProportionPC,\n        dOverridingCommissionPc,\n        dCedingCommissionPc,\n        dBrokerCommissionPc,\n        lRIGrossNetOfCommissionKey,\n        lPolicyKey,\n        dGrossEquivalentCessionPC,\n        bInError,\n        bPosted,\n        dtDue,\n        lPolicyLineLiabilityInstalKey,\n        dInwExcessOf,\n        dInwLimit,\n        dRIExcessOf,\n        dRILimit,\n        dLimitCessionProrataPC,\n        bInErrorOverCeded,\n        bInErrorNeedInwLimit,\n        nParentLevel,\n        nParentLayer,\n        bPostedToAPRs,\n        bPostedToJournals,\n        lPolicySectionKey,\n        bApplyLimitsToCessionPC,\n        dRIAppliedLimit,\n        dFinalCessionPC,\n        lContraRIPolicyPeriodPropKey,\n        dOverridePremiumCessionPC,\n        dInwardsdDeductionAmountT,\n        dInwardsNetPremiumT,\n        dOutwardsDeductionAmountT,\n        dOutwardsNetPremiumT,\n        bReinstatement,\n        lRIActivityKey,\n        lPolicyBrokerSummaryKey,\n        lPolicyActivityBrokerSummaryKey,\n        lPolicyLineBrokerSummaryKey,\n        lClaimMovementBrokerSummaryKey,\n        dw_loadts as _valid_from,\n        lead(dw_loadts) over (partition by lRIPolicyPeriodPropKey order by dw_loadts) as _valid_to\n    from\n        filtered\n)\n\nselect * from ranged", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"scd_ri_policy_period_prop\""}, "model.iginsure.scd_ri_section": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.iginsure.dbo.ri_section"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "scd", "scd_ri_section"], "unique_id": "model.iginsure.scd_ri_section", "raw_code": "-- This file is automatically generated\r\n\r\nwith\r\n\r\nri_section as (\r\n    select * from {{ source('dbo', 'ri_section') }}\r\n),\r\n\r\nordered as (\r\n    select\r\n        lRISectionKey,\r\n        lRIActivityKey,\r\n        lRIPolicyKey,\r\n        lRIFolderKey,\r\n        sReference,\r\n        nVersion,\r\n        dtPeriodFrom,\r\n        dtPeriodTo,\r\n        bAutoProfiling,\r\n        lWrittenAccountPeriodKey,\r\n        lTypeOfClassKey,\r\n        lTypeOfLimitBasisKey,\r\n        lCurrencyKey,\r\n        dROE,\r\n        dLimit,\r\n        dExcessOf,\r\n        bFixedCession,\r\n        dCessionPc,\r\n        dMaxCessionAmount,\r\n        dMaxAggregate,\r\n        bClaimCooperation,\r\n        dClaimCooperationTrigger,\r\n        dCashLossTrigger,\r\n        dClaimAdviceTrigger,\r\n        dClaimNotificationTrigger,\r\n        bClaimsFeesRecoverable,\r\n        dTotalBrokerOrderPC,\r\n        lAllRiskTypeOfDeductibleKey,\r\n        lARDTypeOfApplicablePeriodKey,\r\n        dAllRiskDeductible,\r\n        dAllRiskMinDeductible,\r\n        dAllRiskMaxDeductible,\r\n        lPremiumRetainedPC,\r\n        lStatementFrequencyKey,\r\n        lStatementInterval,\r\n        dPremRetainedInterestPC,\r\n        lRISectionChainKey,\r\n        lTypeOfInstalmentKey,\r\n        nInterval,\r\n        bOverideToSingle,\r\n        lDueDateModifierKey,\r\n        nFixedInstalmentNumber,\r\n        bCustomInstalments,\r\n        nTermsOfTradeDays,\r\n        dtFirstInstalmentDueDate,\r\n        bDisplayMD,\r\n        bCashLoss,\r\n        bUnlimitedReinstatements,\r\n        nCountOfDisplayReinstatements,\r\n        nHasPremium,\r\n        bApplyLimitsToCessionPC,\r\n        dTotalInstalmentsPC,\r\n        bAllCoveragesIncluded,\r\n        dLimit100,\r\n        lTypeOfRIBasisKey,\r\n        dEventLimit,\r\n        dExcess,\r\n        dDeductible,\r\n        bFronting,\r\n        lTypeofRIClassKey,\r\n        lTypeofRILayerClassKey,\r\n        lTypeofBasisIncomeKey,\r\n        lTypeofPaymentDueKey,\r\n        lOrigCcyOfRiensAggLimitKey,\r\n        nNoOfRiens,\r\n        dRiensAggLimit,\r\n        lBaseOfRiensKey,\r\n        lFrontingKey,\r\n        lPremiumRetainedOffShorePC,\r\n        lPremiumRetainedOnShorePC,\r\n        lPremiumRetainedMarinePC,\r\n        lMarketLeaderKey,\r\n        ltypeofPremiumPaymentWarrantyKey,\r\n        dTotalTreatyPropPc,\r\n        bFacFollowInwardInstalment,\r\n        dw_loadts,\r\n        row_number() over (\r\n            partition by\r\n                lRISectionKey,\r\n                lRIActivityKey,\r\n                lRIPolicyKey,\r\n                lRIFolderKey,\r\n                sReference,\r\n                nVersion,\r\n                dtPeriodFrom,\r\n                dtPeriodTo,\r\n                bAutoProfiling,\r\n                lWrittenAccountPeriodKey,\r\n                lTypeOfClassKey,\r\n                lTypeOfLimitBasisKey,\r\n                lCurrencyKey,\r\n                dROE,\r\n                dLimit,\r\n                dExcessOf,\r\n                bFixedCession,\r\n                dCessionPc,\r\n                dMaxCessionAmount,\r\n                dMaxAggregate,\r\n                bClaimCooperation,\r\n                dClaimCooperationTrigger,\r\n                dCashLossTrigger,\r\n                dClaimAdviceTrigger,\r\n                dClaimNotificationTrigger,\r\n                bClaimsFeesRecoverable,\r\n                dTotalBrokerOrderPC,\r\n                lAllRiskTypeOfDeductibleKey,\r\n                lARDTypeOfApplicablePeriodKey,\r\n                dAllRiskDeductible,\r\n                dAllRiskMinDeductible,\r\n                dAllRiskMaxDeductible,\r\n                lPremiumRetainedPC,\r\n                lStatementFrequencyKey,\r\n                lStatementInterval,\r\n                dPremRetainedInterestPC,\r\n                lRISectionChainKey,\r\n                lTypeOfInstalmentKey,\r\n                nInterval,\r\n                bOverideToSingle,\r\n                lDueDateModifierKey,\r\n                nFixedInstalmentNumber,\r\n                bCustomInstalments,\r\n                nTermsOfTradeDays,\r\n                dtFirstInstalmentDueDate,\r\n                bDisplayMD,\r\n                bCashLoss,\r\n                bUnlimitedReinstatements,\r\n                nCountOfDisplayReinstatements,\r\n                nHasPremium,\r\n                bApplyLimitsToCessionPC,\r\n                dTotalInstalmentsPC,\r\n                bAllCoveragesIncluded,\r\n                dLimit100,\r\n                lTypeOfRIBasisKey,\r\n                dEventLimit,\r\n                dExcess,\r\n                dDeductible,\r\n                bFronting,\r\n                lTypeofRIClassKey,\r\n                lTypeofRILayerClassKey,\r\n                lTypeofBasisIncomeKey,\r\n                lTypeofPaymentDueKey,\r\n                lOrigCcyOfRiensAggLimitKey,\r\n                nNoOfRiens,\r\n                dRiensAggLimit,\r\n                lBaseOfRiensKey,\r\n                lFrontingKey,\r\n                lPremiumRetainedOffShorePC,\r\n                lPremiumRetainedOnShorePC,\r\n                lPremiumRetainedMarinePC,\r\n                lMarketLeaderKey,\r\n                ltypeofPremiumPaymentWarrantyKey,\r\n                dTotalTreatyPropPc,\r\n                bFacFollowInwardInstalment\r\n            order by\r\n                dw_loadts\r\n        ) as dw_extract_order\r\n    from\r\n        ri_section\r\n),\r\n\r\nfiltered as (\r\n    select * from ordered where dw_extract_order = 1\r\n),\r\n\r\nranged as (\r\n    select\r\n        lRISectionKey,\r\n        lRIActivityKey,\r\n        lRIPolicyKey,\r\n        lRIFolderKey,\r\n        sReference,\r\n        nVersion,\r\n        dtPeriodFrom,\r\n        dtPeriodTo,\r\n        bAutoProfiling,\r\n        lWrittenAccountPeriodKey,\r\n        lTypeOfClassKey,\r\n        lTypeOfLimitBasisKey,\r\n        lCurrencyKey,\r\n        dROE,\r\n        dLimit,\r\n        dExcessOf,\r\n        bFixedCession,\r\n        dCessionPc,\r\n        dMaxCessionAmount,\r\n        dMaxAggregate,\r\n        bClaimCooperation,\r\n        dClaimCooperationTrigger,\r\n        dCashLossTrigger,\r\n        dClaimAdviceTrigger,\r\n        dClaimNotificationTrigger,\r\n        bClaimsFeesRecoverable,\r\n        dTotalBrokerOrderPC,\r\n        lAllRiskTypeOfDeductibleKey,\r\n        lARDTypeOfApplicablePeriodKey,\r\n        dAllRiskDeductible,\r\n        dAllRiskMinDeductible,\r\n        dAllRiskMaxDeductible,\r\n        lPremiumRetainedPC,\r\n        lStatementFrequencyKey,\r\n        lStatementInterval,\r\n        dPremRetainedInterestPC,\r\n        lRISectionChainKey,\r\n        lTypeOfInstalmentKey,\r\n        nInterval,\r\n        bOverideToSingle,\r\n        lDueDateModifierKey,\r\n        nFixedInstalmentNumber,\r\n        bCustomInstalments,\r\n        nTermsOfTradeDays,\r\n        dtFirstInstalmentDueDate,\r\n        bDisplayMD,\r\n        bCashLoss,\r\n        bUnlimitedReinstatements,\r\n        nCountOfDisplayReinstatements,\r\n        nHasPremium,\r\n        bApplyLimitsToCessionPC,\r\n        dTotalInstalmentsPC,\r\n        bAllCoveragesIncluded,\r\n        dLimit100,\r\n        lTypeOfRIBasisKey,\r\n        dEventLimit,\r\n        dExcess,\r\n        dDeductible,\r\n        bFronting,\r\n        lTypeofRIClassKey,\r\n        lTypeofRILayerClassKey,\r\n        lTypeofBasisIncomeKey,\r\n        lTypeofPaymentDueKey,\r\n        lOrigCcyOfRiensAggLimitKey,\r\n        nNoOfRiens,\r\n        dRiensAggLimit,\r\n        lBaseOfRiensKey,\r\n        lFrontingKey,\r\n        lPremiumRetainedOffShorePC,\r\n        lPremiumRetainedOnShorePC,\r\n        lPremiumRetainedMarinePC,\r\n        lMarketLeaderKey,\r\n        ltypeofPremiumPaymentWarrantyKey,\r\n        dTotalTreatyPropPc,\r\n        bFacFollowInwardInstalment,\r\n        dw_loadts as _valid_from,\r\n        lead(dw_loadts) over (partition by lRISectionKey order by dw_loadts) as _valid_to\r\n    from\r\n        filtered\r\n)\r\n\r\nselect * from ranged", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "scd\\scd_ri_section.sql", "original_file_path": "models\\scd\\scd_ri_section.sql", "name": "scd_ri_section", "alias": "scd_ri_section", "checksum": {"name": "sha256", "checksum": "dadcaaf0c2c43d0b876264b483fa02806eca61645cf1bbc212686709f35f3c9e"}, "tags": [], "refs": [], "sources": [["dbo", "ri_section"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": "iginsure://models\\scd\\scd.yml", "compiled_path": "target\\compiled\\iginsure\\models\\scd\\scd_ri_section.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "docs": {"show": false}}, "created_at": 1701786801.8082635, "compiled_code": "-- This file is automatically generated\n\nwith\n\nri_section as (\n    select * from \"IGI_PROD_DW\".\"dbo\".\"RISection\"\n),\n\nordered as (\n    select\n        lRISectionKey,\n        lRIActivityKey,\n        lRIPolicyKey,\n        lRIFolderKey,\n        sReference,\n        nVersion,\n        dtPeriodFrom,\n        dtPeriodTo,\n        bAutoProfiling,\n        lWrittenAccountPeriodKey,\n        lTypeOfClassKey,\n        lTypeOfLimitBasisKey,\n        lCurrencyKey,\n        dROE,\n        dLimit,\n        dExcessOf,\n        bFixedCession,\n        dCessionPc,\n        dMaxCessionAmount,\n        dMaxAggregate,\n        bClaimCooperation,\n        dClaimCooperationTrigger,\n        dCashLossTrigger,\n        dClaimAdviceTrigger,\n        dClaimNotificationTrigger,\n        bClaimsFeesRecoverable,\n        dTotalBrokerOrderPC,\n        lAllRiskTypeOfDeductibleKey,\n        lARDTypeOfApplicablePeriodKey,\n        dAllRiskDeductible,\n        dAllRiskMinDeductible,\n        dAllRiskMaxDeductible,\n        lPremiumRetainedPC,\n        lStatementFrequencyKey,\n        lStatementInterval,\n        dPremRetainedInterestPC,\n        lRISectionChainKey,\n        lTypeOfInstalmentKey,\n        nInterval,\n        bOverideToSingle,\n        lDueDateModifierKey,\n        nFixedInstalmentNumber,\n        bCustomInstalments,\n        nTermsOfTradeDays,\n        dtFirstInstalmentDueDate,\n        bDisplayMD,\n        bCashLoss,\n        bUnlimitedReinstatements,\n        nCountOfDisplayReinstatements,\n        nHasPremium,\n        bApplyLimitsToCessionPC,\n        dTotalInstalmentsPC,\n        bAllCoveragesIncluded,\n        dLimit100,\n        lTypeOfRIBasisKey,\n        dEventLimit,\n        dExcess,\n        dDeductible,\n        bFronting,\n        lTypeofRIClassKey,\n        lTypeofRILayerClassKey,\n        lTypeofBasisIncomeKey,\n        lTypeofPaymentDueKey,\n        lOrigCcyOfRiensAggLimitKey,\n        nNoOfRiens,\n        dRiensAggLimit,\n        lBaseOfRiensKey,\n        lFrontingKey,\n        lPremiumRetainedOffShorePC,\n        lPremiumRetainedOnShorePC,\n        lPremiumRetainedMarinePC,\n        lMarketLeaderKey,\n        ltypeofPremiumPaymentWarrantyKey,\n        dTotalTreatyPropPc,\n        bFacFollowInwardInstalment,\n        dw_loadts,\n        row_number() over (\n            partition by\n                lRISectionKey,\n                lRIActivityKey,\n                lRIPolicyKey,\n                lRIFolderKey,\n                sReference,\n                nVersion,\n                dtPeriodFrom,\n                dtPeriodTo,\n                bAutoProfiling,\n                lWrittenAccountPeriodKey,\n                lTypeOfClassKey,\n                lTypeOfLimitBasisKey,\n                lCurrencyKey,\n                dROE,\n                dLimit,\n                dExcessOf,\n                bFixedCession,\n                dCessionPc,\n                dMaxCessionAmount,\n                dMaxAggregate,\n                bClaimCooperation,\n                dClaimCooperationTrigger,\n                dCashLossTrigger,\n                dClaimAdviceTrigger,\n                dClaimNotificationTrigger,\n                bClaimsFeesRecoverable,\n                dTotalBrokerOrderPC,\n                lAllRiskTypeOfDeductibleKey,\n                lARDTypeOfApplicablePeriodKey,\n                dAllRiskDeductible,\n                dAllRiskMinDeductible,\n                dAllRiskMaxDeductible,\n                lPremiumRetainedPC,\n                lStatementFrequencyKey,\n                lStatementInterval,\n                dPremRetainedInterestPC,\n                lRISectionChainKey,\n                lTypeOfInstalmentKey,\n                nInterval,\n                bOverideToSingle,\n                lDueDateModifierKey,\n                nFixedInstalmentNumber,\n                bCustomInstalments,\n                nTermsOfTradeDays,\n                dtFirstInstalmentDueDate,\n                bDisplayMD,\n                bCashLoss,\n                bUnlimitedReinstatements,\n                nCountOfDisplayReinstatements,\n                nHasPremium,\n                bApplyLimitsToCessionPC,\n                dTotalInstalmentsPC,\n                bAllCoveragesIncluded,\n                dLimit100,\n                lTypeOfRIBasisKey,\n                dEventLimit,\n                dExcess,\n                dDeductible,\n                bFronting,\n                lTypeofRIClassKey,\n                lTypeofRILayerClassKey,\n                lTypeofBasisIncomeKey,\n                lTypeofPaymentDueKey,\n                lOrigCcyOfRiensAggLimitKey,\n                nNoOfRiens,\n                dRiensAggLimit,\n                lBaseOfRiensKey,\n                lFrontingKey,\n                lPremiumRetainedOffShorePC,\n                lPremiumRetainedOnShorePC,\n                lPremiumRetainedMarinePC,\n                lMarketLeaderKey,\n                ltypeofPremiumPaymentWarrantyKey,\n                dTotalTreatyPropPc,\n                bFacFollowInwardInstalment\n            order by\n                dw_loadts\n        ) as dw_extract_order\n    from\n        ri_section\n),\n\nfiltered as (\n    select * from ordered where dw_extract_order = 1\n),\n\nranged as (\n    select\n        lRISectionKey,\n        lRIActivityKey,\n        lRIPolicyKey,\n        lRIFolderKey,\n        sReference,\n        nVersion,\n        dtPeriodFrom,\n        dtPeriodTo,\n        bAutoProfiling,\n        lWrittenAccountPeriodKey,\n        lTypeOfClassKey,\n        lTypeOfLimitBasisKey,\n        lCurrencyKey,\n        dROE,\n        dLimit,\n        dExcessOf,\n        bFixedCession,\n        dCessionPc,\n        dMaxCessionAmount,\n        dMaxAggregate,\n        bClaimCooperation,\n        dClaimCooperationTrigger,\n        dCashLossTrigger,\n        dClaimAdviceTrigger,\n        dClaimNotificationTrigger,\n        bClaimsFeesRecoverable,\n        dTotalBrokerOrderPC,\n        lAllRiskTypeOfDeductibleKey,\n        lARDTypeOfApplicablePeriodKey,\n        dAllRiskDeductible,\n        dAllRiskMinDeductible,\n        dAllRiskMaxDeductible,\n        lPremiumRetainedPC,\n        lStatementFrequencyKey,\n        lStatementInterval,\n        dPremRetainedInterestPC,\n        lRISectionChainKey,\n        lTypeOfInstalmentKey,\n        nInterval,\n        bOverideToSingle,\n        lDueDateModifierKey,\n        nFixedInstalmentNumber,\n        bCustomInstalments,\n        nTermsOfTradeDays,\n        dtFirstInstalmentDueDate,\n        bDisplayMD,\n        bCashLoss,\n        bUnlimitedReinstatements,\n        nCountOfDisplayReinstatements,\n        nHasPremium,\n        bApplyLimitsToCessionPC,\n        dTotalInstalmentsPC,\n        bAllCoveragesIncluded,\n        dLimit100,\n        lTypeOfRIBasisKey,\n        dEventLimit,\n        dExcess,\n        dDeductible,\n        bFronting,\n        lTypeofRIClassKey,\n        lTypeofRILayerClassKey,\n        lTypeofBasisIncomeKey,\n        lTypeofPaymentDueKey,\n        lOrigCcyOfRiensAggLimitKey,\n        nNoOfRiens,\n        dRiensAggLimit,\n        lBaseOfRiensKey,\n        lFrontingKey,\n        lPremiumRetainedOffShorePC,\n        lPremiumRetainedOnShorePC,\n        lPremiumRetainedMarinePC,\n        lMarketLeaderKey,\n        ltypeofPremiumPaymentWarrantyKey,\n        dTotalTreatyPropPc,\n        bFacFollowInwardInstalment,\n        dw_loadts as _valid_from,\n        lead(dw_loadts) over (partition by lRISectionKey order by dw_loadts) as _valid_to\n    from\n        filtered\n)\n\nselect * from ranged", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"scd_ri_section\""}, "model.iginsure.scd_ri_section_broker": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.iginsure.dbo.ri_section_broker"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "scd", "scd_ri_section_broker"], "unique_id": "model.iginsure.scd_ri_section_broker", "raw_code": "-- This file is automatically generated\r\n\r\nwith\r\n\r\nri_section_broker as (\r\n    select * from {{ source('dbo', 'ri_section_broker') }}\r\n),\r\n\r\nordered as (\r\n    select\r\n        lRISectionBrokerKey,\r\n        lRISectionKey,\r\n        lRIActivityKey,\r\n        lRIPolicyKey,\r\n        lRIFolderKey,\r\n        lBrokerContactKey,\r\n        sReference,\r\n        sBrokerReference,\r\n        lBrokerLiaisonKey,\r\n        dBrokerOrderPc,\r\n        dBrokerOrderPlaced,\r\n        dBrokerCommissionPc,\r\n        dCedingCommissionPc,\r\n        dOverridingCommissionPc,\r\n        nTermsOfTradeDays,\r\n        sBrokerName,\r\n        dBrokerRemunerationPc,\r\n        bSecurityLevelStatement,\r\n        lRISectionCoBrokerKey,\r\n        lBrokerClaimLiaisonKey,\r\n        intBrokerOrderXOLInfo,\r\n        dw_loadts,\r\n        row_number() over (\r\n            partition by\r\n                lRISectionBrokerKey,\r\n                lRISectionKey,\r\n                lRIActivityKey,\r\n                lRIPolicyKey,\r\n                lRIFolderKey,\r\n                lBrokerContactKey,\r\n                sReference,\r\n                sBrokerReference,\r\n                lBrokerLiaisonKey,\r\n                dBrokerOrderPc,\r\n                dBrokerOrderPlaced,\r\n                dBrokerCommissionPc,\r\n                dCedingCommissionPc,\r\n                dOverridingCommissionPc,\r\n                nTermsOfTradeDays,\r\n                sBrokerName,\r\n                dBrokerRemunerationPc,\r\n                bSecurityLevelStatement,\r\n                lRISectionCoBrokerKey,\r\n                lBrokerClaimLiaisonKey,\r\n                intBrokerOrderXOLInfo\r\n            order by\r\n                dw_loadts\r\n        ) as dw_extract_order\r\n    from\r\n        ri_section_broker\r\n),\r\n\r\nfiltered as (\r\n    select * from ordered where dw_extract_order = 1\r\n),\r\n\r\nranged as (\r\n    select\r\n        lRISectionBrokerKey,\r\n        lRISectionKey,\r\n        lRIActivityKey,\r\n        lRIPolicyKey,\r\n        lRIFolderKey,\r\n        lBrokerContactKey,\r\n        sReference,\r\n        sBrokerReference,\r\n        lBrokerLiaisonKey,\r\n        dBrokerOrderPc,\r\n        dBrokerOrderPlaced,\r\n        dBrokerCommissionPc,\r\n        dCedingCommissionPc,\r\n        dOverridingCommissionPc,\r\n        nTermsOfTradeDays,\r\n        sBrokerName,\r\n        dBrokerRemunerationPc,\r\n        bSecurityLevelStatement,\r\n        lRISectionCoBrokerKey,\r\n        lBrokerClaimLiaisonKey,\r\n        intBrokerOrderXOLInfo,\r\n        dw_loadts as _valid_from,\r\n        lead(dw_loadts) over (partition by lRISectionBrokerKey order by dw_loadts) as _valid_to\r\n    from\r\n        filtered\r\n)\r\n\r\nselect * from ranged", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "scd\\scd_ri_section_broker.sql", "original_file_path": "models\\scd\\scd_ri_section_broker.sql", "name": "scd_ri_section_broker", "alias": "scd_ri_section_broker", "checksum": {"name": "sha256", "checksum": "8832b445f4c221cb37a1ed1afce474f72de5dde0e82ea1e3de03b0fd8471d91e"}, "tags": [], "refs": [], "sources": [["dbo", "ri_section_broker"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": "iginsure://models\\scd\\scd.yml", "compiled_path": "target\\compiled\\iginsure\\models\\scd\\scd_ri_section_broker.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "docs": {"show": false}}, "created_at": 1701786801.8072631, "compiled_code": "-- This file is automatically generated\n\nwith\n\nri_section_broker as (\n    select * from \"IGI_PROD_DW\".\"dbo\".\"RISectionBroker\"\n),\n\nordered as (\n    select\n        lRISectionBrokerKey,\n        lRISectionKey,\n        lRIActivityKey,\n        lRIPolicyKey,\n        lRIFolderKey,\n        lBrokerContactKey,\n        sReference,\n        sBrokerReference,\n        lBrokerLiaisonKey,\n        dBrokerOrderPc,\n        dBrokerOrderPlaced,\n        dBrokerCommissionPc,\n        dCedingCommissionPc,\n        dOverridingCommissionPc,\n        nTermsOfTradeDays,\n        sBrokerName,\n        dBrokerRemunerationPc,\n        bSecurityLevelStatement,\n        lRISectionCoBrokerKey,\n        lBrokerClaimLiaisonKey,\n        intBrokerOrderXOLInfo,\n        dw_loadts,\n        row_number() over (\n            partition by\n                lRISectionBrokerKey,\n                lRISectionKey,\n                lRIActivityKey,\n                lRIPolicyKey,\n                lRIFolderKey,\n                lBrokerContactKey,\n                sReference,\n                sBrokerReference,\n                lBrokerLiaisonKey,\n                dBrokerOrderPc,\n                dBrokerOrderPlaced,\n                dBrokerCommissionPc,\n                dCedingCommissionPc,\n                dOverridingCommissionPc,\n                nTermsOfTradeDays,\n                sBrokerName,\n                dBrokerRemunerationPc,\n                bSecurityLevelStatement,\n                lRISectionCoBrokerKey,\n                lBrokerClaimLiaisonKey,\n                intBrokerOrderXOLInfo\n            order by\n                dw_loadts\n        ) as dw_extract_order\n    from\n        ri_section_broker\n),\n\nfiltered as (\n    select * from ordered where dw_extract_order = 1\n),\n\nranged as (\n    select\n        lRISectionBrokerKey,\n        lRISectionKey,\n        lRIActivityKey,\n        lRIPolicyKey,\n        lRIFolderKey,\n        lBrokerContactKey,\n        sReference,\n        sBrokerReference,\n        lBrokerLiaisonKey,\n        dBrokerOrderPc,\n        dBrokerOrderPlaced,\n        dBrokerCommissionPc,\n        dCedingCommissionPc,\n        dOverridingCommissionPc,\n        nTermsOfTradeDays,\n        sBrokerName,\n        dBrokerRemunerationPc,\n        bSecurityLevelStatement,\n        lRISectionCoBrokerKey,\n        lBrokerClaimLiaisonKey,\n        intBrokerOrderXOLInfo,\n        dw_loadts as _valid_from,\n        lead(dw_loadts) over (partition by lRISectionBrokerKey order by dw_loadts) as _valid_to\n    from\n        filtered\n)\n\nselect * from ranged", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"scd_ri_section_broker\""}, "model.iginsure.scd_ri_section_broker_security": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.iginsure.dbo.ri_section_broker_security"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "scd", "scd_ri_section_broker_security"], "unique_id": "model.iginsure.scd_ri_section_broker_security", "raw_code": "-- This file is automatically generated\r\n\r\nwith\r\n\r\nri_section_broker_security as (\r\n    select * from {{ source('dbo', 'ri_section_broker_security') }}\r\n),\r\n\r\nordered as (\r\n    select\r\n        lRISectionBrokerSecurityKey,\r\n        lRISectionBrokerKey,\r\n        lRISectionKey,\r\n        lRIActivityKey,\r\n        lRIPolicyKey,\r\n        lRIFolderKey,\r\n        lSecurityContactKey,\r\n        bLeadReinsurer,\r\n        lTypeOfRatingSourceKey,\r\n        sSecurityRating,\r\n        dProportionPc,\r\n        dTreatyProportionPc,\r\n        sSecurityReference,\r\n        dOverridingCommissionPc,\r\n        dCedingCommissionPc,\r\n        dBrokerCommissionPc,\r\n        nTermsOfTradeDays,\r\n        dBrokerRemunerationPc,\r\n        lRIGrossNetOfCommissionKey,\r\n        dWrittenProportionPc,\r\n        dw_loadts,\r\n        row_number() over (\r\n            partition by\r\n                lRISectionBrokerSecurityKey,\r\n                lRISectionBrokerKey,\r\n                lRISectionKey,\r\n                lRIActivityKey,\r\n                lRIPolicyKey,\r\n                lRIFolderKey,\r\n                lSecurityContactKey,\r\n                bLeadReinsurer,\r\n                lTypeOfRatingSourceKey,\r\n                sSecurityRating,\r\n                dProportionPc,\r\n                dTreatyProportionPc,\r\n                sSecurityReference,\r\n                dOverridingCommissionPc,\r\n                dCedingCommissionPc,\r\n                dBrokerCommissionPc,\r\n                nTermsOfTradeDays,\r\n                dBrokerRemunerationPc,\r\n                lRIGrossNetOfCommissionKey,\r\n                dWrittenProportionPc\r\n            order by\r\n                dw_loadts\r\n        ) as dw_extract_order\r\n    from\r\n        ri_section_broker_security\r\n),\r\n\r\nfiltered as (\r\n    select * from ordered where dw_extract_order = 1\r\n),\r\n\r\nranged as (\r\n    select\r\n        lRISectionBrokerSecurityKey,\r\n        lRISectionBrokerKey,\r\n        lRISectionKey,\r\n        lRIActivityKey,\r\n        lRIPolicyKey,\r\n        lRIFolderKey,\r\n        lSecurityContactKey,\r\n        bLeadReinsurer,\r\n        lTypeOfRatingSourceKey,\r\n        sSecurityRating,\r\n        dProportionPc,\r\n        dTreatyProportionPc,\r\n        sSecurityReference,\r\n        dOverridingCommissionPc,\r\n        dCedingCommissionPc,\r\n        dBrokerCommissionPc,\r\n        nTermsOfTradeDays,\r\n        dBrokerRemunerationPc,\r\n        lRIGrossNetOfCommissionKey,\r\n        dWrittenProportionPc,\r\n        dw_loadts as _valid_from,\r\n        lead(dw_loadts) over (partition by lRISectionBrokerSecurityKey order by dw_loadts) as _valid_to\r\n    from\r\n        filtered\r\n)\r\n\r\nselect * from ranged", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "scd\\scd_ri_section_broker_security.sql", "original_file_path": "models\\scd\\scd_ri_section_broker_security.sql", "name": "scd_ri_section_broker_security", "alias": "scd_ri_section_broker_security", "checksum": {"name": "sha256", "checksum": "9c327a06f344311e581e2b83614e973e94d658a594d0d24edd7da30ebe984227"}, "tags": [], "refs": [], "sources": [["dbo", "ri_section_broker_security"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": "iginsure://models\\scd\\scd.yml", "compiled_path": "target\\compiled\\iginsure\\models\\scd\\scd_ri_section_broker_security.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "docs": {"show": false}}, "created_at": 1701786801.806264, "compiled_code": "-- This file is automatically generated\n\nwith\n\nri_section_broker_security as (\n    select * from \"IGI_PROD_DW\".\"dbo\".\"RISectionBrokerSecurity\"\n),\n\nordered as (\n    select\n        lRISectionBrokerSecurityKey,\n        lRISectionBrokerKey,\n        lRISectionKey,\n        lRIActivityKey,\n        lRIPolicyKey,\n        lRIFolderKey,\n        lSecurityContactKey,\n        bLeadReinsurer,\n        lTypeOfRatingSourceKey,\n        sSecurityRating,\n        dProportionPc,\n        dTreatyProportionPc,\n        sSecurityReference,\n        dOverridingCommissionPc,\n        dCedingCommissionPc,\n        dBrokerCommissionPc,\n        nTermsOfTradeDays,\n        dBrokerRemunerationPc,\n        lRIGrossNetOfCommissionKey,\n        dWrittenProportionPc,\n        dw_loadts,\n        row_number() over (\n            partition by\n                lRISectionBrokerSecurityKey,\n                lRISectionBrokerKey,\n                lRISectionKey,\n                lRIActivityKey,\n                lRIPolicyKey,\n                lRIFolderKey,\n                lSecurityContactKey,\n                bLeadReinsurer,\n                lTypeOfRatingSourceKey,\n                sSecurityRating,\n                dProportionPc,\n                dTreatyProportionPc,\n                sSecurityReference,\n                dOverridingCommissionPc,\n                dCedingCommissionPc,\n                dBrokerCommissionPc,\n                nTermsOfTradeDays,\n                dBrokerRemunerationPc,\n                lRIGrossNetOfCommissionKey,\n                dWrittenProportionPc\n            order by\n                dw_loadts\n        ) as dw_extract_order\n    from\n        ri_section_broker_security\n),\n\nfiltered as (\n    select * from ordered where dw_extract_order = 1\n),\n\nranged as (\n    select\n        lRISectionBrokerSecurityKey,\n        lRISectionBrokerKey,\n        lRISectionKey,\n        lRIActivityKey,\n        lRIPolicyKey,\n        lRIFolderKey,\n        lSecurityContactKey,\n        bLeadReinsurer,\n        lTypeOfRatingSourceKey,\n        sSecurityRating,\n        dProportionPc,\n        dTreatyProportionPc,\n        sSecurityReference,\n        dOverridingCommissionPc,\n        dCedingCommissionPc,\n        dBrokerCommissionPc,\n        nTermsOfTradeDays,\n        dBrokerRemunerationPc,\n        lRIGrossNetOfCommissionKey,\n        dWrittenProportionPc,\n        dw_loadts as _valid_from,\n        lead(dw_loadts) over (partition by lRISectionBrokerSecurityKey order by dw_loadts) as _valid_to\n    from\n        filtered\n)\n\nselect * from ranged", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"scd_ri_section_broker_security\""}, "model.iginsure.scd_sub_class": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.iginsure.dbo.sub_class"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["InwardPremium"], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "scd", "scd_sub_class"], "unique_id": "model.iginsure.scd_sub_class", "raw_code": "-- This file is automatically generated\r\n{{\r\n  config(tags=['InwardPremium'])\r\n}}\r\n\r\nwith\r\n\r\nsub_class as (\r\n    select * from {{ source('dbo', 'sub_class') }}\r\n),\r\n\r\nordered as (\r\n    select\r\n        lSubClassKey,\r\n        sSubClassCode,\r\n        sSubClassDescr,\r\n        sSearchSubClassDescr,\r\n        lClassKey,\r\n        dw_loadts,\r\n        row_number() over (\r\n            partition by\r\n                lSubClassKey,\r\n                sSubClassCode,\r\n                sSubClassDescr,\r\n                sSearchSubClassDescr,\r\n                lClassKey\r\n            order by\r\n                dw_loadts\r\n        ) as dw_extract_order\r\n    from\r\n        sub_class\r\n),\r\n\r\nfiltered as (\r\n    select * from ordered where dw_extract_order = 1\r\n),\r\n\r\nranged as (\r\n    select\r\n        lSubClassKey,\r\n        sSubClassCode,\r\n        sSubClassDescr,\r\n        sSearchSubClassDescr,\r\n        lClassKey,\r\n        dw_loadts as _valid_from,\r\n        lead(dw_loadts) over (partition by lSubClassKey order by dw_loadts) as _valid_to\r\n    from\r\n        filtered\r\n)\r\n\r\nselect * from ranged", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "scd\\scd_sub_class.sql", "original_file_path": "models\\scd\\scd_sub_class.sql", "name": "scd_sub_class", "alias": "scd_sub_class", "checksum": {"name": "sha256", "checksum": "fc15f3972bcf7d08adbf298bea960513c26ffe3d7f83e1715ef0a2bb84002347"}, "tags": ["InwardPremium"], "refs": [], "sources": [["dbo", "sub_class"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": "iginsure://models\\scd\\scd.yml", "compiled_path": "target\\compiled\\iginsure\\models\\scd\\scd_sub_class.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "docs": {"show": false}, "tags": ["InwardPremium"]}, "created_at": 1701786801.8092647, "compiled_code": "-- This file is automatically generated\n\n\nwith\n\nsub_class as (\n    select * from \"IGI_PROD_DW\".\"dbo\".\"SubClass\"\n),\n\nordered as (\n    select\n        lSubClassKey,\n        sSubClassCode,\n        sSubClassDescr,\n        sSearchSubClassDescr,\n        lClassKey,\n        dw_loadts,\n        row_number() over (\n            partition by\n                lSubClassKey,\n                sSubClassCode,\n                sSubClassDescr,\n                sSearchSubClassDescr,\n                lClassKey\n            order by\n                dw_loadts\n        ) as dw_extract_order\n    from\n        sub_class\n),\n\nfiltered as (\n    select * from ordered where dw_extract_order = 1\n),\n\nranged as (\n    select\n        lSubClassKey,\n        sSubClassCode,\n        sSubClassDescr,\n        sSearchSubClassDescr,\n        lClassKey,\n        dw_loadts as _valid_from,\n        lead(dw_loadts) over (partition by lSubClassKey order by dw_loadts) as _valid_to\n    from\n        filtered\n)\n\nselect * from ranged", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"scd_sub_class\""}, "model.iginsure.scd_sub_division": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.iginsure.dbo.sub_division"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["InwardPremium"], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "scd", "scd_sub_division"], "unique_id": "model.iginsure.scd_sub_division", "raw_code": "-- This file is automatically generated\r\n{{\r\n  config(tags=['InwardPremium'])\r\n}}\r\n\r\nwith\r\n\r\nsub_division as (\r\n    select * from {{ source('dbo', 'sub_division') }}\r\n),\r\n\r\nordered as (\r\n    select\r\n        lSubDivisionKey,\r\n        sCode,\r\n        sSubDivision,\r\n        sSubDivisionSearch,\r\n        lContactKey,\r\n        lExportCompanyKey,\r\n        bRequiresKYCDivision,\r\n        dw_loadts,\r\n        row_number() over (\r\n            partition by\r\n                lSubDivisionKey,\r\n                sCode,\r\n                sSubDivision,\r\n                sSubDivisionSearch,\r\n                lContactKey,\r\n                lExportCompanyKey,\r\n                bRequiresKYCDivision\r\n            order by\r\n                dw_loadts\r\n        ) as dw_extract_order\r\n    from\r\n        sub_division\r\n),\r\n\r\nfiltered as (\r\n    select * from ordered where dw_extract_order = 1\r\n),\r\n\r\nranged as (\r\n    select\r\n        lSubDivisionKey,\r\n        sCode,\r\n        sSubDivision,\r\n        sSubDivisionSearch,\r\n        lContactKey,\r\n        lExportCompanyKey,\r\n        bRequiresKYCDivision,\r\n        dw_loadts as _valid_from,\r\n        lead(dw_loadts) over (partition by lSubDivisionKey order by dw_loadts) as _valid_to\r\n    from\r\n        filtered\r\n)\r\n\r\nselect * from ranged", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "scd\\scd_sub_division.sql", "original_file_path": "models\\scd\\scd_sub_division.sql", "name": "scd_sub_division", "alias": "scd_sub_division", "checksum": {"name": "sha256", "checksum": "6ffb684b361e84a7830291e7cfb9c141ed09ed756f40ceb41e39e37e6dfe3b83"}, "tags": ["InwardPremium"], "refs": [], "sources": [["dbo", "sub_division"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": "iginsure://models\\scd\\scd.yml", "compiled_path": "target\\compiled\\iginsure\\models\\scd\\scd_sub_division.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "docs": {"show": false}, "tags": ["InwardPremium"]}, "created_at": 1701786801.8112636, "compiled_code": "-- This file is automatically generated\n\n\nwith\n\nsub_division as (\n    select * from \"IGI_PROD_DW\".\"dbo\".\"SubDivision\"\n),\n\nordered as (\n    select\n        lSubDivisionKey,\n        sCode,\n        sSubDivision,\n        sSubDivisionSearch,\n        lContactKey,\n        lExportCompanyKey,\n        bRequiresKYCDivision,\n        dw_loadts,\n        row_number() over (\n            partition by\n                lSubDivisionKey,\n                sCode,\n                sSubDivision,\n                sSubDivisionSearch,\n                lContactKey,\n                lExportCompanyKey,\n                bRequiresKYCDivision\n            order by\n                dw_loadts\n        ) as dw_extract_order\n    from\n        sub_division\n),\n\nfiltered as (\n    select * from ordered where dw_extract_order = 1\n),\n\nranged as (\n    select\n        lSubDivisionKey,\n        sCode,\n        sSubDivision,\n        sSubDivisionSearch,\n        lContactKey,\n        lExportCompanyKey,\n        bRequiresKYCDivision,\n        dw_loadts as _valid_from,\n        lead(dw_loadts) over (partition by lSubDivisionKey order by dw_loadts) as _valid_to\n    from\n        filtered\n)\n\nselect * from ranged", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"scd_sub_division\""}, "model.iginsure.scd_type_of_accounting_element": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.iginsure.dbo.type_of_accounting_element"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "scd", "scd_type_of_accounting_element"], "unique_id": "model.iginsure.scd_type_of_accounting_element", "raw_code": "-- This file is automatically generated\r\n\r\nwith\r\n\r\ntype_of_accounting_element as (\r\n    select * from {{ source('dbo', 'type_of_accounting_element') }}\r\n),\r\n\r\nordered as (\r\n    select\r\n        lTypeOfAccountingElementKey,\r\n        sTypeOfAccountingElementCode,\r\n        sTypeOfAccountingElement,\r\n        sTypeOfAccountingElementSearch,\r\n        lIncreaseDebitCreditKey,\r\n        lDecreaseDebitCreditKey,\r\n        dw_loadts,\r\n        row_number() over (\r\n            partition by\r\n                lTypeOfAccountingElementKey,\r\n                sTypeOfAccountingElementCode,\r\n                sTypeOfAccountingElement,\r\n                sTypeOfAccountingElementSearch,\r\n                lIncreaseDebitCreditKey,\r\n                lDecreaseDebitCreditKey\r\n            order by\r\n                dw_loadts\r\n        ) as dw_extract_order\r\n    from\r\n        type_of_accounting_element\r\n),\r\n\r\nfiltered as (\r\n    select * from ordered where dw_extract_order = 1\r\n),\r\n\r\nranged as (\r\n    select\r\n        lTypeOfAccountingElementKey,\r\n        sTypeOfAccountingElementCode,\r\n        sTypeOfAccountingElement,\r\n        sTypeOfAccountingElementSearch,\r\n        lIncreaseDebitCreditKey,\r\n        lDecreaseDebitCreditKey,\r\n        dw_loadts as _valid_from,\r\n        lead(dw_loadts) over (partition by lTypeOfAccountingElementKey order by dw_loadts) as _valid_to\r\n    from\r\n        filtered\r\n)\r\n\r\nselect * from ranged", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "scd\\scd_type_of_accounting_element.sql", "original_file_path": "models\\scd\\scd_type_of_accounting_element.sql", "name": "scd_type_of_accounting_element", "alias": "scd_type_of_accounting_element", "checksum": {"name": "sha256", "checksum": "7eb32ce035e602aeab0abb2b0e52ee01381305c67a1384868c907f30f06e4e02"}, "tags": [], "refs": [], "sources": [["dbo", "type_of_accounting_element"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": "iginsure://models\\scd\\scd.yml", "compiled_path": "target\\compiled\\iginsure\\models\\scd\\scd_type_of_accounting_element.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "docs": {"show": false}}, "created_at": 1701786801.8122602, "compiled_code": "-- This file is automatically generated\n\nwith\n\ntype_of_accounting_element as (\n    select * from \"IGI_PROD_DW\".\"dbo\".\"TypeOfAccountingElement\"\n),\n\nordered as (\n    select\n        lTypeOfAccountingElementKey,\n        sTypeOfAccountingElementCode,\n        sTypeOfAccountingElement,\n        sTypeOfAccountingElementSearch,\n        lIncreaseDebitCreditKey,\n        lDecreaseDebitCreditKey,\n        dw_loadts,\n        row_number() over (\n            partition by\n                lTypeOfAccountingElementKey,\n                sTypeOfAccountingElementCode,\n                sTypeOfAccountingElement,\n                sTypeOfAccountingElementSearch,\n                lIncreaseDebitCreditKey,\n                lDecreaseDebitCreditKey\n            order by\n                dw_loadts\n        ) as dw_extract_order\n    from\n        type_of_accounting_element\n),\n\nfiltered as (\n    select * from ordered where dw_extract_order = 1\n),\n\nranged as (\n    select\n        lTypeOfAccountingElementKey,\n        sTypeOfAccountingElementCode,\n        sTypeOfAccountingElement,\n        sTypeOfAccountingElementSearch,\n        lIncreaseDebitCreditKey,\n        lDecreaseDebitCreditKey,\n        dw_loadts as _valid_from,\n        lead(dw_loadts) over (partition by lTypeOfAccountingElementKey order by dw_loadts) as _valid_to\n    from\n        filtered\n)\n\nselect * from ranged", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"scd_type_of_accounting_element\""}, "model.iginsure.scd_type_of_activity_source": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.iginsure.dbo.type_of_activity_source"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "scd", "scd_type_of_activity_source"], "unique_id": "model.iginsure.scd_type_of_activity_source", "raw_code": "with\r\n\r\ntype_of_activity_source as (\r\n    select * from {{ source('dbo', 'type_of_activity_source') }}\r\n),\r\n\r\nordered as (\r\n    select\r\n        lTypeofActivitySourceKey,\r\n        sTypeofActivitySourceCode,\r\n        sTypeofActivitySourceDescr,\r\n        sSearchTypeofActivitySourceDescr,\r\n        dw_loadts,\r\n        row_number() over (\r\n            partition by\r\n                lTypeofActivitySourceKey,\r\n                sTypeofActivitySourceCode,\r\n                sTypeofActivitySourceDescr,\r\n                sSearchTypeofActivitySourceDescr\r\n            order by\r\n                dw_loadts\r\n        ) as dw_extract_order\r\n    from\r\n        type_of_activity_source\r\n),\r\n\r\nfiltered as (\r\n    select * from ordered where dw_extract_order = 1\r\n),\r\n\r\nranged as (\r\n    select\r\n        lTypeofActivitySourceKey,\r\n        sTypeofActivitySourceCode,\r\n        sTypeofActivitySourceDescr,\r\n        sSearchTypeofActivitySourceDescr,\r\n        dw_loadts as _valid_from,\r\n        lead(dw_loadts) over (partition by lTypeofActivitySourceKey order by dw_loadts) as _valid_to\r\n    from\r\n        filtered\r\n)\r\n\r\nselect * from ranged", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "scd\\scd_type_of_activity_source.sql", "original_file_path": "models\\scd\\scd_type_of_activity_source.sql", "name": "scd_type_of_activity_source", "alias": "scd_type_of_activity_source", "checksum": {"name": "sha256", "checksum": "864f8775eb9bbaeba324476f3816aaba62ab80fe405be32343912b87242bc925"}, "tags": [], "refs": [], "sources": [["dbo", "type_of_activity_source"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\scd\\scd_type_of_activity_source.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null}, "created_at": 1701786800.9717166, "compiled_code": "with\n\ntype_of_activity_source as (\n    select * from \"IGI_PROD_DW\".\"dbo\".\"typeofactivitysource\"\n),\n\nordered as (\n    select\n        lTypeofActivitySourceKey,\n        sTypeofActivitySourceCode,\n        sTypeofActivitySourceDescr,\n        sSearchTypeofActivitySourceDescr,\n        dw_loadts,\n        row_number() over (\n            partition by\n                lTypeofActivitySourceKey,\n                sTypeofActivitySourceCode,\n                sTypeofActivitySourceDescr,\n                sSearchTypeofActivitySourceDescr\n            order by\n                dw_loadts\n        ) as dw_extract_order\n    from\n        type_of_activity_source\n),\n\nfiltered as (\n    select * from ordered where dw_extract_order = 1\n),\n\nranged as (\n    select\n        lTypeofActivitySourceKey,\n        sTypeofActivitySourceCode,\n        sTypeofActivitySourceDescr,\n        sSearchTypeofActivitySourceDescr,\n        dw_loadts as _valid_from,\n        lead(dw_loadts) over (partition by lTypeofActivitySourceKey order by dw_loadts) as _valid_to\n    from\n        filtered\n)\n\nselect * from ranged", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"scd_type_of_activity_source\""}, "model.iginsure.scd_type_of_bureau_message": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.iginsure.dbo.type_of_bureau_message"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "scd", "scd_type_of_bureau_message"], "unique_id": "model.iginsure.scd_type_of_bureau_message", "raw_code": "-- This file is automatically generated\r\n\r\nwith\r\n\r\ntype_of_bureau_message as (\r\n    select * from {{ source('dbo', 'type_of_bureau_message') }}\r\n),\r\n\r\nordered as (\r\n    select\r\n        lTypeOfBureauMessageKey,\r\n        lMarketSourceKey,\r\n        sCode,\r\n        sMessage,\r\n        sMessageSearch,\r\n        lTemplateDataConvertKey,\r\n        sCode2,\r\n        dw_loadts,\r\n        row_number() over (\r\n            partition by\r\n                lTypeOfBureauMessageKey,\r\n                lMarketSourceKey,\r\n                sCode,\r\n                sMessage,\r\n                sMessageSearch,\r\n                lTemplateDataConvertKey,\r\n                sCode2\r\n            order by\r\n                dw_loadts\r\n        ) as dw_extract_order\r\n    from\r\n        type_of_bureau_message\r\n),\r\n\r\nfiltered as (\r\n    select * from ordered where dw_extract_order = 1\r\n),\r\n\r\nranged as (\r\n    select\r\n        lTypeOfBureauMessageKey,\r\n        lMarketSourceKey,\r\n        sCode,\r\n        sMessage,\r\n        sMessageSearch,\r\n        lTemplateDataConvertKey,\r\n        sCode2,\r\n        dw_loadts as _valid_from,\r\n        lead(dw_loadts) over (partition by lTypeOfBureauMessageKey order by dw_loadts) as _valid_to\r\n    from\r\n        filtered\r\n)\r\n\r\nselect * from ranged", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "scd\\scd_type_of_bureau_message.sql", "original_file_path": "models\\scd\\scd_type_of_bureau_message.sql", "name": "scd_type_of_bureau_message", "alias": "scd_type_of_bureau_message", "checksum": {"name": "sha256", "checksum": "df2f367c1647e3bd98b9b0258b2b73f09bf61a6b503db4817819b72e6a25a874"}, "tags": [], "refs": [], "sources": [["dbo", "type_of_bureau_message"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": "iginsure://models\\scd\\scd.yml", "compiled_path": "target\\compiled\\iginsure\\models\\scd\\scd_type_of_bureau_message.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "docs": {"show": false}}, "created_at": 1701786801.8132648, "compiled_code": "-- This file is automatically generated\n\nwith\n\ntype_of_bureau_message as (\n    select * from \"IGI_PROD_DW\".\"dbo\".\"TypeOfBureauMessage\"\n),\n\nordered as (\n    select\n        lTypeOfBureauMessageKey,\n        lMarketSourceKey,\n        sCode,\n        sMessage,\n        sMessageSearch,\n        lTemplateDataConvertKey,\n        sCode2,\n        dw_loadts,\n        row_number() over (\n            partition by\n                lTypeOfBureauMessageKey,\n                lMarketSourceKey,\n                sCode,\n                sMessage,\n                sMessageSearch,\n                lTemplateDataConvertKey,\n                sCode2\n            order by\n                dw_loadts\n        ) as dw_extract_order\n    from\n        type_of_bureau_message\n),\n\nfiltered as (\n    select * from ordered where dw_extract_order = 1\n),\n\nranged as (\n    select\n        lTypeOfBureauMessageKey,\n        lMarketSourceKey,\n        sCode,\n        sMessage,\n        sMessageSearch,\n        lTemplateDataConvertKey,\n        sCode2,\n        dw_loadts as _valid_from,\n        lead(dw_loadts) over (partition by lTypeOfBureauMessageKey order by dw_loadts) as _valid_to\n    from\n        filtered\n)\n\nselect * from ranged", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"scd_type_of_bureau_message\""}, "model.iginsure.scd_type_of_class": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.iginsure.dbo.type_of_class"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["InwardPremium"], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "scd", "scd_type_of_class"], "unique_id": "model.iginsure.scd_type_of_class", "raw_code": "-- This file is automatically generated\r\n{{\r\n  config(tags=['InwardPremium'])\r\n}}\r\n\r\nwith\r\n\r\ntype_of_class as (\r\n    select * from {{ source('dbo', 'type_of_class') }}\r\n),\r\n\r\nordered as (\r\n    select\r\n        LTYPEOFCLASSKEY,\r\n        SCODE,\r\n        SCLASS,\r\n        SCLASSSEARCH,\r\n        dw_loadts,\r\n        row_number() over (\r\n            partition by\r\n                LTYPEOFCLASSKEY,\r\n                SCODE,\r\n                SCLASS,\r\n                SCLASSSEARCH\r\n            order by\r\n                dw_loadts\r\n        ) as dw_extract_order\r\n    from\r\n        type_of_class\r\n),\r\n\r\nfiltered as (\r\n    select * from ordered where dw_extract_order = 1\r\n),\r\n\r\nranged as (\r\n    select\r\n        LTYPEOFCLASSKEY,\r\n        SCODE,\r\n        SCLASS,\r\n        SCLASSSEARCH,\r\n        dw_loadts as _valid_from,\r\n        lead(dw_loadts) over (partition by LTYPEOFCLASSKEY order by dw_loadts) as _valid_to\r\n    from\r\n        filtered\r\n)\r\n\r\nselect * from ranged", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "scd\\scd_type_of_class.sql", "original_file_path": "models\\scd\\scd_type_of_class.sql", "name": "scd_type_of_class", "alias": "scd_type_of_class", "checksum": {"name": "sha256", "checksum": "b3261c7c177782bcd7aec09c02bf0066d7f013720b721ef93a5995014542353b"}, "tags": ["InwardPremium"], "refs": [], "sources": [["dbo", "type_of_class"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": "iginsure://models\\scd\\scd.yml", "compiled_path": "target\\compiled\\iginsure\\models\\scd\\scd_type_of_class.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "docs": {"show": false}, "tags": ["InwardPremium"]}, "created_at": 1701786801.81526, "compiled_code": "-- This file is automatically generated\n\n\nwith\n\ntype_of_class as (\n    select * from \"IGI_PROD_DW\".\"dbo\".\"TYPEOFCLASS\"\n),\n\nordered as (\n    select\n        LTYPEOFCLASSKEY,\n        SCODE,\n        SCLASS,\n        SCLASSSEARCH,\n        dw_loadts,\n        row_number() over (\n            partition by\n                LTYPEOFCLASSKEY,\n                SCODE,\n                SCLASS,\n                SCLASSSEARCH\n            order by\n                dw_loadts\n        ) as dw_extract_order\n    from\n        type_of_class\n),\n\nfiltered as (\n    select * from ordered where dw_extract_order = 1\n),\n\nranged as (\n    select\n        LTYPEOFCLASSKEY,\n        SCODE,\n        SCLASS,\n        SCLASSSEARCH,\n        dw_loadts as _valid_from,\n        lead(dw_loadts) over (partition by LTYPEOFCLASSKEY order by dw_loadts) as _valid_to\n    from\n        filtered\n)\n\nselect * from ranged", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"scd_type_of_class\""}, "model.iginsure.scd_type_of_debit_credit": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.iginsure.dbo.type_of_debit_credit"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "scd", "scd_type_of_debit_credit"], "unique_id": "model.iginsure.scd_type_of_debit_credit", "raw_code": "-- This file is automatically generated\r\n\r\nwith\r\n\r\ntype_of_debit_credit as (\r\n    select * from {{ source('dbo', 'type_of_debit_credit') }}\r\n),\r\n\r\nordered as (\r\n    select\r\n        lTypeOfDebitCreditKey,\r\n        sDebitCreditCode,\r\n        sDebitCredit,\r\n        sDebitCreditSearch,\r\n        dw_loadts,\r\n        row_number() over (\r\n            partition by\r\n                lTypeOfDebitCreditKey,\r\n                sDebitCreditCode,\r\n                sDebitCredit,\r\n                sDebitCreditSearch\r\n            order by\r\n                dw_loadts\r\n        ) as dw_extract_order\r\n    from\r\n        type_of_debit_credit\r\n),\r\n\r\nfiltered as (\r\n    select * from ordered where dw_extract_order = 1\r\n),\r\n\r\nranged as (\r\n    select\r\n        lTypeOfDebitCreditKey,\r\n        sDebitCreditCode,\r\n        sDebitCredit,\r\n        sDebitCreditSearch,\r\n        dw_loadts as _valid_from,\r\n        lead(dw_loadts) over (partition by lTypeOfDebitCreditKey order by dw_loadts) as _valid_to\r\n    from\r\n        filtered\r\n)\r\n\r\nselect * from ranged", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "scd\\scd_type_of_debit_credit.sql", "original_file_path": "models\\scd\\scd_type_of_debit_credit.sql", "name": "scd_type_of_debit_credit", "alias": "scd_type_of_debit_credit", "checksum": {"name": "sha256", "checksum": "f810283cb9f729d88ef8a9df28997ed1015beba1e47991004aad81ad569e7ad6"}, "tags": [], "refs": [], "sources": [["dbo", "type_of_debit_credit"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": "iginsure://models\\scd\\scd.yml", "compiled_path": "target\\compiled\\iginsure\\models\\scd\\scd_type_of_debit_credit.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "docs": {"show": false}}, "created_at": 1701786801.8162646, "compiled_code": "-- This file is automatically generated\n\nwith\n\ntype_of_debit_credit as (\n    select * from \"IGI_PROD_DW\".\"dbo\".\"TypeOfDebitCredit\"\n),\n\nordered as (\n    select\n        lTypeOfDebitCreditKey,\n        sDebitCreditCode,\n        sDebitCredit,\n        sDebitCreditSearch,\n        dw_loadts,\n        row_number() over (\n            partition by\n                lTypeOfDebitCreditKey,\n                sDebitCreditCode,\n                sDebitCredit,\n                sDebitCreditSearch\n            order by\n                dw_loadts\n        ) as dw_extract_order\n    from\n        type_of_debit_credit\n),\n\nfiltered as (\n    select * from ordered where dw_extract_order = 1\n),\n\nranged as (\n    select\n        lTypeOfDebitCreditKey,\n        sDebitCreditCode,\n        sDebitCredit,\n        sDebitCreditSearch,\n        dw_loadts as _valid_from,\n        lead(dw_loadts) over (partition by lTypeOfDebitCreditKey order by dw_loadts) as _valid_to\n    from\n        filtered\n)\n\nselect * from ranged", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"scd_type_of_debit_credit\""}, "model.iginsure.scd_type_of_event": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.iginsure.dbo.type_of_event"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "scd", "scd_type_of_event"], "unique_id": "model.iginsure.scd_type_of_event", "raw_code": "-- This file is automatically generated\r\n\r\nwith\r\n\r\ntype_of_event as (\r\n    select * from {{ source('dbo', 'type_of_event') }}\r\n),\r\n\r\nordered as (\r\n    select\r\n        LEVENTKEY,\r\n        SEVENTCODE,\r\n        SEVENTDESC,\r\n        DTDOLPERIODFR,\r\n        DTDOLPERIODTO,\r\n        SNOTES,\r\n        SSEARCHEVENTDESC,\r\n        bAuthorized,\r\n        dw_loadts,\r\n        row_number() over (\r\n            partition by\r\n                LEVENTKEY,\r\n                SEVENTCODE,\r\n                SEVENTDESC,\r\n                DTDOLPERIODFR,\r\n                DTDOLPERIODTO,\r\n                SNOTES,\r\n                SSEARCHEVENTDESC,\r\n                bAuthorized\r\n            order by\r\n                dw_loadts\r\n        ) as dw_extract_order\r\n    from\r\n        type_of_event\r\n),\r\n\r\nfiltered as (\r\n    select * from ordered where dw_extract_order = 1\r\n),\r\n\r\nranged as (\r\n    select\r\n        LEVENTKEY,\r\n        SEVENTCODE,\r\n        SEVENTDESC,\r\n        DTDOLPERIODFR,\r\n        DTDOLPERIODTO,\r\n        SNOTES,\r\n        SSEARCHEVENTDESC,\r\n        bAuthorized,\r\n        dw_loadts as _valid_from,\r\n        lead(dw_loadts) over (partition by LEVENTKEY order by dw_loadts) as _valid_to\r\n    from\r\n        filtered\r\n)\r\n\r\nselect * from ranged", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "scd\\scd_type_of_event.sql", "original_file_path": "models\\scd\\scd_type_of_event.sql", "name": "scd_type_of_event", "alias": "scd_type_of_event", "checksum": {"name": "sha256", "checksum": "29d904e53cada2bc723433352a015762b0c67279186cc8605320824096a2d488"}, "tags": [], "refs": [], "sources": [["dbo", "type_of_event"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": "iginsure://models\\scd\\scd.yml", "compiled_path": "target\\compiled\\iginsure\\models\\scd\\scd_type_of_event.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "docs": {"show": false}}, "created_at": 1701786801.818914, "compiled_code": "-- This file is automatically generated\n\nwith\n\ntype_of_event as (\n    select * from \"IGI_PROD_DW\".\"dbo\".\"TYPEOFEVENT\"\n),\n\nordered as (\n    select\n        LEVENTKEY,\n        SEVENTCODE,\n        SEVENTDESC,\n        DTDOLPERIODFR,\n        DTDOLPERIODTO,\n        SNOTES,\n        SSEARCHEVENTDESC,\n        bAuthorized,\n        dw_loadts,\n        row_number() over (\n            partition by\n                LEVENTKEY,\n                SEVENTCODE,\n                SEVENTDESC,\n                DTDOLPERIODFR,\n                DTDOLPERIODTO,\n                SNOTES,\n                SSEARCHEVENTDESC,\n                bAuthorized\n            order by\n                dw_loadts\n        ) as dw_extract_order\n    from\n        type_of_event\n),\n\nfiltered as (\n    select * from ordered where dw_extract_order = 1\n),\n\nranged as (\n    select\n        LEVENTKEY,\n        SEVENTCODE,\n        SEVENTDESC,\n        DTDOLPERIODFR,\n        DTDOLPERIODTO,\n        SNOTES,\n        SSEARCHEVENTDESC,\n        bAuthorized,\n        dw_loadts as _valid_from,\n        lead(dw_loadts) over (partition by LEVENTKEY order by dw_loadts) as _valid_to\n    from\n        filtered\n)\n\nselect * from ranged", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"scd_type_of_event\""}, "model.iginsure.scd_type_of_event_type": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.iginsure.dbo.type_of_event_type"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "scd", "scd_type_of_event_type"], "unique_id": "model.iginsure.scd_type_of_event_type", "raw_code": "-- This file is automatically generated\r\n\r\nwith\r\n\r\ntype_of_event_type as (\r\n    select * from {{ source('dbo', 'type_of_event_type') }}\r\n),\r\n\r\nordered as (\r\n    select\r\n        lTypeofEventKey,\r\n        sTypeofEventCode,\r\n        sTypeofEventDescr,\r\n        sSearchTypeofEventDescr,\r\n        dw_loadts,\r\n        row_number() over (\r\n            partition by\r\n                lTypeofEventKey,\r\n                sTypeofEventCode,\r\n                sTypeofEventDescr,\r\n                sSearchTypeofEventDescr\r\n            order by\r\n                dw_loadts\r\n        ) as dw_extract_order\r\n    from\r\n        type_of_event_type\r\n),\r\n\r\nfiltered as (\r\n    select * from ordered where dw_extract_order = 1\r\n),\r\n\r\nranged as (\r\n    select\r\n        lTypeofEventKey,\r\n        sTypeofEventCode,\r\n        sTypeofEventDescr,\r\n        sSearchTypeofEventDescr,\r\n        dw_loadts as _valid_from,\r\n        lead(dw_loadts) over (partition by lTypeofEventKey order by dw_loadts) as _valid_to\r\n    from\r\n        filtered\r\n)\r\n\r\nselect * from ranged", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "scd\\scd_type_of_event_type.sql", "original_file_path": "models\\scd\\scd_type_of_event_type.sql", "name": "scd_type_of_event_type", "alias": "scd_type_of_event_type", "checksum": {"name": "sha256", "checksum": "c9ef12120c2052ba9ecb11ecaf444ed7621f3feabf65b22e2d12f4a7b943005a"}, "tags": [], "refs": [], "sources": [["dbo", "type_of_event_type"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": "iginsure://models\\scd\\scd.yml", "compiled_path": "target\\compiled\\iginsure\\models\\scd\\scd_type_of_event_type.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "docs": {"show": false}}, "created_at": 1701786801.8239093, "compiled_code": "-- This file is automatically generated\n\nwith\n\ntype_of_event_type as (\n    select * from \"IGI_PROD_DW\".\"dbo\".\"TYPEOFEVENTTPE\"\n),\n\nordered as (\n    select\n        lTypeofEventKey,\n        sTypeofEventCode,\n        sTypeofEventDescr,\n        sSearchTypeofEventDescr,\n        dw_loadts,\n        row_number() over (\n            partition by\n                lTypeofEventKey,\n                sTypeofEventCode,\n                sTypeofEventDescr,\n                sSearchTypeofEventDescr\n            order by\n                dw_loadts\n        ) as dw_extract_order\n    from\n        type_of_event_type\n),\n\nfiltered as (\n    select * from ordered where dw_extract_order = 1\n),\n\nranged as (\n    select\n        lTypeofEventKey,\n        sTypeofEventCode,\n        sTypeofEventDescr,\n        sSearchTypeofEventDescr,\n        dw_loadts as _valid_from,\n        lead(dw_loadts) over (partition by lTypeofEventKey order by dw_loadts) as _valid_to\n    from\n        filtered\n)\n\nselect * from ranged", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"scd_type_of_event_type\""}, "model.iginsure.scd_type_of_fronting": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.iginsure.dbo.type_of_fronting"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["InwardPremium"], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "scd", "scd_type_of_fronting"], "unique_id": "model.iginsure.scd_type_of_fronting", "raw_code": "-- This file is automatically generated\r\n{{\r\n  config(tags=['InwardPremium'])\r\n}}\r\n\r\nwith\r\n\r\ntype_of_fronting as (\r\n    select * from {{ source('dbo', 'type_of_fronting') }}\r\n),\r\n\r\nordered as (\r\n    select\r\n        lFrontingKey,\r\n        sFrontingCode,\t\r\n        sFrontingDescr,\t\r\n        sSearchFrontingDescr,\t\r\n        dw_loadts,\r\n        row_number() over (\r\n            partition by\r\n                lFrontingKey,\r\n                sFrontingCode,\t\r\n                sFrontingDescr,\t\r\n                sSearchFrontingDescr\r\n            order by\r\n                dw_loadts\r\n        ) as dw_extract_order\r\n    from\r\n        type_of_fronting\r\n),\r\n\r\nfiltered as (\r\n    select * from ordered where dw_extract_order = 1\r\n),\r\n\r\nranged as (\r\n    select\r\n        lFrontingKey,\r\n        sFrontingCode,\t\r\n        sFrontingDescr,\t\r\n        sSearchFrontingDescr,\r\n        dw_loadts as _valid_from,\r\n        lead(dw_loadts) over (partition by lFrontingKey order by dw_loadts) as _valid_to\r\n    from\r\n        filtered\r\n)\r\n\r\nselect * from ranged", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "scd\\scd_type_of_fronting.sql", "original_file_path": "models\\scd\\scd_type_of_fronting.sql", "name": "scd_type_of_fronting", "alias": "scd_type_of_fronting", "checksum": {"name": "sha256", "checksum": "7df66a3be418d0632f4018ffcb532900d818eeb9a04339786210ec7b7e9269b8"}, "tags": ["InwardPremium"], "refs": [], "sources": [["dbo", "type_of_fronting"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\scd\\scd_type_of_fronting.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "tags": ["InwardPremium"]}, "created_at": 1701786800.9841895, "compiled_code": "-- This file is automatically generated\n\n\nwith\n\ntype_of_fronting as (\n    select * from \"IGI_PROD_DW\".\"dbo\".\"TypeofFronting\"\n),\n\nordered as (\n    select\n        lFrontingKey,\n        sFrontingCode,\t\n        sFrontingDescr,\t\n        sSearchFrontingDescr,\t\n        dw_loadts,\n        row_number() over (\n            partition by\n                lFrontingKey,\n                sFrontingCode,\t\n                sFrontingDescr,\t\n                sSearchFrontingDescr\n            order by\n                dw_loadts\n        ) as dw_extract_order\n    from\n        type_of_fronting\n),\n\nfiltered as (\n    select * from ordered where dw_extract_order = 1\n),\n\nranged as (\n    select\n        lFrontingKey,\n        sFrontingCode,\t\n        sFrontingDescr,\t\n        sSearchFrontingDescr,\n        dw_loadts as _valid_from,\n        lead(dw_loadts) over (partition by lFrontingKey order by dw_loadts) as _valid_to\n    from\n        filtered\n)\n\nselect * from ranged", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"scd_type_of_fronting\""}, "model.iginsure.scd_type_of_insurance": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.iginsure.dbo.type_of_insurance"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "scd", "scd_type_of_insurance"], "unique_id": "model.iginsure.scd_type_of_insurance", "raw_code": "-- This file is automatically generated\r\n\r\nwith\r\n\r\ntype_of_insurance as (\r\n    select * from {{ source('dbo', 'type_of_insurance') }}\r\n),\r\n\r\nordered as (\r\n    select\r\n        LTYPEOFINSURANCEKEY,\r\n        SCODE,\r\n        STYPEOFINSURANCE,\r\n        STYPEOFINSURANCESEARCH,\r\n        dw_loadts,\r\n        row_number() over (\r\n            partition by\r\n                LTYPEOFINSURANCEKEY,\r\n                SCODE,\r\n                STYPEOFINSURANCE,\r\n                STYPEOFINSURANCESEARCH\r\n            order by\r\n                dw_loadts\r\n        ) as dw_extract_order\r\n    from\r\n        type_of_insurance\r\n),\r\n\r\nfiltered as (\r\n    select * from ordered where dw_extract_order = 1\r\n),\r\n\r\nranged as (\r\n    select\r\n        LTYPEOFINSURANCEKEY,\r\n        SCODE,\r\n        STYPEOFINSURANCE,\r\n        STYPEOFINSURANCESEARCH,\r\n        dw_loadts as _valid_from,\r\n        lead(dw_loadts) over (partition by LTYPEOFINSURANCEKEY order by dw_loadts) as _valid_to\r\n    from\r\n        filtered\r\n)\r\n\r\nselect * from ranged", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "scd\\scd_type_of_insurance.sql", "original_file_path": "models\\scd\\scd_type_of_insurance.sql", "name": "scd_type_of_insurance", "alias": "scd_type_of_insurance", "checksum": {"name": "sha256", "checksum": "09bfb4ba4965786b87af587d6a328873a20d4c8092248cdc12419bf9f6328bf5"}, "tags": [], "refs": [], "sources": [["dbo", "type_of_insurance"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": "iginsure://models\\scd\\scd.yml", "compiled_path": "target\\compiled\\iginsure\\models\\scd\\scd_type_of_insurance.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "docs": {"show": false}}, "created_at": 1701786801.8260608, "compiled_code": "-- This file is automatically generated\n\nwith\n\ntype_of_insurance as (\n    select * from \"IGI_PROD_DW\".\"dbo\".\"TYPEOFINSURANCE\"\n),\n\nordered as (\n    select\n        LTYPEOFINSURANCEKEY,\n        SCODE,\n        STYPEOFINSURANCE,\n        STYPEOFINSURANCESEARCH,\n        dw_loadts,\n        row_number() over (\n            partition by\n                LTYPEOFINSURANCEKEY,\n                SCODE,\n                STYPEOFINSURANCE,\n                STYPEOFINSURANCESEARCH\n            order by\n                dw_loadts\n        ) as dw_extract_order\n    from\n        type_of_insurance\n),\n\nfiltered as (\n    select * from ordered where dw_extract_order = 1\n),\n\nranged as (\n    select\n        LTYPEOFINSURANCEKEY,\n        SCODE,\n        STYPEOFINSURANCE,\n        STYPEOFINSURANCESEARCH,\n        dw_loadts as _valid_from,\n        lead(dw_loadts) over (partition by LTYPEOFINSURANCEKEY order by dw_loadts) as _valid_to\n    from\n        filtered\n)\n\nselect * from ranged", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"scd_type_of_insurance\""}, "model.iginsure.scd_type_of_loss": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.iginsure.dbo.type_of_loss"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "scd", "scd_type_of_loss"], "unique_id": "model.iginsure.scd_type_of_loss", "raw_code": "-- This file is automatically generated\r\n\r\nwith\r\n\r\ntype_of_loss as (\r\n    select * from {{ source('dbo', 'type_of_loss') }}\r\n),\r\n\r\nordered as (\r\n    select\r\n        LTYPEOFLOSSKEY,\r\n        STYPEOFLOSS,\r\n        STYPEOFLOSSSEARCH,\r\n        BPERIL,\r\n        SISOLOSSDUEPERSONAL,\r\n        SISOLOSSDUEPERSONALTEXAS,\r\n        SISOLOSSDUECOMMERCIAL,\r\n        SISOLOSSDUECOMMERCIALTEXAS,\r\n        STRANSITISOLOSSDUEPERSONAL,\r\n        STRANSITLOSSDUEPERSONALTEXAS,\r\n        STRANSITISOLOSSDUECOMMERCIAL,\r\n        STRANSITLOSSDUECOMMERCIALTEXAS,\r\n        dw_loadts,\r\n        row_number() over (\r\n            partition by\r\n                LTYPEOFLOSSKEY,\r\n                STYPEOFLOSS,\r\n                STYPEOFLOSSSEARCH,\r\n                BPERIL,\r\n                SISOLOSSDUEPERSONAL,\r\n                SISOLOSSDUEPERSONALTEXAS,\r\n                SISOLOSSDUECOMMERCIAL,\r\n                SISOLOSSDUECOMMERCIALTEXAS,\r\n                STRANSITISOLOSSDUEPERSONAL,\r\n                STRANSITLOSSDUEPERSONALTEXAS,\r\n                STRANSITISOLOSSDUECOMMERCIAL,\r\n                STRANSITLOSSDUECOMMERCIALTEXAS\r\n            order by\r\n                dw_loadts\r\n        ) as dw_extract_order\r\n    from\r\n        type_of_loss\r\n),\r\n\r\nfiltered as (\r\n    select * from ordered where dw_extract_order = 1\r\n),\r\n\r\nranged as (\r\n    select\r\n        LTYPEOFLOSSKEY,\r\n        STYPEOFLOSS,\r\n        STYPEOFLOSSSEARCH,\r\n        BPERIL,\r\n        SISOLOSSDUEPERSONAL,\r\n        SISOLOSSDUEPERSONALTEXAS,\r\n        SISOLOSSDUECOMMERCIAL,\r\n        SISOLOSSDUECOMMERCIALTEXAS,\r\n        STRANSITISOLOSSDUEPERSONAL,\r\n        STRANSITLOSSDUEPERSONALTEXAS,\r\n        STRANSITISOLOSSDUECOMMERCIAL,\r\n        STRANSITLOSSDUECOMMERCIALTEXAS,\r\n        dw_loadts as _valid_from,\r\n        lead(dw_loadts) over (partition by LTYPEOFLOSSKEY order by dw_loadts) as _valid_to\r\n    from\r\n        filtered\r\n)\r\n\r\nselect * from ranged", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "scd\\scd_type_of_loss.sql", "original_file_path": "models\\scd\\scd_type_of_loss.sql", "name": "scd_type_of_loss", "alias": "scd_type_of_loss", "checksum": {"name": "sha256", "checksum": "c1e1460126315c06058c779e0d0011bb9e0f630e44a5b5ae5caaf0fb786c6db1"}, "tags": [], "refs": [], "sources": [["dbo", "type_of_loss"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": "iginsure://models\\scd\\scd.yml", "compiled_path": "target\\compiled\\iginsure\\models\\scd\\scd_type_of_loss.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "docs": {"show": false}}, "created_at": 1701786801.8270643, "compiled_code": "-- This file is automatically generated\n\nwith\n\ntype_of_loss as (\n    select * from \"IGI_PROD_DW\".\"dbo\".\"TYPEOFLOSS\"\n),\n\nordered as (\n    select\n        LTYPEOFLOSSKEY,\n        STYPEOFLOSS,\n        STYPEOFLOSSSEARCH,\n        BPERIL,\n        SISOLOSSDUEPERSONAL,\n        SISOLOSSDUEPERSONALTEXAS,\n        SISOLOSSDUECOMMERCIAL,\n        SISOLOSSDUECOMMERCIALTEXAS,\n        STRANSITISOLOSSDUEPERSONAL,\n        STRANSITLOSSDUEPERSONALTEXAS,\n        STRANSITISOLOSSDUECOMMERCIAL,\n        STRANSITLOSSDUECOMMERCIALTEXAS,\n        dw_loadts,\n        row_number() over (\n            partition by\n                LTYPEOFLOSSKEY,\n                STYPEOFLOSS,\n                STYPEOFLOSSSEARCH,\n                BPERIL,\n                SISOLOSSDUEPERSONAL,\n                SISOLOSSDUEPERSONALTEXAS,\n                SISOLOSSDUECOMMERCIAL,\n                SISOLOSSDUECOMMERCIALTEXAS,\n                STRANSITISOLOSSDUEPERSONAL,\n                STRANSITLOSSDUEPERSONALTEXAS,\n                STRANSITISOLOSSDUECOMMERCIAL,\n                STRANSITLOSSDUECOMMERCIALTEXAS\n            order by\n                dw_loadts\n        ) as dw_extract_order\n    from\n        type_of_loss\n),\n\nfiltered as (\n    select * from ordered where dw_extract_order = 1\n),\n\nranged as (\n    select\n        LTYPEOFLOSSKEY,\n        STYPEOFLOSS,\n        STYPEOFLOSSSEARCH,\n        BPERIL,\n        SISOLOSSDUEPERSONAL,\n        SISOLOSSDUEPERSONALTEXAS,\n        SISOLOSSDUECOMMERCIAL,\n        SISOLOSSDUECOMMERCIALTEXAS,\n        STRANSITISOLOSSDUEPERSONAL,\n        STRANSITLOSSDUEPERSONALTEXAS,\n        STRANSITISOLOSSDUECOMMERCIAL,\n        STRANSITLOSSDUECOMMERCIALTEXAS,\n        dw_loadts as _valid_from,\n        lead(dw_loadts) over (partition by LTYPEOFLOSSKEY order by dw_loadts) as _valid_to\n    from\n        filtered\n)\n\nselect * from ranged", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"scd_type_of_loss\""}, "model.iginsure.scd_type_of_monetary_amount": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.iginsure.dbo.type_of_monetary_amount"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["InwardPremium"], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "scd", "scd_type_of_monetary_amount"], "unique_id": "model.iginsure.scd_type_of_monetary_amount", "raw_code": "-- This file is automatically generated\r\n{{\r\n  config(tags=['InwardPremium'])\r\n}}\r\n\r\nwith\r\n\r\ntype_of_monetary_amount as (\r\n    select * from {{ source('dbo', 'type_of_monetary_amount') }}\r\n),\r\n\r\nordered as (\r\n    select\r\n        lTypeOfMonetaryAmountKey,\r\n        sCode,\r\n        sTypeOfMonetaryAmount,\r\n        sTypeOfMonetaryAmountSearch,\r\n        nSequenceWithinSection,\r\n        lTypeOfMonetarySectionKey,\r\n        nLPCItemNumber,\r\n        bPostToSummaryValues,\r\n        bGroupForSummaryValues,\r\n        lTypeOfDeductionKey,\r\n        bAvailableForTA,\r\n        bmoneyin,\r\n        bCalculatedUPR,\r\n        bcalculatedDAC,\r\n        lDirectDebitChartOfActKey,\r\n        lDirectCreditChartOfActKey,\r\n        lIndirectDebitChartOfActkey,\r\n        lIndirectCreditChartOfActkey,\r\n        bPipelineApplies,\r\n        lDirectPLCreditChartOfActKey,\r\n        lDirectPLDebitChartOfActKey,\r\n        lIndirectPLCreditChartOfactKey,\r\n        lIndirectPLDebitChartOfactKey,\r\n        bAvailableForManual,\r\n        bGrossValue,\r\n        bNetValue,\r\n        bdeduction,\r\n        nExpectedSign,\r\n        sLongCode2,\r\n        lTypeOfTechnicalCategorykey,\r\n        bAddition,\r\n        bBrokerDeductible,\r\n        bPayaway,\r\n        bPassedToInsured,\r\n        bIsAcquisitionCost,\r\n        bDiscount,\r\n        lTypeOfDeductionPayableKey,\r\n        lDeductionApplicableToKey,\r\n        lPassThroughLinkKey,\r\n        bReduceGrossPremium,\r\n        lTypeOfCodeSetKey,\r\n        bAvailableForCash,\r\n        nCashMatchingOrder,\r\n        bAvailableForAllocation,\r\n        bAvailableInAccSub,\r\n        lTypeOfMonetaryAmountGroupKey,\r\n        nMAGroupParentOrder,\r\n        bTaxDefaultExcludeable,\r\n        bPassThroughPremium,\r\n        bTax,\r\n        bDontCreateAPR,\r\n        lTypeOfGrossNetDeductionKey,\r\n        bGrossNetLocked,\r\n        bInwardsDeduction,\r\n        bOutwardsDeduction,\r\n        bIncludeInMatching,\r\n        bDataMigrationOnly,\r\n        bRIAddition,\r\n        bDoNotCede,\r\n        bDoNotCedeOutwardFAC,\r\n        dw_loadts,\r\n        row_number() over (\r\n            partition by\r\n                lTypeOfMonetaryAmountKey,\r\n                sCode,\r\n                sTypeOfMonetaryAmount,\r\n                sTypeOfMonetaryAmountSearch,\r\n                nSequenceWithinSection,\r\n                lTypeOfMonetarySectionKey,\r\n                nLPCItemNumber,\r\n                bPostToSummaryValues,\r\n                bGroupForSummaryValues,\r\n                lTypeOfDeductionKey,\r\n                bAvailableForTA,\r\n                bmoneyin,\r\n                bCalculatedUPR,\r\n                bcalculatedDAC,\r\n                lDirectDebitChartOfActKey,\r\n                lDirectCreditChartOfActKey,\r\n                lIndirectDebitChartOfActkey,\r\n                lIndirectCreditChartOfActkey,\r\n                bPipelineApplies,\r\n                lDirectPLCreditChartOfActKey,\r\n                lDirectPLDebitChartOfActKey,\r\n                lIndirectPLCreditChartOfactKey,\r\n                lIndirectPLDebitChartOfactKey,\r\n                bAvailableForManual,\r\n                bGrossValue,\r\n                bNetValue,\r\n                bdeduction,\r\n                nExpectedSign,\r\n                sLongCode2,\r\n                lTypeOfTechnicalCategorykey,\r\n                bAddition,\r\n                bBrokerDeductible,\r\n                bPayaway,\r\n                bPassedToInsured,\r\n                bIsAcquisitionCost,\r\n                bDiscount,\r\n                lTypeOfDeductionPayableKey,\r\n                lDeductionApplicableToKey,\r\n                lPassThroughLinkKey,\r\n                bReduceGrossPremium,\r\n                lTypeOfCodeSetKey,\r\n                bAvailableForCash,\r\n                nCashMatchingOrder,\r\n                bAvailableForAllocation,\r\n                bAvailableInAccSub,\r\n                lTypeOfMonetaryAmountGroupKey,\r\n                nMAGroupParentOrder,\r\n                bTaxDefaultExcludeable,\r\n                bPassThroughPremium,\r\n                bTax,\r\n                bDontCreateAPR,\r\n                lTypeOfGrossNetDeductionKey,\r\n                bGrossNetLocked,\r\n                bInwardsDeduction,\r\n                bOutwardsDeduction,\r\n                bIncludeInMatching,\r\n                bDataMigrationOnly,\r\n                bRIAddition,\r\n                bDoNotCede,\r\n                bDoNotCedeOutwardFAC\r\n            order by\r\n                dw_loadts\r\n        ) as dw_extract_order\r\n    from\r\n        type_of_monetary_amount\r\n),\r\n\r\nfiltered as (\r\n    select * from ordered where dw_extract_order = 1\r\n),\r\n\r\nranged as (\r\n    select\r\n        lTypeOfMonetaryAmountKey,\r\n        sCode,\r\n        sTypeOfMonetaryAmount,\r\n        sTypeOfMonetaryAmountSearch,\r\n        nSequenceWithinSection,\r\n        lTypeOfMonetarySectionKey,\r\n        nLPCItemNumber,\r\n        bPostToSummaryValues,\r\n        bGroupForSummaryValues,\r\n        lTypeOfDeductionKey,\r\n        bAvailableForTA,\r\n        bmoneyin,\r\n        bCalculatedUPR,\r\n        bcalculatedDAC,\r\n        lDirectDebitChartOfActKey,\r\n        lDirectCreditChartOfActKey,\r\n        lIndirectDebitChartOfActkey,\r\n        lIndirectCreditChartOfActkey,\r\n        bPipelineApplies,\r\n        lDirectPLCreditChartOfActKey,\r\n        lDirectPLDebitChartOfActKey,\r\n        lIndirectPLCreditChartOfactKey,\r\n        lIndirectPLDebitChartOfactKey,\r\n        bAvailableForManual,\r\n        bGrossValue,\r\n        bNetValue,\r\n        bdeduction,\r\n        nExpectedSign,\r\n        sLongCode2,\r\n        lTypeOfTechnicalCategorykey,\r\n        bAddition,\r\n        bBrokerDeductible,\r\n        bPayaway,\r\n        bPassedToInsured,\r\n        bIsAcquisitionCost,\r\n        bDiscount,\r\n        lTypeOfDeductionPayableKey,\r\n        lDeductionApplicableToKey,\r\n        lPassThroughLinkKey,\r\n        bReduceGrossPremium,\r\n        lTypeOfCodeSetKey,\r\n        bAvailableForCash,\r\n        nCashMatchingOrder,\r\n        bAvailableForAllocation,\r\n        bAvailableInAccSub,\r\n        lTypeOfMonetaryAmountGroupKey,\r\n        nMAGroupParentOrder,\r\n        bTaxDefaultExcludeable,\r\n        bPassThroughPremium,\r\n        bTax,\r\n        bDontCreateAPR,\r\n        lTypeOfGrossNetDeductionKey,\r\n        bGrossNetLocked,\r\n        bInwardsDeduction,\r\n        bOutwardsDeduction,\r\n        bIncludeInMatching,\r\n        bDataMigrationOnly,\r\n        bRIAddition,\r\n        bDoNotCede,\r\n        bDoNotCedeOutwardFAC,\r\n        dw_loadts as _valid_from,\r\n        lead(dw_loadts) over (partition by lTypeOfMonetaryAmountKey order by dw_loadts) as _valid_to\r\n    from\r\n        filtered\r\n)\r\n\r\nselect * from ranged", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "scd\\scd_type_of_monetary_amount.sql", "original_file_path": "models\\scd\\scd_type_of_monetary_amount.sql", "name": "scd_type_of_monetary_amount", "alias": "scd_type_of_monetary_amount", "checksum": {"name": "sha256", "checksum": "4588fee099bc0a66f397a167ce48f4478b39199e58505379ad74d57e43e40006"}, "tags": ["InwardPremium"], "refs": [], "sources": [["dbo", "type_of_monetary_amount"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": "iginsure://models\\scd\\scd.yml", "compiled_path": "target\\compiled\\iginsure\\models\\scd\\scd_type_of_monetary_amount.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "docs": {"show": false}, "tags": ["InwardPremium"]}, "created_at": 1701786801.8290598, "compiled_code": "-- This file is automatically generated\n\n\nwith\n\ntype_of_monetary_amount as (\n    select * from \"IGI_PROD_DW\".\"dbo\".\"TypeOfMonetaryAmount\"\n),\n\nordered as (\n    select\n        lTypeOfMonetaryAmountKey,\n        sCode,\n        sTypeOfMonetaryAmount,\n        sTypeOfMonetaryAmountSearch,\n        nSequenceWithinSection,\n        lTypeOfMonetarySectionKey,\n        nLPCItemNumber,\n        bPostToSummaryValues,\n        bGroupForSummaryValues,\n        lTypeOfDeductionKey,\n        bAvailableForTA,\n        bmoneyin,\n        bCalculatedUPR,\n        bcalculatedDAC,\n        lDirectDebitChartOfActKey,\n        lDirectCreditChartOfActKey,\n        lIndirectDebitChartOfActkey,\n        lIndirectCreditChartOfActkey,\n        bPipelineApplies,\n        lDirectPLCreditChartOfActKey,\n        lDirectPLDebitChartOfActKey,\n        lIndirectPLCreditChartOfactKey,\n        lIndirectPLDebitChartOfactKey,\n        bAvailableForManual,\n        bGrossValue,\n        bNetValue,\n        bdeduction,\n        nExpectedSign,\n        sLongCode2,\n        lTypeOfTechnicalCategorykey,\n        bAddition,\n        bBrokerDeductible,\n        bPayaway,\n        bPassedToInsured,\n        bIsAcquisitionCost,\n        bDiscount,\n        lTypeOfDeductionPayableKey,\n        lDeductionApplicableToKey,\n        lPassThroughLinkKey,\n        bReduceGrossPremium,\n        lTypeOfCodeSetKey,\n        bAvailableForCash,\n        nCashMatchingOrder,\n        bAvailableForAllocation,\n        bAvailableInAccSub,\n        lTypeOfMonetaryAmountGroupKey,\n        nMAGroupParentOrder,\n        bTaxDefaultExcludeable,\n        bPassThroughPremium,\n        bTax,\n        bDontCreateAPR,\n        lTypeOfGrossNetDeductionKey,\n        bGrossNetLocked,\n        bInwardsDeduction,\n        bOutwardsDeduction,\n        bIncludeInMatching,\n        bDataMigrationOnly,\n        bRIAddition,\n        bDoNotCede,\n        bDoNotCedeOutwardFAC,\n        dw_loadts,\n        row_number() over (\n            partition by\n                lTypeOfMonetaryAmountKey,\n                sCode,\n                sTypeOfMonetaryAmount,\n                sTypeOfMonetaryAmountSearch,\n                nSequenceWithinSection,\n                lTypeOfMonetarySectionKey,\n                nLPCItemNumber,\n                bPostToSummaryValues,\n                bGroupForSummaryValues,\n                lTypeOfDeductionKey,\n                bAvailableForTA,\n                bmoneyin,\n                bCalculatedUPR,\n                bcalculatedDAC,\n                lDirectDebitChartOfActKey,\n                lDirectCreditChartOfActKey,\n                lIndirectDebitChartOfActkey,\n                lIndirectCreditChartOfActkey,\n                bPipelineApplies,\n                lDirectPLCreditChartOfActKey,\n                lDirectPLDebitChartOfActKey,\n                lIndirectPLCreditChartOfactKey,\n                lIndirectPLDebitChartOfactKey,\n                bAvailableForManual,\n                bGrossValue,\n                bNetValue,\n                bdeduction,\n                nExpectedSign,\n                sLongCode2,\n                lTypeOfTechnicalCategorykey,\n                bAddition,\n                bBrokerDeductible,\n                bPayaway,\n                bPassedToInsured,\n                bIsAcquisitionCost,\n                bDiscount,\n                lTypeOfDeductionPayableKey,\n                lDeductionApplicableToKey,\n                lPassThroughLinkKey,\n                bReduceGrossPremium,\n                lTypeOfCodeSetKey,\n                bAvailableForCash,\n                nCashMatchingOrder,\n                bAvailableForAllocation,\n                bAvailableInAccSub,\n                lTypeOfMonetaryAmountGroupKey,\n                nMAGroupParentOrder,\n                bTaxDefaultExcludeable,\n                bPassThroughPremium,\n                bTax,\n                bDontCreateAPR,\n                lTypeOfGrossNetDeductionKey,\n                bGrossNetLocked,\n                bInwardsDeduction,\n                bOutwardsDeduction,\n                bIncludeInMatching,\n                bDataMigrationOnly,\n                bRIAddition,\n                bDoNotCede,\n                bDoNotCedeOutwardFAC\n            order by\n                dw_loadts\n        ) as dw_extract_order\n    from\n        type_of_monetary_amount\n),\n\nfiltered as (\n    select * from ordered where dw_extract_order = 1\n),\n\nranged as (\n    select\n        lTypeOfMonetaryAmountKey,\n        sCode,\n        sTypeOfMonetaryAmount,\n        sTypeOfMonetaryAmountSearch,\n        nSequenceWithinSection,\n        lTypeOfMonetarySectionKey,\n        nLPCItemNumber,\n        bPostToSummaryValues,\n        bGroupForSummaryValues,\n        lTypeOfDeductionKey,\n        bAvailableForTA,\n        bmoneyin,\n        bCalculatedUPR,\n        bcalculatedDAC,\n        lDirectDebitChartOfActKey,\n        lDirectCreditChartOfActKey,\n        lIndirectDebitChartOfActkey,\n        lIndirectCreditChartOfActkey,\n        bPipelineApplies,\n        lDirectPLCreditChartOfActKey,\n        lDirectPLDebitChartOfActKey,\n        lIndirectPLCreditChartOfactKey,\n        lIndirectPLDebitChartOfactKey,\n        bAvailableForManual,\n        bGrossValue,\n        bNetValue,\n        bdeduction,\n        nExpectedSign,\n        sLongCode2,\n        lTypeOfTechnicalCategorykey,\n        bAddition,\n        bBrokerDeductible,\n        bPayaway,\n        bPassedToInsured,\n        bIsAcquisitionCost,\n        bDiscount,\n        lTypeOfDeductionPayableKey,\n        lDeductionApplicableToKey,\n        lPassThroughLinkKey,\n        bReduceGrossPremium,\n        lTypeOfCodeSetKey,\n        bAvailableForCash,\n        nCashMatchingOrder,\n        bAvailableForAllocation,\n        bAvailableInAccSub,\n        lTypeOfMonetaryAmountGroupKey,\n        nMAGroupParentOrder,\n        bTaxDefaultExcludeable,\n        bPassThroughPremium,\n        bTax,\n        bDontCreateAPR,\n        lTypeOfGrossNetDeductionKey,\n        bGrossNetLocked,\n        bInwardsDeduction,\n        bOutwardsDeduction,\n        bIncludeInMatching,\n        bDataMigrationOnly,\n        bRIAddition,\n        bDoNotCede,\n        bDoNotCedeOutwardFAC,\n        dw_loadts as _valid_from,\n        lead(dw_loadts) over (partition by lTypeOfMonetaryAmountKey order by dw_loadts) as _valid_to\n    from\n        filtered\n)\n\nselect * from ranged", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"scd_type_of_monetary_amount\""}, "model.iginsure.scd_type_of_movement": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.iginsure.dbo.type_of_movement"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "scd", "scd_type_of_movement"], "unique_id": "model.iginsure.scd_type_of_movement", "raw_code": "-- This file is automatically generated\r\n\r\nwith\r\n\r\ntype_of_movement as (\r\n    select * from {{ source('dbo', 'type_of_movement') }}\r\n),\r\n\r\nordered as (\r\n    select\r\n        lTypeOfMovementKey,\r\n        sType,\r\n        sTypeSearch,\r\n        lTypeOfAccountActivityKey,\r\n        lTypeOfPayableReceivableKey,\r\n        lRevTypeOfPayableReceivableKey,\r\n        lTypeOfMonetaryAmountKey,\r\n        lRevTypeofMovementKey,\r\n        bReinsurance,\r\n        lReinstatementTypeofMovementKey,\r\n        bReversal,\r\n        dw_loadts,\r\n        row_number() over (\r\n            partition by\r\n                lTypeOfMovementKey,\r\n                sType,\r\n                sTypeSearch,\r\n                lTypeOfAccountActivityKey,\r\n                lTypeOfPayableReceivableKey,\r\n                lRevTypeOfPayableReceivableKey,\r\n                lTypeOfMonetaryAmountKey,\r\n                lRevTypeofMovementKey,\r\n                bReinsurance,\r\n                lReinstatementTypeofMovementKey,\r\n                bReversal\r\n            order by\r\n                dw_loadts\r\n        ) as dw_extract_order\r\n    from\r\n        type_of_movement\r\n),\r\n\r\nfiltered as (\r\n    select * from ordered where dw_extract_order = 1\r\n),\r\n\r\nranged as (\r\n    select\r\n        lTypeOfMovementKey,\r\n        sType,\r\n        sTypeSearch,\r\n        lTypeOfAccountActivityKey,\r\n        lTypeOfPayableReceivableKey,\r\n        lRevTypeOfPayableReceivableKey,\r\n        lTypeOfMonetaryAmountKey,\r\n        lRevTypeofMovementKey,\r\n        bReinsurance,\r\n        lReinstatementTypeofMovementKey,\r\n        bReversal,\r\n        dw_loadts as _valid_from,\r\n        lead(dw_loadts) over (partition by lTypeOfMovementKey order by dw_loadts) as _valid_to\r\n    from\r\n        filtered\r\n)\r\n\r\nselect * from ranged", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "scd\\scd_type_of_movement.sql", "original_file_path": "models\\scd\\scd_type_of_movement.sql", "name": "scd_type_of_movement", "alias": "scd_type_of_movement", "checksum": {"name": "sha256", "checksum": "5022340711e165e74001679c80738fae3c34a4b7fa877fb7d9633fabaf067971"}, "tags": [], "refs": [], "sources": [["dbo", "type_of_movement"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": "iginsure://models\\scd\\scd.yml", "compiled_path": "target\\compiled\\iginsure\\models\\scd\\scd_type_of_movement.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "docs": {"show": false}}, "created_at": 1701786801.830061, "compiled_code": "-- This file is automatically generated\n\nwith\n\ntype_of_movement as (\n    select * from \"IGI_PROD_DW\".\"dbo\".\"TypeOfMovement\"\n),\n\nordered as (\n    select\n        lTypeOfMovementKey,\n        sType,\n        sTypeSearch,\n        lTypeOfAccountActivityKey,\n        lTypeOfPayableReceivableKey,\n        lRevTypeOfPayableReceivableKey,\n        lTypeOfMonetaryAmountKey,\n        lRevTypeofMovementKey,\n        bReinsurance,\n        lReinstatementTypeofMovementKey,\n        bReversal,\n        dw_loadts,\n        row_number() over (\n            partition by\n                lTypeOfMovementKey,\n                sType,\n                sTypeSearch,\n                lTypeOfAccountActivityKey,\n                lTypeOfPayableReceivableKey,\n                lRevTypeOfPayableReceivableKey,\n                lTypeOfMonetaryAmountKey,\n                lRevTypeofMovementKey,\n                bReinsurance,\n                lReinstatementTypeofMovementKey,\n                bReversal\n            order by\n                dw_loadts\n        ) as dw_extract_order\n    from\n        type_of_movement\n),\n\nfiltered as (\n    select * from ordered where dw_extract_order = 1\n),\n\nranged as (\n    select\n        lTypeOfMovementKey,\n        sType,\n        sTypeSearch,\n        lTypeOfAccountActivityKey,\n        lTypeOfPayableReceivableKey,\n        lRevTypeOfPayableReceivableKey,\n        lTypeOfMonetaryAmountKey,\n        lRevTypeofMovementKey,\n        bReinsurance,\n        lReinstatementTypeofMovementKey,\n        bReversal,\n        dw_loadts as _valid_from,\n        lead(dw_loadts) over (partition by lTypeOfMovementKey order by dw_loadts) as _valid_to\n    from\n        filtered\n)\n\nselect * from ranged", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"scd_type_of_movement\""}, "model.iginsure.scd_type_of_placement": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.iginsure.dbo.type_of_placement"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "scd", "scd_type_of_placement"], "unique_id": "model.iginsure.scd_type_of_placement", "raw_code": "-- This file is automatically generated\r\n\r\nwith\r\n\r\ntype_of_placement as (\r\n    select * from {{ source('dbo', 'type_of_placement') }}\r\n),\r\n\r\nordered as (\r\n    select\r\n        lTypeOfPlacementKey,\r\n        sCode,\r\n        sMOP,\r\n        sMOPSearch,\r\n        lTypeOfInsuranceKey,\r\n        sRiskPrefix,\r\n        bProportional,\r\n        dw_loadts,\r\n        row_number() over (\r\n            partition by\r\n                lTypeOfPlacementKey,\r\n                sCode,\r\n                sMOP,\r\n                sMOPSearch,\r\n                lTypeOfInsuranceKey,\r\n                sRiskPrefix,\r\n                bProportional\r\n            order by\r\n                dw_loadts\r\n        ) as dw_extract_order\r\n    from\r\n        type_of_placement\r\n),\r\n\r\nfiltered as (\r\n    select * from ordered where dw_extract_order = 1\r\n),\r\n\r\nranged as (\r\n    select\r\n        lTypeOfPlacementKey,\r\n        sCode,\r\n        sMOP,\r\n        sMOPSearch,\r\n        lTypeOfInsuranceKey,\r\n        sRiskPrefix,\r\n        bProportional,\r\n        dw_loadts as _valid_from,\r\n        lead(dw_loadts) over (partition by lTypeOfPlacementKey order by dw_loadts) as _valid_to\r\n    from\r\n        filtered\r\n)\r\n\r\nselect * from ranged", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "scd\\scd_type_of_placement.sql", "original_file_path": "models\\scd\\scd_type_of_placement.sql", "name": "scd_type_of_placement", "alias": "scd_type_of_placement", "checksum": {"name": "sha256", "checksum": "0086b5946df9a6b8f60ad690a15cb7a7bb421df558b8d63f9ce83a07ead72e3d"}, "tags": [], "refs": [], "sources": [["dbo", "type_of_placement"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": "iginsure://models\\scd\\scd.yml", "compiled_path": "target\\compiled\\iginsure\\models\\scd\\scd_type_of_placement.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "docs": {"show": false}}, "created_at": 1701786801.8310637, "compiled_code": "-- This file is automatically generated\n\nwith\n\ntype_of_placement as (\n    select * from \"IGI_PROD_DW\".\"dbo\".\"TYPEOFPLACEMENT\"\n),\n\nordered as (\n    select\n        lTypeOfPlacementKey,\n        sCode,\n        sMOP,\n        sMOPSearch,\n        lTypeOfInsuranceKey,\n        sRiskPrefix,\n        bProportional,\n        dw_loadts,\n        row_number() over (\n            partition by\n                lTypeOfPlacementKey,\n                sCode,\n                sMOP,\n                sMOPSearch,\n                lTypeOfInsuranceKey,\n                sRiskPrefix,\n                bProportional\n            order by\n                dw_loadts\n        ) as dw_extract_order\n    from\n        type_of_placement\n),\n\nfiltered as (\n    select * from ordered where dw_extract_order = 1\n),\n\nranged as (\n    select\n        lTypeOfPlacementKey,\n        sCode,\n        sMOP,\n        sMOPSearch,\n        lTypeOfInsuranceKey,\n        sRiskPrefix,\n        bProportional,\n        dw_loadts as _valid_from,\n        lead(dw_loadts) over (partition by lTypeOfPlacementKey order by dw_loadts) as _valid_to\n    from\n        filtered\n)\n\nselect * from ranged", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"scd_type_of_placement\""}, "model.iginsure.scd_type_of_policy_activity": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.iginsure.dbo.type_of_policy_activity"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "scd", "scd_type_of_policy_activity"], "unique_id": "model.iginsure.scd_type_of_policy_activity", "raw_code": "with\r\n\r\ntype_of_policy_activity as (\r\n    select * from {{ source('dbo', 'type_of_policy_activity') }}\r\n),\r\n\r\nordered as (\r\n    select\r\n        lTypeOfPolicyActivityKey,\r\n        sActivity,\r\n        sActivitySearch,\r\n        lWriteTypeOfAccountActivityKey,\r\n        lSignTypeOfAccountActivityKey,\r\n        sCode,\r\n        sCode2,\r\n        lTypeofCodeSetKey,\r\n        dw_loadts,\r\n        row_number() over (\r\n            partition by\r\n                lTypeOfPolicyActivityKey,\r\n                sActivity,\r\n                sActivitySearch,\r\n                lWriteTypeOfAccountActivityKey,\r\n                lSignTypeOfAccountActivityKey,\r\n                sCode,\r\n                sCode2,\r\n                lTypeofCodeSetKey\r\n            order by\r\n                dw_loadts\r\n        ) as dw_extract_order\r\n    from\r\n        type_of_policy_activity\r\n),\r\n\r\nfiltered as (\r\n    select * from ordered where dw_extract_order = 1\r\n),\r\n\r\nranged as (\r\n    select\r\n        lTypeOfPolicyActivityKey,\r\n        sActivity,\r\n        sActivitySearch,\r\n        lWriteTypeOfAccountActivityKey,\r\n        lSignTypeOfAccountActivityKey,\r\n        sCode,\r\n        sCode2,\r\n        lTypeofCodeSetKey,\r\n        dw_loadts as _valid_from,\r\n        lead(dw_loadts) over (partition by lTypeOfPolicyActivityKey order by dw_loadts) as _valid_to\r\n    from\r\n        filtered\r\n)\r\n\r\nselect * from ranged", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "scd\\scd_type_of_policy_activity.sql", "original_file_path": "models\\scd\\scd_type_of_policy_activity.sql", "name": "scd_type_of_policy_activity", "alias": "scd_type_of_policy_activity", "checksum": {"name": "sha256", "checksum": "bb5d4de17231baa86669a2c46dd5d659ca4cb98ada75d07eeffdab4741b3d890"}, "tags": [], "refs": [], "sources": [["dbo", "type_of_policy_activity"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\scd\\scd_type_of_policy_activity.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null}, "created_at": 1701786800.9991202, "compiled_code": "with\n\ntype_of_policy_activity as (\n    select * from \"IGI_PROD_DW\".\"dbo\".\"typeofpolicyactivity\"\n),\n\nordered as (\n    select\n        lTypeOfPolicyActivityKey,\n        sActivity,\n        sActivitySearch,\n        lWriteTypeOfAccountActivityKey,\n        lSignTypeOfAccountActivityKey,\n        sCode,\n        sCode2,\n        lTypeofCodeSetKey,\n        dw_loadts,\n        row_number() over (\n            partition by\n                lTypeOfPolicyActivityKey,\n                sActivity,\n                sActivitySearch,\n                lWriteTypeOfAccountActivityKey,\n                lSignTypeOfAccountActivityKey,\n                sCode,\n                sCode2,\n                lTypeofCodeSetKey\n            order by\n                dw_loadts\n        ) as dw_extract_order\n    from\n        type_of_policy_activity\n),\n\nfiltered as (\n    select * from ordered where dw_extract_order = 1\n),\n\nranged as (\n    select\n        lTypeOfPolicyActivityKey,\n        sActivity,\n        sActivitySearch,\n        lWriteTypeOfAccountActivityKey,\n        lSignTypeOfAccountActivityKey,\n        sCode,\n        sCode2,\n        lTypeofCodeSetKey,\n        dw_loadts as _valid_from,\n        lead(dw_loadts) over (partition by lTypeOfPolicyActivityKey order by dw_loadts) as _valid_to\n    from\n        filtered\n)\n\nselect * from ranged", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"scd_type_of_policy_activity\""}, "model.iginsure.scd_type_of_policy_line": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.iginsure.dbo.type_of_policy_line"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "scd", "scd_type_of_policy_line"], "unique_id": "model.iginsure.scd_type_of_policy_line", "raw_code": "with type_of_policy_line as (\r\n\r\n    SELECT * FROM  {{ source('dbo', 'type_of_policy_line') }}\r\n\r\n),\r\n\r\n\r\nordered as (\r\n\r\n    select \r\n\r\n    lTypeofPolicyLineKey,\r\n    sTypeofPolicyLineCode,\r\n    sTypeofPolicyLineDescr,\r\n    sSearchTypeofPolicyLineDescr,\r\n    dw_loadts,\r\n    row_number()OVER(\r\n        partition by\r\n        lTypeofPolicyLineKey,\r\n        sTypeofPolicyLineCode,\r\n        sTypeofPolicyLineDescr,\r\n        sSearchTypeofPolicyLineDescr\r\n        order by\r\n        dw_loadts) AS  dw_extract_order\r\n\r\n    from type_of_policy_line\r\n\r\n\r\n    \r\n    ),\r\n\r\nfiltered as (\r\n    select * from ordered where dw_extract_order = 1\r\n),\r\n\r\n\r\nranged as (\r\n    select\r\n        lTypeofPolicyLineKey,\r\n        sTypeofPolicyLineCode,\r\n        sTypeofPolicyLineDescr,\r\n        sSearchTypeofPolicyLineDescr,\r\n        dw_loadts as _valid_from,\r\n        lead(dw_loadts) over (partition by lTypeofPolicyLineKey order by dw_loadts) as _valid_to\r\n    from\r\n        filtered\r\n)\r\n\r\nselect * from ranged", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "scd\\scd_type_of_policy_line.sql", "original_file_path": "models\\scd\\scd_type_of_policy_line.sql", "name": "scd_type_of_policy_line", "alias": "scd_type_of_policy_line", "checksum": {"name": "sha256", "checksum": "b58acbf9ff4ccba7bfa30c9f78e6648b3993548dea1369e7763f19d17ddff66d"}, "tags": [], "refs": [], "sources": [["dbo", "type_of_policy_line"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\scd\\scd_type_of_policy_line.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null}, "created_at": 1701786801.0025804, "compiled_code": "with type_of_policy_line as (\n\n    SELECT * FROM  \"IGI_PROD_DW\".\"dbo\".\"TYPEOFPOLICYLINE\"\n\n),\n\n\nordered as (\n\n    select \n\n    lTypeofPolicyLineKey,\n    sTypeofPolicyLineCode,\n    sTypeofPolicyLineDescr,\n    sSearchTypeofPolicyLineDescr,\n    dw_loadts,\n    row_number()OVER(\n        partition by\n        lTypeofPolicyLineKey,\n        sTypeofPolicyLineCode,\n        sTypeofPolicyLineDescr,\n        sSearchTypeofPolicyLineDescr\n        order by\n        dw_loadts) AS  dw_extract_order\n\n    from type_of_policy_line\n\n\n    \n    ),\n\nfiltered as (\n    select * from ordered where dw_extract_order = 1\n),\n\n\nranged as (\n    select\n        lTypeofPolicyLineKey,\n        sTypeofPolicyLineCode,\n        sTypeofPolicyLineDescr,\n        sSearchTypeofPolicyLineDescr,\n        dw_loadts as _valid_from,\n        lead(dw_loadts) over (partition by lTypeofPolicyLineKey order by dw_loadts) as _valid_to\n    from\n        filtered\n)\n\nselect * from ranged", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"scd_type_of_policy_line\""}, "model.iginsure.scd_type_of_premium_payment_warranty": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.iginsure.dbo.type_of_premium_payment_warranty"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "scd", "scd_type_of_premium_payment_warranty"], "unique_id": "model.iginsure.scd_type_of_premium_payment_warranty", "raw_code": "-- This file is automatically generated\r\n\r\nwith\r\n\r\ntype_of_premium_payment_warranty as (\r\n    select * from {{ source('dbo', 'type_of_premium_payment_warranty') }}\r\n),\r\n\r\nordered as (\r\n    select\r\n        lTypeofPremiumPaymentWarrantyKey,\r\n        sTypeofPremiumPaymentWarrantyCode,\r\n        sTypeofPremiumPaymentWarrantyDescr,\r\n        sSearchTypeofPremiumPaymentWarrantyDescr,\r\n        dw_loadts,\r\n        row_number() over (\r\n            partition by\r\n                lTypeofPremiumPaymentWarrantyKey,\r\n                sTypeofPremiumPaymentWarrantyCode,\r\n                sTypeofPremiumPaymentWarrantyDescr,\r\n                sSearchTypeofPremiumPaymentWarrantyDescr\r\n            order by\r\n                dw_loadts\r\n        ) as dw_extract_order\r\n    from\r\n        type_of_premium_payment_warranty\r\n),\r\n\r\nfiltered as (\r\n    select * from ordered where dw_extract_order = 1\r\n),\r\n\r\nranged as (\r\n    select\r\n        lTypeofPremiumPaymentWarrantyKey,\r\n        sTypeofPremiumPaymentWarrantyCode,\r\n        sTypeofPremiumPaymentWarrantyDescr,\r\n        sSearchTypeofPremiumPaymentWarrantyDescr,\r\n        dw_loadts as _valid_from,\r\n        lead(dw_loadts) over (partition by lTypeofPremiumPaymentWarrantyKey order by dw_loadts) as _valid_to\r\n    from\r\n        filtered\r\n)\r\n\r\nselect * from ranged", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "scd\\scd_type_of_premium_payment_warranty.sql", "original_file_path": "models\\scd\\scd_type_of_premium_payment_warranty.sql", "name": "scd_type_of_premium_payment_warranty", "alias": "scd_type_of_premium_payment_warranty", "checksum": {"name": "sha256", "checksum": "76819e5f62c3d49d33e23e1221ac45840f1345fc9e002f282f71048aecb54c03"}, "tags": [], "refs": [], "sources": [["dbo", "type_of_premium_payment_warranty"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": "iginsure://models\\scd\\scd.yml", "compiled_path": "target\\compiled\\iginsure\\models\\scd\\scd_type_of_premium_payment_warranty.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "docs": {"show": false}}, "created_at": 1701786801.8320637, "compiled_code": "-- This file is automatically generated\n\nwith\n\ntype_of_premium_payment_warranty as (\n    select * from \"IGI_PROD_DW\".\"dbo\".\"TypeofPremiumPaymentWarranty\"\n),\n\nordered as (\n    select\n        lTypeofPremiumPaymentWarrantyKey,\n        sTypeofPremiumPaymentWarrantyCode,\n        sTypeofPremiumPaymentWarrantyDescr,\n        sSearchTypeofPremiumPaymentWarrantyDescr,\n        dw_loadts,\n        row_number() over (\n            partition by\n                lTypeofPremiumPaymentWarrantyKey,\n                sTypeofPremiumPaymentWarrantyCode,\n                sTypeofPremiumPaymentWarrantyDescr,\n                sSearchTypeofPremiumPaymentWarrantyDescr\n            order by\n                dw_loadts\n        ) as dw_extract_order\n    from\n        type_of_premium_payment_warranty\n),\n\nfiltered as (\n    select * from ordered where dw_extract_order = 1\n),\n\nranged as (\n    select\n        lTypeofPremiumPaymentWarrantyKey,\n        sTypeofPremiumPaymentWarrantyCode,\n        sTypeofPremiumPaymentWarrantyDescr,\n        sSearchTypeofPremiumPaymentWarrantyDescr,\n        dw_loadts as _valid_from,\n        lead(dw_loadts) over (partition by lTypeofPremiumPaymentWarrantyKey order by dw_loadts) as _valid_to\n    from\n        filtered\n)\n\nselect * from ranged", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"scd_type_of_premium_payment_warranty\""}, "model.iginsure.scd_type_of_pricing": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.iginsure.dbo.type_of_pricing"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "scd", "scd_type_of_pricing"], "unique_id": "model.iginsure.scd_type_of_pricing", "raw_code": "with\r\n\r\ntype_of_pricing as (\r\n    select * from {{ source('dbo', 'type_of_pricing') }}\r\n),\r\n\r\nordered as (\r\n    select\r\n       lTypeOfPricingKey,\r\n       sCode,\r\n       sPricingType,\r\n       sPricingTypeSearch,\r\n       dw_loadts,\r\n        row_number() over (\r\n            partition by\r\n            lTypeOfPricingKey,\r\n            sCode,\r\n            sPricingType,\r\n            sPricingTypeSearch\r\n            order by\r\n                dw_loadts\r\n        ) as dw_extract_order\r\n    from\r\n        type_of_pricing\r\n),\r\n\r\nfiltered as (\r\n    select * from ordered where dw_extract_order = 1\r\n),\r\n\r\nranged as (\r\n    select\r\n       lTypeOfPricingKey,\r\n       sCode,\r\n       sPricingType,\r\n       sPricingTypeSearch,\r\n        dw_loadts as _valid_from,\r\n        lead(dw_loadts) over (partition by lTypeOfPricingKey,sCode,sPricingType,sPricingTypeSearch order by dw_loadts) as _valid_to\r\n    from\r\n        filtered\r\n)\r\n\r\nselect * from ranged", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "scd\\scd_type_of_pricing.sql", "original_file_path": "models\\scd\\scd_type_of_pricing.sql", "name": "scd_type_of_pricing", "alias": "scd_type_of_pricing", "checksum": {"name": "sha256", "checksum": "7bf8b10e836cd0eafbd48a7f924bb705b293b1df58288c849a64d8f4d681d47b"}, "tags": [], "refs": [], "sources": [["dbo", "type_of_pricing"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\scd\\scd_type_of_pricing.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null}, "created_at": 1701786801.0085726, "compiled_code": "with\n\ntype_of_pricing as (\n    select * from \"IGI_PROD_DW\".\"dbo\".\"TypeOfPricing\"\n),\n\nordered as (\n    select\n       lTypeOfPricingKey,\n       sCode,\n       sPricingType,\n       sPricingTypeSearch,\n       dw_loadts,\n        row_number() over (\n            partition by\n            lTypeOfPricingKey,\n            sCode,\n            sPricingType,\n            sPricingTypeSearch\n            order by\n                dw_loadts\n        ) as dw_extract_order\n    from\n        type_of_pricing\n),\n\nfiltered as (\n    select * from ordered where dw_extract_order = 1\n),\n\nranged as (\n    select\n       lTypeOfPricingKey,\n       sCode,\n       sPricingType,\n       sPricingTypeSearch,\n        dw_loadts as _valid_from,\n        lead(dw_loadts) over (partition by lTypeOfPricingKey,sCode,sPricingType,sPricingTypeSearch order by dw_loadts) as _valid_to\n    from\n        filtered\n)\n\nselect * from ranged", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"scd_type_of_pricing\""}, "model.iginsure.scd_type_of_pricing_time": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.iginsure.dbo.type_of_pricing_time"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "scd", "scd_type_of_pricing_time"], "unique_id": "model.iginsure.scd_type_of_pricing_time", "raw_code": "with\r\n\r\ntype_of_pricing_time as (\r\n    select * from {{ source('dbo', 'type_of_pricing_time') }}\r\n),\r\n\r\nordered as (\r\n    select\r\n        lTypeOfPricingTimeKey,\r\n        sCode,\r\n        sPricingTime,\r\n        sPricingTimeSearch,\r\n        dw_loadts,\r\n        row_number() over (\r\n            partition by\r\n           lTypeOfPricingTimeKey,\r\n           sCode,\r\n           sPricingTime,\r\n           sPricingTimeSearch\r\n            order by\r\n                dw_loadts\r\n        ) as dw_extract_order\r\n    from\r\n        type_of_pricing_time\r\n),\r\n\r\nfiltered as (\r\n    select * from ordered where dw_extract_order = 1\r\n),\r\n\r\nranged as (\r\n    select\r\n        lTypeOfPricingTimeKey,\r\n        sCode,\r\n        sPricingTime,\r\n        sPricingTimeSearch,\r\n        dw_loadts as _valid_from,\r\n        lead(dw_loadts) over (partition by lTypeOfPricingTimeKey,sCode,sPricingTime,sPricingTimeSearch order by dw_loadts) as _valid_to\r\n    from\r\n        filtered\r\n)\r\n\r\nselect * from ranged", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "scd\\scd_type_of_pricing_time.sql", "original_file_path": "models\\scd\\scd_type_of_pricing_time.sql", "name": "scd_type_of_pricing_time", "alias": "scd_type_of_pricing_time", "checksum": {"name": "sha256", "checksum": "edc456e267b4a0ad6ab49ac89cfb05b087cb3a63c2e939d043431cd52603bbf4"}, "tags": [], "refs": [], "sources": [["dbo", "type_of_pricing_time"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\scd\\scd_type_of_pricing_time.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null}, "created_at": 1701786801.010573, "compiled_code": "with\n\ntype_of_pricing_time as (\n    select * from \"IGI_PROD_DW\".\"dbo\".\"TypeOfPricingTime\"\n),\n\nordered as (\n    select\n        lTypeOfPricingTimeKey,\n        sCode,\n        sPricingTime,\n        sPricingTimeSearch,\n        dw_loadts,\n        row_number() over (\n            partition by\n           lTypeOfPricingTimeKey,\n           sCode,\n           sPricingTime,\n           sPricingTimeSearch\n            order by\n                dw_loadts\n        ) as dw_extract_order\n    from\n        type_of_pricing_time\n),\n\nfiltered as (\n    select * from ordered where dw_extract_order = 1\n),\n\nranged as (\n    select\n        lTypeOfPricingTimeKey,\n        sCode,\n        sPricingTime,\n        sPricingTimeSearch,\n        dw_loadts as _valid_from,\n        lead(dw_loadts) over (partition by lTypeOfPricingTimeKey,sCode,sPricingTime,sPricingTimeSearch order by dw_loadts) as _valid_to\n    from\n        filtered\n)\n\nselect * from ranged", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"scd_type_of_pricing_time\""}, "model.iginsure.scd_type_of_product_group": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.iginsure.dbo.Type_Of_Product_Group"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["InwardPremium"], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "scd", "scd_type_of_product_group"], "unique_id": "model.iginsure.scd_type_of_product_group", "raw_code": "-- This file is automatically generated\r\n{{\r\n  config(tags=['InwardPremium'])\r\n}}\r\n\r\nwith\r\n\r\nType_Of_Product_Group as (\r\n    select * from {{ source('dbo', 'Type_Of_Product_Group') }}\r\n),\r\n\r\nordered as (\r\n    select\r\n        lTypeOfProductGroupKey,\r\n        sCode,\r\n        sProductGroup,\r\n        sProductGroupSearch,\r\n        dw_loadts,\r\n        row_number() over (\r\n            partition by\r\n                lTypeOfProductGroupKey,\r\n                sCode,\r\n                sProductGroup,\r\n                sProductGroupSearch,\r\n                dw_loadts\r\n                \r\n            order by\r\n                dw_loadts\r\n        ) as dw_extract_order\r\n    from\r\n        Type_Of_Product_Group\r\n),\r\n\r\nfiltered as (\r\n    select * from ordered where dw_extract_order = 1\r\n),\r\n\r\nranged as (\r\n    select\r\n        lTypeOfProductGroupKey,\r\n        sCode,\r\n        sProductGroup,\r\n        sProductGroupSearch,\r\n        dw_loadts as _valid_from,\r\n        lead(dw_loadts) over (partition by lTypeOfProductGroupKey order by dw_loadts) as _valid_to\r\n    from\r\n        filtered\r\n)\r\n\r\nselect * from ranged", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "scd\\scd_type_of_product_group.sql", "original_file_path": "models\\scd\\scd_type_of_product_group.sql", "name": "scd_type_of_product_group", "alias": "scd_type_of_product_group", "checksum": {"name": "sha256", "checksum": "c5afbe76df8e2025b52bd7aa2cc7706b6b2f3b9bfc4e7e4206c8be6076ec4fe4"}, "tags": ["InwardPremium"], "refs": [], "sources": [["dbo", "Type_Of_Product_Group"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\scd\\scd_type_of_product_group.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "tags": ["InwardPremium"]}, "created_at": 1701786801.0125728, "compiled_code": "-- This file is automatically generated\n\n\nwith\n\nType_Of_Product_Group as (\n    select * from \"IGI_PROD_DW\".\"dbo\".\"TypeOfProductGroup\"\n),\n\nordered as (\n    select\n        lTypeOfProductGroupKey,\n        sCode,\n        sProductGroup,\n        sProductGroupSearch,\n        dw_loadts,\n        row_number() over (\n            partition by\n                lTypeOfProductGroupKey,\n                sCode,\n                sProductGroup,\n                sProductGroupSearch,\n                dw_loadts\n                \n            order by\n                dw_loadts\n        ) as dw_extract_order\n    from\n        Type_Of_Product_Group\n),\n\nfiltered as (\n    select * from ordered where dw_extract_order = 1\n),\n\nranged as (\n    select\n        lTypeOfProductGroupKey,\n        sCode,\n        sProductGroup,\n        sProductGroupSearch,\n        dw_loadts as _valid_from,\n        lead(dw_loadts) over (partition by lTypeOfProductGroupKey order by dw_loadts) as _valid_to\n    from\n        filtered\n)\n\nselect * from ranged", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"scd_type_of_product_group\""}, "model.iginsure.scd_type_of_profit_centre": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.iginsure.dbo.type_of_profit_centre"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["InwardPremium"], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "scd", "scd_type_of_profit_centre"], "unique_id": "model.iginsure.scd_type_of_profit_centre", "raw_code": "-- This file is automatically generated\r\n{{\r\n  config(tags=['InwardPremium'])\r\n}}\r\n\r\nwith\r\n\r\ntype_of_profit_centre as (\r\n    select * from {{ source('dbo', 'type_of_profit_centre') }}\r\n),\r\n\r\nordered as (\r\n    select\r\n        lTypeOfProfitCentreKey,\r\n        sPCCode,\r\n        sPCName,\r\n        sPCDescription,\r\n        dw_loadts,\r\n        row_number() over (\r\n            partition by\r\n                lTypeOfProfitCentreKey,\r\n                sPCCode,\r\n                sPCName,\r\n                sPCDescription\r\n            order by\r\n                dw_loadts\r\n        ) as dw_extract_order\r\n    from\r\n        type_of_profit_centre\r\n),\r\n\r\nfiltered as (\r\n    select * from ordered where dw_extract_order = 1\r\n),\r\n\r\nranged as (\r\n    select\r\n        lTypeOfProfitCentreKey,\r\n        sPCCode,\r\n        sPCName,\r\n        sPCDescription,\r\n        dw_loadts as _valid_from,\r\n        lead(dw_loadts) over (partition by lTypeOfProfitCentreKey order by dw_loadts) as _valid_to\r\n    from\r\n        filtered\r\n)\r\n\r\nselect * from ranged", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "scd\\scd_type_of_profit_centre.sql", "original_file_path": "models\\scd\\scd_type_of_profit_centre.sql", "name": "scd_type_of_profit_centre", "alias": "scd_type_of_profit_centre", "checksum": {"name": "sha256", "checksum": "9aaede7c9a21e4c5bf84721d3fc3df0452d9c1b03707a245fde906a4a5a84dfa"}, "tags": ["InwardPremium"], "refs": [], "sources": [["dbo", "type_of_profit_centre"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": "iginsure://models\\scd\\scd.yml", "compiled_path": "target\\compiled\\iginsure\\models\\scd\\scd_type_of_profit_centre.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "docs": {"show": false}, "tags": ["InwardPremium"]}, "created_at": 1701786801.8340628, "compiled_code": "-- This file is automatically generated\n\n\nwith\n\ntype_of_profit_centre as (\n    select * from \"IGI_PROD_DW\".\"dbo\".\"TypeOfProfitCentre\"\n),\n\nordered as (\n    select\n        lTypeOfProfitCentreKey,\n        sPCCode,\n        sPCName,\n        sPCDescription,\n        dw_loadts,\n        row_number() over (\n            partition by\n                lTypeOfProfitCentreKey,\n                sPCCode,\n                sPCName,\n                sPCDescription\n            order by\n                dw_loadts\n        ) as dw_extract_order\n    from\n        type_of_profit_centre\n),\n\nfiltered as (\n    select * from ordered where dw_extract_order = 1\n),\n\nranged as (\n    select\n        lTypeOfProfitCentreKey,\n        sPCCode,\n        sPCName,\n        sPCDescription,\n        dw_loadts as _valid_from,\n        lead(dw_loadts) over (partition by lTypeOfProfitCentreKey order by dw_loadts) as _valid_to\n    from\n        filtered\n)\n\nselect * from ranged", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"scd_type_of_profit_centre\""}, "model.iginsure.scd_type_of_rag": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.iginsure.dbo.type_of_rag"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "scd", "scd_type_of_rag"], "unique_id": "model.iginsure.scd_type_of_rag", "raw_code": "-- This file is automatically generated\r\n\r\nwith\r\n\r\ntype_of_rag as (\r\n    select * from {{ source('dbo', 'type_of_rag') }}\r\n),\r\n\r\nordered as (\r\n    select\r\n        lTypeOfRAGKey,\r\n        sTypeofRAGCode,\r\n        sTypeofRAGDescr,\r\n        sSearchTypeofRAGDescr,\r\n        dw_loadts,\r\n        row_number() over (\r\n            partition by\r\n                lTypeOfRAGKey,\r\n                sTypeofRAGCode,\r\n                sTypeofRAGDescr,\r\n                sSearchTypeofRAGDescr\r\n            order by\r\n                dw_loadts\r\n        ) as dw_extract_order\r\n    from\r\n        type_of_rag\r\n),\r\n\r\nfiltered as (\r\n    select * from ordered where dw_extract_order = 1\r\n),\r\n\r\nranged as (\r\n    select\r\n        lTypeOfRAGKey,\r\n        sTypeofRAGCode,\r\n        sTypeofRAGDescr,\r\n        sSearchTypeofRAGDescr,\r\n        dw_loadts as _valid_from,\r\n        lead(dw_loadts) over (partition by lTypeOfRAGKey order by dw_loadts) as _valid_to\r\n    from\r\n        filtered\r\n)\r\n\r\nselect * from ranged", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "scd\\scd_type_of_rag.sql", "original_file_path": "models\\scd\\scd_type_of_rag.sql", "name": "scd_type_of_rag", "alias": "scd_type_of_rag", "checksum": {"name": "sha256", "checksum": "6036cbd5259a4f3bca466d6b224bfc4a0f58ce3ef7257c3481606a74f5a552d8"}, "tags": [], "refs": [], "sources": [["dbo", "type_of_rag"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": "iginsure://models\\scd\\scd.yml", "compiled_path": "target\\compiled\\iginsure\\models\\scd\\scd_type_of_rag.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "docs": {"show": false}}, "created_at": 1701786801.8360817, "compiled_code": "-- This file is automatically generated\n\nwith\n\ntype_of_rag as (\n    select * from \"IGI_PROD_DW\".\"dbo\".\"TypeOfRAG\"\n),\n\nordered as (\n    select\n        lTypeOfRAGKey,\n        sTypeofRAGCode,\n        sTypeofRAGDescr,\n        sSearchTypeofRAGDescr,\n        dw_loadts,\n        row_number() over (\n            partition by\n                lTypeOfRAGKey,\n                sTypeofRAGCode,\n                sTypeofRAGDescr,\n                sSearchTypeofRAGDescr\n            order by\n                dw_loadts\n        ) as dw_extract_order\n    from\n        type_of_rag\n),\n\nfiltered as (\n    select * from ordered where dw_extract_order = 1\n),\n\nranged as (\n    select\n        lTypeOfRAGKey,\n        sTypeofRAGCode,\n        sTypeofRAGDescr,\n        sSearchTypeofRAGDescr,\n        dw_loadts as _valid_from,\n        lead(dw_loadts) over (partition by lTypeOfRAGKey order by dw_loadts) as _valid_to\n    from\n        filtered\n)\n\nselect * from ranged", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"scd_type_of_rag\""}, "model.iginsure.scd_type_of_ri_class": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.iginsure.dbo.type_of_ri_class"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "scd", "scd_type_of_ri_class"], "unique_id": "model.iginsure.scd_type_of_ri_class", "raw_code": "-- This file is automatically generated\r\n\r\nwith\r\n\r\ntype_of_ri_class as (\r\n    select * from {{ source('dbo', 'type_of_ri_class') }}\r\n),\r\n\r\nordered as (\r\n    select\r\n        lTypeofRIClassKey,\r\n\t    sTypeofRIClassCode,\r\n\t    sTypeofRIClassDescr,\r\n\t    sSearchTypeofRIClassDescr,\r\n\t    sRiskPrefix,\r\n\t    lTypeOfRIBasisKey,\r\n\t    lProductKey,\r\n        dw_loadts,\r\n        row_number() over (\r\n            partition by\r\n                lTypeofRIClassKey,\r\n                sTypeofRIClassCode,\r\n                sTypeofRIClassDescr,\r\n                sSearchTypeofRIClassDescr,\r\n                sRiskPrefix,\r\n                lTypeOfRIBasisKey,\r\n                lProductKey\r\n            order by\r\n                dw_loadts\r\n        ) as dw_extract_order\r\n    from\r\n        type_of_ri_class\r\n),\r\n\r\nfiltered as (\r\n    select * from ordered where dw_extract_order = 1\r\n),\r\n\r\nranged as (\r\n    select\r\n        lTypeofRIClassKey,\r\n\t    sTypeofRIClassCode,\r\n\t    sTypeofRIClassDescr,\r\n\t    sSearchTypeofRIClassDescr,\r\n\t    sRiskPrefix,\r\n\t    lTypeOfRIBasisKey,\r\n\t    lProductKey,\r\n        dw_loadts as _valid_from,\r\n        lead(dw_loadts) over (partition by lTypeofRIClassKey order by dw_loadts) as _valid_to\r\n    from\r\n        filtered\r\n)\r\n\r\nselect * from ranged", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "scd\\scd_type_of_ri_class.sql", "original_file_path": "models\\scd\\scd_type_of_ri_class.sql", "name": "scd_type_of_ri_class", "alias": "scd_type_of_ri_class", "checksum": {"name": "sha256", "checksum": "879f7aea517912a21e17a3590ccb05f478a9fd688e916c6ac7e3ea7abf618640"}, "tags": [], "refs": [], "sources": [["dbo", "type_of_ri_class"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\scd\\scd_type_of_ri_class.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null}, "created_at": 1701786801.0206075, "compiled_code": "-- This file is automatically generated\n\nwith\n\ntype_of_ri_class as (\n    select * from \"IGI_PROD_DW\".\"dbo\".\"typeofriclass\"\n),\n\nordered as (\n    select\n        lTypeofRIClassKey,\n\t    sTypeofRIClassCode,\n\t    sTypeofRIClassDescr,\n\t    sSearchTypeofRIClassDescr,\n\t    sRiskPrefix,\n\t    lTypeOfRIBasisKey,\n\t    lProductKey,\n        dw_loadts,\n        row_number() over (\n            partition by\n                lTypeofRIClassKey,\n                sTypeofRIClassCode,\n                sTypeofRIClassDescr,\n                sSearchTypeofRIClassDescr,\n                sRiskPrefix,\n                lTypeOfRIBasisKey,\n                lProductKey\n            order by\n                dw_loadts\n        ) as dw_extract_order\n    from\n        type_of_ri_class\n),\n\nfiltered as (\n    select * from ordered where dw_extract_order = 1\n),\n\nranged as (\n    select\n        lTypeofRIClassKey,\n\t    sTypeofRIClassCode,\n\t    sTypeofRIClassDescr,\n\t    sSearchTypeofRIClassDescr,\n\t    sRiskPrefix,\n\t    lTypeOfRIBasisKey,\n\t    lProductKey,\n        dw_loadts as _valid_from,\n        lead(dw_loadts) over (partition by lTypeofRIClassKey order by dw_loadts) as _valid_to\n    from\n        filtered\n)\n\nselect * from ranged", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"scd_type_of_ri_class\""}, "model.iginsure.scd_type_of_ri_policy": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.iginsure.dbo.type_of_ri_policy"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "scd", "scd_type_of_ri_policy"], "unique_id": "model.iginsure.scd_type_of_ri_policy", "raw_code": "-- This file is automatically generated\r\n\r\nwith\r\n\r\ntype_of_ri_policy as (\r\n    select * from {{ source('dbo', 'type_of_ri_policy') }}\r\n),\r\n\r\nordered as (\r\n    select\r\n        LTYPEOFRIPOLICYKEY,\r\n        SCODE,\r\n        SPOLICYTYPE,\r\n        SPOLICYTYPESEARCH,\r\n        sRiskPrefix,\r\n        dw_loadts,\r\n        row_number() over (\r\n            partition by\r\n                LTYPEOFRIPOLICYKEY,\r\n                SCODE,\r\n                SPOLICYTYPE,\r\n                SPOLICYTYPESEARCH,\r\n                sRiskPrefix\r\n            order by\r\n                dw_loadts\r\n        ) as dw_extract_order\r\n    from\r\n        type_of_ri_policy\r\n),\r\n\r\nfiltered as (\r\n    select * from ordered where dw_extract_order = 1\r\n),\r\n\r\nranged as (\r\n    select\r\n        LTYPEOFRIPOLICYKEY,\r\n        SCODE,\r\n        SPOLICYTYPE,\r\n        SPOLICYTYPESEARCH,\r\n        sRiskPrefix,\r\n        dw_loadts as _valid_from,\r\n        lead(dw_loadts) over (partition by LTYPEOFRIPOLICYKEY order by dw_loadts) as _valid_to\r\n    from\r\n        filtered\r\n)\r\n\r\nselect * from ranged", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "scd\\scd_type_of_ri_policy.sql", "original_file_path": "models\\scd\\scd_type_of_ri_policy.sql", "name": "scd_type_of_ri_policy", "alias": "scd_type_of_ri_policy", "checksum": {"name": "sha256", "checksum": "9b4192672a23a623d1b9613ec388ea422c81278f94030fc587f068aba5942a25"}, "tags": [], "refs": [], "sources": [["dbo", "type_of_ri_policy"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": "iginsure://models\\scd\\scd.yml", "compiled_path": "target\\compiled\\iginsure\\models\\scd\\scd_type_of_ri_policy.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "docs": {"show": false}}, "created_at": 1701786801.8390603, "compiled_code": "-- This file is automatically generated\n\nwith\n\ntype_of_ri_policy as (\n    select * from \"IGI_PROD_DW\".\"dbo\".\"TypeofRIPolicy\"\n),\n\nordered as (\n    select\n        LTYPEOFRIPOLICYKEY,\n        SCODE,\n        SPOLICYTYPE,\n        SPOLICYTYPESEARCH,\n        sRiskPrefix,\n        dw_loadts,\n        row_number() over (\n            partition by\n                LTYPEOFRIPOLICYKEY,\n                SCODE,\n                SPOLICYTYPE,\n                SPOLICYTYPESEARCH,\n                sRiskPrefix\n            order by\n                dw_loadts\n        ) as dw_extract_order\n    from\n        type_of_ri_policy\n),\n\nfiltered as (\n    select * from ordered where dw_extract_order = 1\n),\n\nranged as (\n    select\n        LTYPEOFRIPOLICYKEY,\n        SCODE,\n        SPOLICYTYPE,\n        SPOLICYTYPESEARCH,\n        sRiskPrefix,\n        dw_loadts as _valid_from,\n        lead(dw_loadts) over (partition by LTYPEOFRIPOLICYKEY order by dw_loadts) as _valid_to\n    from\n        filtered\n)\n\nselect * from ranged", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"scd_type_of_ri_policy\""}, "model.iginsure.scd_type_of_sub_class": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.iginsure.dbo.type_of_sub_class"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["InwardPremium"], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "scd", "scd_type_of_sub_class"], "unique_id": "model.iginsure.scd_type_of_sub_class", "raw_code": "-- This file is automatically generated\r\n{{\r\n  config(tags=['InwardPremium'])\r\n}}\r\n\r\nwith\r\n\r\ntype_of_sub_class as (\r\n    select * from {{ source('dbo', 'type_of_sub_class') }}\r\n),\r\n\r\nordered as (\r\n    select\r\n        LTYPEOFSUBCLASSKEY,\r\n        SSUBCLASS,\r\n        SSUBCLASSSEARCH,\r\n        sCode,\r\n        sFSACoverage,\r\n        sFSAAccountingClass,\r\n        sFSARiskClass,\r\n        lBlobCoverageSuffixKey,\r\n        lBlobCoverageSummaryKey,\r\n        bIsRCCCode,\r\n        lTypeofCodeSetKey,\r\n        bPeril,\r\n        sControlIndex,\r\n        sCoverageSuffix,\r\n        sCoverageSummary,\r\n        dw_loadts,\r\n        row_number() over (\r\n            partition by\r\n                LTYPEOFSUBCLASSKEY,\r\n                SSUBCLASS,\r\n                SSUBCLASSSEARCH,\r\n                sCode,\r\n                sFSACoverage,\r\n                sFSAAccountingClass,\r\n                sFSARiskClass,\r\n                lBlobCoverageSuffixKey,\r\n                lBlobCoverageSummaryKey,\r\n                bIsRCCCode,\r\n                lTypeofCodeSetKey,\r\n                bPeril,\r\n                sControlIndex,\r\n                sCoverageSuffix,\r\n                sCoverageSummary\r\n            order by\r\n                dw_loadts\r\n        ) as dw_extract_order\r\n    from\r\n        type_of_sub_class\r\n),\r\n\r\nfiltered as (\r\n    select * from ordered where dw_extract_order = 1\r\n),\r\n\r\nranged as (\r\n    select\r\n        LTYPEOFSUBCLASSKEY,\r\n        SSUBCLASS,\r\n        SSUBCLASSSEARCH,\r\n        sCode,\r\n        sFSACoverage,\r\n        sFSAAccountingClass,\r\n        sFSARiskClass,\r\n        lBlobCoverageSuffixKey,\r\n        lBlobCoverageSummaryKey,\r\n        bIsRCCCode,\r\n        lTypeofCodeSetKey,\r\n        bPeril,\r\n        sControlIndex,\r\n        sCoverageSuffix,\r\n        sCoverageSummary,\r\n        dw_loadts as _valid_from,\r\n        lead(dw_loadts) over (partition by LTYPEOFSUBCLASSKEY order by dw_loadts) as _valid_to\r\n    from\r\n        filtered\r\n)\r\n\r\nselect * from ranged", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "scd\\scd_type_of_sub_class.sql", "original_file_path": "models\\scd\\scd_type_of_sub_class.sql", "name": "scd_type_of_sub_class", "alias": "scd_type_of_sub_class", "checksum": {"name": "sha256", "checksum": "ab24faea1df25695f785c5633811c7107b29e994aafa79865fb68de55f09682a"}, "tags": ["InwardPremium"], "refs": [], "sources": [["dbo", "type_of_sub_class"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": "iginsure://models\\scd\\scd.yml", "compiled_path": "target\\compiled\\iginsure\\models\\scd\\scd_type_of_sub_class.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "docs": {"show": false}, "tags": ["InwardPremium"]}, "created_at": 1701786801.8412697, "compiled_code": "-- This file is automatically generated\n\n\nwith\n\ntype_of_sub_class as (\n    select * from \"IGI_PROD_DW\".\"dbo\".\"TYPEOFSUBCLASS\"\n),\n\nordered as (\n    select\n        LTYPEOFSUBCLASSKEY,\n        SSUBCLASS,\n        SSUBCLASSSEARCH,\n        sCode,\n        sFSACoverage,\n        sFSAAccountingClass,\n        sFSARiskClass,\n        lBlobCoverageSuffixKey,\n        lBlobCoverageSummaryKey,\n        bIsRCCCode,\n        lTypeofCodeSetKey,\n        bPeril,\n        sControlIndex,\n        sCoverageSuffix,\n        sCoverageSummary,\n        dw_loadts,\n        row_number() over (\n            partition by\n                LTYPEOFSUBCLASSKEY,\n                SSUBCLASS,\n                SSUBCLASSSEARCH,\n                sCode,\n                sFSACoverage,\n                sFSAAccountingClass,\n                sFSARiskClass,\n                lBlobCoverageSuffixKey,\n                lBlobCoverageSummaryKey,\n                bIsRCCCode,\n                lTypeofCodeSetKey,\n                bPeril,\n                sControlIndex,\n                sCoverageSuffix,\n                sCoverageSummary\n            order by\n                dw_loadts\n        ) as dw_extract_order\n    from\n        type_of_sub_class\n),\n\nfiltered as (\n    select * from ordered where dw_extract_order = 1\n),\n\nranged as (\n    select\n        LTYPEOFSUBCLASSKEY,\n        SSUBCLASS,\n        SSUBCLASSSEARCH,\n        sCode,\n        sFSACoverage,\n        sFSAAccountingClass,\n        sFSARiskClass,\n        lBlobCoverageSuffixKey,\n        lBlobCoverageSummaryKey,\n        bIsRCCCode,\n        lTypeofCodeSetKey,\n        bPeril,\n        sControlIndex,\n        sCoverageSuffix,\n        sCoverageSummary,\n        dw_loadts as _valid_from,\n        lead(dw_loadts) over (partition by LTYPEOFSUBCLASSKEY order by dw_loadts) as _valid_to\n    from\n        filtered\n)\n\nselect * from ranged", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"scd_type_of_sub_class\""}, "model.iginsure.scd_type_of_us_classification": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.iginsure.dbo.type_of_us_classification"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["InwardPremium"], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "scd", "scd_type_of_us_classification"], "unique_id": "model.iginsure.scd_type_of_us_classification", "raw_code": "-- This file is automatically generated\r\n{{\r\n  config(tags=['InwardPremium'])\r\n}}\r\n\r\nwith\r\n\r\ntype_of_us_classification as (\r\n    select * from {{ source('dbo', 'type_of_us_classification') }}\r\n),\r\n\r\nordered as (\r\n    select\r\n        lTypeofUSClassificationKey,\r\n        sTypeofUSClassificationCode,\r\n        sTypeofUSClassification,\r\n        sTypeofUSClassificationSearch,\r\n        sLongCode2,\r\n        dw_loadts,\r\n        row_number() over (\r\n            partition by\r\n                lTypeofUSClassificationKey,\r\n                sTypeofUSClassificationCode,\r\n                sTypeofUSClassification,\r\n                sTypeofUSClassificationSearch,\r\n                sLongCode2\r\n            order by\r\n                dw_loadts\r\n        ) as dw_extract_order\r\n    from\r\n        type_of_us_classification\r\n),\r\n\r\nfiltered as (\r\n    select * from ordered where dw_extract_order = 1\r\n),\r\n\r\nranged as (\r\n    select\r\n        lTypeofUSClassificationKey,\r\n        sTypeofUSClassificationCode,\r\n        sTypeofUSClassification,\r\n        sTypeofUSClassificationSearch,\r\n        sLongCode2,\r\n        dw_loadts as _valid_from,\r\n        lead(dw_loadts) over (partition by lTypeofUSClassificationKey order by dw_loadts) as _valid_to\r\n    from\r\n        filtered\r\n)\r\n\r\nselect * from ranged", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "scd\\scd_type_of_us_classification.sql", "original_file_path": "models\\scd\\scd_type_of_us_classification.sql", "name": "scd_type_of_us_classification", "alias": "scd_type_of_us_classification", "checksum": {"name": "sha256", "checksum": "601d90f93b5e3bb75c3de6539b003e8af5d8b9c81bd27b3b0d54368c6f23d520"}, "tags": ["InwardPremium"], "refs": [], "sources": [["dbo", "type_of_us_classification"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": "iginsure://models\\scd\\scd.yml", "compiled_path": "target\\compiled\\iginsure\\models\\scd\\scd_type_of_us_classification.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "docs": {"show": false}, "tags": ["InwardPremium"]}, "created_at": 1701786801.8423052, "compiled_code": "-- This file is automatically generated\n\n\nwith\n\ntype_of_us_classification as (\n    select * from \"IGI_PROD_DW\".\"dbo\".\"TypeofUSClassification\"\n),\n\nordered as (\n    select\n        lTypeofUSClassificationKey,\n        sTypeofUSClassificationCode,\n        sTypeofUSClassification,\n        sTypeofUSClassificationSearch,\n        sLongCode2,\n        dw_loadts,\n        row_number() over (\n            partition by\n                lTypeofUSClassificationKey,\n                sTypeofUSClassificationCode,\n                sTypeofUSClassification,\n                sTypeofUSClassificationSearch,\n                sLongCode2\n            order by\n                dw_loadts\n        ) as dw_extract_order\n    from\n        type_of_us_classification\n),\n\nfiltered as (\n    select * from ordered where dw_extract_order = 1\n),\n\nranged as (\n    select\n        lTypeofUSClassificationKey,\n        sTypeofUSClassificationCode,\n        sTypeofUSClassification,\n        sTypeofUSClassificationSearch,\n        sLongCode2,\n        dw_loadts as _valid_from,\n        lead(dw_loadts) over (partition by lTypeofUSClassificationKey order by dw_loadts) as _valid_to\n    from\n        filtered\n)\n\nselect * from ranged", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"scd_type_of_us_classification\""}, "model.iginsure.scd_version_audit_trail": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.iginsure.dbo.version_audit_trail"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["InwardPremium"], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "scd", "scd_version_audit_trail"], "unique_id": "model.iginsure.scd_version_audit_trail", "raw_code": "-- This file is automatically generated\r\n{{\r\n  config(tags=['InwardPremium'])\r\n}}\r\n\r\nwith\r\n\r\nversion_audit_trail as (\r\n    select * from {{ source('dbo', 'version_audit_trail') }}\r\n),\r\n\r\nordered as (\r\n    select\r\n        LVERSIONAUDITTRAILKEY,\r\n        LENTITYKEY,\r\n        LENTITYINSTANCEKEY,\r\n        DTFROM,\r\n        DTTO,\r\n        LPREVIOUSENTITYINSTANCEKEY,\r\n        dw_loadts,\r\n        row_number() over (\r\n            partition by\r\n                LVERSIONAUDITTRAILKEY,\r\n                LENTITYKEY,\r\n                LENTITYINSTANCEKEY,\r\n                DTFROM,\r\n                DTTO,\r\n                LPREVIOUSENTITYINSTANCEKEY\r\n            order by\r\n                dw_loadts\r\n        ) as dw_extract_order\r\n    from\r\n        version_audit_trail\r\n),\r\n\r\nfiltered as (\r\n    select * from ordered where dw_extract_order = 1\r\n),\r\n\r\nranged as (\r\n    select\r\n        LVERSIONAUDITTRAILKEY,\r\n        LENTITYKEY,\r\n        LENTITYINSTANCEKEY,\r\n        DTFROM,\r\n        DTTO,\r\n        LPREVIOUSENTITYINSTANCEKEY,\r\n        dw_loadts as _valid_from,\r\n        lead(dw_loadts) over (partition by LVERSIONAUDITTRAILKEY order by dw_loadts) as _valid_to\r\n    from\r\n        filtered\r\n)\r\n\r\nselect * from ranged", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "scd\\scd_version_audit_trail.sql", "original_file_path": "models\\scd\\scd_version_audit_trail.sql", "name": "scd_version_audit_trail", "alias": "scd_version_audit_trail", "checksum": {"name": "sha256", "checksum": "9ba84d73e71fae6d8a787fd19bcde4dc43c69314d421aef3270b71492d4f5efe"}, "tags": ["InwardPremium"], "refs": [], "sources": [["dbo", "version_audit_trail"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": "iginsure://models\\scd\\scd.yml", "compiled_path": "target\\compiled\\iginsure\\models\\scd\\scd_version_audit_trail.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "docs": {"show": false}, "tags": ["InwardPremium"]}, "created_at": 1701786801.8433049, "compiled_code": "-- This file is automatically generated\n\n\nwith\n\nversion_audit_trail as (\n    select * from \"IGI_PROD_DW\".\"dbo\".\"versionaudittrail\"\n),\n\nordered as (\n    select\n        LVERSIONAUDITTRAILKEY,\n        LENTITYKEY,\n        LENTITYINSTANCEKEY,\n        DTFROM,\n        DTTO,\n        LPREVIOUSENTITYINSTANCEKEY,\n        dw_loadts,\n        row_number() over (\n            partition by\n                LVERSIONAUDITTRAILKEY,\n                LENTITYKEY,\n                LENTITYINSTANCEKEY,\n                DTFROM,\n                DTTO,\n                LPREVIOUSENTITYINSTANCEKEY\n            order by\n                dw_loadts\n        ) as dw_extract_order\n    from\n        version_audit_trail\n),\n\nfiltered as (\n    select * from ordered where dw_extract_order = 1\n),\n\nranged as (\n    select\n        LVERSIONAUDITTRAILKEY,\n        LENTITYKEY,\n        LENTITYINSTANCEKEY,\n        DTFROM,\n        DTTO,\n        LPREVIOUSENTITYINSTANCEKEY,\n        dw_loadts as _valid_from,\n        lead(dw_loadts) over (partition by LVERSIONAUDITTRAILKEY order by dw_loadts) as _valid_to\n    from\n        filtered\n)\n\nselect * from ranged", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"scd_version_audit_trail\""}, "model.iginsure.scd_zone_country": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.iginsure.dbo.zone_country"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["InwardPremium"], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "scd", "scd_zone_country"], "unique_id": "model.iginsure.scd_zone_country", "raw_code": "-- This file is automatically generated\r\n{{\r\n  config(tags=['InwardPremium'])\r\n}}\r\n\r\nwith\r\n\r\nzone_country as (\r\n    select * from {{ source('dbo', 'zone_country') }}\r\n),\r\n\r\nordered as (\r\n    select\r\n        lCountryKey,\r\n        sCountryCode,\r\n        sCountry,\r\n        sCountrySearch,\r\n        bEUMember,\r\n        sCountryCode2,\r\n        bHasStates,\r\n        bStateRequiredOnAddresses,\r\n        bStateUsedInProductCarrier,\r\n        lTypeOfStateNameKey,\r\n        lTypeofCodeSetKey,\r\n        lTaxDeptContactKey,\r\n        bInEEA,\r\n        LMAJORTERRITORYKEY,\r\n        LTERRITORYKEY,\r\n        LZONESOLVENCYREGIONKEY,\r\n        BTERRITORY,\r\n        lZoneCountryRiskKey,\r\n        lZoneCountryLegalKey,\r\n        bUKLegalCheck,\r\n        bBermudaLegalCheck,\r\n        dw_loadts,\r\n        row_number() over (\r\n            partition by\r\n                lCountryKey,\r\n                sCountryCode,\r\n                sCountry,\r\n                sCountrySearch,\r\n                bEUMember,\r\n                sCountryCode2,\r\n                bHasStates,\r\n                bStateRequiredOnAddresses,\r\n                bStateUsedInProductCarrier,\r\n                lTypeOfStateNameKey,\r\n                lTypeofCodeSetKey,\r\n                lTaxDeptContactKey,\r\n                bInEEA,\r\n                LMAJORTERRITORYKEY,\r\n                LTERRITORYKEY,\r\n                LZONESOLVENCYREGIONKEY,\r\n                BTERRITORY,\r\n                lZoneCountryRiskKey,\r\n                lZoneCountryLegalKey,\r\n                bUKLegalCheck,\r\n                bBermudaLegalCheck\r\n            order by\r\n                dw_loadts\r\n        ) as dw_extract_order\r\n    from\r\n        zone_country\r\n),\r\n\r\nfiltered as (\r\n    select * from ordered where dw_extract_order = 1\r\n),\r\n\r\nranged as (\r\n    select\r\n        lCountryKey,\r\n        sCountryCode,\r\n        sCountry,\r\n        sCountrySearch,\r\n        bEUMember,\r\n        sCountryCode2,\r\n        bHasStates,\r\n        bStateRequiredOnAddresses,\r\n        bStateUsedInProductCarrier,\r\n        lTypeOfStateNameKey,\r\n        lTypeofCodeSetKey,\r\n        lTaxDeptContactKey,\r\n        bInEEA,\r\n        LMAJORTERRITORYKEY,\r\n        LTERRITORYKEY,\r\n        LZONESOLVENCYREGIONKEY,\r\n        BTERRITORY,\r\n        lZoneCountryRiskKey,\r\n        lZoneCountryLegalKey,\r\n        bUKLegalCheck,\r\n        bBermudaLegalCheck,\r\n        dw_loadts as _valid_from,\r\n        lead(dw_loadts) over (partition by lCountryKey order by dw_loadts) as _valid_to\r\n    from\r\n        filtered\r\n)\r\n\r\nselect * from ranged", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "scd\\scd_zone_country.sql", "original_file_path": "models\\scd\\scd_zone_country.sql", "name": "scd_zone_country", "alias": "scd_zone_country", "checksum": {"name": "sha256", "checksum": "baed15d74a65d140344ac17ffc48dc38c01fc847a4321552686e2b1137a6888e"}, "tags": ["InwardPremium"], "refs": [], "sources": [["dbo", "zone_country"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": "iginsure://models\\scd\\scd.yml", "compiled_path": "target\\compiled\\iginsure\\models\\scd\\scd_zone_country.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "docs": {"show": false}, "tags": ["InwardPremium"]}, "created_at": 1701786801.8443048, "compiled_code": "-- This file is automatically generated\n\n\nwith\n\nzone_country as (\n    select * from \"IGI_PROD_DW\".\"dbo\".\"ZoneCountry\"\n),\n\nordered as (\n    select\n        lCountryKey,\n        sCountryCode,\n        sCountry,\n        sCountrySearch,\n        bEUMember,\n        sCountryCode2,\n        bHasStates,\n        bStateRequiredOnAddresses,\n        bStateUsedInProductCarrier,\n        lTypeOfStateNameKey,\n        lTypeofCodeSetKey,\n        lTaxDeptContactKey,\n        bInEEA,\n        LMAJORTERRITORYKEY,\n        LTERRITORYKEY,\n        LZONESOLVENCYREGIONKEY,\n        BTERRITORY,\n        lZoneCountryRiskKey,\n        lZoneCountryLegalKey,\n        bUKLegalCheck,\n        bBermudaLegalCheck,\n        dw_loadts,\n        row_number() over (\n            partition by\n                lCountryKey,\n                sCountryCode,\n                sCountry,\n                sCountrySearch,\n                bEUMember,\n                sCountryCode2,\n                bHasStates,\n                bStateRequiredOnAddresses,\n                bStateUsedInProductCarrier,\n                lTypeOfStateNameKey,\n                lTypeofCodeSetKey,\n                lTaxDeptContactKey,\n                bInEEA,\n                LMAJORTERRITORYKEY,\n                LTERRITORYKEY,\n                LZONESOLVENCYREGIONKEY,\n                BTERRITORY,\n                lZoneCountryRiskKey,\n                lZoneCountryLegalKey,\n                bUKLegalCheck,\n                bBermudaLegalCheck\n            order by\n                dw_loadts\n        ) as dw_extract_order\n    from\n        zone_country\n),\n\nfiltered as (\n    select * from ordered where dw_extract_order = 1\n),\n\nranged as (\n    select\n        lCountryKey,\n        sCountryCode,\n        sCountry,\n        sCountrySearch,\n        bEUMember,\n        sCountryCode2,\n        bHasStates,\n        bStateRequiredOnAddresses,\n        bStateUsedInProductCarrier,\n        lTypeOfStateNameKey,\n        lTypeofCodeSetKey,\n        lTaxDeptContactKey,\n        bInEEA,\n        LMAJORTERRITORYKEY,\n        LTERRITORYKEY,\n        LZONESOLVENCYREGIONKEY,\n        BTERRITORY,\n        lZoneCountryRiskKey,\n        lZoneCountryLegalKey,\n        bUKLegalCheck,\n        bBermudaLegalCheck,\n        dw_loadts as _valid_from,\n        lead(dw_loadts) over (partition by lCountryKey order by dw_loadts) as _valid_to\n    from\n        filtered\n)\n\nselect * from ranged", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"scd_zone_country\""}, "model.iginsure.scd_zone_major_territory": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.iginsure.dbo.ZONE_MAJOR_TERRITORY"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["InwardPremium"], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "scd", "scd_zone_major_territory"], "unique_id": "model.iginsure.scd_zone_major_territory", "raw_code": "-- This file is automatically generated\r\n{{\r\n  config(tags=['InwardPremium'])\r\n}}\r\n\r\nwith\r\n\r\nZONE_MAJOR_TERRITORY as (\r\n    select * from {{ source('dbo', 'ZONE_MAJOR_TERRITORY') }}\r\n),\r\n\r\nordered as (\r\n    select\r\n        LMAJORTERRITORYKEY,\r\n        SMAJORTERRITORYCODE,\r\n        SMAJORTERRITORY,\r\n        SMAJORTERRITORYSEARCH,\r\n        dw_loadts,\r\n        row_number() over (\r\n            partition by\r\n                LMAJORTERRITORYKEY,\r\n                SMAJORTERRITORYCODE,\r\n                SMAJORTERRITORY,\r\n                SMAJORTERRITORYSEARCH,\r\n                dw_loadts\r\n                \r\n            order by\r\n                dw_loadts\r\n        ) as dw_extract_order\r\n    from\r\n        ZONE_MAJOR_TERRITORY\r\n),\r\n\r\nfiltered as (\r\n    select * from ordered where dw_extract_order = 1\r\n),\r\n\r\n\r\nranged as (\r\n    select\r\n        LMAJORTERRITORYKEY,\r\n        SMAJORTERRITORYCODE,\r\n        SMAJORTERRITORY,\r\n        SMAJORTERRITORYSEARCH,\r\n        dw_loadts as _valid_from,\r\n        lead(dw_loadts) over (partition by LMAJORTERRITORYKEY order by dw_loadts) as _valid_to\r\n    from\r\n        filtered\r\n)\r\n\r\nselect * from ranged", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "scd\\scd_zone_major_territory.sql", "original_file_path": "models\\scd\\scd_zone_major_territory.sql", "name": "scd_zone_major_territory", "alias": "scd_zone_major_territory", "checksum": {"name": "sha256", "checksum": "05813c074f42a6687de2743caa85a24867055be2721fc40f6637f275f0f7e69c"}, "tags": ["InwardPremium"], "refs": [], "sources": [["dbo", "ZONE_MAJOR_TERRITORY"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\scd\\scd_zone_major_territory.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "tags": ["InwardPremium"]}, "created_at": 1701786801.032792, "compiled_code": "-- This file is automatically generated\n\n\nwith\n\nZONE_MAJOR_TERRITORY as (\n    select * from \"IGI_PROD_DW\".\"dbo\".\"ZONEMAJORTERRITORY\"\n),\n\nordered as (\n    select\n        LMAJORTERRITORYKEY,\n        SMAJORTERRITORYCODE,\n        SMAJORTERRITORY,\n        SMAJORTERRITORYSEARCH,\n        dw_loadts,\n        row_number() over (\n            partition by\n                LMAJORTERRITORYKEY,\n                SMAJORTERRITORYCODE,\n                SMAJORTERRITORY,\n                SMAJORTERRITORYSEARCH,\n                dw_loadts\n                \n            order by\n                dw_loadts\n        ) as dw_extract_order\n    from\n        ZONE_MAJOR_TERRITORY\n),\n\nfiltered as (\n    select * from ordered where dw_extract_order = 1\n),\n\n\nranged as (\n    select\n        LMAJORTERRITORYKEY,\n        SMAJORTERRITORYCODE,\n        SMAJORTERRITORY,\n        SMAJORTERRITORYSEARCH,\n        dw_loadts as _valid_from,\n        lead(dw_loadts) over (partition by LMAJORTERRITORYKEY order by dw_loadts) as _valid_to\n    from\n        filtered\n)\n\nselect * from ranged", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"scd_zone_major_territory\""}, "model.iginsure.scd_zone_territory": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.iginsure.dbo.zone_territory"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["InwardPremium"], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "scd", "scd_zone_territory"], "unique_id": "model.iginsure.scd_zone_territory", "raw_code": "{{\r\n  config(tags=['InwardPremium'])\r\n}}\r\n\r\n-- This file is automatically generated\r\n\r\nwith\r\n\r\nzone_territory as (\r\n    select * from {{ source('dbo', 'zone_territory') }}\r\n),\r\n\r\nordered as (\r\n    select\r\n        LTERRITORYKEY,\r\n        STERRITORYCODE,\r\n        STERRITORY,\r\n        STERRITORYSEARCH,\r\n        LMAJORTERRITORYKEY,\r\n        lRiskLevelKey,\r\n        dw_loadts,\r\n        row_number() over (\r\n            partition by\r\n                LTERRITORYKEY,\r\n                STERRITORYCODE,\r\n                STERRITORY,\r\n                STERRITORYSEARCH,\r\n                LMAJORTERRITORYKEY,\r\n                lRiskLevelKey\r\n            order by\r\n                dw_loadts\r\n        ) as dw_extract_order\r\n    from\r\n        zone_territory\r\n),\r\n\r\nfiltered as (\r\n    select * from ordered where dw_extract_order = 1\r\n),\r\n\r\nranged as (\r\n    select\r\n        LTERRITORYKEY,\r\n        STERRITORYCODE,\r\n        STERRITORY,\r\n        STERRITORYSEARCH,\r\n        LMAJORTERRITORYKEY,\r\n        lRiskLevelKey,\r\n        dw_loadts as _valid_from,\r\n        lead(dw_loadts) over (partition by LTERRITORYKEY order by dw_loadts) as _valid_to\r\n    from\r\n        filtered\r\n)\r\n\r\nselect * from ranged", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "scd\\scd_zone_territory.sql", "original_file_path": "models\\scd\\scd_zone_territory.sql", "name": "scd_zone_territory", "alias": "scd_zone_territory", "checksum": {"name": "sha256", "checksum": "1e5fa4b27263984aa6af6ada2199611e61ac13bd766524697dfbf29046b1c3c0"}, "tags": ["InwardPremium"], "refs": [], "sources": [["dbo", "zone_territory"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": "iginsure://models\\scd\\scd.yml", "compiled_path": "target\\compiled\\iginsure\\models\\scd\\scd_zone_territory.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "docs": {"show": false}, "tags": ["InwardPremium"]}, "created_at": 1701786801.8463054, "compiled_code": "\n\n-- This file is automatically generated\n\nwith\n\nzone_territory as (\n    select * from \"IGI_PROD_DW\".\"dbo\".\"ZONETERRITORY\"\n),\n\nordered as (\n    select\n        LTERRITORYKEY,\n        STERRITORYCODE,\n        STERRITORY,\n        STERRITORYSEARCH,\n        LMAJORTERRITORYKEY,\n        lRiskLevelKey,\n        dw_loadts,\n        row_number() over (\n            partition by\n                LTERRITORYKEY,\n                STERRITORYCODE,\n                STERRITORY,\n                STERRITORYSEARCH,\n                LMAJORTERRITORYKEY,\n                lRiskLevelKey\n            order by\n                dw_loadts\n        ) as dw_extract_order\n    from\n        zone_territory\n),\n\nfiltered as (\n    select * from ordered where dw_extract_order = 1\n),\n\nranged as (\n    select\n        LTERRITORYKEY,\n        STERRITORYCODE,\n        STERRITORY,\n        STERRITORYSEARCH,\n        LMAJORTERRITORYKEY,\n        lRiskLevelKey,\n        dw_loadts as _valid_from,\n        lead(dw_loadts) over (partition by LTERRITORYKEY order by dw_loadts) as _valid_to\n    from\n        filtered\n)\n\nselect * from ranged", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"scd_zone_territory\""}, "model.iginsure.stg_account_period": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.iginsure.scd_account_period"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["InwardPremium"], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "staging", "stg_account_period"], "unique_id": "model.iginsure.stg_account_period", "raw_code": "{{ config(\r\n    tags=['InwardPremium']\r\n) }}\r\n\r\nwith\r\n\r\naccount_period as (\r\n    select * from {{ ref('scd_account_period') }} where _valid_to is null\r\n),\r\n\r\naccount_period_ranges as (\r\n    select\r\n        \"lAccountPeriodKey\" as account_period_id,\r\n        \"sPeriodName\" as period_name,\r\n        \"dtPeriodStart\" as period_start,\r\n        \"dtPeriodEnd\" as period_end,\r\n        \"nYearPeriod\" as period_year_period,\r\n        \"nYear\" as period_year,\r\n        \"nYearPeriod\"-(\"nYear\"*100) as period_month\r\n    from\r\n        account_period\r\n)\r\n\r\nselect * from account_period_ranges", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "staging\\stg_account_period.sql", "original_file_path": "models\\staging\\stg_account_period.sql", "name": "stg_account_period", "alias": "stg_account_period", "checksum": {"name": "sha256", "checksum": "135503904a993b0df867301f83e4f20f23a0bebf77681a52cef4367ee72b995f"}, "tags": ["InwardPremium"], "refs": [["scd_account_period"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": "iginsure://models\\staging\\staging.yml", "compiled_path": "target\\compiled\\iginsure\\models\\staging\\stg_account_period.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "docs": {"show": false}, "tags": ["InwardPremium"]}, "created_at": 1701786801.9140918, "compiled_code": "\n\nwith\n\naccount_period as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"scd_account_period\" where _valid_to is null\n),\n\naccount_period_ranges as (\n    select\n        \"lAccountPeriodKey\" as account_period_id,\n        \"sPeriodName\" as period_name,\n        \"dtPeriodStart\" as period_start,\n        \"dtPeriodEnd\" as period_end,\n        \"nYearPeriod\" as period_year_period,\n        \"nYear\" as period_year,\n        \"nYearPeriod\"-(\"nYear\"*100) as period_month\n    from\n        account_period\n)\n\nselect * from account_period_ranges", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"stg_account_period\""}, "model.iginsure.stg_account_periods_closing": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.iginsure.stg_account_period", "model.iginsure.scd_audit_state_transitions"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["InwardPremium"], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "index": "HEAP", "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "staging", "stg_account_periods_closing"], "unique_id": "model.iginsure.stg_account_periods_closing", "raw_code": "{{\r\n  config(  \r\n    tags=['InwardPremium'],\r\n    index = 'HEAP'\r\n    )\r\n}}\r\n\r\n\r\nwith account_period as (\r\n\r\n\r\n    select * from {{ ref('stg_account_period') }} \r\n\r\n),\r\n\r\n\r\naudit_state_transitions_full as (\r\n    select \r\n        *\r\n     from \r\n         {{ ref('scd_audit_state_transitions') }} \r\n        \r\n    where LENTITYKEY = 429 \r\n),\r\n\r\naccount_periods as (\r\n\r\n    select distinct ap.period_year_period as account_period,ast.DTTRANSITION as date_closed\r\n    from account_period ap\r\n    inner join audit_state_transitions_full ast on ast.LINSTANCEKEY = ap.account_period_id and ast.LENTITYKEY = 429 \r\n    where ast.LENTITYSTATEMEMBERKEY = 2087 --closed\r\n\r\n)\r\n\r\n\r\nselect * from account_periods", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "staging\\stg_account_periods_closing.sql", "original_file_path": "models\\staging\\stg_account_periods_closing.sql", "name": "stg_account_periods_closing", "alias": "stg_account_periods_closing", "checksum": {"name": "sha256", "checksum": "3e08e68de9afde0237ba365afb2d72b29859ab6c93aa5aa7c80733c938a4910f"}, "tags": ["InwardPremium"], "refs": [["stg_account_period"], ["scd_audit_state_transitions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\staging\\stg_account_periods_closing.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "tags": ["InwardPremium"], "index": "HEAP"}, "created_at": 1701786801.043558, "compiled_code": "\n\n\nwith account_period as (\n\n\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"stg_account_period\" \n\n),\n\n\naudit_state_transitions_full as (\n    select \n        *\n     from \n         \"IGI_PROD_DW\".\"dbt_dev\".\"scd_audit_state_transitions\" \n        \n    where LENTITYKEY = 429 \n),\n\naccount_periods as (\n\n    select distinct ap.period_year_period as account_period,ast.DTTRANSITION as date_closed\n    from account_period ap\n    inner join audit_state_transitions_full ast on ast.LINSTANCEKEY = ap.account_period_id and ast.LENTITYKEY = 429 \n    where ast.LENTITYSTATEMEMBERKEY = 2087 --closed\n\n)\n\n\nselect * from account_periods", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"stg_account_periods_closing\""}, "model.iginsure.stg_activity_audit_state_transitions": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.iginsure.scd_audit_state_transitions"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "staging", "stg_activity_audit_state_transitions"], "unique_id": "model.iginsure.stg_activity_audit_state_transitions", "raw_code": "with activity_audit_state_transitions as (\r\n    select \r\n        *\r\n\r\n    from \r\n        {{ ref('scd_audit_state_transitions') }} \r\n    where \r\n        \"LENTITYKEY\" = 611 -- 'Policy Activity'\r\n        and _valid_to is null\r\n)\r\n\r\nselect * from activity_audit_state_transitions", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "staging\\stg_activity_audit_state_transitions.sql", "original_file_path": "models\\staging\\stg_activity_audit_state_transitions.sql", "name": "stg_activity_audit_state_transitions", "alias": "stg_activity_audit_state_transitions", "checksum": {"name": "sha256", "checksum": "972878ac1c2a52bc4d728313ec21576afcfe7922d4f559afd3bdee992aa8f282"}, "tags": [], "refs": [["scd_audit_state_transitions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": "iginsure://models\\staging\\staging.yml", "compiled_path": "target\\compiled\\iginsure\\models\\staging\\stg_activity_audit_state_transitions.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "docs": {"show": false}}, "created_at": 1701786801.9160914, "compiled_code": "with activity_audit_state_transitions as (\n    select \n        *\n\n    from \n        \"IGI_PROD_DW\".\"dbt_dev\".\"scd_audit_state_transitions\" \n    where \n        \"LENTITYKEY\" = 611 -- 'Policy Activity'\n        and _valid_to is null\n)\n\nselect * from activity_audit_state_transitions", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"stg_activity_audit_state_transitions\""}, "model.iginsure.stg_apr": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.iginsure.scd_apr", "model.iginsure.stg_type_of_monetary_amount", "model.iginsure.scd_currency", "model.iginsure.stg_account_period", "model.iginsure.stg_entity_instance_states", "model.iginsure.scd_entity_matching_journal", "model.iginsure.scd_audit_state_transitions"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["InwardPremium", "claim"], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "staging", "stg_apr"], "unique_id": "model.iginsure.stg_apr", "raw_code": "{{ config(\r\n    tags=['InwardPremium','claim']\r\n) }}\r\n\r\nwith\r\n\r\napr as (\r\n    select * from {{ ref('scd_apr') }} where _valid_to is null\r\n),\r\n\r\nstg_toma as (\r\n    select * from {{ ref('stg_type_of_monetary_amount') }}\r\n),\r\n\r\ncurrency as (\r\n    select * from {{ ref('scd_currency') }} where _valid_to is null\r\n),\r\n\r\nstg_account_period as (\r\n    select * from {{ ref('stg_account_period') }}\r\n),\r\n\r\nstg_entity_instance_states as (\r\n    select * from {{ ref('stg_entity_instance_states') }}\r\n),\r\n\r\nentity_matching_journal as (\r\n    select * from {{ ref('scd_entity_matching_journal') }} where _valid_to is null\r\n),\r\n\r\naudit_state_transitions as (\r\n    select * from {{ ref('scd_audit_state_transitions') }} where _valid_to is null\r\n),\r\n\r\napr_paid_state_date as (\r\n    select \r\n        max(DTTRANSITION) apr_paid_date, \r\n        LINSTANCEKEY \r\n    from \r\n        audit_state_transitions \r\n    where \r\n        LENTITYKEY = 903 \r\n        and LENTITYSTATEMEMBERKEY = 2347   \r\n    group by LINSTANCEKEY\r\n),\r\n\r\napr_allocation_date as (\r\n    SELECT\r\n        lAccountsPayableReceivableKey,\r\n        MIN(dtEffective) AS dtEffective\r\n    FROM\r\n        (\r\n            SELECT\r\n                EMJ.lRightEntityInstanceKey AS lAccountsPayableReceivableKey ,\r\n                MAX(EMJ.dtEffective) AS dtEffective\r\n            FROM\r\n                entity_matching_journal EMJ\r\n            WHERE\r\n                EMJ.lRightEntityKey = 903\r\n                AND EMJ.lLeftEntityKey IN (903, 690)\r\n            GROUP BY\r\n                EMJ.lRightEntityInstanceKey\r\n\r\n            UNION\r\n\r\n            SELECT\r\n                EMJ.lLeftEntityInstanceKey AS lAccountsPayableReceivableKey,\r\n                MAX(EMJ.dtEffective) AS dtEffective\r\n            FROM\r\n                entity_matching_journal EMJ\r\n            WHERE\r\n                EMJ.lLeftEntityKey = 903\r\n                AND EMJ.lRightEntityKey IN (903, 690)\r\n            GROUP BY\r\n                EMJ.lLeftEntityInstanceKey\r\n        ) as inner_a\r\n    GROUP BY\r\n        lAccountsPayableReceivableKey\r\n),\r\n\r\nstg_apr as (\r\n    select\r\n        apr.\"SReference\"  as  apr_reference,\r\n        apr.\"lInstanceKey\" as apr_instance_id,\r\n        apr.\"lParentAPRKey\" as apr_parent_id,\r\n        apr.\"lDependentAPRKey\"as apr_dependent_id,\r\n        entity_instance_states.entity_state as apr_state,\r\n        apr_entity_instance_states.entity_type_id as apr_entity_type_id,\r\n        apr_entity_instance_states.entity_type as apr_entity_type,\r\n        apr_entity_instance_states.entity_state as apr_entity_state,\r\n        apr.\"lSourceInstanceKey\" as source_instance_id,\r\n        source_entity_instance_states.entity_type_id as source_entity_type_id,\r\n        source_entity_instance_states.entity_type as source_entity_type,\r\n        source_entity_instance_states.entity_state as source_entity_state,\r\n        apr.\"lParentInstanceKey\" as parent_instance_id,\r\n        parent_entity_instance_states.entity_type_id as parent_entity_type_id,\r\n        parent_entity_instance_states.entity_type as parent_entity_type,\r\n        parent_entity_instance_states.entity_state as parent_entity_state,\r\n        apr.\"dAmount\" as orig_amount,\r\n        apr.\"dBaseAmount\" as base_amount,\r\n        apr.\"dAllocated\" as allocated_amount,\r\n        apr.\"dUnallocated\" as unallocated_amount,\r\n        apr.\"dROE\" as apr_roe,\r\n        CAST(APR.dUnallocated/APR.dROE AS DECIMAL(18,2)) AS unallocated_base_amount,\r\n        currency.\"sCcy\" as currency,\r\n        stg_toma.type_of_monetary_amount,\r\n        stg_toma.toma_code,\r\n        apr.\"dtDue\" as due,\r\n        apr.\"dtEntry\" as entry_date,\r\n        stg_account_period.period_name,\r\n        stg_account_period.period_year_period,\r\n        stg_account_period.period_year,\r\n        stg_account_period.period_month,\r\n        stg_account_period.period_start,\r\n        stg_account_period.period_end,\r\n\r\n        case\r\n            when cast(apr.dtEntry as date) <= '2019-03-17'\r\n            then apr_allocation_date.dtEffective\r\n            else\r\n                case\r\n                    when entity_instance_states.entity_state = 'Paid'\r\n                    then coalesce(apr_paid_state_date.apr_paid_date, apr_allocation_date.dtEffective)\r\n                end\r\n        end as allocation_date,\r\n\r\n        case\r\n            when apr.dAllocated = apr.dAmount\r\n            then 'Allocated'\r\n            else\r\n                case\r\n                    when apr.dAllocated = 0\r\n                    then 'Unallocated'\r\n                    else\r\n                        case\r\n                            when ABS(apr.dAllocated) < ABS(apr.dAmount)\r\n                            then 'Partially Allocated' \r\n                            else 'Incorrect'\r\n                        end\r\n                end\r\n        end as allocation_status,\r\n\r\n        case\r\n            when apr_entity_instance_states.entity_type = 'Policy Line'\r\n            then 'inward_premium'\r\n\r\n            when apr_entity_instance_states.entity_type = 'Claim Movement'\r\n            then 'inward_claim'\r\n\r\n            when apr.lEntityKey = 742 /* RI Section Broker Security */ and source_entity_instance_states.entity_type = 'Policy Line'\r\n            then 'outward_premium'\r\n\r\n            when apr.lEntityKey = 742 /* RI Section Broker Security */ and source_entity_instance_states.entity_type = 'Claim Movement'\r\n            then 'outward_claim_manual'\r\n\r\n            when apr.lEntityKey = 742 /* RI Section Broker Security */ and source_entity_instance_states.entity_type = 'APR Message Instalment'\r\n            then 'outward_claim_bureau'\r\n\r\n            when apr_entity_instance_states.entity_type = 'RI Claim Movement'\r\n            then 'xol_claim'\r\n\r\n            when apr_entity_instance_states.entity_type = 'RI Section'\r\n            then 'xol_premium'\r\n\r\n            else apr_entity_instance_states.entity_type\r\n        end as apr_type,\r\n\r\n        stg_toma.is_acq_cost,\r\n        stg_toma.is_gross_igi_share,\r\n        is_internal_deductions,\r\n        is_eio,\r\n        is_net_premium_exclude_ipt,\r\n\r\n        case when stg_toma.is_acq_cost = 1 then apr.dAmount else 0 end as acq_cost_org,\r\n        case when stg_toma.is_acq_cost = 1 then apr.dBaseAmount else 0 end as acq_cost_base,\r\n        case when stg_toma.is_gross_igi_share = 1 then apr.dAmount else 0 end as gross_igi_share_org,\r\n        case when stg_toma.is_gross_igi_share = 1 then apr.dBaseAmount else 0 end as gross_igi_share_base,\r\n        case when stg_toma.is_internal_deductions = 1 then apr.dAmount else 0 end as internal_deductions_org,\r\n        case when stg_toma.is_internal_deductions = 1 then apr.dBaseAmount else 0 end as internal_deductions_base,\r\n        case when stg_toma.is_eio = 1 then apr.dAmount else 0 end as eio_org,\r\n        case when stg_toma.is_eio = 1 then apr.dBaseAmount else 0 end as eio_base,\r\n        case when stg_toma.is_net_premium_exclude_ipt = 1 then apr.dAmount else 0 end as net_premium_exclude_ipt_org,\r\n        case when stg_toma.is_net_premium_exclude_ipt = 1 then apr.dBaseAmount else 0 end as net_premium_exclude_ipt_base\r\n\r\n    from\r\n        apr\r\n        inner join stg_toma on\r\n            apr.\"lTypeofMonetaryAmountKey\" = stg_toma.type_of_monetary_amount_id\r\n        inner join currency on\r\n            apr.\"lCurrencyKey\" = currency.\"lCurrencyKey\"\r\n        inner join stg_account_period on\r\n            apr.\"lAccountPeriodKey\" = stg_account_period.account_period_id\r\n        inner join stg_entity_instance_states as entity_instance_states on\r\n            apr.lAccountsPayableReceivableKey = entity_instance_states.instance_id\r\n            and entity_instance_states.entity_type = 'Accounts Payable Receivable'\r\n        left join stg_entity_instance_states as apr_entity_instance_states on\r\n            apr.\"lEntityKey\" = apr_entity_instance_states.entity_type_id\r\n            and apr.\"lInstanceKey\" = apr_entity_instance_states.instance_id\r\n        left join stg_entity_instance_states as source_entity_instance_states on\r\n            apr.\"lSourceEntityKey\" = source_entity_instance_states.entity_type_id\r\n            and apr.\"lSourceInstanceKey\" = source_entity_instance_states.instance_id\r\n        left join stg_entity_instance_states as parent_entity_instance_states on\r\n            apr.\"lParentEntityKey\" = parent_entity_instance_states.entity_type_id\r\n            and apr.\"lParentInstanceKey\" = parent_entity_instance_states.instance_id\r\n        left join apr_allocation_date on \r\n            apr.lAccountsPayableReceivableKey = apr_allocation_date.lAccountsPayableReceivableKey\r\n        left join apr_paid_state_date on\r\n            apr.lAccountsPayableReceivableKey = apr_paid_state_date.LINSTANCEKEY\r\n\r\n)\r\n\r\nselect * from stg_apr", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "staging\\stg_apr.sql", "original_file_path": "models\\staging\\stg_apr.sql", "name": "stg_apr", "alias": "stg_apr", "checksum": {"name": "sha256", "checksum": "74edeb7dc492ec1bd1f32b1b570e07b2821dc9e696b5823ac6a8e75f87deac78"}, "tags": ["InwardPremium", "claim"], "refs": [["scd_apr"], ["stg_type_of_monetary_amount"], ["scd_currency"], ["stg_account_period"], ["stg_entity_instance_states"], ["scd_entity_matching_journal"], ["scd_audit_state_transitions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": "iginsure://models\\staging\\staging.yml", "compiled_path": "target\\compiled\\iginsure\\models\\staging\\stg_apr.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "docs": {"show": false}, "tags": ["InwardPremium", "claim"]}, "created_at": 1701786801.917699, "compiled_code": "\n\nwith\n\napr as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"scd_apr\" where _valid_to is null\n),\n\nstg_toma as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"stg_type_of_monetary_amount\"\n),\n\ncurrency as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"scd_currency\" where _valid_to is null\n),\n\nstg_account_period as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"stg_account_period\"\n),\n\nstg_entity_instance_states as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"stg_entity_instance_states\"\n),\n\nentity_matching_journal as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"scd_entity_matching_journal\" where _valid_to is null\n),\n\naudit_state_transitions as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"scd_audit_state_transitions\" where _valid_to is null\n),\n\napr_paid_state_date as (\n    select \n        max(DTTRANSITION) apr_paid_date, \n        LINSTANCEKEY \n    from \n        audit_state_transitions \n    where \n        LENTITYKEY = 903 \n        and LENTITYSTATEMEMBERKEY = 2347   \n    group by LINSTANCEKEY\n),\n\napr_allocation_date as (\n    SELECT\n        lAccountsPayableReceivableKey,\n        MIN(dtEffective) AS dtEffective\n    FROM\n        (\n            SELECT\n                EMJ.lRightEntityInstanceKey AS lAccountsPayableReceivableKey ,\n                MAX(EMJ.dtEffective) AS dtEffective\n            FROM\n                entity_matching_journal EMJ\n            WHERE\n                EMJ.lRightEntityKey = 903\n                AND EMJ.lLeftEntityKey IN (903, 690)\n            GROUP BY\n                EMJ.lRightEntityInstanceKey\n\n            UNION\n\n            SELECT\n                EMJ.lLeftEntityInstanceKey AS lAccountsPayableReceivableKey,\n                MAX(EMJ.dtEffective) AS dtEffective\n            FROM\n                entity_matching_journal EMJ\n            WHERE\n                EMJ.lLeftEntityKey = 903\n                AND EMJ.lRightEntityKey IN (903, 690)\n            GROUP BY\n                EMJ.lLeftEntityInstanceKey\n        ) as inner_a\n    GROUP BY\n        lAccountsPayableReceivableKey\n),\n\nstg_apr as (\n    select\n        apr.\"SReference\"  as  apr_reference,\n        apr.\"lInstanceKey\" as apr_instance_id,\n        apr.\"lParentAPRKey\" as apr_parent_id,\n        apr.\"lDependentAPRKey\"as apr_dependent_id,\n        entity_instance_states.entity_state as apr_state,\n        apr_entity_instance_states.entity_type_id as apr_entity_type_id,\n        apr_entity_instance_states.entity_type as apr_entity_type,\n        apr_entity_instance_states.entity_state as apr_entity_state,\n        apr.\"lSourceInstanceKey\" as source_instance_id,\n        source_entity_instance_states.entity_type_id as source_entity_type_id,\n        source_entity_instance_states.entity_type as source_entity_type,\n        source_entity_instance_states.entity_state as source_entity_state,\n        apr.\"lParentInstanceKey\" as parent_instance_id,\n        parent_entity_instance_states.entity_type_id as parent_entity_type_id,\n        parent_entity_instance_states.entity_type as parent_entity_type,\n        parent_entity_instance_states.entity_state as parent_entity_state,\n        apr.\"dAmount\" as orig_amount,\n        apr.\"dBaseAmount\" as base_amount,\n        apr.\"dAllocated\" as allocated_amount,\n        apr.\"dUnallocated\" as unallocated_amount,\n        apr.\"dROE\" as apr_roe,\n        CAST(APR.dUnallocated/APR.dROE AS DECIMAL(18,2)) AS unallocated_base_amount,\n        currency.\"sCcy\" as currency,\n        stg_toma.type_of_monetary_amount,\n        stg_toma.toma_code,\n        apr.\"dtDue\" as due,\n        apr.\"dtEntry\" as entry_date,\n        stg_account_period.period_name,\n        stg_account_period.period_year_period,\n        stg_account_period.period_year,\n        stg_account_period.period_month,\n        stg_account_period.period_start,\n        stg_account_period.period_end,\n\n        case\n            when cast(apr.dtEntry as date) <= '2019-03-17'\n            then apr_allocation_date.dtEffective\n            else\n                case\n                    when entity_instance_states.entity_state = 'Paid'\n                    then coalesce(apr_paid_state_date.apr_paid_date, apr_allocation_date.dtEffective)\n                end\n        end as allocation_date,\n\n        case\n            when apr.dAllocated = apr.dAmount\n            then 'Allocated'\n            else\n                case\n                    when apr.dAllocated = 0\n                    then 'Unallocated'\n                    else\n                        case\n                            when ABS(apr.dAllocated) < ABS(apr.dAmount)\n                            then 'Partially Allocated' \n                            else 'Incorrect'\n                        end\n                end\n        end as allocation_status,\n\n        case\n            when apr_entity_instance_states.entity_type = 'Policy Line'\n            then 'inward_premium'\n\n            when apr_entity_instance_states.entity_type = 'Claim Movement'\n            then 'inward_claim'\n\n            when apr.lEntityKey = 742 /* RI Section Broker Security */ and source_entity_instance_states.entity_type = 'Policy Line'\n            then 'outward_premium'\n\n            when apr.lEntityKey = 742 /* RI Section Broker Security */ and source_entity_instance_states.entity_type = 'Claim Movement'\n            then 'outward_claim_manual'\n\n            when apr.lEntityKey = 742 /* RI Section Broker Security */ and source_entity_instance_states.entity_type = 'APR Message Instalment'\n            then 'outward_claim_bureau'\n\n            when apr_entity_instance_states.entity_type = 'RI Claim Movement'\n            then 'xol_claim'\n\n            when apr_entity_instance_states.entity_type = 'RI Section'\n            then 'xol_premium'\n\n            else apr_entity_instance_states.entity_type\n        end as apr_type,\n\n        stg_toma.is_acq_cost,\n        stg_toma.is_gross_igi_share,\n        is_internal_deductions,\n        is_eio,\n        is_net_premium_exclude_ipt,\n\n        case when stg_toma.is_acq_cost = 1 then apr.dAmount else 0 end as acq_cost_org,\n        case when stg_toma.is_acq_cost = 1 then apr.dBaseAmount else 0 end as acq_cost_base,\n        case when stg_toma.is_gross_igi_share = 1 then apr.dAmount else 0 end as gross_igi_share_org,\n        case when stg_toma.is_gross_igi_share = 1 then apr.dBaseAmount else 0 end as gross_igi_share_base,\n        case when stg_toma.is_internal_deductions = 1 then apr.dAmount else 0 end as internal_deductions_org,\n        case when stg_toma.is_internal_deductions = 1 then apr.dBaseAmount else 0 end as internal_deductions_base,\n        case when stg_toma.is_eio = 1 then apr.dAmount else 0 end as eio_org,\n        case when stg_toma.is_eio = 1 then apr.dBaseAmount else 0 end as eio_base,\n        case when stg_toma.is_net_premium_exclude_ipt = 1 then apr.dAmount else 0 end as net_premium_exclude_ipt_org,\n        case when stg_toma.is_net_premium_exclude_ipt = 1 then apr.dBaseAmount else 0 end as net_premium_exclude_ipt_base\n\n    from\n        apr\n        inner join stg_toma on\n            apr.\"lTypeofMonetaryAmountKey\" = stg_toma.type_of_monetary_amount_id\n        inner join currency on\n            apr.\"lCurrencyKey\" = currency.\"lCurrencyKey\"\n        inner join stg_account_period on\n            apr.\"lAccountPeriodKey\" = stg_account_period.account_period_id\n        inner join stg_entity_instance_states as entity_instance_states on\n            apr.lAccountsPayableReceivableKey = entity_instance_states.instance_id\n            and entity_instance_states.entity_type = 'Accounts Payable Receivable'\n        left join stg_entity_instance_states as apr_entity_instance_states on\n            apr.\"lEntityKey\" = apr_entity_instance_states.entity_type_id\n            and apr.\"lInstanceKey\" = apr_entity_instance_states.instance_id\n        left join stg_entity_instance_states as source_entity_instance_states on\n            apr.\"lSourceEntityKey\" = source_entity_instance_states.entity_type_id\n            and apr.\"lSourceInstanceKey\" = source_entity_instance_states.instance_id\n        left join stg_entity_instance_states as parent_entity_instance_states on\n            apr.\"lParentEntityKey\" = parent_entity_instance_states.entity_type_id\n            and apr.\"lParentInstanceKey\" = parent_entity_instance_states.instance_id\n        left join apr_allocation_date on \n            apr.lAccountsPayableReceivableKey = apr_allocation_date.lAccountsPayableReceivableKey\n        left join apr_paid_state_date on\n            apr.lAccountsPayableReceivableKey = apr_paid_state_date.LINSTANCEKEY\n\n)\n\nselect * from stg_apr", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"stg_apr\""}, "model.iginsure.stg_auth_mvmt_pending_financial": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.iginsure.scd_claim_movement", "model.iginsure.scd_account_period", "model.iginsure.stg_current_account_period", "model.iginsure.stg_entity_instance_states", "model.iginsure.stg_apr", "model.iginsure.stg_journal_pairs"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "staging", "stg_auth_mvmt_pending_financial"], "unique_id": "model.iginsure.stg_auth_mvmt_pending_financial", "raw_code": "--{{ config(materialized='table') }}\r\n\r\nwith\r\n\r\nclaim_movement as (\r\n    select * from {{ref('scd_claim_movement') }}\r\n),\r\n\r\naccount_period as (\r\n    select * from {{ref('scd_account_period')}}\r\n),\r\n\r\ncurrent_account_period as (\r\n    select * from {{ref('stg_current_account_period')}}\r\n),\r\n\r\nentity_instance_states as (\r\n    select * from {{ref('stg_entity_instance_states')}}\r\n\twhere entity_type = 'Claim Movement'\r\n), \r\n\r\napr as (\r\n    select * from {{ref('stg_apr')}}\r\n    where apr_type  = 'inward_claim'\r\n),\r\njournal_pair as (\r\n    select * from {{ref('stg_journal_pairs')}}\r\n    where journal_pair_entity_type  = 'Claim Movement'\r\n),\r\n\r\nauth_mvmt_pending_financials as(\r\n    SELECT\r\n\t CM.lClaimMovementKey\r\n\tFROM \r\n\t claim_movement CM \r\n\t INNER JOIN account_period\t\t\tAcc_Period ON CM.lAccountPeriodKey = Acc_Period.lAccountPeriodKey\r\n\t INNER JOIN entity_instance_states\tEISCM ON CM.lClaimMovementKey = EISCM.instance_id\r\n\tWHERE\r\n\t CM.bManualMovement = 0\r\n\t and CM.lTypeOfMovementKey NOT IN(10,21) /*Reserve Amendment,Initial Reserve*/\r\n\t and EISCM.entity_state_id in( 2262,2263) /*Authorized, Paid*/\r\n\t and Acc_Period.nYearPeriod<= (select ap from current_account_period)\r\n\t and NOT EXISTS(SELECT apr_reference FROM apr WHERE apr_instance_id = CM.lClaimMovementKey)\r\n\t and NOT EXISTS(SELECT journal_pair_id FROM journal_pair WHERE journal_pair_instance_id = CM.lClaimMovementKey)\r\n\t and CM.sPaymentReference IS NULL\r\n\r\n)\r\n\r\nselect * from  auth_mvmt_pending_financials", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "staging\\stg_auth_mvmt_pending_financial.sql", "original_file_path": "models\\staging\\stg_auth_mvmt_pending_financial.sql", "name": "stg_auth_mvmt_pending_financial", "alias": "stg_auth_mvmt_pending_financial", "checksum": {"name": "sha256", "checksum": "8af622e4b1e4ff728d576aeb248def6b8892176d02dbc6104eb5449bc0c8921b"}, "tags": [], "refs": [["scd_claim_movement"], ["scd_account_period"], ["stg_current_account_period"], ["stg_entity_instance_states"], ["stg_apr"], ["stg_journal_pairs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\staging\\stg_auth_mvmt_pending_financial.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "materialized": "table"}, "created_at": 1701786801.0509183, "compiled_code": "--\n\nwith\n\nclaim_movement as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"scd_claim_movement\"\n),\n\naccount_period as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"scd_account_period\"\n),\n\ncurrent_account_period as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"stg_current_account_period\"\n),\n\nentity_instance_states as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"stg_entity_instance_states\"\n\twhere entity_type = 'Claim Movement'\n), \n\napr as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"stg_apr\"\n    where apr_type  = 'inward_claim'\n),\njournal_pair as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"stg_journal_pairs\"\n    where journal_pair_entity_type  = 'Claim Movement'\n),\n\nauth_mvmt_pending_financials as(\n    SELECT\n\t CM.lClaimMovementKey\n\tFROM \n\t claim_movement CM \n\t INNER JOIN account_period\t\t\tAcc_Period ON CM.lAccountPeriodKey = Acc_Period.lAccountPeriodKey\n\t INNER JOIN entity_instance_states\tEISCM ON CM.lClaimMovementKey = EISCM.instance_id\n\tWHERE\n\t CM.bManualMovement = 0\n\t and CM.lTypeOfMovementKey NOT IN(10,21) /*Reserve Amendment,Initial Reserve*/\n\t and EISCM.entity_state_id in( 2262,2263) /*Authorized, Paid*/\n\t and Acc_Period.nYearPeriod<= (select ap from current_account_period)\n\t and NOT EXISTS(SELECT apr_reference FROM apr WHERE apr_instance_id = CM.lClaimMovementKey)\n\t and NOT EXISTS(SELECT journal_pair_id FROM journal_pair WHERE journal_pair_instance_id = CM.lClaimMovementKey)\n\t and CM.sPaymentReference IS NULL\n\n)\n\nselect * from  auth_mvmt_pending_financials", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"stg_auth_mvmt_pending_financial\""}, "model.iginsure.stg_broker_group": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.iginsure.stg_contact", "model.iginsure.scd_contact_link"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["InwardPremium"], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "staging", "stg_broker_group"], "unique_id": "model.iginsure.stg_broker_group", "raw_code": "{{ config(\r\n    tags=['InwardPremium']\r\n) }}\r\n\r\nwith\r\n\r\nstg_contact as (\r\n    select * from {{ ref('stg_contact') }}\r\n),\r\n\r\ncontact_link as (\r\n    select * from {{ ref('scd_contact_link') }} where _valid_to is null\r\n),\r\n\r\nbroker_major_group as(\r\n    select\r\n        contact_link.LCONTACTKEY as broker_id,\r\n        contact_link.LLINKTOCONTACTKEY as broker_major_group_id,\r\n        stg_contact.contact_reference as broker_major_group_name\r\n    from\r\n        contact_link \r\n        inner join stg_contact on\r\n            contact_link.LLINKTOCONTACTKEY = stg_contact.contact_id\r\n    where\r\n        contact_link.LLINKKEY = 2 -- Sub Broker of\r\n)\r\n\r\nselect * from broker_major_group", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "staging\\stg_broker_group.sql", "original_file_path": "models\\staging\\stg_broker_group.sql", "name": "stg_broker_group", "alias": "stg_broker_group", "checksum": {"name": "sha256", "checksum": "390d5588c5adefab7d392a5635906f4e3ea4485a44643952254fd2fe0aa9ec1a"}, "tags": ["InwardPremium"], "refs": [["stg_contact"], ["scd_contact_link"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": "iginsure://models\\staging\\staging.yml", "compiled_path": "target\\compiled\\iginsure\\models\\staging\\stg_broker_group.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "docs": {"show": false}, "tags": ["InwardPremium"]}, "created_at": 1701786801.9217076, "compiled_code": "\n\nwith\n\nstg_contact as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"stg_contact\"\n),\n\ncontact_link as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"scd_contact_link\" where _valid_to is null\n),\n\nbroker_major_group as(\n    select\n        contact_link.LCONTACTKEY as broker_id,\n        contact_link.LLINKTOCONTACTKEY as broker_major_group_id,\n        stg_contact.contact_reference as broker_major_group_name\n    from\n        contact_link \n        inner join stg_contact on\n            contact_link.LLINKTOCONTACTKEY = stg_contact.contact_id\n    where\n        contact_link.LLINKKEY = 2 -- Sub Broker of\n)\n\nselect * from broker_major_group", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"stg_broker_group\""}, "model.iginsure.stg_business_plan": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["seed.iginsure.business_plan"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "staging", "stg_business_plan"], "unique_id": "model.iginsure.stg_business_plan", "raw_code": "with business_plan as (\r\n    --seed\r\n    select * from {{ref('business_plan')}}\r\n\r\n),\r\n\r\nbusiness_plan_unpiv as (\r\n    SELECT replace(lower(LoB),' ', '') as LoB,\r\n        replace(lower(Subclass),' ', '') as Subclass,\r\n        CONCAT(replace(lower(LoB),' ', '') ,'_', replace(lower(Subclass),' ', ''),'_',year) AS lob_subclass_year,\r\n        year,\r\n        SUM(GWP) AS GWP,\r\n        SUM(GNWP) AS GNWP,\r\n        SUM(GLR) AS GLR,\r\n        SUM(NRM) AS NRM,\r\n        SUM(Acq_Cost) AS Acq_Cost\r\n        FROM (\r\n        SELECT LoB, \r\n            Subclass, \r\n            type,\r\n            right(type,4) as year,\r\n            case when type like '%gwp%' then value else 0 end as GWP,\r\n            case when type like '%gnwp%' then value else 0 end as GNWP,\r\n            case when type like '%GLR%' then value else 0 end as GLR,\r\n            case when type like '%nrm%' then value else 0 end as NRM,\r\n            case when type like '%Acq%' then value else 0 end as Acq_Cost\r\n\r\n        FROM   \r\n        (SELECT     ltrim(rtrim(LoB)) as LoB,\r\n                    ltrim(rtrim(Subclass)) as Subclass,\r\n                    [BP GWP 2021],\r\n                    [BP GWP 2022],\r\n                    [BP GNWP 2021],\r\n                    [BP GNWP 2022],\r\n                    [BP GLR 2021],\r\n                    [BP GLR 2022],\r\n                    [BP GNLR 2021],\r\n                    [BP GNLR 2022],\r\n                    [BP Acq Costs 2021],\r\n                    [BP Acq Costs 2022],\r\n                    [BP NRM 2021],\r\n                    [BP NRM 2022],\r\n                    [BP Acq Costs % 2021],\r\n                    [BP Acq Costs % 2022]\r\n        FROM business_plan) p  \r\n        UNPIVOT  \r\n        (value FOR type IN ([BP GWP 2021],\r\n                    [BP GWP 2022],\r\n                    [BP GNWP 2021],\r\n                    [BP GNWP 2022],\r\n                    [BP GLR 2021],\r\n                    [BP GLR 2022],\r\n                    [BP GNLR 2021],\r\n                    [BP GNLR 2022],\r\n                    [BP Acq Costs 2021],\r\n                    [BP Acq Costs 2022],\r\n                    [BP NRM 2021],\r\n                    [BP NRM 2022],\r\n                    [BP Acq Costs % 2021],\r\n                    [BP Acq Costs % 2022])  \r\n    )AS unpvt)final\r\n\r\n    GROUP BY LoB,Subclass,year\r\n)\r\n\r\nselect * from business_plan_unpiv", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "staging\\stg_business_plan.sql", "original_file_path": "models\\staging\\stg_business_plan.sql", "name": "stg_business_plan", "alias": "stg_business_plan", "checksum": {"name": "sha256", "checksum": "6801591262bc950cc22a7aaa35b3b57ae6bf92a9af8d5964b65baade003169ef"}, "tags": [], "refs": [["business_plan"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\staging\\stg_business_plan.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null}, "created_at": 1701786801.0591645, "compiled_code": "with business_plan as (\n    --seed\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"business_plan\"\n\n),\n\nbusiness_plan_unpiv as (\n    SELECT replace(lower(LoB),' ', '') as LoB,\n        replace(lower(Subclass),' ', '') as Subclass,\n        CONCAT(replace(lower(LoB),' ', '') ,'_', replace(lower(Subclass),' ', ''),'_',year) AS lob_subclass_year,\n        year,\n        SUM(GWP) AS GWP,\n        SUM(GNWP) AS GNWP,\n        SUM(GLR) AS GLR,\n        SUM(NRM) AS NRM,\n        SUM(Acq_Cost) AS Acq_Cost\n        FROM (\n        SELECT LoB, \n            Subclass, \n            type,\n            right(type,4) as year,\n            case when type like '%gwp%' then value else 0 end as GWP,\n            case when type like '%gnwp%' then value else 0 end as GNWP,\n            case when type like '%GLR%' then value else 0 end as GLR,\n            case when type like '%nrm%' then value else 0 end as NRM,\n            case when type like '%Acq%' then value else 0 end as Acq_Cost\n\n        FROM   \n        (SELECT     ltrim(rtrim(LoB)) as LoB,\n                    ltrim(rtrim(Subclass)) as Subclass,\n                    [BP GWP 2021],\n                    [BP GWP 2022],\n                    [BP GNWP 2021],\n                    [BP GNWP 2022],\n                    [BP GLR 2021],\n                    [BP GLR 2022],\n                    [BP GNLR 2021],\n                    [BP GNLR 2022],\n                    [BP Acq Costs 2021],\n                    [BP Acq Costs 2022],\n                    [BP NRM 2021],\n                    [BP NRM 2022],\n                    [BP Acq Costs % 2021],\n                    [BP Acq Costs % 2022]\n        FROM business_plan) p  \n        UNPIVOT  \n        (value FOR type IN ([BP GWP 2021],\n                    [BP GWP 2022],\n                    [BP GNWP 2021],\n                    [BP GNWP 2022],\n                    [BP GLR 2021],\n                    [BP GLR 2022],\n                    [BP GNLR 2021],\n                    [BP GNLR 2022],\n                    [BP Acq Costs 2021],\n                    [BP Acq Costs 2022],\n                    [BP NRM 2021],\n                    [BP NRM 2022],\n                    [BP Acq Costs % 2021],\n                    [BP Acq Costs % 2022])  \n    )AS unpvt)final\n\n    GROUP BY LoB,Subclass,year\n)\n\nselect * from business_plan_unpiv", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"stg_business_plan\""}, "model.iginsure.stg_cancellation_reason_history": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.iginsure.scd_policy_activity", "model.iginsure.scd_auditheader", "model.iginsure.scd_auditrows", "model.iginsure.scd_auditcolumns", "model.iginsure.stg_account_periods_closing"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "staging", "stg_cancellation_reason_history"], "unique_id": "model.iginsure.stg_cancellation_reason_history", "raw_code": "with policyactivity as (\r\n\r\n     select * from {{ ref('scd_policy_activity') }} where _valid_to is null\r\n\r\n),\r\n\r\nAuditheader as (\r\n    select * from {{ ref('scd_auditheader') }} where _valid_to is null\r\n),\r\n\r\n\r\nAuditrows as (\r\n    select * from {{ ref('scd_auditrows') }} where _valid_to is null\r\n),\r\n\r\nAuditcolumns as (\r\n    select * from {{ ref('scd_auditcolumns') }} where _valid_to is null\r\n),\r\n\r\naccount_period_closing as (\r\n\r\n    select * from {{ref('stg_account_periods_closing')}}\r\n\r\n),\r\n\r\ncancellation_reason_hist  as (\r\n\r\n    select * from(\r\n\r\n    select pa.lpolicyKey,PA.lpolicyactivitykey 'lpolicyactivitykey',DTDATEAMENDED, DOLDVALUE 'lTypeOfCancellationReasonKey',\r\n          LAUDITCOLUMNSKEY 'AuditKey',ROW_NUMBER() over (partition by pa.lpolicyKey,pa.lpolicyactivitykey,DTDATEAMENDED\r\n                                                        ,DOLDVALUE,LAUDITCOLUMNSKEY order by ap.date_closed) as ranked,ap.account_period \r\n                                                        as cancellation_reason_ap\r\n    from policyactivity pa \r\n    inner join [dbo].[AUDITHEADER] AH on AH.LAUDITOBJECTINSTANCEKEY = pa.lPolicyActivityKey and AH.LAUDITOBJECTKEY = 611\r\n    left join [dbo].[AUDITROWS] AR on AR.LAUDITHEADERKEY=AH.LAUDITHEADERKEY and  AH.LAUDITOBJECTKEY = 611\r\n    left join  [dbo].[AUDITCOLUMNS] AC on AC.LAUDITROWSKEY=AR.LAUDITROWSKEY and AR.LAUDITOBJECTKEY = 611\r\n    inner join account_period_closing ap on DTDATEAMENDED  <= ap.date_closed\r\n    where  AH.LAUDITOBJECTKEY = 611 \r\n    and  AR.LAUDITOBJECTKEY = 611 \r\n    and AC.LENTITYPROPERTYKEY = 44874  -- cancellationtype\r\n\r\n    )hist \r\n    \r\n    where ranked = 1\r\n    \r\n    )\r\n\r\nselect * from cancellation_reason_hist", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "staging\\stg_cancellation_reason_history.sql", "original_file_path": "models\\staging\\stg_cancellation_reason_history.sql", "name": "stg_cancellation_reason_history", "alias": "stg_cancellation_reason_history", "checksum": {"name": "sha256", "checksum": "f555f12acab703e0c278ceba03928fd2782cf3ab8462744781e2c66177dbcc0c"}, "tags": [], "refs": [["scd_policy_activity"], ["scd_auditheader"], ["scd_auditrows"], ["scd_auditcolumns"], ["stg_account_periods_closing"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\staging\\stg_cancellation_reason_history.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null}, "created_at": 1701786801.0611513, "compiled_code": "with policyactivity as (\n\n     select * from \"IGI_PROD_DW\".\"dbt_dev\".\"scd_policy_activity\" where _valid_to is null\n\n),\n\nAuditheader as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"scd_auditheader\" where _valid_to is null\n),\n\n\nAuditrows as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"scd_auditrows\" where _valid_to is null\n),\n\nAuditcolumns as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"scd_auditcolumns\" where _valid_to is null\n),\n\naccount_period_closing as (\n\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"stg_account_periods_closing\"\n\n),\n\ncancellation_reason_hist  as (\n\n    select * from(\n\n    select pa.lpolicyKey,PA.lpolicyactivitykey 'lpolicyactivitykey',DTDATEAMENDED, DOLDVALUE 'lTypeOfCancellationReasonKey',\n          LAUDITCOLUMNSKEY 'AuditKey',ROW_NUMBER() over (partition by pa.lpolicyKey,pa.lpolicyactivitykey,DTDATEAMENDED\n                                                        ,DOLDVALUE,LAUDITCOLUMNSKEY order by ap.date_closed) as ranked,ap.account_period \n                                                        as cancellation_reason_ap\n    from policyactivity pa \n    inner join [dbo].[AUDITHEADER] AH on AH.LAUDITOBJECTINSTANCEKEY = pa.lPolicyActivityKey and AH.LAUDITOBJECTKEY = 611\n    left join [dbo].[AUDITROWS] AR on AR.LAUDITHEADERKEY=AH.LAUDITHEADERKEY and  AH.LAUDITOBJECTKEY = 611\n    left join  [dbo].[AUDITCOLUMNS] AC on AC.LAUDITROWSKEY=AR.LAUDITROWSKEY and AR.LAUDITOBJECTKEY = 611\n    inner join account_period_closing ap on DTDATEAMENDED  <= ap.date_closed\n    where  AH.LAUDITOBJECTKEY = 611 \n    and  AR.LAUDITOBJECTKEY = 611 \n    and AC.LENTITYPROPERTYKEY = 44874  -- cancellationtype\n\n    )hist \n    \n    where ranked = 1\n    \n    )\n\nselect * from cancellation_reason_hist", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"stg_cancellation_reason_history\""}, "model.iginsure.stg_claimgroup_linkedclaims": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.iginsure.scd_claimgrouplinkedclaims", "model.iginsure.scd_claim"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["Claim"], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "staging", "stg_claimgroup_linkedclaims"], "unique_id": "model.iginsure.stg_claimgroup_linkedclaims", "raw_code": "{{ config(\r\n    tags=['Claim']\r\n) }}\r\n\r\nwith\r\n\r\nclaimgrouplinkedclaims as (\r\n    select * from {{ ref('scd_claimgrouplinkedclaims') }} where _valid_to is null\r\n),\r\nclaim as (\r\n    select * from {{ ref('scd_claim') }} where _valid_to is null\r\n), \r\n\r\nclaimlinkedclaim as (\r\n    select clc.lclaimkey as parent_claim_id,\r\n    p_c.sclaimreference as parent_claim_reference,\r\n    clc.lLinkedClaimKey as claim_id,\r\n    c_c.sclaimreference as claim_reference\r\n\r\n    from claimgrouplinkedclaims clc \r\n    inner join claim p_c on clc.lclaimkey = p_c.lclaimkey\r\n    inner join claim c_c on clc.lLinkedClaimKey = c_c.lclaimkey\r\n)\r\n\r\nselect * from claimlinkedclaim", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "staging\\stg_claimgroup_linkedclaims.sql", "original_file_path": "models\\staging\\stg_claimgroup_linkedclaims.sql", "name": "stg_claimgroup_linkedclaims", "alias": "stg_claimgroup_linkedclaims", "checksum": {"name": "sha256", "checksum": "e6c04cad7a8e08e3fb15531a4d7f000d0e1804d09d23e1645235c932983df426"}, "tags": ["Claim"], "refs": [["scd_claimgrouplinkedclaims"], ["scd_claim"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\staging\\stg_claimgroup_linkedclaims.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "tags": ["Claim"]}, "created_at": 1701786801.0629168, "compiled_code": "\n\nwith\n\nclaimgrouplinkedclaims as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"scd_claimgrouplinkedclaims\" where _valid_to is null\n),\nclaim as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"scd_claim\" where _valid_to is null\n), \n\nclaimlinkedclaim as (\n    select clc.lclaimkey as parent_claim_id,\n    p_c.sclaimreference as parent_claim_reference,\n    clc.lLinkedClaimKey as claim_id,\n    c_c.sclaimreference as claim_reference\n\n    from claimgrouplinkedclaims clc \n    inner join claim p_c on clc.lclaimkey = p_c.lclaimkey\n    inner join claim c_c on clc.lLinkedClaimKey = c_c.lclaimkey\n)\n\nselect * from claimlinkedclaim", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"stg_claimgroup_linkedclaims\""}, "model.iginsure.stg_claim_dates": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.iginsure.stg_current_account_period", "model.iginsure.scd_claim_section", "model.iginsure.scd_claim_movement", "model.iginsure.scd_currency", "model.iginsure.scd_account_period", "model.iginsure.stg_entity_instance_states"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "staging", "stg_claim_dates"], "unique_id": "model.iginsure.stg_claim_dates", "raw_code": "with\r\ncurrent_account_period as (\r\n    select * from {{ ref('stg_current_account_period') }} \r\n),\r\nclaim_section as (\r\n    select * from {{ ref('scd_claim_section') }} where _valid_to is null\r\n),\r\nclaim_movement as (\r\n    select * from {{ ref('scd_claim_movement') }} where _valid_to is null\r\n),\r\ncurrency as (\r\n    select * from {{ ref('scd_currency') }} where _valid_to is null\r\n),\r\n\r\naccount_period as (\r\n    select * from {{ ref('scd_account_period') }} where _valid_to is null\r\n),\r\nentity_instance_states as (\r\n    select * from {{ ref('stg_entity_instance_states') }} where entity_type_id = 445 --Claim\r\n),\r\n\r\n\r\nclaim_main_dates as(\r\n    select \r\n        C.lClaimKey,\r\n        MAX(case when EISCM.entity_state_id in( 2262,2263) and CM.lTypeOfMovementKey in(10,21) /*Reserve Amendment*/ then CM.dtMovementCreated else '' end) as LastOSDate,\r\n        MAX(case WHEN EISCM.entity_state_id in( 2262,2263) and CM.lTypeOfMovementKey not in(21,10) /*Initial Reserve,Reserve Amendment*/ then CM.dtMovementCreated else '' end) as LastPaidDate,\r\n        MIN(case when EISCM.entity_state_id in( 2262,2263) and CM.lTypeOfMovementKey = 21 /*Initial Reserve*/ then CM.dtMovementCreated else '9999-12-31' end) as InitialOSDate\r\n    from \r\n        claim C \r\n        left join claim_section CS on C.lClaimKey = CS.lClaimKey\r\n        left join claim_movement CM on CS.lClaimSectionKey = CM.lClaimSectionKey\r\n        left join account_period Acc_Period on CM.lAccountPeriodKey = Acc_Period.lAccountPeriodKey\r\n        left join currency CU on CS.lReserveCcyOrigKey = CU.lCurrencyKey\r\n        left join entity_instance_states EISCM on CM.lClaimMovementKey = EISCM.instance_id\r\n\twhere Acc_Period.nYearPeriod<=(select AP from current_account_period)\r\n    group by \r\n        C.lClaimKey\r\n)\r\nselect * from claim_main_dates", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "staging\\stg_claim_dates.sql", "original_file_path": "models\\staging\\stg_claim_dates.sql", "name": "stg_claim_dates", "alias": "stg_claim_dates", "checksum": {"name": "sha256", "checksum": "98b43d06ffc2fcc58da50ffca8f773d6e4aee3ecc3b06869813cc5377199b78a"}, "tags": [], "refs": [["stg_current_account_period"], ["scd_claim_section"], ["scd_claim_movement"], ["scd_currency"], ["scd_account_period"], ["stg_entity_instance_states"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\staging\\stg_claim_dates.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null}, "created_at": 1701786801.0649152, "compiled_code": "with\ncurrent_account_period as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"stg_current_account_period\" \n),\nclaim_section as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"scd_claim_section\" where _valid_to is null\n),\nclaim_movement as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"scd_claim_movement\" where _valid_to is null\n),\ncurrency as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"scd_currency\" where _valid_to is null\n),\n\naccount_period as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"scd_account_period\" where _valid_to is null\n),\nentity_instance_states as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"stg_entity_instance_states\" where entity_type_id = 445 --Claim\n),\n\n\nclaim_main_dates as(\n    select \n        C.lClaimKey,\n        MAX(case when EISCM.entity_state_id in( 2262,2263) and CM.lTypeOfMovementKey in(10,21) /*Reserve Amendment*/ then CM.dtMovementCreated else '' end) as LastOSDate,\n        MAX(case WHEN EISCM.entity_state_id in( 2262,2263) and CM.lTypeOfMovementKey not in(21,10) /*Initial Reserve,Reserve Amendment*/ then CM.dtMovementCreated else '' end) as LastPaidDate,\n        MIN(case when EISCM.entity_state_id in( 2262,2263) and CM.lTypeOfMovementKey = 21 /*Initial Reserve*/ then CM.dtMovementCreated else '9999-12-31' end) as InitialOSDate\n    from \n        claim C \n        left join claim_section CS on C.lClaimKey = CS.lClaimKey\n        left join claim_movement CM on CS.lClaimSectionKey = CM.lClaimSectionKey\n        left join account_period Acc_Period on CM.lAccountPeriodKey = Acc_Period.lAccountPeriodKey\n        left join currency CU on CS.lReserveCcyOrigKey = CU.lCurrencyKey\n        left join entity_instance_states EISCM on CM.lClaimMovementKey = EISCM.instance_id\n\twhere Acc_Period.nYearPeriod<=(select AP from current_account_period)\n    group by \n        C.lClaimKey\n)\nselect * from claim_main_dates", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"stg_claim_dates\""}, "model.iginsure.stg_claim_movement": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.iginsure.scd_claim", "model.iginsure.scd_claim_movement", "model.iginsure.scd_policy_activity"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["InwardPremium"], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "staging", "stg_claim_movement"], "unique_id": "model.iginsure.stg_claim_movement", "raw_code": "{{ config(\r\n\r\n    tags=['InwardPremium']\r\n\r\n) }}\r\n\r\n\r\n\r\nwith\r\n\r\n\r\n\r\nclaim_ as (\r\n\r\n    select * from {{ ref('scd_claim') }} where _valid_to is null\r\n\r\n),\r\n\r\n\r\n\r\nclaim_movement as (\r\n\r\n    select * from {{ ref('scd_claim_movement') }} where _valid_to is null\r\n\r\n),\r\n\r\npolicy_activity as (\r\n\r\n    select * from {{ ref('scd_policy_activity') }} where _valid_to is null\r\n\r\n),\r\n\r\n\r\n\r\nc_m_a as(\r\n\r\n    SELECT  cm.lClaimMovementKey as claim_movement_id,\r\n\r\n            cm.lpolicyactivitykey as policy_activity_id\r\n\r\n    FROM claim_movement cm\r\n\r\n    INNER join policy_activity pa ON cm.lpolicyactivitykey = pa.lpolicyactivitykey\r\n\r\n   \r\n\r\n),\r\n\r\nc_m_c_a as (\r\n\r\n    SELECT  cm.lClaimMovementKey as claim_movement_id,\r\n\r\n            c.lPolicyActivityKey as policy_activity_id\r\n\r\n    FROM claim_movement cm\r\n\r\n    inner join claim c ON cm.lclaimkey = c.lclaimkey\r\n\r\n    WHERE isnull(cm.lPolicyActivityKey,0) NOT IN (SELECT DISTINCT isnull(lpolicyactivitykey,0) FROM policy_activity)\r\n\r\n),\r\n\r\n\r\n\r\nstg_c_m as (\r\n\r\n    select * from c_m_a\r\n\r\n    union all\r\n\r\n    select * from c_m_c_a\r\n\r\n)\r\n\r\n\r\n\r\nselect * from stg_c_m", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "staging\\stg_claim_movement.sql", "original_file_path": "models\\staging\\stg_claim_movement.sql", "name": "stg_claim_movement", "alias": "stg_claim_movement", "checksum": {"name": "sha256", "checksum": "4c23c92e5d6ea91fd8c4059ef87920ad8742214b938edcf492269e94d3488824"}, "tags": ["InwardPremium"], "refs": [["scd_claim"], ["scd_claim_movement"], ["scd_policy_activity"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\staging\\stg_claim_movement.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "tags": ["InwardPremium"]}, "created_at": 1701786801.0673487, "compiled_code": "\n\n\n\nwith\n\n\n\nclaim_ as (\n\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"scd_claim\" where _valid_to is null\n\n),\n\n\n\nclaim_movement as (\n\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"scd_claim_movement\" where _valid_to is null\n\n),\n\npolicy_activity as (\n\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"scd_policy_activity\" where _valid_to is null\n\n),\n\n\n\nc_m_a as(\n\n    SELECT  cm.lClaimMovementKey as claim_movement_id,\n\n            cm.lpolicyactivitykey as policy_activity_id\n\n    FROM claim_movement cm\n\n    INNER join policy_activity pa ON cm.lpolicyactivitykey = pa.lpolicyactivitykey\n\n   \n\n),\n\nc_m_c_a as (\n\n    SELECT  cm.lClaimMovementKey as claim_movement_id,\n\n            c.lPolicyActivityKey as policy_activity_id\n\n    FROM claim_movement cm\n\n    inner join claim c ON cm.lclaimkey = c.lclaimkey\n\n    WHERE isnull(cm.lPolicyActivityKey,0) NOT IN (SELECT DISTINCT isnull(lpolicyactivitykey,0) FROM policy_activity)\n\n),\n\n\n\nstg_c_m as (\n\n    select * from c_m_a\n\n    union all\n\n    select * from c_m_c_a\n\n)\n\n\n\nselect * from stg_c_m", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"stg_claim_movement\""}, "model.iginsure.stg_claim_mvmt_audit_state_transitions": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.iginsure.scd_audit_state_transitions"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "staging", "stg_claim_mvmt_audit_state_transitions"], "unique_id": "model.iginsure.stg_claim_mvmt_audit_state_transitions", "raw_code": "with clm_audit_state_transitions as (\r\n    select \r\n        linstancekey ,MIN(DTTRANSITION) DTTRANSITION\r\n\r\n    from \r\n        {{ ref('scd_audit_state_transitions') }} \r\n    where \r\n        \"LENTITYKEY\" = 531 --claim movement\r\n        and _valid_to is null\r\n        and lentitystatememberkey in (2262,2263) -- Authorised or paid\r\n    group by linstancekey\r\n)\r\n\r\nselect * from clm_audit_state_transitions", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "staging\\stg_claim_mvmt_audit_state_transitions.sql", "original_file_path": "models\\staging\\stg_claim_mvmt_audit_state_transitions.sql", "name": "stg_claim_mvmt_audit_state_transitions", "alias": "stg_claim_mvmt_audit_state_transitions", "checksum": {"name": "sha256", "checksum": "1c5836e26f624efa3e8f21a747fa72f23658711be4b23274d4067809c86a0e21"}, "tags": [], "refs": [["scd_audit_state_transitions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\staging\\stg_claim_mvmt_audit_state_transitions.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null}, "created_at": 1701786801.0718699, "compiled_code": "with clm_audit_state_transitions as (\n    select \n        linstancekey ,MIN(DTTRANSITION) DTTRANSITION\n\n    from \n        \"IGI_PROD_DW\".\"dbt_dev\".\"scd_audit_state_transitions\" \n    where \n        \"LENTITYKEY\" = 531 --claim movement\n        and _valid_to is null\n        and lentitystatememberkey in (2262,2263) -- Authorised or paid\n    group by linstancekey\n)\n\nselect * from clm_audit_state_transitions", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"stg_claim_mvmt_audit_state_transitions\""}, "model.iginsure.stg_contact": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.iginsure.scd_contact"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["InwardPremium"], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "staging", "stg_contact"], "unique_id": "model.iginsure.stg_contact", "raw_code": "{{ config(\r\n    tags=['InwardPremium']\r\n) }}\r\n\r\nwith\r\n\r\ncontact as (\r\n    select * from {{ ref('scd_contact') }} where _valid_to is null\r\n),\r\n\r\nrelabelled as (\r\n    select\r\n        \"lContactKey\" as contact_id,\r\n        \"sContactReference\" as contact_reference,\r\n        \"sCompanyName\" as company_name,\r\n        \"sEmail\" as email,\r\n        \"sToBeKnownAs\" as to_be_known_as\r\n    from\r\n        contact\r\n)\r\n\r\nselect * from relabelled", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "staging\\stg_contact.sql", "original_file_path": "models\\staging\\stg_contact.sql", "name": "stg_contact", "alias": "stg_contact", "checksum": {"name": "sha256", "checksum": "de9117107d8135cd5297e769da6b190ef6eddd2c71532202e66647d026a2f927"}, "tags": ["InwardPremium"], "refs": [["scd_contact"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": "iginsure://models\\staging\\staging.yml", "compiled_path": "target\\compiled\\iginsure\\models\\staging\\stg_contact.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "docs": {"show": false}, "tags": ["InwardPremium"]}, "created_at": 1701786801.9237092, "compiled_code": "\n\nwith\n\ncontact as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"scd_contact\" where _valid_to is null\n),\n\nrelabelled as (\n    select\n        \"lContactKey\" as contact_id,\n        \"sContactReference\" as contact_reference,\n        \"sCompanyName\" as company_name,\n        \"sEmail\" as email,\n        \"sToBeKnownAs\" as to_be_known_as\n    from\n        contact\n)\n\nselect * from relabelled", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"stg_contact\""}, "model.iginsure.stg_contra_expiry_history": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.iginsure.scd_policy_activity", "model.iginsure.scd_auditheader", "model.iginsure.scd_auditrows", "model.iginsure.scd_auditcolumns"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "staging", "stg_contra_expiry_history"], "unique_id": "model.iginsure.stg_contra_expiry_history", "raw_code": "with policyactivity as (\r\n\r\n    select * from {{ ref('scd_policy_activity') }} where _valid_to is null\r\n\r\n),\r\n\r\nAuditheader as (\r\n    select * from {{ ref('scd_auditheader') }} where _valid_to is null\r\n),\r\n\r\n\r\nAuditrows as (\r\n    select * from {{ ref('scd_auditrows') }} where _valid_to is null\r\n),\r\n\r\nAuditcolumns as (\r\n    select * from {{ ref('scd_auditcolumns') }} where _valid_to is null\r\n),\r\n\r\n\r\ncontra_hist as (\r\n\r\n    select * from \r\n        (select pa.lpolicyKey,\r\n                pa.lpolicyactivitykey 'lpolicyactivitykey',\r\n                DTDATEAMENDED, DTOLDVALUE 'Expirydate',\r\n                LAUDITCOLUMNSKEY 'AuditKey',\r\n                ROW_NUMBER() over (partition by pa.lpolicyKey,PA.lpolicyactivitykey order by DTDATEAMENDED) as ranked\r\n        from policyactivity pa \r\n        inner join Auditheader AH on AH.LAUDITOBJECTINSTANCEKEY = pa.lPolicyActivityKey and AH.LAUDITOBJECTKEY = 611\r\n        left join Auditrows AR on AR.LAUDITHEADERKEY=AH.LAUDITHEADERKEY and  AH.LAUDITOBJECTKEY = 611\r\n        left join  Auditcolumns AC on AC.LAUDITROWSKEY=AR.LAUDITROWSKEY and AR.LAUDITOBJECTKEY = 611\r\n        where  AH.LAUDITOBJECTKEY = 611 \r\n        and  AR.LAUDITOBJECTKEY = 611 \r\n        and AC.LENTITYPROPERTYKEY = 9008  -- expiry date\r\n        -- contra endorsemenent\r\n        and  pa.lTypeOfPolicyActivityKey = 8)contra_hist_ranked\r\n    where ranked = 1\r\n\r\n\r\n) \r\n\r\n\r\nselect * from contra_hist", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "staging\\stg_contra_expiry_history.sql", "original_file_path": "models\\staging\\stg_contra_expiry_history.sql", "name": "stg_contra_expiry_history", "alias": "stg_contra_expiry_history", "checksum": {"name": "sha256", "checksum": "db446c44d552148263a441b5c2a58ed64f13cbd8470aae5dccf28908a52f89a4"}, "tags": [], "refs": [["scd_policy_activity"], ["scd_auditheader"], ["scd_auditrows"], ["scd_auditcolumns"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\staging\\stg_contra_expiry_history.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null}, "created_at": 1701786801.0758703, "compiled_code": "with policyactivity as (\n\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"scd_policy_activity\" where _valid_to is null\n\n),\n\nAuditheader as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"scd_auditheader\" where _valid_to is null\n),\n\n\nAuditrows as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"scd_auditrows\" where _valid_to is null\n),\n\nAuditcolumns as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"scd_auditcolumns\" where _valid_to is null\n),\n\n\ncontra_hist as (\n\n    select * from \n        (select pa.lpolicyKey,\n                pa.lpolicyactivitykey 'lpolicyactivitykey',\n                DTDATEAMENDED, DTOLDVALUE 'Expirydate',\n                LAUDITCOLUMNSKEY 'AuditKey',\n                ROW_NUMBER() over (partition by pa.lpolicyKey,PA.lpolicyactivitykey order by DTDATEAMENDED) as ranked\n        from policyactivity pa \n        inner join Auditheader AH on AH.LAUDITOBJECTINSTANCEKEY = pa.lPolicyActivityKey and AH.LAUDITOBJECTKEY = 611\n        left join Auditrows AR on AR.LAUDITHEADERKEY=AH.LAUDITHEADERKEY and  AH.LAUDITOBJECTKEY = 611\n        left join  Auditcolumns AC on AC.LAUDITROWSKEY=AR.LAUDITROWSKEY and AR.LAUDITOBJECTKEY = 611\n        where  AH.LAUDITOBJECTKEY = 611 \n        and  AR.LAUDITOBJECTKEY = 611 \n        and AC.LENTITYPROPERTYKEY = 9008  -- expiry date\n        -- contra endorsemenent\n        and  pa.lTypeOfPolicyActivityKey = 8)contra_hist_ranked\n    where ranked = 1\n\n\n) \n\n\nselect * from contra_hist", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"stg_contra_expiry_history\""}, "model.iginsure.stg_country_territory": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.iginsure.scd_zone_territory", "model.iginsure.scd_zone_country"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["InwardPremium"], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "staging", "stg_country_territory"], "unique_id": "model.iginsure.stg_country_territory", "raw_code": "{{ config(\r\n    tags=['InwardPremium']\r\n) }}\r\n\r\nwith\r\n\r\nzone_territory as (\r\n    select * from {{ ref('scd_zone_territory') }} where _valid_to is null\r\n),\r\n\r\nzone_country as (\r\n    select * from {{ ref('scd_zone_country') }} where _valid_to is null\r\n),\r\n\r\ncountry_territory as (\r\n      select\r\n          zone_country.\"lCountryKey\" as country_id,\r\n          zone_country.\"sCountry\" as country,\r\n          zone_territory.STERRITORY as territory\r\n      from\r\n          zone_country\r\n      left join zone_territory on\r\n          zone_country.LTERRITORYKEY = zone_territory.LTERRITORYKEY\r\n)\r\n\r\nselect * from country_territory", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "staging\\stg_country_territory.sql", "original_file_path": "models\\staging\\stg_country_territory.sql", "name": "stg_country_territory", "alias": "stg_country_territory", "checksum": {"name": "sha256", "checksum": "207f6a414b0230098760f65db4ec02e7eb047ab4432cc108688d257de95373c3"}, "tags": ["InwardPremium"], "refs": [["scd_zone_territory"], ["scd_zone_country"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": "iginsure://models\\staging\\staging.yml", "compiled_path": "target\\compiled\\iginsure\\models\\staging\\stg_country_territory.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "docs": {"show": false}, "tags": ["InwardPremium"]}, "created_at": 1701786801.9257083, "compiled_code": "\n\nwith\n\nzone_territory as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"scd_zone_territory\" where _valid_to is null\n),\n\nzone_country as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"scd_zone_country\" where _valid_to is null\n),\n\ncountry_territory as (\n      select\n          zone_country.\"lCountryKey\" as country_id,\n          zone_country.\"sCountry\" as country,\n          zone_territory.STERRITORY as territory\n      from\n          zone_country\n      left join zone_territory on\n          zone_country.LTERRITORYKEY = zone_territory.LTERRITORYKEY\n)\n\nselect * from country_territory", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"stg_country_territory\""}, "model.iginsure.stg_coverage": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.iginsure.scd_policy_liability", "model.iginsure.scd_type_of_sub_class"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["InwardPremium"], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "staging", "stg_coverage"], "unique_id": "model.iginsure.stg_coverage", "raw_code": "{{ config(\r\n    tags=['InwardPremium']\r\n) }}\r\n\r\nwith\r\npolicy_liability as (\r\n    select * from {{ ref('scd_policy_liability') }} where _valid_to is null\r\n),\r\n\r\ntype_of_sub_class as (\r\n    select * from {{ ref('scd_type_of_sub_class') }} where _valid_to is null\r\n),\r\n\r\nliability_sub_class as (\r\n    select\r\n        min(\"lPolicyLiabilityKey\") as policy_liability_id,\r\n        \"lPolicyKey\" as policy_id,\r\n        \"lPolicySectionKey\" as policy_section_id,\r\n        \"lPolicyActivityKey\" as policy_activity_id,\r\n        type_of_sub_class.\"SSUBCLASS\" as coverage_description,\r\n        type_of_sub_class.\"sCode\" as coverage_code\r\n    from\r\n        policy_liability\r\n        inner join type_of_sub_class on\r\n            policy_liability.\"lTypeOfSubClassKey\" = type_of_sub_class.\"LTYPEOFSUBCLASSKEY\"\r\n    group by\r\n        lPolicyKey, lPolicySectionKey, lPolicyActivityKey, SSUBCLASS, sCode\r\n),\r\n\r\nordering as (\r\n    select *,\r\n        row_number() over (partition by policy_section_id order by policy_liability_id) as coverage_number\r\n    from\r\n        liability_sub_class\r\n),\r\n\r\ncoverage as (\r\n    select\r\n        first.policy_id,\r\n        first.policy_section_id,\r\n        first.coverage_description as first_coverage_description,\r\n        first.coverage_code as first_coverage_code,\r\n        second.coverage_description as second_coverage_description,\r\n        second.coverage_code as second_coverage_code\r\n    from\r\n        ordering as first\r\n        left join ordering as second on\r\n            first.policy_section_id = second.policy_section_id\r\n            and first.policy_liability_id < second.policy_liability_id\r\n    where\r\n        first.coverage_number = 1\r\n        and (second.coverage_number is null or second.coverage_number = 2)\r\n),\r\n\r\ndescriptions as (\r\n    select\r\n        *,\r\n        first_coverage_description + case when second_coverage_description is not null then ', ' + second_coverage_description else '' end as coverage_description,\r\n        first_coverage_code + case when second_coverage_code is not null then ', ' + second_coverage_code else '' end as coverage_code\r\n    from\r\n        coverage\r\n)\r\n\r\nselect * from descriptions", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "staging\\stg_coverage.sql", "original_file_path": "models\\staging\\stg_coverage.sql", "name": "stg_coverage", "alias": "stg_coverage", "checksum": {"name": "sha256", "checksum": "35bda9c8be429f8ebe34c513d4f254a257175551f356af0282a21c4ef5d04f70"}, "tags": ["InwardPremium"], "refs": [["scd_policy_liability"], ["scd_type_of_sub_class"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": "iginsure://models\\staging\\staging.yml", "compiled_path": "target\\compiled\\iginsure\\models\\staging\\stg_coverage.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "docs": {"show": false}, "tags": ["InwardPremium"]}, "created_at": 1701786801.9267087, "compiled_code": "\n\nwith\npolicy_liability as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"scd_policy_liability\" where _valid_to is null\n),\n\ntype_of_sub_class as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"scd_type_of_sub_class\" where _valid_to is null\n),\n\nliability_sub_class as (\n    select\n        min(\"lPolicyLiabilityKey\") as policy_liability_id,\n        \"lPolicyKey\" as policy_id,\n        \"lPolicySectionKey\" as policy_section_id,\n        \"lPolicyActivityKey\" as policy_activity_id,\n        type_of_sub_class.\"SSUBCLASS\" as coverage_description,\n        type_of_sub_class.\"sCode\" as coverage_code\n    from\n        policy_liability\n        inner join type_of_sub_class on\n            policy_liability.\"lTypeOfSubClassKey\" = type_of_sub_class.\"LTYPEOFSUBCLASSKEY\"\n    group by\n        lPolicyKey, lPolicySectionKey, lPolicyActivityKey, SSUBCLASS, sCode\n),\n\nordering as (\n    select *,\n        row_number() over (partition by policy_section_id order by policy_liability_id) as coverage_number\n    from\n        liability_sub_class\n),\n\ncoverage as (\n    select\n        first.policy_id,\n        first.policy_section_id,\n        first.coverage_description as first_coverage_description,\n        first.coverage_code as first_coverage_code,\n        second.coverage_description as second_coverage_description,\n        second.coverage_code as second_coverage_code\n    from\n        ordering as first\n        left join ordering as second on\n            first.policy_section_id = second.policy_section_id\n            and first.policy_liability_id < second.policy_liability_id\n    where\n        first.coverage_number = 1\n        and (second.coverage_number is null or second.coverage_number = 2)\n),\n\ndescriptions as (\n    select\n        *,\n        first_coverage_description + case when second_coverage_description is not null then ', ' + second_coverage_description else '' end as coverage_description,\n        first_coverage_code + case when second_coverage_code is not null then ', ' + second_coverage_code else '' end as coverage_code\n    from\n        coverage\n)\n\nselect * from descriptions", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"stg_coverage\""}, "model.iginsure.stg_current_account_period": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.iginsure.scd_account_period"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "staging", "stg_current_account_period"], "unique_id": "model.iginsure.stg_current_account_period", "raw_code": "with account_period as (\r\n    select * from {{ ref('scd_account_period') }} where _valid_to is null\r\n),\r\n\r\ncurrent_acc as (  \r\n    select min(nyearperiod) as AP\r\n    from(\r\n            select *, rank() over (partition by nyearperiod order by _valid_from desc) as rank\u00a0 \r\n            from account_period\r\n        )a\u00a0\r\n    where bclosing =0\r\n    and rank=1\r\n    )\r\n\r\nselect * from current_acc", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "staging\\stg_current_account_period.sql", "original_file_path": "models\\staging\\stg_current_account_period.sql", "name": "stg_current_account_period", "alias": "stg_current_account_period", "checksum": {"name": "sha256", "checksum": "73c710a5c961f40a2542085bd07fbd3aa3dc9eada38de5798a8fa7daaf1f08dc"}, "tags": [], "refs": [["scd_account_period"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\staging\\stg_current_account_period.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null}, "created_at": 1701786801.0818958, "compiled_code": "with account_period as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"scd_account_period\" where _valid_to is null\n),\n\ncurrent_acc as (  \n    select min(nyearperiod) as AP\n    from(\n            select *, rank() over (partition by nyearperiod order by _valid_from desc) as rank\u00a0 \n            from account_period\n        )a\u00a0\n    where bclosing =0\n    and rank=1\n    )\n\nselect * from current_acc", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"stg_current_account_period\""}, "model.iginsure.stg_current_exchange_rate": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.iginsure.scd_currency_roe_history"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "staging", "stg_current_exchange_rate"], "unique_id": "model.iginsure.stg_current_exchange_rate", "raw_code": "with currency_roe_history as (\r\n    select * from {{ ref('scd_currency_roe_history') }} where _valid_to is null\r\n),\r\n\r\ncurrent_rates as (\r\n    SELECT lCurrencyKey, dROE, dtActiveFrom \r\n    FROM currency_roe_history CH \r\n    WHERE (SELECT CAST(MAX(dtActiveFrom) AS DATE) FROM currency_roe_history ) BETWEEN dtActiveFrom AND dtActiveTo\r\n)\r\n\r\nselect * from current_rates", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "staging\\stg_current_exchange_rate.sql", "original_file_path": "models\\staging\\stg_current_exchange_rate.sql", "name": "stg_current_exchange_rate", "alias": "stg_current_exchange_rate", "checksum": {"name": "sha256", "checksum": "694d083dbf2859791078693d57c7a5e7bf53371caa95c1d76189876119946deb"}, "tags": [], "refs": [["scd_currency_roe_history"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\staging\\stg_current_exchange_rate.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null}, "created_at": 1701786801.0844285, "compiled_code": "with currency_roe_history as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"scd_currency_roe_history\" where _valid_to is null\n),\n\ncurrent_rates as (\n    SELECT lCurrencyKey, dROE, dtActiveFrom \n    FROM currency_roe_history CH \n    WHERE (SELECT CAST(MAX(dtActiveFrom) AS DATE) FROM currency_roe_history ) BETWEEN dtActiveFrom AND dtActiveTo\n)\n\nselect * from current_rates", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"stg_current_exchange_rate\""}, "model.iginsure.stg_division": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.iginsure.scd_division"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["InwardPremium"], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "staging", "stg_division"], "unique_id": "model.iginsure.stg_division", "raw_code": "{{ config(\r\n    tags=['InwardPremium']\r\n) }}\r\n\r\nwith\r\n\r\ndivision as (\r\n    select * from {{ ref('scd_division') }} where _valid_to is null\r\n),\r\n\r\nrelabelled as (\r\n    select\r\n        lDivisionKey as division_id,\r\n        scode,\r\n        case\r\n            when division.scode = 'LON' then 1\r\n            when division.scode = 'EUR' then 2\r\n            else 0\r\n        end as division\r\n    from\r\n        division\r\n)\r\n\r\nselect * from relabelled", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "staging\\stg_division.sql", "original_file_path": "models\\staging\\stg_division.sql", "name": "stg_division", "alias": "stg_division", "checksum": {"name": "sha256", "checksum": "1416d0e8f1d2ff0cf1894ceef9052eabaf9732610fe7bec570e4b2d8bc3f4573"}, "tags": ["InwardPremium"], "refs": [["scd_division"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": "iginsure://models\\staging\\staging.yml", "compiled_path": "target\\compiled\\iginsure\\models\\staging\\stg_division.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "docs": {"show": false}, "tags": ["InwardPremium"]}, "created_at": 1701786801.9277086, "compiled_code": "\n\nwith\n\ndivision as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"scd_division\" where _valid_to is null\n),\n\nrelabelled as (\n    select\n        lDivisionKey as division_id,\n        scode,\n        case\n            when division.scode = 'LON' then 1\n            when division.scode = 'EUR' then 2\n            else 0\n        end as division\n    from\n        division\n)\n\nselect * from relabelled", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"stg_division\""}, "model.iginsure.stg_entity_instance_states": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.iginsure.scd_entity_type", "model.iginsure.scd_entity_state_members", "model.iginsure.scd_entity_instance_states"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["InwardPremium"], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "staging", "stg_entity_instance_states"], "unique_id": "model.iginsure.stg_entity_instance_states", "raw_code": "{{ config(\r\n    tags=['InwardPremium']\r\n) }}\r\n\r\nwith\r\n\r\nentity_type as (\r\n    select * from {{ ref('scd_entity_type') }} where _valid_to is null\r\n),\r\n\r\nentity_state_members as (\r\n    select * from {{ ref('scd_entity_state_members')}} where _valid_to is null\r\n),\r\n\r\nentity_instance_states as (\r\n    select * from {{ ref('scd_entity_instance_states') }} where _valid_to is null\r\n),\r\n\r\nentity_states as (\r\n    select\r\n        entity_type.\"LENTITYKEY\" as entity_type_id,\r\n        entity_type.\"SENTITY\" as entity_type,\r\n        entity_state_members.\"LENTITYSTATEMEMBERKEY\" as entity_state_id,\r\n        entity_state_members.\"SENTITYSTATEMEMBER\" entity_state\r\n\r\n    from\r\n        entity_type\r\n        left join entity_state_members on\r\n            entity_type.\"LENTITYSTATEKEY\" = entity_state_members.\"LENTITYSTATEKEY\"\r\n),\r\n\r\ninstances_states_values as (\r\n    select\r\n        entity_instance_states.\"lInstanceKey\" as instance_id,\r\n        entity_states.entity_type_id,\r\n        entity_states.entity_type,\r\n        entity_states.entity_state_id,\r\n        entity_states.entity_state\r\n    from\r\n        entity_instance_states\r\n        inner join entity_states on\r\n            entity_instance_states.\"lEntityStateMemberKey\" = entity_states.entity_state_id\r\n            and entity_instance_states.\"lEntityKey\" = entity_states.entity_type_id\r\n)\r\n\r\nselect * from instances_states_values", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "staging\\stg_entity_instance_states.sql", "original_file_path": "models\\staging\\stg_entity_instance_states.sql", "name": "stg_entity_instance_states", "alias": "stg_entity_instance_states", "checksum": {"name": "sha256", "checksum": "d3a0b9faceca1ed684956af0f8e0bb37570bc0db8eede423fd3c3b2fa8f0f8db"}, "tags": ["InwardPremium"], "refs": [["scd_entity_type"], ["scd_entity_state_members"], ["scd_entity_instance_states"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": "iginsure://models\\staging\\staging.yml", "compiled_path": "target\\compiled\\iginsure\\models\\staging\\stg_entity_instance_states.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "docs": {"show": false}, "tags": ["InwardPremium"]}, "created_at": 1701786801.9287052, "compiled_code": "\n\nwith\n\nentity_type as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"scd_entity_type\" where _valid_to is null\n),\n\nentity_state_members as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"scd_entity_state_members\" where _valid_to is null\n),\n\nentity_instance_states as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"scd_entity_instance_states\" where _valid_to is null\n),\n\nentity_states as (\n    select\n        entity_type.\"LENTITYKEY\" as entity_type_id,\n        entity_type.\"SENTITY\" as entity_type,\n        entity_state_members.\"LENTITYSTATEMEMBERKEY\" as entity_state_id,\n        entity_state_members.\"SENTITYSTATEMEMBER\" entity_state\n\n    from\n        entity_type\n        left join entity_state_members on\n            entity_type.\"LENTITYSTATEKEY\" = entity_state_members.\"LENTITYSTATEKEY\"\n),\n\ninstances_states_values as (\n    select\n        entity_instance_states.\"lInstanceKey\" as instance_id,\n        entity_states.entity_type_id,\n        entity_states.entity_type,\n        entity_states.entity_state_id,\n        entity_states.entity_state\n    from\n        entity_instance_states\n        inner join entity_states on\n            entity_instance_states.\"lEntityStateMemberKey\" = entity_states.entity_state_id\n            and entity_instance_states.\"lEntityKey\" = entity_states.entity_type_id\n)\n\nselect * from instances_states_values", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"stg_entity_instance_states\""}, "model.iginsure.stg_inception": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.iginsure.scd_account_period", "model.iginsure.scd_policy", "model.iginsure.scd_policy_line", "model.iginsure.scd_policy_activity", "model.iginsure.scd_apr", "model.iginsure.scd_auditheader", "model.iginsure.scd_auditrows", "model.iginsure.scd_auditcolumns", "model.iginsure.scd_audit_state_transitions", "model.iginsure.stg_written_account_period"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "staging", "stg_inception"], "unique_id": "model.iginsure.stg_inception", "raw_code": "-- Get the inception and expiry per account period\r\n\r\nwith accountperiod as (\r\n    select * from {{ ref('scd_account_period') }} where _valid_to is null\r\n),\r\n\r\npolicy as (\r\n    select * from {{ ref('scd_policy') }} where _valid_to is null\r\n),\r\n\r\n\r\npolicyline as (\r\n    select * from {{ ref('scd_policy_line') }} where _valid_to is null\r\n),\r\n\r\npolicyactivity as (\r\n\r\n     select * from {{ ref('scd_policy_activity') }} where _valid_to is null\r\n\r\n),\r\n\r\nAccountsPayableReceivable as (\r\n    select * from {{ ref('scd_apr') }} where _valid_to is null\r\n),\r\n\r\n\r\nAuditheader as (\r\n    select * from {{ ref('scd_auditheader') }} where _valid_to is null\r\n),\r\n\r\n\r\nAuditrows as (\r\n    select * from {{ ref('scd_auditrows') }} where _valid_to is null\r\n),\r\n\r\nAuditcolumns as (\r\n    select * from {{ ref('scd_auditcolumns') }} where _valid_to is null\r\n),\r\n\r\n\r\nAUDITSTATETRANSITIONS as (\r\n  select \r\n        *\r\n    from \r\n        {{ ref('scd_audit_state_transitions') }}  \r\n        where _valid_to is null\r\n\r\n),\r\n\r\n\r\ncorrect_written_account_period as (\r\n\r\n    select  * from{{ ref('stg_written_account_period') }}  \r\n\r\n),\r\n\r\ndates_per_account_period as (\r\n\r\n    select *\r\n    from(\r\n    select a.lpolicykey,nyearperiod as AccountPeriod,dttransition 'AccountPeriod_ClosedDate',inceptiondate, row_number() over (partition by a.lpolicykey,nyearperiod order by auditkey desc) Rank \r\n    from\r\n    (\r\n      select * from(\r\n            select distinct p.lpolicykey,pa.lpolicyactivitykey,p.dtperiodfrom,\r\n                        --case when ap.nYearPeriod is null then (select max(account_period) + 1\r\n                        --\t\t\t\t\t\t\t\t\t  from dbt_ahmad.stg_account_periods_closing)\r\n                        --\t\t\t\t\t\t\t\t\t  else ap.nYearPeriod end as nYearPeriod,\r\n                        isnull(ap.nYearPeriod,ap_activity.nYearPeriod) as nYearPeriod,\r\n                        ISNULL(ast.DTTRANSITION,GETDATE()) AS DTTRANSITION, \r\n                        row_number() over (partition by pa.lpolicyactivitykey,ap.nYearPeriod\r\n                        order by ast.DTTRANSITION desc) as ranked\r\n            from policy p\r\n            inner join policyactivity pa on p.lpolicykey =pa.lpolicykey\r\n            left join correct_written_account_period correct_ap on correct_ap.activity_id = pa.lpolicyactivitykey\r\n            left join accountperiod ap on correct_ap.account_period =ap.nYearPeriod\r\n            left join AUDITSTATETRANSITIONS ast on ast.LINSTANCEKEY = ap.lAccountPeriodKey and ast.LENTITYKEY = 429 \r\n            left join accountperiod ap_activity on ap_activity.laccountperiodkey = pa.lwrittenaccountperiodkey\r\n            --where ast.LENTITYSTATEMEMBERKEY = 2087\r\n            where p.bissequence = -1)all_activites\r\n\t  where ranked = 1\t\t\r\n    )a\r\n    left join (\r\n    select lpolicykey,inceptiondate,  isnull((lag(DTDATEAMENDED,1) OVER(PARTITION BY lpolicykey ORDER BY DTDATEAMENDED )),'2002-01-01')  active_from ,\r\n    case when DTDATEAMENDED  = cast(GETDATE() as date) then null else DTDATEAMENDED end  active_until,auditkey\r\n    from(\r\n    --previous inception date\r\n    select PA.LPOLICYKEY 'lpolicyKey',DTDATEAMENDED, DTOLDVALUE  'InceptionDate',LAUDITCOLUMNSKEY 'AuditKey'\r\n    from \r\n    policyactivity pa \r\n    inner join [dbo].[AUDITHEADER] AH on AH.LAUDITOBJECTINSTANCEKEY = pa.lPolicyActivityKey and AH.LAUDITOBJECTKEY = 611\r\n    left join [dbo].[AUDITROWS] AR on AR.LAUDITHEADERKEY=AH.LAUDITHEADERKEY and  AH.LAUDITOBJECTKEY = 611\r\n    left join  [dbo].[AUDITCOLUMNS] AC on AC.LAUDITROWSKEY=AR.LAUDITROWSKEY and AR.LAUDITOBJECTKEY = 611\r\n    where  AH.LAUDITOBJECTKEY = 611 \r\n    and  AR.LAUDITOBJECTKEY = 611 \r\n    and AC.LENTITYPROPERTYKEY in (6574)  \r\n\r\n\r\n    union all\r\n\r\n    -- latest inception date\r\n    select lpolicykey,cast(getdate() as date) 'DTDATEAMENDED',dtperiodfrom 'InceptionDate'  , 100000000 'Auditkey'\r\n    from policy\r\n    --where lpolicyKey in (177)\r\n    )c\r\n    )b\r\n    on a.lPolicyKey = b.lpolicyKey\r\n    and  a.DTTRANSITION  BETWEEN COALESCE(b.active_from ,'2002-01-01')  AND COALESCE(b.active_until,getdate())\r\n    )r\r\n    where rank =1\r\n\r\n)\r\n\r\n\r\nSELECT * FROM dates_per_account_period", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "staging\\stg_inception.sql", "original_file_path": "models\\staging\\stg_inception.sql", "name": "stg_inception", "alias": "stg_inception", "checksum": {"name": "sha256", "checksum": "c01d03309332a30418cace4a4f6a8cd9934dacc929e688bbeda12b592e3233db"}, "tags": [], "refs": [["scd_account_period"], ["scd_policy"], ["scd_policy_line"], ["scd_policy_activity"], ["scd_apr"], ["scd_auditheader"], ["scd_auditrows"], ["scd_auditcolumns"], ["scd_audit_state_transitions"], ["stg_written_account_period"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\staging\\stg_inception.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null}, "created_at": 1701786801.0939705, "compiled_code": "-- Get the inception and expiry per account period\n\nwith accountperiod as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"scd_account_period\" where _valid_to is null\n),\n\npolicy as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"scd_policy\" where _valid_to is null\n),\n\n\npolicyline as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"scd_policy_line\" where _valid_to is null\n),\n\npolicyactivity as (\n\n     select * from \"IGI_PROD_DW\".\"dbt_dev\".\"scd_policy_activity\" where _valid_to is null\n\n),\n\nAccountsPayableReceivable as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"scd_apr\" where _valid_to is null\n),\n\n\nAuditheader as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"scd_auditheader\" where _valid_to is null\n),\n\n\nAuditrows as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"scd_auditrows\" where _valid_to is null\n),\n\nAuditcolumns as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"scd_auditcolumns\" where _valid_to is null\n),\n\n\nAUDITSTATETRANSITIONS as (\n  select \n        *\n    from \n        \"IGI_PROD_DW\".\"dbt_dev\".\"scd_audit_state_transitions\"  \n        where _valid_to is null\n\n),\n\n\ncorrect_written_account_period as (\n\n    select  * from\"IGI_PROD_DW\".\"dbt_dev\".\"stg_written_account_period\"  \n\n),\n\ndates_per_account_period as (\n\n    select *\n    from(\n    select a.lpolicykey,nyearperiod as AccountPeriod,dttransition 'AccountPeriod_ClosedDate',inceptiondate, row_number() over (partition by a.lpolicykey,nyearperiod order by auditkey desc) Rank \n    from\n    (\n      select * from(\n            select distinct p.lpolicykey,pa.lpolicyactivitykey,p.dtperiodfrom,\n                        --case when ap.nYearPeriod is null then (select max(account_period) + 1\n                        --\t\t\t\t\t\t\t\t\t  from dbt_ahmad.stg_account_periods_closing)\n                        --\t\t\t\t\t\t\t\t\t  else ap.nYearPeriod end as nYearPeriod,\n                        isnull(ap.nYearPeriod,ap_activity.nYearPeriod) as nYearPeriod,\n                        ISNULL(ast.DTTRANSITION,GETDATE()) AS DTTRANSITION, \n                        row_number() over (partition by pa.lpolicyactivitykey,ap.nYearPeriod\n                        order by ast.DTTRANSITION desc) as ranked\n            from policy p\n            inner join policyactivity pa on p.lpolicykey =pa.lpolicykey\n            left join correct_written_account_period correct_ap on correct_ap.activity_id = pa.lpolicyactivitykey\n            left join accountperiod ap on correct_ap.account_period =ap.nYearPeriod\n            left join AUDITSTATETRANSITIONS ast on ast.LINSTANCEKEY = ap.lAccountPeriodKey and ast.LENTITYKEY = 429 \n            left join accountperiod ap_activity on ap_activity.laccountperiodkey = pa.lwrittenaccountperiodkey\n            --where ast.LENTITYSTATEMEMBERKEY = 2087\n            where p.bissequence = -1)all_activites\n\t  where ranked = 1\t\t\n    )a\n    left join (\n    select lpolicykey,inceptiondate,  isnull((lag(DTDATEAMENDED,1) OVER(PARTITION BY lpolicykey ORDER BY DTDATEAMENDED )),'2002-01-01')  active_from ,\n    case when DTDATEAMENDED  = cast(GETDATE() as date) then null else DTDATEAMENDED end  active_until,auditkey\n    from(\n    --previous inception date\n    select PA.LPOLICYKEY 'lpolicyKey',DTDATEAMENDED, DTOLDVALUE  'InceptionDate',LAUDITCOLUMNSKEY 'AuditKey'\n    from \n    policyactivity pa \n    inner join [dbo].[AUDITHEADER] AH on AH.LAUDITOBJECTINSTANCEKEY = pa.lPolicyActivityKey and AH.LAUDITOBJECTKEY = 611\n    left join [dbo].[AUDITROWS] AR on AR.LAUDITHEADERKEY=AH.LAUDITHEADERKEY and  AH.LAUDITOBJECTKEY = 611\n    left join  [dbo].[AUDITCOLUMNS] AC on AC.LAUDITROWSKEY=AR.LAUDITROWSKEY and AR.LAUDITOBJECTKEY = 611\n    where  AH.LAUDITOBJECTKEY = 611 \n    and  AR.LAUDITOBJECTKEY = 611 \n    and AC.LENTITYPROPERTYKEY in (6574)  \n\n\n    union all\n\n    -- latest inception date\n    select lpolicykey,cast(getdate() as date) 'DTDATEAMENDED',dtperiodfrom 'InceptionDate'  , 100000000 'Auditkey'\n    from policy\n    --where lpolicyKey in (177)\n    )c\n    )b\n    on a.lPolicyKey = b.lpolicyKey\n    and  a.DTTRANSITION  BETWEEN COALESCE(b.active_from ,'2002-01-01')  AND COALESCE(b.active_until,getdate())\n    )r\n    where rank =1\n\n)\n\n\nSELECT * FROM dates_per_account_period", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"stg_inception\""}, "model.iginsure.stg_inward_claims_amounts": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.iginsure.scd_claim", "model.iginsure.scd_claim_section", "model.iginsure.scd_claim_movement", "model.iginsure.scd_account_period", "model.iginsure.scd_currency", "model.iginsure.stg_current_account_period", "model.iginsure.stg_current_exchange_rate", "model.iginsure.stg_auth_mvmt_pending_financial", "model.iginsure.stg_entity_instance_states", "model.iginsure.stg_claim_mvmt_audit_state_transitions"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["InwardClaim"], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "staging", "stg_inward_claims_amounts"], "unique_id": "model.iginsure.stg_inward_claims_amounts", "raw_code": "{{ config(\r\n    tags=['InwardClaim']\r\n) }}\r\n\r\nwith\r\nclaim as (\r\n    select * from {{ ref('scd_claim') }} where _valid_to is null\r\n),\r\n\r\nclaim_section as (\r\n    select * from {{ ref('scd_claim_section') }} where _valid_to is null\r\n),\r\n\r\nclaim_movement as (\r\n    select * from {{ ref('scd_claim_movement') }} where _valid_to is null\r\n),\r\n\r\naccount_period as (\r\n    select * from {{ ref('scd_account_period') }} where _valid_to is null\r\n),\r\n\r\ncurrency as (\r\n    select * from {{ ref('scd_currency') }} where _valid_to is null\r\n),\r\n\r\ncurrent_account_period as (\r\n    select * from {{ ref('stg_current_account_period') }} \r\n),\r\n\r\n\r\ncurrent_exchange_rate as (\r\n    select * from {{ ref('stg_current_exchange_rate') }} \r\n\r\n),\r\n\r\nauth_mvmt_pending_financial as (\r\n    select * from {{ ref('stg_auth_mvmt_pending_financial') }} \r\n\r\n),\r\n\r\nentity_instance_states as (\r\n    select * from {{ ref('stg_entity_instance_states')}} \r\n    where entity_type_id = 531 --Claim Movement\r\n),\r\n\r\nclm_audit_state_transitions as (\r\n    select * from {{ref('stg_claim_mvmt_audit_state_transitions')}}\r\n),\r\n\r\n\r\n\r\n\r\ninward_amount as \r\n(\r\n--select col1,col2, (col1+col2) as col3 from test11\r\nselect IN_Amt2.*,\r\nIN_Amt2.TotalOSOrg+IN_Amt2.TotalPytsRcptsOrg AS TotalIncurredOrgCcy,\r\nIN_Amt2.TotalOsAcCcy+IN_Amt2.TotalPytsRcptsAcCcy AS TotalIncurredACCcy,\r\nIN_Amt2.LastOSAmountOrgCcyExpense+IN_Amt2.LastPytsRcptsAmountOrgExpense AS LastIncurredOrgExpense,\r\nIN_Amt2.LastOSAmountAcCcyExpense+IN_Amt2.LastPytsRcptsAmountACCcyExpense AS LastIncurredACCcyExpense,\r\nIN_Amt2.LastOSAmountOrgIND+IN_Amt2.LastPytsRcptsAmountOrgIND AS LastIncurredOrgIND,\r\nIN_Amt2.LastOSAmountACCcyIND+IN_Amt2.LastPytsRcptsAmountACCcyIND AS LastIncurredACCcyIND\r\n\r\n\r\n from (\r\n\r\n    select \r\n    IN_Amt.lClaimKey as claim_id,\r\n    IN_Amt.sclaimreference as claim_reference,\r\n    IN_Amt.lPolicyKey as policy_id,\r\n\tIN_Amt.sCcy,\r\n    IN_Amt.auth_paid_date,\r\n    IN_Amt.RIRef,\r\n    In_Amt.TypeOfRI,\r\n\r\n\tSUM(ISNULL(IN_Amt.TotalOSOrg,0)) AS TotalOSOrg,\r\n\tSUM(ISNULL(IN_Amt.TotalOsAcCcy,0)) AS TotalOsAcCcy,\r\n\r\n\r\n\tSUM(ISNULL(IN_Amt.LastOSAmountOrgCcyExpense,0)) AS LastOSAmountOrgCcyExpense,\r\n\tSUM(ISNULL(IN_Amt.LastOSAmountAcCcyExpense,0)) AS LastOSAmountAcCcyExpense,\r\n\r\n   \r\n\tSUM(ISNULL(IN_Amt.LastOSAmountOrgIND,0)) AS LastOSAmountOrgIND,\r\n    SUM(ISNULL(IN_Amt.LastOSAmountACCcyIND,0)) AS LastOSAmountACCcyIND,\r\n\r\n    SUM(ISNULL(IN_Amt.TotalPytsRcptsOrg,0)) AS TotalPytsRcptsOrg,\r\n    SUM(ISNULL(IN_Amt.TotalPytsRcptsAcCcy,0)) AS TotalPytsRcptsAcCcy,\r\n\r\n    SUM(ISNULL(IN_Amt.LastPytsRcptsAmountOrgExpense,0)) AS LastPytsRcptsAmountOrgExpense,\r\n    SUM(ISNULL(IN_Amt.LastPytsRcptsAmountACCcyExpense,0)) AS LastPytsRcptsAmountACCcyExpense,\r\n\r\n    SUM(ISNULL(IN_Amt.LastPytsRcptsAmountOrgIND,0)) AS LastPytsRcptsAmountOrgIND,\r\n    SUM(ISNULL(IN_Amt.LastPytsRcptsAmountACCcyIND,0)) AS LastPytsRcptsAmountACCcyIND\r\n\r\n    from (\r\n    select\r\n        C.lClaimKey,\r\n        C.sclaimreference,\r\n        C.lPolicyKey,\r\n        CU.sCcy,\r\n        COALESCE(ast.DTTRANSITION,CM.dtMovementCreated) as auth_paid_date ,\r\n        '' AS RIRef,\r\n        'GROSS' AS TypeOfRI,\r\n        --General OS (Org,Acc)\r\n        CASE WHEN ESMCM.entity_state_id  in( 2262,2263) THEN (CM.dTotalResChangeAuthOrigShare) ELSE 0 END AS TotalOSOrg,\r\n        CASE WHEN ESMCM.entity_state_id  in( 2262,2263) THEN CAST(CM.dTotalResChangeAuthOrigShare / EXRATE_OS.dROE AS DECIMAL (18,2)) ELSE 0 END AS TotalOsAcCcy ,\r\n        --Expense OS (Org,Acc)\r\n        CASE WHEN ESMCM.entity_state_id  in( 2262,2263) AND CM.lTransactionTypeKey = 16 /*Expense*/ THEN (CM.dTotalResChangeAuthOrigShare) ELSE 0 END AS LastOSAmountOrgCcyExpense,\r\n        CASE WHEN ESMCM.entity_state_id  in( 2262,2263) AND CM.lTransactionTypeKey = 16 /*Expense*/ THEN CAST(CM.dTotalResChangeAuthOrigShare / EXRATE_OS.dROE AS DECIMAL (18,2)) ELSE 0 END AS LastOSAmountAcCcyExpense,\r\n        --Indemnity OS (Org,Acc)\r\n        CASE WHEN ESMCM.entity_state_id  in( 2262,2263) AND CM.lTransactionTypeKey = 15 /*Indemnity*/ THEN (CM.dTotalResChangeAuthOrigShare) ELSE 0 END AS LastOSAmountOrgIND,\r\n        CASE WHEN ESMCM.entity_state_id  in( 2262,2263) AND CM.lTransactionTypeKey = 15 /*Indemnity*/ THEN CAST(CM.dTotalResChangeAuthOrigShare / EXRATE_OS.dROE AS DECIMAL (18,2) ) ELSE 0 END AS LastOSAmountACCcyIND,\r\n\t\t\r\n\r\n        --General Paid (Org,Acc)\r\n        CASE WHEN ESMCM.entity_state_id  in( 2262,2263) THEN(CASE WHEN CM.ltypeofmovementkey in(18,2000001,2000025,2000021,16)THEN -1* (CM.dPaidThisTimeOrigShare)ELSE (CM.dPaidThisTimeOrigShare)END   )ELSE 0 END AS TotalPytsRcptsOrg,\r\n\t\tCASE WHEN ESMCM.entity_state_id  in( 2262,2263) THEN(CASE WHEN CM.ltypeofmovementkey in(18,2000001,2000025,2000021,16)THEN -1* CAST(CM.dPaidThisTimeOrigShare / CM.dPayROEOrig AS DECIMAL (18,2) )ELSE CAST(CM.dPaidThisTimeOrigShare / CM.dPayROEOrig AS DECIMAL(18,2) )END ) ELSE 0 END AS TotalPytsRcptsAcCcy,\r\n        --Expense Paid(Org,Acc)\r\n        CASE WHEN ESMCM.entity_state_id  in( 2262,2263) AND CM.lTransactionTypeKey = 16 /*Expense*/ THEN (CASE WHEN CM.ltypeofmovementkey in(18,2000001,2000025,2000021,16)THEN -1* (CM.dPaidThisTimeOrigShare)ELSE (CM.dPaidThisTimeOrigShare) END   )ELSE 0 END AS LastPytsRcptsAmountOrgExpense,\r\n        CASE WHEN ESMCM.entity_state_id  in( 2262,2263) AND CM.lTransactionTypeKey = 16 /*Expense*/ THEN(CASE WHEN CM.ltypeofmovementkey in(18,2000001,2000025,2000021,16)THEN -1* CAST(CM.dPaidThisTimeOrigShare / CM.dPayROEOrig AS DECIMAL (18,2) )ELSE CAST(CM.dPaidThisTimeOrigShare / CM.dPayROEOrig AS DECIMAL(18,2) )END ) ELSE 0 END AS LastPytsRcptsAmountACCcyExpense,\r\n        --Indemnity Paid (Org,Acc)\r\n        CASE WHEN ESMCM.entity_state_id  in( 2262,2263) AND CM.lTransactionTypeKey = 15 /*Indemnity*/ THEN(CASE WHEN CM.ltypeofmovementkey in(18,2000001,2000025,2000021,16)THEN -1* (CM.dPaidThisTimeOrigShare)ELSE(CM.dPaidThisTimeOrigShare )END) ELSE 0 END AS LastPytsRcptsAmountOrgIND,\r\n        CASE WHEN ESMCM.entity_state_id  in( 2262,2263) AND CM.lTransactionTypeKey = 15 /*Indemnity*/ THEN(CASE WHEN CM.ltypeofmovementkey in(18,2000001,2000025,2000021,16)THEN -1* CAST(CM.dPaidThisTimeOrigShare / CM.dPayROEOrig AS DECIMAL (18,2) )ELSE CAST(CM.dPaidThisTimeOrigShare / CM.dPayROEOrig AS DECIMAL(18,2) )END ) ELSE 0 END AS LastPytsRcptsAmountACCcyIND\r\n\r\n\r\n\r\n\r\n    from\r\n        claim as c\r\n        left join claim_section as CS on\r\n            C.lClaimKey = CS.lClaimKey \r\n        LEFT JOIN claim_movement as CM ON\r\n            CS.lClaimSectionKey = CM.lClaimSectionKey\r\n        LEFT JOIN account_period as Acc_Period ON \r\n            CM.lAccountPeriodKey = Acc_Period.lAccountPeriodKey\r\n        LEFT JOIN currency as CU ON \r\n            CS.lReserveCcyOrigKey = CU.lCurrencyKey\r\n        LEFT join entity_instance_states ESMCM \r\n          on CM.lClaimMovementKey = ESMCM.instance_id\r\n        LEFT JOIN current_exchange_rate EXRATE_OS \r\n          on EXRATE_OS.lCurrencyKey=CM.lReserveCcyOrigKey\r\n        LEFT JOIN clm_audit_state_transitions ast \r\n          on CM.lClaimMovementKey = ast.linstancekey\r\n\r\n\r\n    where (Acc_Period.nYearPeriod<=(select AP from current_account_period)) \r\n    and (CM.lClaimMovementKey NOT IN(SELECT ISNULL(lClaimMovementKey,0) AS lClaimMovementKey FROM auth_mvmt_pending_financial))\r\n\r\n    \r\n    )IN_Amt\r\n    GROUP BY \r\n    IN_Amt.lClaimKey,\r\n\tIN_Amt.sclaimreference,\r\n    IN_Amt.lPolicyKey,\r\n\tIN_Amt.sCcy,\r\n    IN_Amt.auth_paid_date,\r\n    IN_Amt.RIRef,\r\n    IN_Amt.TypeOfRI\r\n\r\n)IN_Amt2\r\n    \r\n    \r\n)\r\n\r\nselect * from inward_amount", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "staging\\stg_inward_claims_amounts.sql", "original_file_path": "models\\staging\\stg_inward_claims_amounts.sql", "name": "stg_inward_claims_amounts", "alias": "stg_inward_claims_amounts", "checksum": {"name": "sha256", "checksum": "92074b7430af78f1537a9dd74c2df51d255ee5c198546bd8d6150a4141a4bd0b"}, "tags": ["InwardClaim"], "refs": [["scd_claim"], ["scd_claim_section"], ["scd_claim_movement"], ["scd_account_period"], ["scd_currency"], ["stg_current_account_period"], ["stg_current_exchange_rate"], ["stg_auth_mvmt_pending_financial"], ["stg_entity_instance_states"], ["stg_claim_mvmt_audit_state_transitions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\staging\\stg_inward_claims_amounts.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "tags": ["InwardClaim"]}, "created_at": 1701786801.0965383, "compiled_code": "\n\nwith\nclaim as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"scd_claim\" where _valid_to is null\n),\n\nclaim_section as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"scd_claim_section\" where _valid_to is null\n),\n\nclaim_movement as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"scd_claim_movement\" where _valid_to is null\n),\n\naccount_period as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"scd_account_period\" where _valid_to is null\n),\n\ncurrency as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"scd_currency\" where _valid_to is null\n),\n\ncurrent_account_period as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"stg_current_account_period\" \n),\n\n\ncurrent_exchange_rate as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"stg_current_exchange_rate\" \n\n),\n\nauth_mvmt_pending_financial as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"stg_auth_mvmt_pending_financial\" \n\n),\n\nentity_instance_states as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"stg_entity_instance_states\" \n    where entity_type_id = 531 --Claim Movement\n),\n\nclm_audit_state_transitions as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"stg_claim_mvmt_audit_state_transitions\"\n),\n\n\n\n\ninward_amount as \n(\n--select col1,col2, (col1+col2) as col3 from test11\nselect IN_Amt2.*,\nIN_Amt2.TotalOSOrg+IN_Amt2.TotalPytsRcptsOrg AS TotalIncurredOrgCcy,\nIN_Amt2.TotalOsAcCcy+IN_Amt2.TotalPytsRcptsAcCcy AS TotalIncurredACCcy,\nIN_Amt2.LastOSAmountOrgCcyExpense+IN_Amt2.LastPytsRcptsAmountOrgExpense AS LastIncurredOrgExpense,\nIN_Amt2.LastOSAmountAcCcyExpense+IN_Amt2.LastPytsRcptsAmountACCcyExpense AS LastIncurredACCcyExpense,\nIN_Amt2.LastOSAmountOrgIND+IN_Amt2.LastPytsRcptsAmountOrgIND AS LastIncurredOrgIND,\nIN_Amt2.LastOSAmountACCcyIND+IN_Amt2.LastPytsRcptsAmountACCcyIND AS LastIncurredACCcyIND\n\n\n from (\n\n    select \n    IN_Amt.lClaimKey as claim_id,\n    IN_Amt.sclaimreference as claim_reference,\n    IN_Amt.lPolicyKey as policy_id,\n\tIN_Amt.sCcy,\n    IN_Amt.auth_paid_date,\n    IN_Amt.RIRef,\n    In_Amt.TypeOfRI,\n\n\tSUM(ISNULL(IN_Amt.TotalOSOrg,0)) AS TotalOSOrg,\n\tSUM(ISNULL(IN_Amt.TotalOsAcCcy,0)) AS TotalOsAcCcy,\n\n\n\tSUM(ISNULL(IN_Amt.LastOSAmountOrgCcyExpense,0)) AS LastOSAmountOrgCcyExpense,\n\tSUM(ISNULL(IN_Amt.LastOSAmountAcCcyExpense,0)) AS LastOSAmountAcCcyExpense,\n\n   \n\tSUM(ISNULL(IN_Amt.LastOSAmountOrgIND,0)) AS LastOSAmountOrgIND,\n    SUM(ISNULL(IN_Amt.LastOSAmountACCcyIND,0)) AS LastOSAmountACCcyIND,\n\n    SUM(ISNULL(IN_Amt.TotalPytsRcptsOrg,0)) AS TotalPytsRcptsOrg,\n    SUM(ISNULL(IN_Amt.TotalPytsRcptsAcCcy,0)) AS TotalPytsRcptsAcCcy,\n\n    SUM(ISNULL(IN_Amt.LastPytsRcptsAmountOrgExpense,0)) AS LastPytsRcptsAmountOrgExpense,\n    SUM(ISNULL(IN_Amt.LastPytsRcptsAmountACCcyExpense,0)) AS LastPytsRcptsAmountACCcyExpense,\n\n    SUM(ISNULL(IN_Amt.LastPytsRcptsAmountOrgIND,0)) AS LastPytsRcptsAmountOrgIND,\n    SUM(ISNULL(IN_Amt.LastPytsRcptsAmountACCcyIND,0)) AS LastPytsRcptsAmountACCcyIND\n\n    from (\n    select\n        C.lClaimKey,\n        C.sclaimreference,\n        C.lPolicyKey,\n        CU.sCcy,\n        COALESCE(ast.DTTRANSITION,CM.dtMovementCreated) as auth_paid_date ,\n        '' AS RIRef,\n        'GROSS' AS TypeOfRI,\n        --General OS (Org,Acc)\n        CASE WHEN ESMCM.entity_state_id  in( 2262,2263) THEN (CM.dTotalResChangeAuthOrigShare) ELSE 0 END AS TotalOSOrg,\n        CASE WHEN ESMCM.entity_state_id  in( 2262,2263) THEN CAST(CM.dTotalResChangeAuthOrigShare / EXRATE_OS.dROE AS DECIMAL (18,2)) ELSE 0 END AS TotalOsAcCcy ,\n        --Expense OS (Org,Acc)\n        CASE WHEN ESMCM.entity_state_id  in( 2262,2263) AND CM.lTransactionTypeKey = 16 /*Expense*/ THEN (CM.dTotalResChangeAuthOrigShare) ELSE 0 END AS LastOSAmountOrgCcyExpense,\n        CASE WHEN ESMCM.entity_state_id  in( 2262,2263) AND CM.lTransactionTypeKey = 16 /*Expense*/ THEN CAST(CM.dTotalResChangeAuthOrigShare / EXRATE_OS.dROE AS DECIMAL (18,2)) ELSE 0 END AS LastOSAmountAcCcyExpense,\n        --Indemnity OS (Org,Acc)\n        CASE WHEN ESMCM.entity_state_id  in( 2262,2263) AND CM.lTransactionTypeKey = 15 /*Indemnity*/ THEN (CM.dTotalResChangeAuthOrigShare) ELSE 0 END AS LastOSAmountOrgIND,\n        CASE WHEN ESMCM.entity_state_id  in( 2262,2263) AND CM.lTransactionTypeKey = 15 /*Indemnity*/ THEN CAST(CM.dTotalResChangeAuthOrigShare / EXRATE_OS.dROE AS DECIMAL (18,2) ) ELSE 0 END AS LastOSAmountACCcyIND,\n\t\t\n\n        --General Paid (Org,Acc)\n        CASE WHEN ESMCM.entity_state_id  in( 2262,2263) THEN(CASE WHEN CM.ltypeofmovementkey in(18,2000001,2000025,2000021,16)THEN -1* (CM.dPaidThisTimeOrigShare)ELSE (CM.dPaidThisTimeOrigShare)END   )ELSE 0 END AS TotalPytsRcptsOrg,\n\t\tCASE WHEN ESMCM.entity_state_id  in( 2262,2263) THEN(CASE WHEN CM.ltypeofmovementkey in(18,2000001,2000025,2000021,16)THEN -1* CAST(CM.dPaidThisTimeOrigShare / CM.dPayROEOrig AS DECIMAL (18,2) )ELSE CAST(CM.dPaidThisTimeOrigShare / CM.dPayROEOrig AS DECIMAL(18,2) )END ) ELSE 0 END AS TotalPytsRcptsAcCcy,\n        --Expense Paid(Org,Acc)\n        CASE WHEN ESMCM.entity_state_id  in( 2262,2263) AND CM.lTransactionTypeKey = 16 /*Expense*/ THEN (CASE WHEN CM.ltypeofmovementkey in(18,2000001,2000025,2000021,16)THEN -1* (CM.dPaidThisTimeOrigShare)ELSE (CM.dPaidThisTimeOrigShare) END   )ELSE 0 END AS LastPytsRcptsAmountOrgExpense,\n        CASE WHEN ESMCM.entity_state_id  in( 2262,2263) AND CM.lTransactionTypeKey = 16 /*Expense*/ THEN(CASE WHEN CM.ltypeofmovementkey in(18,2000001,2000025,2000021,16)THEN -1* CAST(CM.dPaidThisTimeOrigShare / CM.dPayROEOrig AS DECIMAL (18,2) )ELSE CAST(CM.dPaidThisTimeOrigShare / CM.dPayROEOrig AS DECIMAL(18,2) )END ) ELSE 0 END AS LastPytsRcptsAmountACCcyExpense,\n        --Indemnity Paid (Org,Acc)\n        CASE WHEN ESMCM.entity_state_id  in( 2262,2263) AND CM.lTransactionTypeKey = 15 /*Indemnity*/ THEN(CASE WHEN CM.ltypeofmovementkey in(18,2000001,2000025,2000021,16)THEN -1* (CM.dPaidThisTimeOrigShare)ELSE(CM.dPaidThisTimeOrigShare )END) ELSE 0 END AS LastPytsRcptsAmountOrgIND,\n        CASE WHEN ESMCM.entity_state_id  in( 2262,2263) AND CM.lTransactionTypeKey = 15 /*Indemnity*/ THEN(CASE WHEN CM.ltypeofmovementkey in(18,2000001,2000025,2000021,16)THEN -1* CAST(CM.dPaidThisTimeOrigShare / CM.dPayROEOrig AS DECIMAL (18,2) )ELSE CAST(CM.dPaidThisTimeOrigShare / CM.dPayROEOrig AS DECIMAL(18,2) )END ) ELSE 0 END AS LastPytsRcptsAmountACCcyIND\n\n\n\n\n    from\n        claim as c\n        left join claim_section as CS on\n            C.lClaimKey = CS.lClaimKey \n        LEFT JOIN claim_movement as CM ON\n            CS.lClaimSectionKey = CM.lClaimSectionKey\n        LEFT JOIN account_period as Acc_Period ON \n            CM.lAccountPeriodKey = Acc_Period.lAccountPeriodKey\n        LEFT JOIN currency as CU ON \n            CS.lReserveCcyOrigKey = CU.lCurrencyKey\n        LEFT join entity_instance_states ESMCM \n          on CM.lClaimMovementKey = ESMCM.instance_id\n        LEFT JOIN current_exchange_rate EXRATE_OS \n          on EXRATE_OS.lCurrencyKey=CM.lReserveCcyOrigKey\n        LEFT JOIN clm_audit_state_transitions ast \n          on CM.lClaimMovementKey = ast.linstancekey\n\n\n    where (Acc_Period.nYearPeriod<=(select AP from current_account_period)) \n    and (CM.lClaimMovementKey NOT IN(SELECT ISNULL(lClaimMovementKey,0) AS lClaimMovementKey FROM auth_mvmt_pending_financial))\n\n    \n    )IN_Amt\n    GROUP BY \n    IN_Amt.lClaimKey,\n\tIN_Amt.sclaimreference,\n    IN_Amt.lPolicyKey,\n\tIN_Amt.sCcy,\n    IN_Amt.auth_paid_date,\n    IN_Amt.RIRef,\n    IN_Amt.TypeOfRI\n\n)IN_Amt2\n    \n    \n)\n\nselect * from inward_amount", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"stg_inward_claims_amounts\""}, "model.iginsure.stg_journal_activities": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.iginsure.scd_journal_activity", "model.iginsure.scd_entity_type", "model.iginsure.scd_journal_template"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "staging", "stg_journal_activities"], "unique_id": "model.iginsure.stg_journal_activities", "raw_code": "with\r\n\r\njournal_activity as (\r\n    select * from {{ ref('scd_journal_activity') }} where _valid_to is null\r\n),\r\n\r\nentity_type as (\r\n    select * from {{ ref('scd_entity_type') }} where _valid_to is null\r\n),\r\n\r\njournal_template as (\r\n    select * from {{ ref('scd_journal_template') }} where _valid_to is null\r\n),\r\n\r\njournal_pairs_flattened as (\r\n    select\r\n        journal_activity.\"lJournalActivityKey\" as journal_activity_id,\r\n        journal_activity.\"dtEntryDate\" as journal_entry_date,\r\n        source_entity_type.\"SENTITY\" as journal_source_entity_type,\r\n        journal_activity.\"lSourceInstanceKey\" as journal_source_instance_id,\r\n        journal_template.\"lTemplateJournalActivityKey\" as journal_template_id,\r\n        journal_template.\"sTemplateDescription\" as journal_template_description\r\n    from\r\n        journal_activity\r\n        inner join entity_type as source_entity_type on\r\n            journal_activity.\"lSourceEntityKey\" = source_entity_type.\"lEntityKey\"\r\n        inner join journal_template on\r\n            journal_activity.\"lTemplateJournalActivityKey\" = journal_template.\"lTemplateJournalActivityKey\"\r\n)\r\n\r\nselect * from journal_pairs_flattened", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "staging\\stg_journal_activities.sql", "original_file_path": "models\\staging\\stg_journal_activities.sql", "name": "stg_journal_activities", "alias": "stg_journal_activities", "checksum": {"name": "sha256", "checksum": "de2076b447fde771d4567aabb0988fb7657bf15715050240f9ea2435324177b2"}, "tags": [], "refs": [["scd_journal_activity"], ["scd_entity_type"], ["scd_journal_template"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": "iginsure://models\\staging\\staging.yml", "compiled_path": "target\\compiled\\iginsure\\models\\staging\\stg_journal_activities.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "docs": {"show": false}}, "created_at": 1701786801.92971, "compiled_code": "with\n\njournal_activity as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"scd_journal_activity\" where _valid_to is null\n),\n\nentity_type as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"scd_entity_type\" where _valid_to is null\n),\n\njournal_template as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"scd_journal_template\" where _valid_to is null\n),\n\njournal_pairs_flattened as (\n    select\n        journal_activity.\"lJournalActivityKey\" as journal_activity_id,\n        journal_activity.\"dtEntryDate\" as journal_entry_date,\n        source_entity_type.\"SENTITY\" as journal_source_entity_type,\n        journal_activity.\"lSourceInstanceKey\" as journal_source_instance_id,\n        journal_template.\"lTemplateJournalActivityKey\" as journal_template_id,\n        journal_template.\"sTemplateDescription\" as journal_template_description\n    from\n        journal_activity\n        inner join entity_type as source_entity_type on\n            journal_activity.\"lSourceEntityKey\" = source_entity_type.\"lEntityKey\"\n        inner join journal_template on\n            journal_activity.\"lTemplateJournalActivityKey\" = journal_template.\"lTemplateJournalActivityKey\"\n)\n\nselect * from journal_pairs_flattened", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"stg_journal_activities\""}, "model.iginsure.stg_journal_line_items": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.iginsure.scd_journal_line_item", "model.iginsure.scd_currency", "model.iginsure.scd_type_of_debit_credit", "model.iginsure.scd_type_of_accounting_element", "model.iginsure.scd_account"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "staging", "stg_journal_line_items"], "unique_id": "model.iginsure.stg_journal_line_items", "raw_code": "with\r\n\r\nline_items as (\r\n    select * from {{ ref('scd_journal_line_item')}} where _valid_to is null\r\n),\r\n\r\ncurrency as (\r\n    select * from {{ ref('scd_currency') }} where _valid_to is null\r\n),\r\n\r\ntype_of_debit_credit as (\r\n    select * from {{ ref('scd_type_of_debit_credit')}} where _valid_to is null\r\n),\r\n\r\ntype_of_accounting_element as (\r\n    select * from {{ ref('scd_type_of_accounting_element')}} where _valid_to is null\r\n),\r\n\r\naccount as (\r\n    select * from {{ ref('scd_account') }} where _valid_to is null\r\n),\r\n\r\nline_items_flattened as (\r\n    select\r\n        line_items.\"lJournalLineItemKey\" as journal_line_item_id,\r\n        line_items.\"lJournalPairKey\" as journal_pair_id,\r\n        line_items.\"lJournalActivityKey\" as journal_activity_id,\r\n        type_of_debit_credit.\"sDebitCredit\" as debit_credit,\r\n        account.\"sAccountNumber\" as account_number,\r\n        type_of_accounting_element.\"sTypeOfAccountingElement\" as account_type,\r\n        account.\"sAccountDescription\" as account_description,\r\n        original_currency.\"sCcy\" as original_currency,\r\n        line_items.\"dOriginalROE\" as original_roe,\r\n        line_items.\"dOriginalAmount\" as original_amount,\r\n        reporting_currency.\"sCcy\" as reporting_currency,\r\n        line_items.\"dReportingAmount\" as reporting_amount\r\n    from\r\n        line_items\r\n        inner join type_of_debit_credit on\r\n            line_items.\"lTypeOfDebitCreditKey\" = type_of_debit_credit.\"lTypeOfDebitCreditKey\"\r\n        inner join account on\r\n            line_items.\"lAccountKey\" = account.\"lAccountKey\"\r\n        inner join type_of_accounting_element on\r\n            account.\"lTypeOfAccountElementKey\" = type_of_accounting_element.\"lTypeOfAccountingElementKey\"\r\n        inner join currency as original_currency on\r\n            line_items.\"lOriginalCurrencyKey\" = original_currency.\"lCurrencyKey\"\r\n        inner join currency as reporting_currency on\r\n            line_items.\"lReportingCurrencyKey\" = reporting_currency.\"lCurrencyKey\"\r\n)\r\n\r\nselect * from line_items_flattened", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "staging\\stg_journal_line_items.sql", "original_file_path": "models\\staging\\stg_journal_line_items.sql", "name": "stg_journal_line_items", "alias": "stg_journal_line_items", "checksum": {"name": "sha256", "checksum": "1fee5c9a11a61dd77a2af840f09cfc33832e00659a6a9400add63b451311327f"}, "tags": [], "refs": [["scd_journal_line_item"], ["scd_currency"], ["scd_type_of_debit_credit"], ["scd_type_of_accounting_element"], ["scd_account"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": "iginsure://models\\staging\\staging.yml", "compiled_path": "target\\compiled\\iginsure\\models\\staging\\stg_journal_line_items.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "docs": {"show": false}}, "created_at": 1701786801.9317083, "compiled_code": "with\n\nline_items as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"scd_journal_line_item\" where _valid_to is null\n),\n\ncurrency as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"scd_currency\" where _valid_to is null\n),\n\ntype_of_debit_credit as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"scd_type_of_debit_credit\" where _valid_to is null\n),\n\ntype_of_accounting_element as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"scd_type_of_accounting_element\" where _valid_to is null\n),\n\naccount as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"scd_account\" where _valid_to is null\n),\n\nline_items_flattened as (\n    select\n        line_items.\"lJournalLineItemKey\" as journal_line_item_id,\n        line_items.\"lJournalPairKey\" as journal_pair_id,\n        line_items.\"lJournalActivityKey\" as journal_activity_id,\n        type_of_debit_credit.\"sDebitCredit\" as debit_credit,\n        account.\"sAccountNumber\" as account_number,\n        type_of_accounting_element.\"sTypeOfAccountingElement\" as account_type,\n        account.\"sAccountDescription\" as account_description,\n        original_currency.\"sCcy\" as original_currency,\n        line_items.\"dOriginalROE\" as original_roe,\n        line_items.\"dOriginalAmount\" as original_amount,\n        reporting_currency.\"sCcy\" as reporting_currency,\n        line_items.\"dReportingAmount\" as reporting_amount\n    from\n        line_items\n        inner join type_of_debit_credit on\n            line_items.\"lTypeOfDebitCreditKey\" = type_of_debit_credit.\"lTypeOfDebitCreditKey\"\n        inner join account on\n            line_items.\"lAccountKey\" = account.\"lAccountKey\"\n        inner join type_of_accounting_element on\n            account.\"lTypeOfAccountElementKey\" = type_of_accounting_element.\"lTypeOfAccountingElementKey\"\n        inner join currency as original_currency on\n            line_items.\"lOriginalCurrencyKey\" = original_currency.\"lCurrencyKey\"\n        inner join currency as reporting_currency on\n            line_items.\"lReportingCurrencyKey\" = reporting_currency.\"lCurrencyKey\"\n)\n\nselect * from line_items_flattened", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"stg_journal_line_items\""}, "model.iginsure.stg_journal_pairs": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.iginsure.scd_journal_pair", "model.iginsure.scd_entity_type", "model.iginsure.stg_account_period", "model.iginsure.stg_division", "model.iginsure.stg_subdivision"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "staging", "stg_journal_pairs"], "unique_id": "model.iginsure.stg_journal_pairs", "raw_code": "with\r\n\r\njournal_pair as (\r\n    select * from {{ ref('scd_journal_pair') }} where _valid_to is null\r\n),\r\n\r\nentity_type as (\r\n    select * from {{ ref('scd_entity_type') }} where _valid_to is null\r\n),\r\n\r\nstg_account_period as (\r\n    select * from {{ ref('stg_account_period') }}\r\n),\r\n\r\nstg_division as (\r\n    select * from {{ ref('stg_division') }}\r\n),\r\n\r\nstg_subdivision as (\r\n    select * from {{ ref('stg_subdivision') }}\r\n),\r\n\r\njournal_pairs_flattened as (\r\n    select\r\n        journal_pair.\"lJournalPairKey\" as journal_pair_id,\r\n        journal_pair.\"lJournalActivityKey\" as journal_activity_id,\r\n        stg_account_period.period_year_period as account_period,\r\n        journal_pair.\"dtROE\" as roe_date,\r\n        pair_entity_type.\"SENTITY\" as journal_pair_entity_type,\r\n        journal_pair.\"lInstanceKey\" as journal_pair_instance_id,\r\n        group_entity_type.\"SENTITY\" as group_by_entity_type,\r\n        journal_pair.\"sDescription\" as description,\r\n        stg_division.division,\r\n        stg_subdivision.subdivision\r\n    from\r\n        journal_pair\r\n        inner join entity_type as pair_entity_type on\r\n            journal_pair.\"lEntityKey\" = pair_entity_type.\"lEntityKey\"\r\n        inner join entity_type as group_entity_type on\r\n            journal_pair.\"lGroupByEntityKey\" = group_entity_type.\"lEntityKey\"\r\n        inner join stg_account_period on\r\n            journal_pair.\"lAccountPeriodKey\" = stg_account_period.account_period_id\r\n        inner join stg_division on\r\n            journal_pair.\"lDivisionKey\" = stg_division.division_id\r\n        inner join stg_subdivision on\r\n            journal_pair.\"lSubdivisionKey\" = stg_subdivision.subdivision_id\r\n)\r\n\r\nselect * from journal_pairs_flattened", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "staging\\stg_journal_pairs.sql", "original_file_path": "models\\staging\\stg_journal_pairs.sql", "name": "stg_journal_pairs", "alias": "stg_journal_pairs", "checksum": {"name": "sha256", "checksum": "f9a10f8a35a6e8196c49f55011bb0a4203faf32981009491e7e2ca55dde4fd60"}, "tags": [], "refs": [["scd_journal_pair"], ["scd_entity_type"], ["stg_account_period"], ["stg_division"], ["stg_subdivision"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": "iginsure://models\\staging\\staging.yml", "compiled_path": "target\\compiled\\iginsure\\models\\staging\\stg_journal_pairs.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "docs": {"show": false}}, "created_at": 1701786801.9329762, "compiled_code": "with\n\njournal_pair as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"scd_journal_pair\" where _valid_to is null\n),\n\nentity_type as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"scd_entity_type\" where _valid_to is null\n),\n\nstg_account_period as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"stg_account_period\"\n),\n\nstg_division as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"stg_division\"\n),\n\nstg_subdivision as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"stg_subdivision\"\n),\n\njournal_pairs_flattened as (\n    select\n        journal_pair.\"lJournalPairKey\" as journal_pair_id,\n        journal_pair.\"lJournalActivityKey\" as journal_activity_id,\n        stg_account_period.period_year_period as account_period,\n        journal_pair.\"dtROE\" as roe_date,\n        pair_entity_type.\"SENTITY\" as journal_pair_entity_type,\n        journal_pair.\"lInstanceKey\" as journal_pair_instance_id,\n        group_entity_type.\"SENTITY\" as group_by_entity_type,\n        journal_pair.\"sDescription\" as description,\n        stg_division.division,\n        stg_subdivision.subdivision\n    from\n        journal_pair\n        inner join entity_type as pair_entity_type on\n            journal_pair.\"lEntityKey\" = pair_entity_type.\"lEntityKey\"\n        inner join entity_type as group_entity_type on\n            journal_pair.\"lGroupByEntityKey\" = group_entity_type.\"lEntityKey\"\n        inner join stg_account_period on\n            journal_pair.\"lAccountPeriodKey\" = stg_account_period.account_period_id\n        inner join stg_division on\n            journal_pair.\"lDivisionKey\" = stg_division.division_id\n        inner join stg_subdivision on\n            journal_pair.\"lSubdivisionKey\" = stg_subdivision.subdivision_id\n)\n\nselect * from journal_pairs_flattened", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"stg_journal_pairs\""}, "model.iginsure.stg_latest_activity_per_policy": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.iginsure.scd_policy_activity"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "staging", "stg_latest_activity_per_policy"], "unique_id": "model.iginsure.stg_latest_activity_per_policy", "raw_code": "with policy_activity as (\r\n    select * from {{ ref('scd_policy_activity') }} where _valid_to is null\r\n),\r\n\r\n\r\nlatest_activivty_id as (\r\n\r\n    select lpolicykey,\r\n           MAX(lPolicyActivityKey) as latest_activity_id\r\n    from policy_activity\r\n    group by lpolicykey\r\n\r\n)\r\n\r\n\r\nselect * from latest_activivty_id", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "staging\\stg_latest_activity_per_policy.sql", "original_file_path": "models\\staging\\stg_latest_activity_per_policy.sql", "name": "stg_latest_activity_per_policy", "alias": "stg_latest_activity_per_policy", "checksum": {"name": "sha256", "checksum": "f67551cac970352febc7a40a32a25057023a78ff2b3848be7b3bb8e23b208b20"}, "tags": [], "refs": [["scd_policy_activity"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\staging\\stg_latest_activity_per_policy.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null}, "created_at": 1701786801.1089284, "compiled_code": "with policy_activity as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"scd_policy_activity\" where _valid_to is null\n),\n\n\nlatest_activivty_id as (\n\n    select lpolicykey,\n           MAX(lPolicyActivityKey) as latest_activity_id\n    from policy_activity\n    group by lpolicykey\n\n)\n\n\nselect * from latest_activivty_id", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"stg_latest_activity_per_policy\""}, "model.iginsure.stg_latest_activity_per_renewal_policy": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.iginsure.scd_policy_line", "model.iginsure.scd_policy_activity"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "staging", "stg_latest_activity_per_renewal_policy"], "unique_id": "model.iginsure.stg_latest_activity_per_renewal_policy", "raw_code": "with policy_line as (\r\n    select * from {{ ref('scd_policy_line') }} where _valid_to is null\r\n),\r\n\r\npolicy_activity as (\r\n    select * from {{ ref('scd_policy_activity') }} where _valid_to is null\r\n),\r\n\r\nlatest_activivty_id as (\r\n\r\n    select pa.lpolicykey,\r\n           MAX(pa.lPolicyActivityKey) as latest_activity_id\r\n    from policy_activity pa \r\n    inner join policy_line pl on pa.lPolicyActivityKey = pl.lPolicyActivityKey\r\n    where pl.llinkrenewalpolicykey is not null\r\n    group by pa.lpolicykey\r\n\r\n)\r\n\r\n\r\nselect * from latest_activivty_id", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "staging\\stg_latest_activity_per_renewal_policy.sql", "original_file_path": "models\\staging\\stg_latest_activity_per_renewal_policy.sql", "name": "stg_latest_activity_per_renewal_policy", "alias": "stg_latest_activity_per_renewal_policy", "checksum": {"name": "sha256", "checksum": "78c408f0078be0a96679b83eb1f24514a968d2698be93bc56ff68244d4ccad7c"}, "tags": [], "refs": [["scd_policy_line"], ["scd_policy_activity"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\staging\\stg_latest_activity_per_renewal_policy.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null}, "created_at": 1701786801.1109283, "compiled_code": "with policy_line as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"scd_policy_line\" where _valid_to is null\n),\n\npolicy_activity as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"scd_policy_activity\" where _valid_to is null\n),\n\nlatest_activivty_id as (\n\n    select pa.lpolicykey,\n           MAX(pa.lPolicyActivityKey) as latest_activity_id\n    from policy_activity pa \n    inner join policy_line pl on pa.lPolicyActivityKey = pl.lPolicyActivityKey\n    where pl.llinkrenewalpolicykey is not null\n    group by pa.lpolicykey\n\n)\n\n\nselect * from latest_activivty_id", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"stg_latest_activity_per_renewal_policy\""}, "model.iginsure.stg_outward_claims_amounts": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.iginsure.scd_claim", "model.iginsure.scd_claim_section", "model.iginsure.scd_claim_movement", "model.iginsure.scd_account_period", "model.iginsure.scd_currency", "model.iginsure.stg_entity_instance_states", "model.iginsure.scd_ri_policy", "model.iginsure.scd_ri_policy_period", "model.iginsure.scd_ri_policy_period_prop", "model.iginsure.stg_current_account_period", "model.iginsure.stg_current_exchange_rate", "model.iginsure.stg_claim_mvmt_audit_state_transitions"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["InwardPremium"], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "staging", "stg_outward_claims_amounts"], "unique_id": "model.iginsure.stg_outward_claims_amounts", "raw_code": "{{ config(\r\n    tags=['InwardPremium']\r\n) }}\r\n\r\nwith\r\nclaim as (\r\n    select * from {{ ref('scd_claim') }} where _valid_to is null\r\n),\r\n\r\nclaim_section as (\r\n    select * from {{ ref('scd_claim_section') }} where _valid_to is null\r\n),\r\n\r\nclaim_movement as (\r\n    select * from {{ ref('scd_claim_movement') }} where _valid_to is null\r\n),\r\n\r\naccount_period as (\r\n    select * from {{ ref('scd_account_period') }} where _valid_to is null\r\n),\r\n\r\ncurrency as (\r\n    select * from {{ ref('scd_currency') }} where _valid_to is null\r\n),\r\n\r\nentity_instance_states as (\r\n    select * from {{ ref('stg_entity_instance_states')}} where entity_type_id = 531 --Claim Movement\r\n),\r\n\r\nri_policy as (\r\n    select * from {{ ref('scd_ri_policy') }} where _valid_to is null\r\n),\r\n\r\nri_policy_period as (\r\n    select * from {{ ref('scd_ri_policy_period') }} where _valid_to is null\r\n),\r\n\r\nri_policy_period_prop as (\r\n    select * from {{ ref('scd_ri_policy_period_prop') }} where _valid_to is null and lEntityKey = 531 --Claim Movement\r\n),\r\n\r\ncurrent_account_period as (\r\n    select * from {{ ref('stg_current_account_period') }} \r\n),\r\n\r\ncurrent_exchange_rate as (\r\n    select * from {{ ref('stg_current_exchange_rate') }} \r\n\r\n),\r\n\r\nclm_audit_state_transitions as (\r\n    select * from {{ref('stg_claim_mvmt_audit_state_transitions')}}\r\n),\r\n\r\n\r\ninitial_ow as \r\n(\r\n    select\r\n        C.lClaimKey,\r\n        C.sClaimReference,\r\n        C.lPolicyKey,\r\n\t    CU.sCcy,\r\n        COALESCE(ast.DTTRANSITION,CM.dtMovementCreated) as auth_paid_date ,\r\n\t    RIP.sReference as RIRef,\r\n        tri.scode as TypeOfRI,\r\n\t\tcase when EISCM.entity_state_id in( 2262,2263) then RIPPP.dInwardsOSMovement else 0 end as TotalOSOrg ,\r\n\t\tcase when EISCM.entity_state_id in( 2262,2263) then RIPPP.dInwardsRecovery else 0 end as TotalPytsRcptsOrg, \r\n\r\n\t\tcase when EISCM.entity_state_id in( 2262,2263) then cast(RIPPP.dInwardsOSMovement / EXRATE_OS.dROE as decimal(18,2) ) else 0 end as TotalOsAcCcy ,\r\n\t\tcase when EISCM.entity_state_id in( 2262,2263) then cast(RIPPP.dInwardsRecovery / RIPPP.dInwardsROE as decimal(18,2) ) else 0 end as TotalPytsRcptsACCcy ,\r\n\r\n        ----OS IND /EXP Org ccy\r\n        case when EISCM.entity_state_id in( 2262,2263) and CM.lTransactionTypeKey = 15 /*Indemnity*/ then  RIPPP.dInwardsOSMovement else 0 end as LastOSAmountOrgIND, --New calculation\r\n\t\tcase when EISCM.entity_state_id in( 2262,2263) and CM.lTransactionTypeKey = 16 /*Expense*/ then  RIPPP.dInwardsOSMovement else 0 end as LastOSAmountOrgCcyExpense,\r\n\r\n\t\t----Paid IND /EXP Org ccy\r\n        case when EISCM.entity_state_id in( 2262,2263) and CM.lTransactionTypeKey = 15 /*Indemnity*/ then RIPPP.dInwardsRecovery else 0 end as LastPytsRcptsAmountOrgIND, --New Calculation\r\n        case when EISCM.entity_state_id in( 2262,2263) and CM.lTransactionTypeKey = 16 /*Expense*/ then RIPPP.dInwardsRecovery else 0 end as LastPytsRcptsAmountOrgExpense, --New Calculation\r\n\r\n\t\t----Paid IND /EXP Acc ccy\r\n\t\tcase when EISCM.entity_state_id in( 2262,2263) and CM.lTransactionTypeKey = 15 /*Indemnity*/ then cast(RIPPP.dInwardsRecovery / RIPPP.dInwardsROE as decimal(18,2) ) else 0 end as LastPytsRcptsAmountACCcyIND,\r\n\t\tcase when EISCM.entity_state_id in( 2262,2263) and CM.lTransactionTypeKey = 16 /*Expense*/ then cast(RIPPP.dInwardsRecovery / RIPPP.dInwardsROE as decimal(18,2) ) else 0 end as LastPytsRcptsAmountACCcyExpense,\r\n\r\n\t\t----OS IND /EXP Acc ccy\r\n\t\tcase when EISCM.entity_state_id in( 2262,2263) and CM.lTransactionTypeKey = 15 /*Indemnity*/ then cast(RIPPP.dInwardsOSMovement / EXRATE_OS.dROE as decimal(18,2) ) else 0 end as LastOSAmountACCcyIND,\r\n\t\tcase when EISCM.entity_state_id in( 2262,2263) and CM.lTransactionTypeKey = 16 /*Expense*/ then cast(RIPPP.dInwardsOSMovement / EXRATE_OS.dROE as decimal(18,2) ) else 0 end as LastOSAmountACCcyExpense  \r\n\r\n    from\r\n       \tclaim C \r\n        inner join claim_section CS on C.lClaimKey = CS.lClaimKey\r\n        inner join claim_movement CM on CS.lClaimSectionKey = CM.lClaimSectionKey\r\n        --inner join AccountPeriod Acc_Period on CM.lAccountPeriodKey = Acc_Period.lAccountPeriodKey\r\n        inner join currency CU on CS.lReserveCcyOrigKey = CU.lCurrencyKey\r\n        inner join entity_instance_states EISCM on CM.lClaimMovementKey = EISCM.instance_id \r\n        inner join current_exchange_rate EXRATE_OS on EXRATE_OS.lCurrencyKey = CM.lReserveCcyOrigKey\r\n        inner join ri_policy_period_prop RIPPP on CM.lClaimMovementKey = RIPPP.lClaimMovementKey\r\n        inner join ri_policy_period RI_Period on RIPPP.lRIPolicyPeriodKey = RI_Period.lRIPolicyPeriodKey\r\n        inner join account_period Acc_Period on RI_Period.lAccountPeriodKey = Acc_Period.lAccountPeriodKey\r\n        inner join ri_policy RIP on RIPPP.lRIPolicyKey = RIP.lRIPolicyKey\r\n        left join  clm_audit_state_transitions ast on CM.lClaimMovementKey = ast.linstancekey\r\n        inner JOIN RIActivity RIA ON RIPPP.lRIActivityKey = RIA.lRIActivityKey\r\n\t\tLEFT JOIN TypeOfRiPolicy tri ON tri.LTYPEOFRIPOLICYKEY = RIA.lTypeOfRIPolicyKey\r\n        INNER JOIN RISection RIS ON RIA.lRIActivityKey = RIS.lRIActivityKey\r\n\r\n    where \r\n        --C.lClaimKey NOT IN(SELECT DISTINCT ISNULL(lClaimKey,0) as ClaimKey FROM #BureauClaims UNIon SELECT DISTINCT ISNULL(lLinkedClaimKey,0) as ClaimKey from #BureauClaims_LinkedClaims)\r\n\t\t--AND \r\n\t\t--RIPPP.lEntityKey = case when C.bBureauClaim = -1 AND CM.lTypeOfMovementKey NOT IN(10,21) /*Reserve Amendment,Initial Reserve*/ then 1359 else 531 end\r\n\t\tAcc_Period.nYearPeriod<=(select AP from current_account_period)\r\n),\r\n\r\noutward_amount as (\r\n    select  OW_Amt.lClaimKey as claim_id,\r\n            OW_Amt.sClaimReference as claim_reference,\r\n            OW_Amt.lPolicyKey as policy_id,\r\n            OW_Amt.sCcy,\r\n            OW_Amt.auth_paid_date,\r\n            OW_Amt.RIRef,\r\n            OW_Amt.TypeOfRI,\r\n            sum(isnull(OW_Amt.TotalOSOrg, 0))                       as TotalOSOrg,\r\n            sum(isnull(OW_Amt.TotalOsAcCcy, 0))                     as TotalOsAcCcy,\r\n            sum(isnull(OW_Amt.LastOSAmountOrgCcyExpense, 0))        as LastOSAmountOrgCcyExpense,\r\n            sum(isnull(OW_Amt.LastOSAmountACCcyExpense, 0))         as LastOSAmountACCcyExpense,\r\n            sum(isnull(OW_Amt.LastOSAmountOrgIND, 0))               as LastOSAmountOrgIND, -- new calculation\r\n            sum(isnull(OW_Amt.LastOSAmountACCcyIND, 0))             as LastOSAmountACCcyIND,\r\n            sum(isnull(OW_Amt.TotalPytsRcptsOrg, 0))                as TotalPytsRcptsOrg,\r\n            sum(isnull(OW_Amt.TotalPytsRcptsACCcy, 0))              as TotalPytsRcptsACCcy,\r\n            sum(isnull(OW_Amt.LastPytsRcptsAmountOrgExpense, 0))    as LastPytsRcptsAmountOrgExpense, -- new calculation\r\n            sum(isnull(OW_Amt.LastPytsRcptsAmountACCcyExpense, 0))  as LastPytsRcptsAmountACCcyExpense,\r\n            sum(isnull(OW_Amt.LastPytsRcptsAmountOrgIND, 0))        as LastPytsRcptsAmountOrgIND, -- new calculation\r\n            sum(isnull(OW_Amt.LastPytsRcptsAmountACCcyIND, 0))      as LastPytsRcptsAmountACCcyIND,\r\n        \r\n            -- Incurred calculations\r\n            sum(isnull(OW_Amt.TotalOSOrg, 0)) + sum(isnull(OW_Amt.TotalPytsRcptsOrg, 0))                                as TotalIncurredOrgCcy,\r\n            sum(isnull(OW_Amt.TotalOsAcCcy, 0)) + sum(isnull(OW_Amt.TotalPytsRcptsACCcy, 0))                            as TotalIncurredACCcy,\r\n            sum(isnull(OW_Amt.LastOSAmountOrgCcyExpense, 0)) + sum(isnull(OW_Amt.LastPytsRcptsAmountOrgExpense, 0))     as LastIncurredOrgExpense,\r\n            sum(isnull(OW_Amt.LastOSAmountACCcyExpense, 0)) + sum(isnull(OW_Amt.LastPytsRcptsAmountACCcyExpense, 0))    as LastIncurredACCcyExpense,\r\n            sum(isnull(OW_Amt.LastOSAmountOrgIND, 0)) + sum(isnull(OW_Amt.LastPytsRcptsAmountOrgIND, 0))                as LastIncurredOrgIND,\r\n            sum(isnull(OW_Amt.LastOSAmountACCcyIND, 0)) + sum(isnull(OW_Amt.LastPytsRcptsAmountACCcyIND, 0))            as LastIncurredACCcyIND\r\n            \r\n    from    initial_ow OW_Amt\r\n    group by \r\n            OW_Amt.lClaimKey,\r\n            OW_Amt.sClaimReference,\r\n            OW_Amt.lPolicyKey,\r\n            OW_Amt.sCcy,\r\n            OW_Amt.auth_paid_date,\r\n            OW_Amt.RIRef,\r\n            OW_Amt.TypeOfRI\r\n            \r\n)\r\n\r\n\r\nselect * from outward_amount", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "staging\\stg_outward_claims_amounts.sql", "original_file_path": "models\\staging\\stg_outward_claims_amounts.sql", "name": "stg_outward_claims_amounts", "alias": "stg_outward_claims_amounts", "checksum": {"name": "sha256", "checksum": "6e3fa9eb88a3c3bec90c7aad0e25309abce935c2aac2feba0989437393b4364e"}, "tags": ["InwardPremium"], "refs": [["scd_claim"], ["scd_claim_section"], ["scd_claim_movement"], ["scd_account_period"], ["scd_currency"], ["stg_entity_instance_states"], ["scd_ri_policy"], ["scd_ri_policy_period"], ["scd_ri_policy_period_prop"], ["stg_current_account_period"], ["stg_current_exchange_rate"], ["stg_claim_mvmt_audit_state_transitions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\staging\\stg_outward_claims_amounts.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "tags": ["InwardPremium"]}, "created_at": 1701786801.113272, "compiled_code": "\n\nwith\nclaim as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"scd_claim\" where _valid_to is null\n),\n\nclaim_section as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"scd_claim_section\" where _valid_to is null\n),\n\nclaim_movement as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"scd_claim_movement\" where _valid_to is null\n),\n\naccount_period as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"scd_account_period\" where _valid_to is null\n),\n\ncurrency as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"scd_currency\" where _valid_to is null\n),\n\nentity_instance_states as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"stg_entity_instance_states\" where entity_type_id = 531 --Claim Movement\n),\n\nri_policy as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"scd_ri_policy\" where _valid_to is null\n),\n\nri_policy_period as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"scd_ri_policy_period\" where _valid_to is null\n),\n\nri_policy_period_prop as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"scd_ri_policy_period_prop\" where _valid_to is null and lEntityKey = 531 --Claim Movement\n),\n\ncurrent_account_period as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"stg_current_account_period\" \n),\n\ncurrent_exchange_rate as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"stg_current_exchange_rate\" \n\n),\n\nclm_audit_state_transitions as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"stg_claim_mvmt_audit_state_transitions\"\n),\n\n\ninitial_ow as \n(\n    select\n        C.lClaimKey,\n        C.sClaimReference,\n        C.lPolicyKey,\n\t    CU.sCcy,\n        COALESCE(ast.DTTRANSITION,CM.dtMovementCreated) as auth_paid_date ,\n\t    RIP.sReference as RIRef,\n        tri.scode as TypeOfRI,\n\t\tcase when EISCM.entity_state_id in( 2262,2263) then RIPPP.dInwardsOSMovement else 0 end as TotalOSOrg ,\n\t\tcase when EISCM.entity_state_id in( 2262,2263) then RIPPP.dInwardsRecovery else 0 end as TotalPytsRcptsOrg, \n\n\t\tcase when EISCM.entity_state_id in( 2262,2263) then cast(RIPPP.dInwardsOSMovement / EXRATE_OS.dROE as decimal(18,2) ) else 0 end as TotalOsAcCcy ,\n\t\tcase when EISCM.entity_state_id in( 2262,2263) then cast(RIPPP.dInwardsRecovery / RIPPP.dInwardsROE as decimal(18,2) ) else 0 end as TotalPytsRcptsACCcy ,\n\n        ----OS IND /EXP Org ccy\n        case when EISCM.entity_state_id in( 2262,2263) and CM.lTransactionTypeKey = 15 /*Indemnity*/ then  RIPPP.dInwardsOSMovement else 0 end as LastOSAmountOrgIND, --New calculation\n\t\tcase when EISCM.entity_state_id in( 2262,2263) and CM.lTransactionTypeKey = 16 /*Expense*/ then  RIPPP.dInwardsOSMovement else 0 end as LastOSAmountOrgCcyExpense,\n\n\t\t----Paid IND /EXP Org ccy\n        case when EISCM.entity_state_id in( 2262,2263) and CM.lTransactionTypeKey = 15 /*Indemnity*/ then RIPPP.dInwardsRecovery else 0 end as LastPytsRcptsAmountOrgIND, --New Calculation\n        case when EISCM.entity_state_id in( 2262,2263) and CM.lTransactionTypeKey = 16 /*Expense*/ then RIPPP.dInwardsRecovery else 0 end as LastPytsRcptsAmountOrgExpense, --New Calculation\n\n\t\t----Paid IND /EXP Acc ccy\n\t\tcase when EISCM.entity_state_id in( 2262,2263) and CM.lTransactionTypeKey = 15 /*Indemnity*/ then cast(RIPPP.dInwardsRecovery / RIPPP.dInwardsROE as decimal(18,2) ) else 0 end as LastPytsRcptsAmountACCcyIND,\n\t\tcase when EISCM.entity_state_id in( 2262,2263) and CM.lTransactionTypeKey = 16 /*Expense*/ then cast(RIPPP.dInwardsRecovery / RIPPP.dInwardsROE as decimal(18,2) ) else 0 end as LastPytsRcptsAmountACCcyExpense,\n\n\t\t----OS IND /EXP Acc ccy\n\t\tcase when EISCM.entity_state_id in( 2262,2263) and CM.lTransactionTypeKey = 15 /*Indemnity*/ then cast(RIPPP.dInwardsOSMovement / EXRATE_OS.dROE as decimal(18,2) ) else 0 end as LastOSAmountACCcyIND,\n\t\tcase when EISCM.entity_state_id in( 2262,2263) and CM.lTransactionTypeKey = 16 /*Expense*/ then cast(RIPPP.dInwardsOSMovement / EXRATE_OS.dROE as decimal(18,2) ) else 0 end as LastOSAmountACCcyExpense  \n\n    from\n       \tclaim C \n        inner join claim_section CS on C.lClaimKey = CS.lClaimKey\n        inner join claim_movement CM on CS.lClaimSectionKey = CM.lClaimSectionKey\n        --inner join AccountPeriod Acc_Period on CM.lAccountPeriodKey = Acc_Period.lAccountPeriodKey\n        inner join currency CU on CS.lReserveCcyOrigKey = CU.lCurrencyKey\n        inner join entity_instance_states EISCM on CM.lClaimMovementKey = EISCM.instance_id \n        inner join current_exchange_rate EXRATE_OS on EXRATE_OS.lCurrencyKey = CM.lReserveCcyOrigKey\n        inner join ri_policy_period_prop RIPPP on CM.lClaimMovementKey = RIPPP.lClaimMovementKey\n        inner join ri_policy_period RI_Period on RIPPP.lRIPolicyPeriodKey = RI_Period.lRIPolicyPeriodKey\n        inner join account_period Acc_Period on RI_Period.lAccountPeriodKey = Acc_Period.lAccountPeriodKey\n        inner join ri_policy RIP on RIPPP.lRIPolicyKey = RIP.lRIPolicyKey\n        left join  clm_audit_state_transitions ast on CM.lClaimMovementKey = ast.linstancekey\n        inner JOIN RIActivity RIA ON RIPPP.lRIActivityKey = RIA.lRIActivityKey\n\t\tLEFT JOIN TypeOfRiPolicy tri ON tri.LTYPEOFRIPOLICYKEY = RIA.lTypeOfRIPolicyKey\n        INNER JOIN RISection RIS ON RIA.lRIActivityKey = RIS.lRIActivityKey\n\n    where \n        --C.lClaimKey NOT IN(SELECT DISTINCT ISNULL(lClaimKey,0) as ClaimKey FROM #BureauClaims UNIon SELECT DISTINCT ISNULL(lLinkedClaimKey,0) as ClaimKey from #BureauClaims_LinkedClaims)\n\t\t--AND \n\t\t--RIPPP.lEntityKey = case when C.bBureauClaim = -1 AND CM.lTypeOfMovementKey NOT IN(10,21) /*Reserve Amendment,Initial Reserve*/ then 1359 else 531 end\n\t\tAcc_Period.nYearPeriod<=(select AP from current_account_period)\n),\n\noutward_amount as (\n    select  OW_Amt.lClaimKey as claim_id,\n            OW_Amt.sClaimReference as claim_reference,\n            OW_Amt.lPolicyKey as policy_id,\n            OW_Amt.sCcy,\n            OW_Amt.auth_paid_date,\n            OW_Amt.RIRef,\n            OW_Amt.TypeOfRI,\n            sum(isnull(OW_Amt.TotalOSOrg, 0))                       as TotalOSOrg,\n            sum(isnull(OW_Amt.TotalOsAcCcy, 0))                     as TotalOsAcCcy,\n            sum(isnull(OW_Amt.LastOSAmountOrgCcyExpense, 0))        as LastOSAmountOrgCcyExpense,\n            sum(isnull(OW_Amt.LastOSAmountACCcyExpense, 0))         as LastOSAmountACCcyExpense,\n            sum(isnull(OW_Amt.LastOSAmountOrgIND, 0))               as LastOSAmountOrgIND, -- new calculation\n            sum(isnull(OW_Amt.LastOSAmountACCcyIND, 0))             as LastOSAmountACCcyIND,\n            sum(isnull(OW_Amt.TotalPytsRcptsOrg, 0))                as TotalPytsRcptsOrg,\n            sum(isnull(OW_Amt.TotalPytsRcptsACCcy, 0))              as TotalPytsRcptsACCcy,\n            sum(isnull(OW_Amt.LastPytsRcptsAmountOrgExpense, 0))    as LastPytsRcptsAmountOrgExpense, -- new calculation\n            sum(isnull(OW_Amt.LastPytsRcptsAmountACCcyExpense, 0))  as LastPytsRcptsAmountACCcyExpense,\n            sum(isnull(OW_Amt.LastPytsRcptsAmountOrgIND, 0))        as LastPytsRcptsAmountOrgIND, -- new calculation\n            sum(isnull(OW_Amt.LastPytsRcptsAmountACCcyIND, 0))      as LastPytsRcptsAmountACCcyIND,\n        \n            -- Incurred calculations\n            sum(isnull(OW_Amt.TotalOSOrg, 0)) + sum(isnull(OW_Amt.TotalPytsRcptsOrg, 0))                                as TotalIncurredOrgCcy,\n            sum(isnull(OW_Amt.TotalOsAcCcy, 0)) + sum(isnull(OW_Amt.TotalPytsRcptsACCcy, 0))                            as TotalIncurredACCcy,\n            sum(isnull(OW_Amt.LastOSAmountOrgCcyExpense, 0)) + sum(isnull(OW_Amt.LastPytsRcptsAmountOrgExpense, 0))     as LastIncurredOrgExpense,\n            sum(isnull(OW_Amt.LastOSAmountACCcyExpense, 0)) + sum(isnull(OW_Amt.LastPytsRcptsAmountACCcyExpense, 0))    as LastIncurredACCcyExpense,\n            sum(isnull(OW_Amt.LastOSAmountOrgIND, 0)) + sum(isnull(OW_Amt.LastPytsRcptsAmountOrgIND, 0))                as LastIncurredOrgIND,\n            sum(isnull(OW_Amt.LastOSAmountACCcyIND, 0)) + sum(isnull(OW_Amt.LastPytsRcptsAmountACCcyIND, 0))            as LastIncurredACCcyIND\n            \n    from    initial_ow OW_Amt\n    group by \n            OW_Amt.lClaimKey,\n            OW_Amt.sClaimReference,\n            OW_Amt.lPolicyKey,\n            OW_Amt.sCcy,\n            OW_Amt.auth_paid_date,\n            OW_Amt.RIRef,\n            OW_Amt.TypeOfRI\n            \n)\n\n\nselect * from outward_amount", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"stg_outward_claims_amounts\""}, "model.iginsure.stg_product": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.iginsure.scd_product"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["InwardPremium"], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "staging", "stg_product"], "unique_id": "model.iginsure.stg_product", "raw_code": "{{\r\n  config(tags=['InwardPremium'])\r\n}}\r\n\r\nwith\r\nproduct as (\r\n    select * from {{ ref('scd_product') }} where _valid_to is null\r\n),\r\n\r\nrenamed as (\r\n    select\r\n        \"LPRODUCTKEY\" as product_id,\r\n        \"SPRODUCT\" as product_name,\r\n        \"lTypeOfProductGroupKey\" as product_group_id\r\n    from\r\n        product\r\n)\r\n\r\nselect * from renamed", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "staging\\stg_product.sql", "original_file_path": "models\\staging\\stg_product.sql", "name": "stg_product", "alias": "stg_product", "checksum": {"name": "sha256", "checksum": "0c6c3b844494a039317b4232898b92ca054d51fef44691dc8d495107a60ebf74"}, "tags": ["InwardPremium"], "refs": [["scd_product"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": "iginsure://models\\staging\\staging.yml", "compiled_path": "target\\compiled\\iginsure\\models\\staging\\stg_product.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "docs": {"show": false}, "tags": ["InwardPremium"]}, "created_at": 1701786801.935329, "compiled_code": "\n\nwith\nproduct as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"scd_product\" where _valid_to is null\n),\n\nrenamed as (\n    select\n        \"LPRODUCTKEY\" as product_id,\n        \"SPRODUCT\" as product_name,\n        \"lTypeOfProductGroupKey\" as product_group_id\n    from\n        product\n)\n\nselect * from renamed", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"stg_product\""}, "model.iginsure.stg_subdivision": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.iginsure.scd_sub_division"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["InwardPremium"], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "staging", "stg_subdivision"], "unique_id": "model.iginsure.stg_subdivision", "raw_code": "{{\r\n  config(tags=['InwardPremium'])\r\n}}\r\n\r\n\r\nwith\r\n\r\nsubdivision as (\r\n    select * from {{ ref('scd_sub_division') }} where _valid_to is null\r\n),\r\n\r\nrelabelled as (\r\n    select\r\n        \"lSubDivisionKey\" as subdivision_id,\r\n        case sCode\r\n            when 'JD' then 'JOR'\r\n            when 'BE' then 'BER'\r\n            when 'LA' then 'LAB'\r\n            when 'DU' then 'DUB'\r\n            when 'CS' then 'CAS'\r\n            when 'TK' then 'TAK'\r\n            when 'LO' then 'LON'\r\n            when 'EU' then 'EUR'\r\n            when 'NR' then 'NOR'\r\n            else 'NA'\r\n        end as subdivision,\r\n\r\n        sSubDivision as subdivision_desc\r\n    from\r\n        subdivision\r\n)\r\n\r\nselect * from relabelled", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "staging\\stg_subdivision.sql", "original_file_path": "models\\staging\\stg_subdivision.sql", "name": "stg_subdivision", "alias": "stg_subdivision", "checksum": {"name": "sha256", "checksum": "a77ee5330dfbf0262972109e11b87b106daf40e49123c9c86cce66a7a0e8277f"}, "tags": ["InwardPremium"], "refs": [["scd_sub_division"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": "iginsure://models\\staging\\staging.yml", "compiled_path": "target\\compiled\\iginsure\\models\\staging\\stg_subdivision.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "docs": {"show": false}, "tags": ["InwardPremium"]}, "created_at": 1701786801.9403188, "compiled_code": "\n\n\nwith\n\nsubdivision as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"scd_sub_division\" where _valid_to is null\n),\n\nrelabelled as (\n    select\n        \"lSubDivisionKey\" as subdivision_id,\n        case sCode\n            when 'JD' then 'JOR'\n            when 'BE' then 'BER'\n            when 'LA' then 'LAB'\n            when 'DU' then 'DUB'\n            when 'CS' then 'CAS'\n            when 'TK' then 'TAK'\n            when 'LO' then 'LON'\n            when 'EU' then 'EUR'\n            when 'NR' then 'NOR'\n            else 'NA'\n        end as subdivision,\n\n        sSubDivision as subdivision_desc\n    from\n        subdivision\n)\n\nselect * from relabelled", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"stg_subdivision\""}, "model.iginsure.stg_time_series": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "staging", "stg_time_series"], "unique_id": "model.iginsure.stg_time_series", "raw_code": "with digits as (\r\n    select cast(value as integer) as number from string_split('0,1,2,3,4,5,6,7,8,9', ',')\r\n),\r\n\r\nnumbers as (\r\n    select\r\n        thousands.number * 1000 + hundreds.number * 100 + tens.number * 10 + ones.number as number\r\n    from\r\n        digits as ones\r\n        cross join digits as tens\r\n        cross join digits as hundreds\r\n        cross join digits as thousands\r\n),\r\n\r\ndates as (\r\n    select\r\n        dateadd(day, number, '2000-01-01') as date\r\n    from\r\n        numbers\r\n),\r\n\r\nspine as (\r\n    select\r\n        cast(date as date) as date,\r\n        dateadd(year, datediff(year, 0, date), 0) as year,\r\n        dateadd(quarter, datediff(quarter, 0, date), 0) as quarter,\r\n        dateadd(month, datediff(month, 0, date), 0) as month,\r\n        dateadd(week, datediff(week, 0, date), 0) as week,\r\n        datepart(dayofyear, date) as day_of_year,\r\n        datepart(day, date) as day_of_month,\r\n        datepart(weekday, date) as weekday\r\n    from\r\n        dates\r\n),\r\n\r\nperiods as (\r\n    select\r\n        *,\r\n        dateadd(year, 1, year) as yoy1,\r\n        dateadd(year, 2, year) as yoy2,\r\n        dateadd(year, 3, year) as yoy3,\r\n        dateadd(year, 1, quarter) as yoy1_by_quarter,\r\n        dateadd(year, 2, quarter) as yoy2_by_quarter,\r\n        dateadd(year, 3, quarter) as yoy3_by_quarter,\r\n        dateadd(year, 1, month) as yoy1_by_month,\r\n        dateadd(year, 2, month) as yoy2_by_month,\r\n        dateadd(year, 3, month) as yoy3_by_month,\r\n        dateadd(month, 1, month) as mom1,\r\n        dateadd(month, 2, month) as mom2,\r\n        dateadd(month, 3, month) as mom3\r\n    from\r\n        spine\r\n)\r\n\r\nselect * from periods", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "staging\\stg_time_series.sql", "original_file_path": "models\\staging\\stg_time_series.sql", "name": "stg_time_series", "alias": "stg_time_series", "checksum": {"name": "sha256", "checksum": "3fb99375336fa6cdca077b07d7a598602ec3706e15f6aa63df017f1997357d3c"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": "iginsure://models\\staging\\staging.yml", "compiled_path": "target\\compiled\\iginsure\\models\\staging\\stg_time_series.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "docs": {"show": false}}, "created_at": 1701786801.9423156, "compiled_code": "with digits as (\r\n    select cast(value as integer) as number from string_split('0,1,2,3,4,5,6,7,8,9', ',')\r\n),\r\n\r\nnumbers as (\r\n    select\r\n        thousands.number * 1000 + hundreds.number * 100 + tens.number * 10 + ones.number as number\r\n    from\r\n        digits as ones\r\n        cross join digits as tens\r\n        cross join digits as hundreds\r\n        cross join digits as thousands\r\n),\r\n\r\ndates as (\r\n    select\r\n        dateadd(day, number, '2000-01-01') as date\r\n    from\r\n        numbers\r\n),\r\n\r\nspine as (\r\n    select\r\n        cast(date as date) as date,\r\n        dateadd(year, datediff(year, 0, date), 0) as year,\r\n        dateadd(quarter, datediff(quarter, 0, date), 0) as quarter,\r\n        dateadd(month, datediff(month, 0, date), 0) as month,\r\n        dateadd(week, datediff(week, 0, date), 0) as week,\r\n        datepart(dayofyear, date) as day_of_year,\r\n        datepart(day, date) as day_of_month,\r\n        datepart(weekday, date) as weekday\r\n    from\r\n        dates\r\n),\r\n\r\nperiods as (\r\n    select\r\n        *,\r\n        dateadd(year, 1, year) as yoy1,\r\n        dateadd(year, 2, year) as yoy2,\r\n        dateadd(year, 3, year) as yoy3,\r\n        dateadd(year, 1, quarter) as yoy1_by_quarter,\r\n        dateadd(year, 2, quarter) as yoy2_by_quarter,\r\n        dateadd(year, 3, quarter) as yoy3_by_quarter,\r\n        dateadd(year, 1, month) as yoy1_by_month,\r\n        dateadd(year, 2, month) as yoy2_by_month,\r\n        dateadd(year, 3, month) as yoy3_by_month,\r\n        dateadd(month, 1, month) as mom1,\r\n        dateadd(month, 2, month) as mom2,\r\n        dateadd(month, 3, month) as mom3\r\n    from\r\n        spine\r\n)\r\n\r\nselect * from periods", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"stg_time_series\""}, "model.iginsure.stg_type_of_monetary_amount": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.iginsure.scd_type_of_monetary_amount"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["InwardPremium"], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "staging", "stg_type_of_monetary_amount"], "unique_id": "model.iginsure.stg_type_of_monetary_amount", "raw_code": "{{\r\n  config(tags=['InwardPremium'])\r\n}}\r\n\r\nwith\r\n\r\ntoma as (\r\n    select * from {{ ref('scd_type_of_monetary_amount') }} where _valid_to is null\r\n),\r\n\r\nstg_toma as (\r\n    select\r\n        toma.lTypeOfMonetaryAmountKey as type_of_monetary_amount_id,\r\n        toma.sCode as toma_code,\r\n        toma.sTypeOfMonetaryAmount as type_of_monetary_amount,\r\n        case\r\n            when toma.sCode in (\r\n                'BKG','COM','FEE','ODD',\r\n                'ORC','TAX','SRB','AMF',\r\n                'INT','PDF','CDM','AGD',\r\n                'AGU','AGN','AGE','MUM',\r\n                'FIN','SEG','RBT','PCM',\r\n                'TRL','SI_SUR','SI_SURI','AGO'\r\n            )\r\n            then cast('TRUE' as bit)\r\n            else cast('FALSE' as bit)\r\n        end as is_acq_cost,\r\n        case\r\n            when toma.sCode in (\r\n                '759','502','517','APR_RIP',\r\n                '503','505','753','ORI','WKA',\r\n                'WKB','WKO','RBC','501'\r\n            )\r\n            then cast('TRUE' as bit)\r\n            else cast('FALSE' as bit)\r\n        end as is_gross_igi_share,\r\n        case\r\n            when toma.sCode in (\r\n                'IPT','SRB','FIN','MUM','AGE',\r\n                'SEG','PRL','PRT','GST','GSB','TAXIPT'\r\n            )\r\n            then cast('TRUE' as bit)\r\n            else cast('FALSE' as bit)\r\n        end as is_internal_deductions,\r\n        case\r\n            when toma.sCode = 'AGE'\r\n            then cast('TRUE' as bit)\r\n            else cast('FALSE' as bit)\r\n        end as is_eio,\r\n        case\r\n            when toma.sCode in (\r\n                'BKG','COM','FEE','ODD','ORC',\r\n                'TAX','SRB','AMF','INT','PDF',\r\n                'CDM','AGD','AGU','AGN','AGE',\r\n                'MUM','FIN','SEG','759','502',\r\n                '517','APR_RIP','503','RBT','PCM',\r\n                '505','753','WKA','WKB','WKO','RBC',\r\n                'ORI','TRL','501','SI_SUR','SI_SURI','AGO'\r\n            )\r\n            then cast('TRUE' as bit)\r\n            else cast('FALSE' as bit)\r\n        end as is_net_premium_exclude_ipt\r\n    from \r\n        toma\r\n)\r\n\r\nselect * from stg_toma", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "staging\\stg_type_of_monetary_amount.sql", "original_file_path": "models\\staging\\stg_type_of_monetary_amount.sql", "name": "stg_type_of_monetary_amount", "alias": "stg_type_of_monetary_amount", "checksum": {"name": "sha256", "checksum": "6c0bb67180a77d098fdb1d6db5572fcfc711a253375dd4b1a2ef8d84672a95a1"}, "tags": ["InwardPremium"], "refs": [["scd_type_of_monetary_amount"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": "iginsure://models\\staging\\staging.yml", "compiled_path": "target\\compiled\\iginsure\\models\\staging\\stg_type_of_monetary_amount.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "docs": {"show": false}, "tags": ["InwardPremium"]}, "created_at": 1701786801.943319, "compiled_code": "\n\nwith\n\ntoma as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"scd_type_of_monetary_amount\" where _valid_to is null\n),\n\nstg_toma as (\n    select\n        toma.lTypeOfMonetaryAmountKey as type_of_monetary_amount_id,\n        toma.sCode as toma_code,\n        toma.sTypeOfMonetaryAmount as type_of_monetary_amount,\n        case\n            when toma.sCode in (\n                'BKG','COM','FEE','ODD',\n                'ORC','TAX','SRB','AMF',\n                'INT','PDF','CDM','AGD',\n                'AGU','AGN','AGE','MUM',\n                'FIN','SEG','RBT','PCM',\n                'TRL','SI_SUR','SI_SURI','AGO'\n            )\n            then cast('TRUE' as bit)\n            else cast('FALSE' as bit)\n        end as is_acq_cost,\n        case\n            when toma.sCode in (\n                '759','502','517','APR_RIP',\n                '503','505','753','ORI','WKA',\n                'WKB','WKO','RBC','501'\n            )\n            then cast('TRUE' as bit)\n            else cast('FALSE' as bit)\n        end as is_gross_igi_share,\n        case\n            when toma.sCode in (\n                'IPT','SRB','FIN','MUM','AGE',\n                'SEG','PRL','PRT','GST','GSB','TAXIPT'\n            )\n            then cast('TRUE' as bit)\n            else cast('FALSE' as bit)\n        end as is_internal_deductions,\n        case\n            when toma.sCode = 'AGE'\n            then cast('TRUE' as bit)\n            else cast('FALSE' as bit)\n        end as is_eio,\n        case\n            when toma.sCode in (\n                'BKG','COM','FEE','ODD','ORC',\n                'TAX','SRB','AMF','INT','PDF',\n                'CDM','AGD','AGU','AGN','AGE',\n                'MUM','FIN','SEG','759','502',\n                '517','APR_RIP','503','RBT','PCM',\n                '505','753','WKA','WKB','WKO','RBC',\n                'ORI','TRL','501','SI_SUR','SI_SURI','AGO'\n            )\n            then cast('TRUE' as bit)\n            else cast('FALSE' as bit)\n        end as is_net_premium_exclude_ipt\n    from \n        toma\n)\n\nselect * from stg_toma", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"stg_type_of_monetary_amount\""}, "model.iginsure.stg_type_of_profit_centre": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.iginsure.scd_type_of_profit_centre"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["InwardPremium"], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "staging", "stg_type_of_profit_centre"], "unique_id": "model.iginsure.stg_type_of_profit_centre", "raw_code": "{{\r\n  config(tags=['InwardPremium'])\r\n}}\r\n\r\nwith\r\n\r\ntype_of_profit_centre as (\r\n    select * from {{ ref('scd_type_of_profit_centre') }} where _valid_to is null\r\n),\r\n\r\ntopc as (\r\n    select\r\n        lTypeOfProfitCentreKey AS type_of_profit_centre_id,\r\n        sPCName as producing_office\r\n    from\r\n        type_of_profit_centre\r\n)\r\n\r\nselect * from topc", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "staging\\stg_type_of_profit_centre.sql", "original_file_path": "models\\staging\\stg_type_of_profit_centre.sql", "name": "stg_type_of_profit_centre", "alias": "stg_type_of_profit_centre", "checksum": {"name": "sha256", "checksum": "8c07185c1d97245cb9e080fa7ba545671f8b90a7fa2253d97b1bc3ecbb25bea7"}, "tags": ["InwardPremium"], "refs": [["scd_type_of_profit_centre"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": "iginsure://models\\staging\\staging.yml", "compiled_path": "target\\compiled\\iginsure\\models\\staging\\stg_type_of_profit_centre.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "docs": {"show": false}, "tags": ["InwardPremium"]}, "created_at": 1701786801.9443192, "compiled_code": "\n\nwith\n\ntype_of_profit_centre as (\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"scd_type_of_profit_centre\" where _valid_to is null\n),\n\ntopc as (\n    select\n        lTypeOfProfitCentreKey AS type_of_profit_centre_id,\n        sPCName as producing_office\n    from\n        type_of_profit_centre\n)\n\nselect * from topc", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"stg_type_of_profit_centre\""}, "model.iginsure.stg_written_account_period": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.iginsure.stg_activity_audit_state_transitions", "model.iginsure.scd_version_audit_trail", "model.iginsure.stg_account_periods_closing"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "staging": null, "utils": null, "domain": null, "marts": null, "scd": null, "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "staging", "stg_written_account_period"], "unique_id": "model.iginsure.stg_written_account_period", "raw_code": "with audit_state_transitions_full as (\r\n    select \r\n        *\r\n     from \r\n        {{ ref('stg_activity_audit_state_transitions') }} \r\n),\r\n\r\naudit_state_transitions as (\r\n    select\r\n        LINSTANCEKEY,\r\n        CAST(min(DTTRANSITION) AS DATE) as DTTRANSITION,\r\n        min(DTTRANSITION)  as DTTRANSITION_for_account_period\r\n\r\n    from\r\n        audit_state_transitions_full\r\n    where\r\n        (\r\n            \"LENTITYSTATEMEMBERKEY\" in (\r\n                2153, -- 'Written'\r\n                2220, -- 'Cancellation'\r\n                2204, -- 'Cancelled'\r\n                2533, -- 'Cancelled Adjustment'\r\n                2162, -- 'Cancelled Endorsement'\r\n                2392, -- 'Cancelled Contra'\r\n                2391  -- 'Contra Applied'\r\n            )\r\n            or CAST(\"DTTRANSITION\" AS DATE)  = '2019-03-16' -- Migrated\r\n        )\r\n    group by\r\n        LINSTANCEKEY\r\n),\r\n\r\nversion_audit_trail as (\r\n    select\r\n        LENTITYINSTANCEKEY,\r\n        LPREVIOUSENTITYINSTANCEKEY\r\n    from\r\n        {{ ref('scd_version_audit_trail') }}\r\n    where\r\n        LENTITYKEY = 611 -- Policy Activity\r\n        and _valid_to is null\r\n),\r\n\r\n\r\nactivity_effective_written_timestamp as (\r\n    select\r\n        version_audit_trail.LENTITYINSTANCEKEY as activity_id,\r\n        version_audit_trail.LPREVIOUSENTITYINSTANCEKEY as previous_activity_id,\r\n        coalesce (\r\n            audit_state_transitions.DTTRANSITION,\r\n            previous_audit_state_transitions.DTTRANSITION\r\n        ) as effective_written_timestamp,\r\n        coalesce (\r\n            audit_state_transitions.DTTRANSITION_for_account_period,\r\n            previous_audit_state_transitions.DTTRANSITION_for_account_period\r\n        ) as effective_written_timestamp_for_ap\r\n\r\n    from\r\n        version_audit_trail\r\n        left join audit_state_transitions on\r\n            version_audit_trail.LENTITYINSTANCEKEY = audit_state_transitions.LINSTANCEKEY\r\n        left join audit_state_transitions as previous_audit_state_transitions on\r\n            version_audit_trail.LPREVIOUSENTITYINSTANCEKEY = previous_audit_state_transitions.LINSTANCEKEY\r\n),\r\n\r\naccount_period_closing as (\r\n\r\n    select * from {{ref('stg_account_periods_closing')}}\r\n\r\n),\r\n\r\n\r\ncorrect_written_account_period as (\r\n\r\nselect * from     \r\n    (select *,ROW_NUMBER() over (partition by activity_ts.activity_id order by ap.date_closed) as ranked\r\n    from \r\n    activity_effective_written_timestamp activity_ts\r\n    inner join account_period_closing ap on \r\n    activity_ts.effective_written_timestamp_for_ap  <= ap.date_closed)final\r\nwhere ranked = 1\r\n\r\n)\r\n\r\n\r\nselect  * from correct_written_account_period", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "staging\\stg_written_account_period.sql", "original_file_path": "models\\staging\\stg_written_account_period.sql", "name": "stg_written_account_period", "alias": "stg_written_account_period", "checksum": {"name": "sha256", "checksum": "7dc6920a3eac102a569b165e9fba04dfc227caa16f8e4a0e9e312340147efd3f"}, "tags": [], "refs": [["stg_activity_audit_state_transitions"], ["scd_version_audit_trail"], ["stg_account_periods_closing"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\staging\\stg_written_account_period.sql", "build_path": null, "deferred": false, "unrendered_config": {"staging": null, "utils": null, "domain": null, "marts": null, "scd": null}, "created_at": 1701786801.1294034, "compiled_code": "with audit_state_transitions_full as (\n    select \n        *\n     from \n        \"IGI_PROD_DW\".\"dbt_dev\".\"stg_activity_audit_state_transitions\" \n),\n\naudit_state_transitions as (\n    select\n        LINSTANCEKEY,\n        CAST(min(DTTRANSITION) AS DATE) as DTTRANSITION,\n        min(DTTRANSITION)  as DTTRANSITION_for_account_period\n\n    from\n        audit_state_transitions_full\n    where\n        (\n            \"LENTITYSTATEMEMBERKEY\" in (\n                2153, -- 'Written'\n                2220, -- 'Cancellation'\n                2204, -- 'Cancelled'\n                2533, -- 'Cancelled Adjustment'\n                2162, -- 'Cancelled Endorsement'\n                2392, -- 'Cancelled Contra'\n                2391  -- 'Contra Applied'\n            )\n            or CAST(\"DTTRANSITION\" AS DATE)  = '2019-03-16' -- Migrated\n        )\n    group by\n        LINSTANCEKEY\n),\n\nversion_audit_trail as (\n    select\n        LENTITYINSTANCEKEY,\n        LPREVIOUSENTITYINSTANCEKEY\n    from\n        \"IGI_PROD_DW\".\"dbt_dev\".\"scd_version_audit_trail\"\n    where\n        LENTITYKEY = 611 -- Policy Activity\n        and _valid_to is null\n),\n\n\nactivity_effective_written_timestamp as (\n    select\n        version_audit_trail.LENTITYINSTANCEKEY as activity_id,\n        version_audit_trail.LPREVIOUSENTITYINSTANCEKEY as previous_activity_id,\n        coalesce (\n            audit_state_transitions.DTTRANSITION,\n            previous_audit_state_transitions.DTTRANSITION\n        ) as effective_written_timestamp,\n        coalesce (\n            audit_state_transitions.DTTRANSITION_for_account_period,\n            previous_audit_state_transitions.DTTRANSITION_for_account_period\n        ) as effective_written_timestamp_for_ap\n\n    from\n        version_audit_trail\n        left join audit_state_transitions on\n            version_audit_trail.LENTITYINSTANCEKEY = audit_state_transitions.LINSTANCEKEY\n        left join audit_state_transitions as previous_audit_state_transitions on\n            version_audit_trail.LPREVIOUSENTITYINSTANCEKEY = previous_audit_state_transitions.LINSTANCEKEY\n),\n\naccount_period_closing as (\n\n    select * from \"IGI_PROD_DW\".\"dbt_dev\".\"stg_account_periods_closing\"\n\n),\n\n\ncorrect_written_account_period as (\n\nselect * from     \n    (select *,ROW_NUMBER() over (partition by activity_ts.activity_id order by ap.date_closed) as ranked\n    from \n    activity_effective_written_timestamp activity_ts\n    inner join account_period_closing ap on \n    activity_ts.effective_written_timestamp_for_ap  <= ap.date_closed)final\nwhere ranked = 1\n\n)\n\n\nselect  * from correct_written_account_period", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"stg_written_account_period\""}, "test.iginsure.actuarial_policy_single_account_period": {"compiled": true, "resource_type": "test", "depends_on": {"macros": [], "nodes": ["model.iginsure.actuarial_policy_clean_nb110", "model.iginsure.actuarial_policy_clean_nb110"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "actuarial_policy_single_account_period"], "unique_id": "test.iginsure.actuarial_policy_single_account_period", "raw_code": "-- All rows in actuarial_policy_clean_nb110 should belong to a single \r\n-- acount period. This test simply grabs the first account period it finds\r\n-- and returns any rows which do not belong to this period. This way,\r\n-- the test fails if there are multiple distinct values for the account period \r\n\r\nselect * from {{ ref('actuarial_policy_clean_nb110' )}} where account_period != (\r\n    select top(1) account_period \r\n    from {{ ref('actuarial_policy_clean_nb110' )}}\r\n)", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "actuarial_policy_single_account_period.sql", "original_file_path": "tests\\actuarial_policy_single_account_period.sql", "name": "actuarial_policy_single_account_period", "alias": "actuarial_policy_single_account_period", "checksum": {"name": "sha256", "checksum": "b27e2f68fb2973825899cb9883405cc4407b032a168f9ad1423ab0dd7379871b"}, "tags": [], "refs": [["actuarial_policy_clean_nb110"], ["actuarial_policy_clean_nb110"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\tests\\actuarial_policy_single_account_period.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701786801.142087, "compiled_code": "-- All rows in actuarial_policy_clean_nb110 should belong to a single \n-- acount period. This test simply grabs the first account period it finds\n-- and returns any rows which do not belong to this period. This way,\n-- the test fails if there are multiple distinct values for the account period \n\nselect * from \"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_policy_clean_nb110\" where account_period != (\n    select top(1) account_period \n    from \"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_policy_clean_nb110\"\n)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "seed.iginsure.business_plan": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "business_plan"], "unique_id": "seed.iginsure.business_plan", "raw_code": "", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "business_plan.csv", "original_file_path": "seeds\\business_plan.csv", "name": "business_plan", "alias": "business_plan", "checksum": {"name": "sha256", "checksum": "cdd0b7d9d286b3d471de0f2f63595c4f02b8b5ec44165e1b5f0038e2cefa8b69"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701786801.1576915, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"IGI_PROD_DW\".\"dbt_dev\".\"business_plan\""}, "test.iginsure.not_null_actuarial_claim_movement_load_policy_id.0b224c8051": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "policy_id", "model": "{{ get_where_subquery(ref('actuarial_claim_movement_load')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.iginsure.actuarial_claim_movement_load"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "presentation", "reserving_model", "not_null_actuarial_claim_movement_load_policy_id"], "unique_id": "test.iginsure.not_null_actuarial_claim_movement_load_policy_id.0b224c8051", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "not_null_actuarial_claim_movement_load_policy_id.sql", "original_file_path": "models\\presentation\\reserving_model\\docs.yml", "name": "not_null_actuarial_claim_movement_load_policy_id", "alias": "not_null_actuarial_claim_movement_load_policy_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["actuarial_claim_movement_load"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\presentation\\reserving_model\\docs.yml\\not_null_actuarial_claim_movement_load_policy_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701786801.3219917, "compiled_code": "\n    \n    \n\n\n\nselect policy_id\nfrom \"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_claim_movement_load\"\nwhere policy_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "policy_id", "file_key_name": "models.actuarial_claim_movement_load"}, "test.iginsure.not_null_actuarial_claim_movement_load_claim_id.37b5598fc4": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "claim_id", "model": "{{ get_where_subquery(ref('actuarial_claim_movement_load')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.iginsure.actuarial_claim_movement_load"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "presentation", "reserving_model", "not_null_actuarial_claim_movement_load_claim_id"], "unique_id": "test.iginsure.not_null_actuarial_claim_movement_load_claim_id.37b5598fc4", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "not_null_actuarial_claim_movement_load_claim_id.sql", "original_file_path": "models\\presentation\\reserving_model\\docs.yml", "name": "not_null_actuarial_claim_movement_load_claim_id", "alias": "not_null_actuarial_claim_movement_load_claim_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["actuarial_claim_movement_load"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\presentation\\reserving_model\\docs.yml\\not_null_actuarial_claim_movement_load_claim_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701786801.3239963, "compiled_code": "\n    \n    \n\n\n\nselect claim_id\nfrom \"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_claim_movement_load\"\nwhere claim_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "claim_id", "file_key_name": "models.actuarial_claim_movement_load"}, "test.iginsure.not_null_actuarial_claim_movement_load_movement_date.5e6015b680": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "movement_date", "model": "{{ get_where_subquery(ref('actuarial_claim_movement_load')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.iginsure.actuarial_claim_movement_load"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "presentation", "reserving_model", "not_null_actuarial_claim_movement_load_movement_date"], "unique_id": "test.iginsure.not_null_actuarial_claim_movement_load_movement_date.5e6015b680", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "not_null_actuarial_claim_movement_load_movement_date.sql", "original_file_path": "models\\presentation\\reserving_model\\docs.yml", "name": "not_null_actuarial_claim_movement_load_movement_date", "alias": "not_null_actuarial_claim_movement_load_movement_date", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["actuarial_claim_movement_load"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\presentation\\reserving_model\\docs.yml\\not_null_actuarial_claim_movement_load_movement_date.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701786801.3249948, "compiled_code": "\n    \n    \n\n\n\nselect movement_date\nfrom \"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_claim_movement_load\"\nwhere movement_date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "movement_date", "file_key_name": "models.actuarial_claim_movement_load"}, "test.iginsure.not_null_actuarial_claim_movement_load_reinsurance_type.c8597e907a": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "reinsurance_type", "model": "{{ get_where_subquery(ref('actuarial_claim_movement_load')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.iginsure.actuarial_claim_movement_load"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "presentation", "reserving_model", "not_null_actuarial_claim_movement_load_reinsurance_type"], "unique_id": "test.iginsure.not_null_actuarial_claim_movement_load_reinsurance_type.c8597e907a", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "not_null_actuarial_claim_movement_load_reinsurance_type.sql", "original_file_path": "models\\presentation\\reserving_model\\docs.yml", "name": "not_null_actuarial_claim_movement_load_reinsurance_type", "alias": "not_null_actuarial_claim_movement_load_reinsurance_type", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["actuarial_claim_movement_load"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\presentation\\reserving_model\\docs.yml\\not_null_actuarial_claim_movement_load_reinsurance_type.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701786801.3259952, "compiled_code": "\n    \n    \n\n\n\nselect reinsurance_type\nfrom \"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_claim_movement_load\"\nwhere reinsurance_type is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "reinsurance_type", "file_key_name": "models.actuarial_claim_movement_load"}, "test.iginsure.not_null_actuarial_claim_movement_load_org_ccy_code.d9f72091a8": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "org_ccy_code", "model": "{{ get_where_subquery(ref('actuarial_claim_movement_load')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.iginsure.actuarial_claim_movement_load"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "presentation", "reserving_model", "not_null_actuarial_claim_movement_load_org_ccy_code"], "unique_id": "test.iginsure.not_null_actuarial_claim_movement_load_org_ccy_code.d9f72091a8", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "not_null_actuarial_claim_movement_load_org_ccy_code.sql", "original_file_path": "models\\presentation\\reserving_model\\docs.yml", "name": "not_null_actuarial_claim_movement_load_org_ccy_code", "alias": "not_null_actuarial_claim_movement_load_org_ccy_code", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["actuarial_claim_movement_load"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\presentation\\reserving_model\\docs.yml\\not_null_actuarial_claim_movement_load_org_ccy_code.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701786801.3279908, "compiled_code": "\n    \n    \n\n\n\nselect org_ccy_code\nfrom \"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_claim_movement_load\"\nwhere org_ccy_code is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "org_ccy_code", "file_key_name": "models.actuarial_claim_movement_load"}, "test.iginsure.not_null_actuarial_claim_movement_load_amount_type.cc83f3c7bc": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "amount_type", "model": "{{ get_where_subquery(ref('actuarial_claim_movement_load')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.iginsure.actuarial_claim_movement_load"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "presentation", "reserving_model", "not_null_actuarial_claim_movement_load_amount_type"], "unique_id": "test.iginsure.not_null_actuarial_claim_movement_load_amount_type.cc83f3c7bc", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "not_null_actuarial_claim_movement_load_amount_type.sql", "original_file_path": "models\\presentation\\reserving_model\\docs.yml", "name": "not_null_actuarial_claim_movement_load_amount_type", "alias": "not_null_actuarial_claim_movement_load_amount_type", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["actuarial_claim_movement_load"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\presentation\\reserving_model\\docs.yml\\not_null_actuarial_claim_movement_load_amount_type.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701786801.3290596, "compiled_code": "\n    \n    \n\n\n\nselect amount_type\nfrom \"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_claim_movement_load\"\nwhere amount_type is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "amount_type", "file_key_name": "models.actuarial_claim_movement_load"}, "test.iginsure.unique_actuarial_claim_movement_load__policy_id_claim_id_convert_varchar_movement_date_reinsurance_type_amount_type_org_ccy_code_.dbdec7795a": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "(policy_id + '-' + claim_id + '-' + convert(varchar,movement_date) + '-' + reinsurance_type  + '-' + amount_type + '-' + org_ccy_code)", "model": "{{ get_where_subquery(ref('actuarial_claim_movement_load')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.iginsure.actuarial_claim_movement_load"]}, "config": {"enabled": true, "alias": "unique_actuarial_claim_movemen_470b12c9896a394f29c848c4b774c4cf", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "presentation", "reserving_model", "unique_actuarial_claim_movement_load__policy_id_claim_id_convert_varchar_movement_date_reinsurance_type_amount_type_org_ccy_code_"], "unique_id": "test.iginsure.unique_actuarial_claim_movement_load__policy_id_claim_id_convert_varchar_movement_date_reinsurance_type_amount_type_org_ccy_code_.dbdec7795a", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"unique_actuarial_claim_movemen_470b12c9896a394f29c848c4b774c4cf\") }}", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "unique_actuarial_claim_movemen_470b12c9896a394f29c848c4b774c4cf.sql", "original_file_path": "models\\presentation\\reserving_model\\docs.yml", "name": "unique_actuarial_claim_movement_load__policy_id_claim_id_convert_varchar_movement_date_reinsurance_type_amount_type_org_ccy_code_", "alias": "unique_actuarial_claim_movemen_470b12c9896a394f29c848c4b774c4cf", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["actuarial_claim_movement_load"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\presentation\\reserving_model\\docs.yml\\unique_actuarial_claim_movemen_470b12c9896a394f29c848c4b774c4cf.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "unique_actuarial_claim_movemen_470b12c9896a394f29c848c4b774c4cf"}, "created_at": 1701786801.3299923, "compiled_code": "\n    \n    \n\nselect\n    (policy_id + '-' + claim_id + '-' + convert(varchar,movement_date) + '-' + reinsurance_type  + '-' + amount_type + '-' + org_ccy_code) as unique_field,\n    count(*) as n_records\n\nfrom \"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_claim_movement_load\"\nwhere (policy_id + '-' + claim_id + '-' + convert(varchar,movement_date) + '-' + reinsurance_type  + '-' + amount_type + '-' + org_ccy_code) is not null\ngroup by (policy_id + '-' + claim_id + '-' + convert(varchar,movement_date) + '-' + reinsurance_type  + '-' + amount_type + '-' + org_ccy_code)\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.actuarial_claim_movement_load"}, "test.iginsure.unique_actuarial_policy_load_policy_id.8ac885026e": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "policy_id", "model": "{{ get_where_subquery(ref('actuarial_policy_load')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.iginsure.actuarial_policy_load"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "presentation", "reserving_model", "unique_actuarial_policy_load_policy_id"], "unique_id": "test.iginsure.unique_actuarial_policy_load_policy_id.8ac885026e", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "unique_actuarial_policy_load_policy_id.sql", "original_file_path": "models\\presentation\\reserving_model\\docs.yml", "name": "unique_actuarial_policy_load_policy_id", "alias": "unique_actuarial_policy_load_policy_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["actuarial_policy_load"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\presentation\\reserving_model\\docs.yml\\unique_actuarial_policy_load_policy_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701786801.3312964, "compiled_code": "\n    \n    \n\nselect\n    policy_id as unique_field,\n    count(*) as n_records\n\nfrom \"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_policy_load\"\nwhere policy_id is not null\ngroup by policy_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "policy_id", "file_key_name": "models.actuarial_policy_load"}, "test.iginsure.not_null_actuarial_policy_load_policy_id.31fa24fa01": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "policy_id", "model": "{{ get_where_subquery(ref('actuarial_policy_load')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.iginsure.actuarial_policy_load"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "presentation", "reserving_model", "not_null_actuarial_policy_load_policy_id"], "unique_id": "test.iginsure.not_null_actuarial_policy_load_policy_id.31fa24fa01", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "not_null_actuarial_policy_load_policy_id.sql", "original_file_path": "models\\presentation\\reserving_model\\docs.yml", "name": "not_null_actuarial_policy_load_policy_id", "alias": "not_null_actuarial_policy_load_policy_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["actuarial_policy_load"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\presentation\\reserving_model\\docs.yml\\not_null_actuarial_policy_load_policy_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701786801.3323293, "compiled_code": "\n    \n    \n\n\n\nselect policy_id\nfrom \"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_policy_load\"\nwhere policy_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "policy_id", "file_key_name": "models.actuarial_policy_load"}, "test.iginsure.not_null_actuarial_earned_premium_load_policy_id.8594d4add9": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "policy_id", "model": "{{ get_where_subquery(ref('actuarial_earned_premium_load')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.iginsure.actuarial_earned_premium_load"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "presentation", "reserving_model", "not_null_actuarial_earned_premium_load_policy_id"], "unique_id": "test.iginsure.not_null_actuarial_earned_premium_load_policy_id.8594d4add9", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "not_null_actuarial_earned_premium_load_policy_id.sql", "original_file_path": "models\\presentation\\reserving_model\\docs.yml", "name": "not_null_actuarial_earned_premium_load_policy_id", "alias": "not_null_actuarial_earned_premium_load_policy_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["actuarial_earned_premium_load"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\presentation\\reserving_model\\docs.yml\\not_null_actuarial_earned_premium_load_policy_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701786801.3351045, "compiled_code": "\n    \n    \n\n\n\nselect policy_id\nfrom \"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_earned_premium_load\"\nwhere policy_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "policy_id", "file_key_name": "models.actuarial_earned_premium_load"}, "test.iginsure.is_data_type_actuarial_policy_clean_nb100_uw_year__int.371e835324": {"test_metadata": {"name": "is_data_type", "kwargs": {"column_type": "int", "column_name": "uw_year", "model": "{{ get_where_subquery(ref('actuarial_policy_clean_nb100')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.iginsure.test_is_data_type", "macro.dbt.get_where_subquery"], "nodes": ["model.iginsure.actuarial_policy_clean_nb100"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "presentation", "reserving_model", "is_data_type_actuarial_policy_clean_nb100_uw_year__int"], "unique_id": "test.iginsure.is_data_type_actuarial_policy_clean_nb100_uw_year__int.371e835324", "raw_code": "{{ test_is_data_type(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "is_data_type_actuarial_policy_clean_nb100_uw_year__int.sql", "original_file_path": "models\\presentation\\reserving_model\\docs.yml", "name": "is_data_type_actuarial_policy_clean_nb100_uw_year__int", "alias": "is_data_type_actuarial_policy_clean_nb100_uw_year__int", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["actuarial_policy_clean_nb100"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\presentation\\reserving_model\\docs.yml\\is_data_type_actuarial_policy_clean_nb100_uw_year__int.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701786801.3380976, "compiled_code": "\n\nSELECT * FROM INFORMATION_SCHEMA.columns\nWHERE TABLE_SCHEMA = (\n    -- dbt gives us the full model name (db.schema.table)\n    -- but we want the schema name only\n    SELECT \n        REPLACE(value, '\"', '')\n    from STRING_SPLIT('\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_policy_clean_nb100\"','.',1)\n    where ordinal = 2\n)\nAND TABLE_NAME = (\n    -- same as above, but we want the table name\n    SELECT \n        REPLACE(value, '\"', '')\n    from STRING_SPLIT('\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_policy_clean_nb100\"','.',1)\n    where ordinal = 3\n)\nAND COLUMN_NAME = 'uw_year'\nAND DATA_TYPE != 'int'\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "uw_year", "file_key_name": "models.actuarial_policy_clean_nb100"}, "test.iginsure.is_data_type_actuarial_policy_clean_nb100_mis_uw_year__date.2a9c5b6f86": {"test_metadata": {"name": "is_data_type", "kwargs": {"column_type": "date", "column_name": "mis_uw_year", "model": "{{ get_where_subquery(ref('actuarial_policy_clean_nb100')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.iginsure.test_is_data_type", "macro.dbt.get_where_subquery"], "nodes": ["model.iginsure.actuarial_policy_clean_nb100"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "presentation", "reserving_model", "is_data_type_actuarial_policy_clean_nb100_mis_uw_year__date"], "unique_id": "test.iginsure.is_data_type_actuarial_policy_clean_nb100_mis_uw_year__date.2a9c5b6f86", "raw_code": "{{ test_is_data_type(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "is_data_type_actuarial_policy_clean_nb100_mis_uw_year__date.sql", "original_file_path": "models\\presentation\\reserving_model\\docs.yml", "name": "is_data_type_actuarial_policy_clean_nb100_mis_uw_year__date", "alias": "is_data_type_actuarial_policy_clean_nb100_mis_uw_year__date", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["actuarial_policy_clean_nb100"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\presentation\\reserving_model\\docs.yml\\is_data_type_actuarial_policy_clean_nb100_mis_uw_year__date.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701786801.345101, "compiled_code": "\n\nSELECT * FROM INFORMATION_SCHEMA.columns\nWHERE TABLE_SCHEMA = (\n    -- dbt gives us the full model name (db.schema.table)\n    -- but we want the schema name only\n    SELECT \n        REPLACE(value, '\"', '')\n    from STRING_SPLIT('\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_policy_clean_nb100\"','.',1)\n    where ordinal = 2\n)\nAND TABLE_NAME = (\n    -- same as above, but we want the table name\n    SELECT \n        REPLACE(value, '\"', '')\n    from STRING_SPLIT('\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_policy_clean_nb100\"','.',1)\n    where ordinal = 3\n)\nAND COLUMN_NAME = 'mis_uw_year'\nAND DATA_TYPE != 'date'\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "mis_uw_year", "file_key_name": "models.actuarial_policy_clean_nb100"}, "test.iginsure.is_data_type_actuarial_policy_clean_nb100_class__varchar.51ad3fdfdb": {"test_metadata": {"name": "is_data_type", "kwargs": {"column_type": "varchar", "column_name": "class", "model": "{{ get_where_subquery(ref('actuarial_policy_clean_nb100')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.iginsure.test_is_data_type", "macro.dbt.get_where_subquery"], "nodes": ["model.iginsure.actuarial_policy_clean_nb100"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "presentation", "reserving_model", "is_data_type_actuarial_policy_clean_nb100_class__varchar"], "unique_id": "test.iginsure.is_data_type_actuarial_policy_clean_nb100_class__varchar.51ad3fdfdb", "raw_code": "{{ test_is_data_type(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "is_data_type_actuarial_policy_clean_nb100_class__varchar.sql", "original_file_path": "models\\presentation\\reserving_model\\docs.yml", "name": "is_data_type_actuarial_policy_clean_nb100_class__varchar", "alias": "is_data_type_actuarial_policy_clean_nb100_class__varchar", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["actuarial_policy_clean_nb100"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\presentation\\reserving_model\\docs.yml\\is_data_type_actuarial_policy_clean_nb100_class__varchar.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701786801.3483558, "compiled_code": "\n\nSELECT * FROM INFORMATION_SCHEMA.columns\nWHERE TABLE_SCHEMA = (\n    -- dbt gives us the full model name (db.schema.table)\n    -- but we want the schema name only\n    SELECT \n        REPLACE(value, '\"', '')\n    from STRING_SPLIT('\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_policy_clean_nb100\"','.',1)\n    where ordinal = 2\n)\nAND TABLE_NAME = (\n    -- same as above, but we want the table name\n    SELECT \n        REPLACE(value, '\"', '')\n    from STRING_SPLIT('\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_policy_clean_nb100\"','.',1)\n    where ordinal = 3\n)\nAND COLUMN_NAME = 'class'\nAND DATA_TYPE != 'varchar'\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "class", "file_key_name": "models.actuarial_policy_clean_nb100"}, "test.iginsure.is_data_type_actuarial_policy_clean_nb100_sub_class__varchar.fe38050f11": {"test_metadata": {"name": "is_data_type", "kwargs": {"column_type": "varchar", "column_name": "sub_class", "model": "{{ get_where_subquery(ref('actuarial_policy_clean_nb100')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.iginsure.test_is_data_type", "macro.dbt.get_where_subquery"], "nodes": ["model.iginsure.actuarial_policy_clean_nb100"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "presentation", "reserving_model", "is_data_type_actuarial_policy_clean_nb100_sub_class__varchar"], "unique_id": "test.iginsure.is_data_type_actuarial_policy_clean_nb100_sub_class__varchar.fe38050f11", "raw_code": "{{ test_is_data_type(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "is_data_type_actuarial_policy_clean_nb100_sub_class__varchar.sql", "original_file_path": "models\\presentation\\reserving_model\\docs.yml", "name": "is_data_type_actuarial_policy_clean_nb100_sub_class__varchar", "alias": "is_data_type_actuarial_policy_clean_nb100_sub_class__varchar", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["actuarial_policy_clean_nb100"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\presentation\\reserving_model\\docs.yml\\is_data_type_actuarial_policy_clean_nb100_sub_class__varchar.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701786801.3548522, "compiled_code": "\n\nSELECT * FROM INFORMATION_SCHEMA.columns\nWHERE TABLE_SCHEMA = (\n    -- dbt gives us the full model name (db.schema.table)\n    -- but we want the schema name only\n    SELECT \n        REPLACE(value, '\"', '')\n    from STRING_SPLIT('\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_policy_clean_nb100\"','.',1)\n    where ordinal = 2\n)\nAND TABLE_NAME = (\n    -- same as above, but we want the table name\n    SELECT \n        REPLACE(value, '\"', '')\n    from STRING_SPLIT('\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_policy_clean_nb100\"','.',1)\n    where ordinal = 3\n)\nAND COLUMN_NAME = 'sub_class'\nAND DATA_TYPE != 'varchar'\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "sub_class", "file_key_name": "models.actuarial_policy_clean_nb100"}, "test.iginsure.is_data_type_actuarial_policy_clean_nb100_coverage__varchar.52e6939173": {"test_metadata": {"name": "is_data_type", "kwargs": {"column_type": "varchar", "column_name": "coverage", "model": "{{ get_where_subquery(ref('actuarial_policy_clean_nb100')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.iginsure.test_is_data_type", "macro.dbt.get_where_subquery"], "nodes": ["model.iginsure.actuarial_policy_clean_nb100"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "presentation", "reserving_model", "is_data_type_actuarial_policy_clean_nb100_coverage__varchar"], "unique_id": "test.iginsure.is_data_type_actuarial_policy_clean_nb100_coverage__varchar.52e6939173", "raw_code": "{{ test_is_data_type(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "is_data_type_actuarial_policy_clean_nb100_coverage__varchar.sql", "original_file_path": "models\\presentation\\reserving_model\\docs.yml", "name": "is_data_type_actuarial_policy_clean_nb100_coverage__varchar", "alias": "is_data_type_actuarial_policy_clean_nb100_coverage__varchar", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["actuarial_policy_clean_nb100"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\presentation\\reserving_model\\docs.yml\\is_data_type_actuarial_policy_clean_nb100_coverage__varchar.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701786801.357851, "compiled_code": "\n\nSELECT * FROM INFORMATION_SCHEMA.columns\nWHERE TABLE_SCHEMA = (\n    -- dbt gives us the full model name (db.schema.table)\n    -- but we want the schema name only\n    SELECT \n        REPLACE(value, '\"', '')\n    from STRING_SPLIT('\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_policy_clean_nb100\"','.',1)\n    where ordinal = 2\n)\nAND TABLE_NAME = (\n    -- same as above, but we want the table name\n    SELECT \n        REPLACE(value, '\"', '')\n    from STRING_SPLIT('\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_policy_clean_nb100\"','.',1)\n    where ordinal = 3\n)\nAND COLUMN_NAME = 'coverage'\nAND DATA_TYPE != 'varchar'\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "coverage", "file_key_name": "models.actuarial_policy_clean_nb100"}, "test.iginsure.is_data_type_actuarial_policy_clean_nb100_coverage_code__varchar.7d84cd5a4d": {"test_metadata": {"name": "is_data_type", "kwargs": {"column_type": "varchar", "column_name": "coverage_code", "model": "{{ get_where_subquery(ref('actuarial_policy_clean_nb100')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.iginsure.test_is_data_type", "macro.dbt.get_where_subquery"], "nodes": ["model.iginsure.actuarial_policy_clean_nb100"]}, "config": {"enabled": true, "alias": "is_data_type_actuarial_policy__235af7e90c76bc28e2ee923626de6c14", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "presentation", "reserving_model", "is_data_type_actuarial_policy_clean_nb100_coverage_code__varchar"], "unique_id": "test.iginsure.is_data_type_actuarial_policy_clean_nb100_coverage_code__varchar.7d84cd5a4d", "raw_code": "{{ test_is_data_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"is_data_type_actuarial_policy__235af7e90c76bc28e2ee923626de6c14\") }}", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "is_data_type_actuarial_policy__235af7e90c76bc28e2ee923626de6c14.sql", "original_file_path": "models\\presentation\\reserving_model\\docs.yml", "name": "is_data_type_actuarial_policy_clean_nb100_coverage_code__varchar", "alias": "is_data_type_actuarial_policy__235af7e90c76bc28e2ee923626de6c14", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["actuarial_policy_clean_nb100"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\presentation\\reserving_model\\docs.yml\\is_data_type_actuarial_policy__235af7e90c76bc28e2ee923626de6c14.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "is_data_type_actuarial_policy__235af7e90c76bc28e2ee923626de6c14"}, "created_at": 1701786801.3610127, "compiled_code": "\n\nSELECT * FROM INFORMATION_SCHEMA.columns\nWHERE TABLE_SCHEMA = (\n    -- dbt gives us the full model name (db.schema.table)\n    -- but we want the schema name only\n    SELECT \n        REPLACE(value, '\"', '')\n    from STRING_SPLIT('\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_policy_clean_nb100\"','.',1)\n    where ordinal = 2\n)\nAND TABLE_NAME = (\n    -- same as above, but we want the table name\n    SELECT \n        REPLACE(value, '\"', '')\n    from STRING_SPLIT('\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_policy_clean_nb100\"','.',1)\n    where ordinal = 3\n)\nAND COLUMN_NAME = 'coverage_code'\nAND DATA_TYPE != 'varchar'\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "coverage_code", "file_key_name": "models.actuarial_policy_clean_nb100"}, "test.iginsure.is_data_type_actuarial_policy_clean_nb100_lloyds_risk_code__varchar.4cd2bf521f": {"test_metadata": {"name": "is_data_type", "kwargs": {"column_type": "varchar", "column_name": "lloyds_risk_code", "model": "{{ get_where_subquery(ref('actuarial_policy_clean_nb100')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.iginsure.test_is_data_type", "macro.dbt.get_where_subquery"], "nodes": ["model.iginsure.actuarial_policy_clean_nb100"]}, "config": {"enabled": true, "alias": "is_data_type_actuarial_policy__10101c5ea471b22d3cac4c3ed6658f6a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "presentation", "reserving_model", "is_data_type_actuarial_policy_clean_nb100_lloyds_risk_code__varchar"], "unique_id": "test.iginsure.is_data_type_actuarial_policy_clean_nb100_lloyds_risk_code__varchar.4cd2bf521f", "raw_code": "{{ test_is_data_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"is_data_type_actuarial_policy__10101c5ea471b22d3cac4c3ed6658f6a\") }}", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "is_data_type_actuarial_policy__10101c5ea471b22d3cac4c3ed6658f6a.sql", "original_file_path": "models\\presentation\\reserving_model\\docs.yml", "name": "is_data_type_actuarial_policy_clean_nb100_lloyds_risk_code__varchar", "alias": "is_data_type_actuarial_policy__10101c5ea471b22d3cac4c3ed6658f6a", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["actuarial_policy_clean_nb100"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\presentation\\reserving_model\\docs.yml\\is_data_type_actuarial_policy__10101c5ea471b22d3cac4c3ed6658f6a.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "is_data_type_actuarial_policy__10101c5ea471b22d3cac4c3ed6658f6a"}, "created_at": 1701786801.3650124, "compiled_code": "\n\nSELECT * FROM INFORMATION_SCHEMA.columns\nWHERE TABLE_SCHEMA = (\n    -- dbt gives us the full model name (db.schema.table)\n    -- but we want the schema name only\n    SELECT \n        REPLACE(value, '\"', '')\n    from STRING_SPLIT('\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_policy_clean_nb100\"','.',1)\n    where ordinal = 2\n)\nAND TABLE_NAME = (\n    -- same as above, but we want the table name\n    SELECT \n        REPLACE(value, '\"', '')\n    from STRING_SPLIT('\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_policy_clean_nb100\"','.',1)\n    where ordinal = 3\n)\nAND COLUMN_NAME = 'lloyds_risk_code'\nAND DATA_TYPE != 'varchar'\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "lloyds_risk_code", "file_key_name": "models.actuarial_policy_clean_nb100"}, "test.iginsure.is_data_type_actuarial_policy_clean_nb100_insured__varchar.0ebaa36faa": {"test_metadata": {"name": "is_data_type", "kwargs": {"column_type": "varchar", "column_name": "insured", "model": "{{ get_where_subquery(ref('actuarial_policy_clean_nb100')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.iginsure.test_is_data_type", "macro.dbt.get_where_subquery"], "nodes": ["model.iginsure.actuarial_policy_clean_nb100"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "presentation", "reserving_model", "is_data_type_actuarial_policy_clean_nb100_insured__varchar"], "unique_id": "test.iginsure.is_data_type_actuarial_policy_clean_nb100_insured__varchar.0ebaa36faa", "raw_code": "{{ test_is_data_type(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "is_data_type_actuarial_policy_clean_nb100_insured__varchar.sql", "original_file_path": "models\\presentation\\reserving_model\\docs.yml", "name": "is_data_type_actuarial_policy_clean_nb100_insured__varchar", "alias": "is_data_type_actuarial_policy_clean_nb100_insured__varchar", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["actuarial_policy_clean_nb100"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\presentation\\reserving_model\\docs.yml\\is_data_type_actuarial_policy_clean_nb100_insured__varchar.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701786801.3720107, "compiled_code": "\n\nSELECT * FROM INFORMATION_SCHEMA.columns\nWHERE TABLE_SCHEMA = (\n    -- dbt gives us the full model name (db.schema.table)\n    -- but we want the schema name only\n    SELECT \n        REPLACE(value, '\"', '')\n    from STRING_SPLIT('\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_policy_clean_nb100\"','.',1)\n    where ordinal = 2\n)\nAND TABLE_NAME = (\n    -- same as above, but we want the table name\n    SELECT \n        REPLACE(value, '\"', '')\n    from STRING_SPLIT('\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_policy_clean_nb100\"','.',1)\n    where ordinal = 3\n)\nAND COLUMN_NAME = 'insured'\nAND DATA_TYPE != 'varchar'\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "insured", "file_key_name": "models.actuarial_policy_clean_nb100"}, "test.iginsure.is_data_type_actuarial_policy_clean_nb100_reassured__varchar.57e6506f01": {"test_metadata": {"name": "is_data_type", "kwargs": {"column_type": "varchar", "column_name": "reassured", "model": "{{ get_where_subquery(ref('actuarial_policy_clean_nb100')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.iginsure.test_is_data_type", "macro.dbt.get_where_subquery"], "nodes": ["model.iginsure.actuarial_policy_clean_nb100"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "presentation", "reserving_model", "is_data_type_actuarial_policy_clean_nb100_reassured__varchar"], "unique_id": "test.iginsure.is_data_type_actuarial_policy_clean_nb100_reassured__varchar.57e6506f01", "raw_code": "{{ test_is_data_type(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "is_data_type_actuarial_policy_clean_nb100_reassured__varchar.sql", "original_file_path": "models\\presentation\\reserving_model\\docs.yml", "name": "is_data_type_actuarial_policy_clean_nb100_reassured__varchar", "alias": "is_data_type_actuarial_policy_clean_nb100_reassured__varchar", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["actuarial_policy_clean_nb100"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\presentation\\reserving_model\\docs.yml\\is_data_type_actuarial_policy_clean_nb100_reassured__varchar.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701786801.3760104, "compiled_code": "\n\nSELECT * FROM INFORMATION_SCHEMA.columns\nWHERE TABLE_SCHEMA = (\n    -- dbt gives us the full model name (db.schema.table)\n    -- but we want the schema name only\n    SELECT \n        REPLACE(value, '\"', '')\n    from STRING_SPLIT('\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_policy_clean_nb100\"','.',1)\n    where ordinal = 2\n)\nAND TABLE_NAME = (\n    -- same as above, but we want the table name\n    SELECT \n        REPLACE(value, '\"', '')\n    from STRING_SPLIT('\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_policy_clean_nb100\"','.',1)\n    where ordinal = 3\n)\nAND COLUMN_NAME = 'reassured'\nAND DATA_TYPE != 'varchar'\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "reassured", "file_key_name": "models.actuarial_policy_clean_nb100"}, "test.iginsure.is_data_type_actuarial_policy_clean_nb100_is_direct__bit.bdab8c45a7": {"test_metadata": {"name": "is_data_type", "kwargs": {"column_type": "bit", "column_name": "is_direct", "model": "{{ get_where_subquery(ref('actuarial_policy_clean_nb100')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.iginsure.test_is_data_type", "macro.dbt.get_where_subquery"], "nodes": ["model.iginsure.actuarial_policy_clean_nb100"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "presentation", "reserving_model", "is_data_type_actuarial_policy_clean_nb100_is_direct__bit"], "unique_id": "test.iginsure.is_data_type_actuarial_policy_clean_nb100_is_direct__bit.bdab8c45a7", "raw_code": "{{ test_is_data_type(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "is_data_type_actuarial_policy_clean_nb100_is_direct__bit.sql", "original_file_path": "models\\presentation\\reserving_model\\docs.yml", "name": "is_data_type_actuarial_policy_clean_nb100_is_direct__bit", "alias": "is_data_type_actuarial_policy_clean_nb100_is_direct__bit", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["actuarial_policy_clean_nb100"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\presentation\\reserving_model\\docs.yml\\is_data_type_actuarial_policy_clean_nb100_is_direct__bit.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701786801.3810103, "compiled_code": "\n\nSELECT * FROM INFORMATION_SCHEMA.columns\nWHERE TABLE_SCHEMA = (\n    -- dbt gives us the full model name (db.schema.table)\n    -- but we want the schema name only\n    SELECT \n        REPLACE(value, '\"', '')\n    from STRING_SPLIT('\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_policy_clean_nb100\"','.',1)\n    where ordinal = 2\n)\nAND TABLE_NAME = (\n    -- same as above, but we want the table name\n    SELECT \n        REPLACE(value, '\"', '')\n    from STRING_SPLIT('\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_policy_clean_nb100\"','.',1)\n    where ordinal = 3\n)\nAND COLUMN_NAME = 'is_direct'\nAND DATA_TYPE != 'bit'\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "is_direct", "file_key_name": "models.actuarial_policy_clean_nb100"}, "test.iginsure.is_data_type_actuarial_policy_clean_nb100_region__varchar.ec8ded7797": {"test_metadata": {"name": "is_data_type", "kwargs": {"column_type": "varchar", "column_name": "region", "model": "{{ get_where_subquery(ref('actuarial_policy_clean_nb100')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.iginsure.test_is_data_type", "macro.dbt.get_where_subquery"], "nodes": ["model.iginsure.actuarial_policy_clean_nb100"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "presentation", "reserving_model", "is_data_type_actuarial_policy_clean_nb100_region__varchar"], "unique_id": "test.iginsure.is_data_type_actuarial_policy_clean_nb100_region__varchar.ec8ded7797", "raw_code": "{{ test_is_data_type(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "is_data_type_actuarial_policy_clean_nb100_region__varchar.sql", "original_file_path": "models\\presentation\\reserving_model\\docs.yml", "name": "is_data_type_actuarial_policy_clean_nb100_region__varchar", "alias": "is_data_type_actuarial_policy_clean_nb100_region__varchar", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["actuarial_policy_clean_nb100"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\presentation\\reserving_model\\docs.yml\\is_data_type_actuarial_policy_clean_nb100_region__varchar.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701786801.3850136, "compiled_code": "\n\nSELECT * FROM INFORMATION_SCHEMA.columns\nWHERE TABLE_SCHEMA = (\n    -- dbt gives us the full model name (db.schema.table)\n    -- but we want the schema name only\n    SELECT \n        REPLACE(value, '\"', '')\n    from STRING_SPLIT('\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_policy_clean_nb100\"','.',1)\n    where ordinal = 2\n)\nAND TABLE_NAME = (\n    -- same as above, but we want the table name\n    SELECT \n        REPLACE(value, '\"', '')\n    from STRING_SPLIT('\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_policy_clean_nb100\"','.',1)\n    where ordinal = 3\n)\nAND COLUMN_NAME = 'region'\nAND DATA_TYPE != 'varchar'\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "region", "file_key_name": "models.actuarial_policy_clean_nb100"}, "test.iginsure.is_data_type_actuarial_policy_clean_nb100_territory__varchar.f2926b4a91": {"test_metadata": {"name": "is_data_type", "kwargs": {"column_type": "varchar", "column_name": "territory", "model": "{{ get_where_subquery(ref('actuarial_policy_clean_nb100')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.iginsure.test_is_data_type", "macro.dbt.get_where_subquery"], "nodes": ["model.iginsure.actuarial_policy_clean_nb100"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "presentation", "reserving_model", "is_data_type_actuarial_policy_clean_nb100_territory__varchar"], "unique_id": "test.iginsure.is_data_type_actuarial_policy_clean_nb100_territory__varchar.f2926b4a91", "raw_code": "{{ test_is_data_type(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "is_data_type_actuarial_policy_clean_nb100_territory__varchar.sql", "original_file_path": "models\\presentation\\reserving_model\\docs.yml", "name": "is_data_type_actuarial_policy_clean_nb100_territory__varchar", "alias": "is_data_type_actuarial_policy_clean_nb100_territory__varchar", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["actuarial_policy_clean_nb100"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\presentation\\reserving_model\\docs.yml\\is_data_type_actuarial_policy_clean_nb100_territory__varchar.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701786801.3920615, "compiled_code": "\n\nSELECT * FROM INFORMATION_SCHEMA.columns\nWHERE TABLE_SCHEMA = (\n    -- dbt gives us the full model name (db.schema.table)\n    -- but we want the schema name only\n    SELECT \n        REPLACE(value, '\"', '')\n    from STRING_SPLIT('\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_policy_clean_nb100\"','.',1)\n    where ordinal = 2\n)\nAND TABLE_NAME = (\n    -- same as above, but we want the table name\n    SELECT \n        REPLACE(value, '\"', '')\n    from STRING_SPLIT('\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_policy_clean_nb100\"','.',1)\n    where ordinal = 3\n)\nAND COLUMN_NAME = 'territory'\nAND DATA_TYPE != 'varchar'\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "territory", "file_key_name": "models.actuarial_policy_clean_nb100"}, "test.iginsure.is_data_type_actuarial_policy_clean_nb100_domicile_country__varchar.10ce92ccde": {"test_metadata": {"name": "is_data_type", "kwargs": {"column_type": "varchar", "column_name": "domicile_country", "model": "{{ get_where_subquery(ref('actuarial_policy_clean_nb100')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.iginsure.test_is_data_type", "macro.dbt.get_where_subquery"], "nodes": ["model.iginsure.actuarial_policy_clean_nb100"]}, "config": {"enabled": true, "alias": "is_data_type_actuarial_policy__ecf540e8d3f4385fcaac5dfbaa6fe83a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "presentation", "reserving_model", "is_data_type_actuarial_policy_clean_nb100_domicile_country__varchar"], "unique_id": "test.iginsure.is_data_type_actuarial_policy_clean_nb100_domicile_country__varchar.10ce92ccde", "raw_code": "{{ test_is_data_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"is_data_type_actuarial_policy__ecf540e8d3f4385fcaac5dfbaa6fe83a\") }}", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "is_data_type_actuarial_policy__ecf540e8d3f4385fcaac5dfbaa6fe83a.sql", "original_file_path": "models\\presentation\\reserving_model\\docs.yml", "name": "is_data_type_actuarial_policy_clean_nb100_domicile_country__varchar", "alias": "is_data_type_actuarial_policy__ecf540e8d3f4385fcaac5dfbaa6fe83a", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["actuarial_policy_clean_nb100"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\presentation\\reserving_model\\docs.yml\\is_data_type_actuarial_policy__ecf540e8d3f4385fcaac5dfbaa6fe83a.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "is_data_type_actuarial_policy__ecf540e8d3f4385fcaac5dfbaa6fe83a"}, "created_at": 1701786801.395076, "compiled_code": "\n\nSELECT * FROM INFORMATION_SCHEMA.columns\nWHERE TABLE_SCHEMA = (\n    -- dbt gives us the full model name (db.schema.table)\n    -- but we want the schema name only\n    SELECT \n        REPLACE(value, '\"', '')\n    from STRING_SPLIT('\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_policy_clean_nb100\"','.',1)\n    where ordinal = 2\n)\nAND TABLE_NAME = (\n    -- same as above, but we want the table name\n    SELECT \n        REPLACE(value, '\"', '')\n    from STRING_SPLIT('\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_policy_clean_nb100\"','.',1)\n    where ordinal = 3\n)\nAND COLUMN_NAME = 'domicile_country'\nAND DATA_TYPE != 'varchar'\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "domicile_country", "file_key_name": "models.actuarial_policy_clean_nb100"}, "test.iginsure.is_data_type_actuarial_policy_clean_nb100_written_date__datetime.c68b533b8a": {"test_metadata": {"name": "is_data_type", "kwargs": {"column_type": "datetime", "column_name": "written_date", "model": "{{ get_where_subquery(ref('actuarial_policy_clean_nb100')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.iginsure.test_is_data_type", "macro.dbt.get_where_subquery"], "nodes": ["model.iginsure.actuarial_policy_clean_nb100"]}, "config": {"enabled": true, "alias": "is_data_type_actuarial_policy__fda0096a7f692234bbd49ff21cf23de8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "presentation", "reserving_model", "is_data_type_actuarial_policy_clean_nb100_written_date__datetime"], "unique_id": "test.iginsure.is_data_type_actuarial_policy_clean_nb100_written_date__datetime.c68b533b8a", "raw_code": "{{ test_is_data_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"is_data_type_actuarial_policy__fda0096a7f692234bbd49ff21cf23de8\") }}", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "is_data_type_actuarial_policy__fda0096a7f692234bbd49ff21cf23de8.sql", "original_file_path": "models\\presentation\\reserving_model\\docs.yml", "name": "is_data_type_actuarial_policy_clean_nb100_written_date__datetime", "alias": "is_data_type_actuarial_policy__fda0096a7f692234bbd49ff21cf23de8", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["actuarial_policy_clean_nb100"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\presentation\\reserving_model\\docs.yml\\is_data_type_actuarial_policy__fda0096a7f692234bbd49ff21cf23de8.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "is_data_type_actuarial_policy__fda0096a7f692234bbd49ff21cf23de8"}, "created_at": 1701786801.398009, "compiled_code": "\n\nSELECT * FROM INFORMATION_SCHEMA.columns\nWHERE TABLE_SCHEMA = (\n    -- dbt gives us the full model name (db.schema.table)\n    -- but we want the schema name only\n    SELECT \n        REPLACE(value, '\"', '')\n    from STRING_SPLIT('\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_policy_clean_nb100\"','.',1)\n    where ordinal = 2\n)\nAND TABLE_NAME = (\n    -- same as above, but we want the table name\n    SELECT \n        REPLACE(value, '\"', '')\n    from STRING_SPLIT('\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_policy_clean_nb100\"','.',1)\n    where ordinal = 3\n)\nAND COLUMN_NAME = 'written_date'\nAND DATA_TYPE != 'datetime'\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "written_date", "file_key_name": "models.actuarial_policy_clean_nb100"}, "test.iginsure.is_data_type_actuarial_policy_clean_nb100_inception_date__datetime.d158314561": {"test_metadata": {"name": "is_data_type", "kwargs": {"column_type": "datetime", "column_name": "inception_date", "model": "{{ get_where_subquery(ref('actuarial_policy_clean_nb100')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.iginsure.test_is_data_type", "macro.dbt.get_where_subquery"], "nodes": ["model.iginsure.actuarial_policy_clean_nb100"]}, "config": {"enabled": true, "alias": "is_data_type_actuarial_policy__37afcfa05ce8f5640e0370223d052ea1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "presentation", "reserving_model", "is_data_type_actuarial_policy_clean_nb100_inception_date__datetime"], "unique_id": "test.iginsure.is_data_type_actuarial_policy_clean_nb100_inception_date__datetime.d158314561", "raw_code": "{{ test_is_data_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"is_data_type_actuarial_policy__37afcfa05ce8f5640e0370223d052ea1\") }}", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "is_data_type_actuarial_policy__37afcfa05ce8f5640e0370223d052ea1.sql", "original_file_path": "models\\presentation\\reserving_model\\docs.yml", "name": "is_data_type_actuarial_policy_clean_nb100_inception_date__datetime", "alias": "is_data_type_actuarial_policy__37afcfa05ce8f5640e0370223d052ea1", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["actuarial_policy_clean_nb100"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\presentation\\reserving_model\\docs.yml\\is_data_type_actuarial_policy__37afcfa05ce8f5640e0370223d052ea1.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "is_data_type_actuarial_policy__37afcfa05ce8f5640e0370223d052ea1"}, "created_at": 1701786801.4038994, "compiled_code": "\n\nSELECT * FROM INFORMATION_SCHEMA.columns\nWHERE TABLE_SCHEMA = (\n    -- dbt gives us the full model name (db.schema.table)\n    -- but we want the schema name only\n    SELECT \n        REPLACE(value, '\"', '')\n    from STRING_SPLIT('\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_policy_clean_nb100\"','.',1)\n    where ordinal = 2\n)\nAND TABLE_NAME = (\n    -- same as above, but we want the table name\n    SELECT \n        REPLACE(value, '\"', '')\n    from STRING_SPLIT('\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_policy_clean_nb100\"','.',1)\n    where ordinal = 3\n)\nAND COLUMN_NAME = 'inception_date'\nAND DATA_TYPE != 'datetime'\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "inception_date", "file_key_name": "models.actuarial_policy_clean_nb100"}, "test.iginsure.is_data_type_actuarial_policy_clean_nb100_expiry_date__datetime.1285633c13": {"test_metadata": {"name": "is_data_type", "kwargs": {"column_type": "datetime", "column_name": "expiry_date", "model": "{{ get_where_subquery(ref('actuarial_policy_clean_nb100')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.iginsure.test_is_data_type", "macro.dbt.get_where_subquery"], "nodes": ["model.iginsure.actuarial_policy_clean_nb100"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "presentation", "reserving_model", "is_data_type_actuarial_policy_clean_nb100_expiry_date__datetime"], "unique_id": "test.iginsure.is_data_type_actuarial_policy_clean_nb100_expiry_date__datetime.1285633c13", "raw_code": "{{ test_is_data_type(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "is_data_type_actuarial_policy_clean_nb100_expiry_date__datetime.sql", "original_file_path": "models\\presentation\\reserving_model\\docs.yml", "name": "is_data_type_actuarial_policy_clean_nb100_expiry_date__datetime", "alias": "is_data_type_actuarial_policy_clean_nb100_expiry_date__datetime", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["actuarial_policy_clean_nb100"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\presentation\\reserving_model\\docs.yml\\is_data_type_actuarial_policy_clean_nb100_expiry_date__datetime.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701786801.4069023, "compiled_code": "\n\nSELECT * FROM INFORMATION_SCHEMA.columns\nWHERE TABLE_SCHEMA = (\n    -- dbt gives us the full model name (db.schema.table)\n    -- but we want the schema name only\n    SELECT \n        REPLACE(value, '\"', '')\n    from STRING_SPLIT('\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_policy_clean_nb100\"','.',1)\n    where ordinal = 2\n)\nAND TABLE_NAME = (\n    -- same as above, but we want the table name\n    SELECT \n        REPLACE(value, '\"', '')\n    from STRING_SPLIT('\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_policy_clean_nb100\"','.',1)\n    where ordinal = 3\n)\nAND COLUMN_NAME = 'expiry_date'\nAND DATA_TYPE != 'datetime'\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "expiry_date", "file_key_name": "models.actuarial_policy_clean_nb100"}, "test.iginsure.is_data_type_actuarial_policy_clean_nb100_cancellation_date__datetime.e06090eb62": {"test_metadata": {"name": "is_data_type", "kwargs": {"column_type": "datetime", "column_name": "cancellation_date", "model": "{{ get_where_subquery(ref('actuarial_policy_clean_nb100')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.iginsure.test_is_data_type", "macro.dbt.get_where_subquery"], "nodes": ["model.iginsure.actuarial_policy_clean_nb100"]}, "config": {"enabled": true, "alias": "is_data_type_actuarial_policy__3bc1ae04e70512c4ecee40dcd19aca85", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "presentation", "reserving_model", "is_data_type_actuarial_policy_clean_nb100_cancellation_date__datetime"], "unique_id": "test.iginsure.is_data_type_actuarial_policy_clean_nb100_cancellation_date__datetime.e06090eb62", "raw_code": "{{ test_is_data_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"is_data_type_actuarial_policy__3bc1ae04e70512c4ecee40dcd19aca85\") }}", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "is_data_type_actuarial_policy__3bc1ae04e70512c4ecee40dcd19aca85.sql", "original_file_path": "models\\presentation\\reserving_model\\docs.yml", "name": "is_data_type_actuarial_policy_clean_nb100_cancellation_date__datetime", "alias": "is_data_type_actuarial_policy__3bc1ae04e70512c4ecee40dcd19aca85", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["actuarial_policy_clean_nb100"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\presentation\\reserving_model\\docs.yml\\is_data_type_actuarial_policy__3bc1ae04e70512c4ecee40dcd19aca85.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "is_data_type_actuarial_policy__3bc1ae04e70512c4ecee40dcd19aca85"}, "created_at": 1701786801.4099042, "compiled_code": "\n\nSELECT * FROM INFORMATION_SCHEMA.columns\nWHERE TABLE_SCHEMA = (\n    -- dbt gives us the full model name (db.schema.table)\n    -- but we want the schema name only\n    SELECT \n        REPLACE(value, '\"', '')\n    from STRING_SPLIT('\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_policy_clean_nb100\"','.',1)\n    where ordinal = 2\n)\nAND TABLE_NAME = (\n    -- same as above, but we want the table name\n    SELECT \n        REPLACE(value, '\"', '')\n    from STRING_SPLIT('\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_policy_clean_nb100\"','.',1)\n    where ordinal = 3\n)\nAND COLUMN_NAME = 'cancellation_date'\nAND DATA_TYPE != 'datetime'\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "cancellation_date", "file_key_name": "models.actuarial_policy_clean_nb100"}, "test.iginsure.is_data_type_actuarial_policy_clean_nb100_cancellation_type__varchar.e422c6595b": {"test_metadata": {"name": "is_data_type", "kwargs": {"column_type": "varchar", "column_name": "cancellation_type", "model": "{{ get_where_subquery(ref('actuarial_policy_clean_nb100')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.iginsure.test_is_data_type", "macro.dbt.get_where_subquery"], "nodes": ["model.iginsure.actuarial_policy_clean_nb100"]}, "config": {"enabled": true, "alias": "is_data_type_actuarial_policy__2ede1543f3fb16ad72de8c01b90a1879", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "presentation", "reserving_model", "is_data_type_actuarial_policy_clean_nb100_cancellation_type__varchar"], "unique_id": "test.iginsure.is_data_type_actuarial_policy_clean_nb100_cancellation_type__varchar.e422c6595b", "raw_code": "{{ test_is_data_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"is_data_type_actuarial_policy__2ede1543f3fb16ad72de8c01b90a1879\") }}", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "is_data_type_actuarial_policy__2ede1543f3fb16ad72de8c01b90a1879.sql", "original_file_path": "models\\presentation\\reserving_model\\docs.yml", "name": "is_data_type_actuarial_policy_clean_nb100_cancellation_type__varchar", "alias": "is_data_type_actuarial_policy__2ede1543f3fb16ad72de8c01b90a1879", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["actuarial_policy_clean_nb100"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\presentation\\reserving_model\\docs.yml\\is_data_type_actuarial_policy__2ede1543f3fb16ad72de8c01b90a1879.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "is_data_type_actuarial_policy__2ede1543f3fb16ad72de8c01b90a1879"}, "created_at": 1701786801.413902, "compiled_code": "\n\nSELECT * FROM INFORMATION_SCHEMA.columns\nWHERE TABLE_SCHEMA = (\n    -- dbt gives us the full model name (db.schema.table)\n    -- but we want the schema name only\n    SELECT \n        REPLACE(value, '\"', '')\n    from STRING_SPLIT('\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_policy_clean_nb100\"','.',1)\n    where ordinal = 2\n)\nAND TABLE_NAME = (\n    -- same as above, but we want the table name\n    SELECT \n        REPLACE(value, '\"', '')\n    from STRING_SPLIT('\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_policy_clean_nb100\"','.',1)\n    where ordinal = 3\n)\nAND COLUMN_NAME = 'cancellation_type'\nAND DATA_TYPE != 'varchar'\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "cancellation_type", "file_key_name": "models.actuarial_policy_clean_nb100"}, "test.iginsure.is_data_type_actuarial_policy_clean_nb100_policy_status__varchar.e9e2e4cffe": {"test_metadata": {"name": "is_data_type", "kwargs": {"column_type": "varchar", "column_name": "policy_status", "model": "{{ get_where_subquery(ref('actuarial_policy_clean_nb100')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.iginsure.test_is_data_type", "macro.dbt.get_where_subquery"], "nodes": ["model.iginsure.actuarial_policy_clean_nb100"]}, "config": {"enabled": true, "alias": "is_data_type_actuarial_policy__3f4f3a937a33ec19df19f052da225caf", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "presentation", "reserving_model", "is_data_type_actuarial_policy_clean_nb100_policy_status__varchar"], "unique_id": "test.iginsure.is_data_type_actuarial_policy_clean_nb100_policy_status__varchar.e9e2e4cffe", "raw_code": "{{ test_is_data_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"is_data_type_actuarial_policy__3f4f3a937a33ec19df19f052da225caf\") }}", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "is_data_type_actuarial_policy__3f4f3a937a33ec19df19f052da225caf.sql", "original_file_path": "models\\presentation\\reserving_model\\docs.yml", "name": "is_data_type_actuarial_policy_clean_nb100_policy_status__varchar", "alias": "is_data_type_actuarial_policy__3f4f3a937a33ec19df19f052da225caf", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["actuarial_policy_clean_nb100"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\presentation\\reserving_model\\docs.yml\\is_data_type_actuarial_policy__3f4f3a937a33ec19df19f052da225caf.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "is_data_type_actuarial_policy__3f4f3a937a33ec19df19f052da225caf"}, "created_at": 1701786801.416898, "compiled_code": "\n\nSELECT * FROM INFORMATION_SCHEMA.columns\nWHERE TABLE_SCHEMA = (\n    -- dbt gives us the full model name (db.schema.table)\n    -- but we want the schema name only\n    SELECT \n        REPLACE(value, '\"', '')\n    from STRING_SPLIT('\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_policy_clean_nb100\"','.',1)\n    where ordinal = 2\n)\nAND TABLE_NAME = (\n    -- same as above, but we want the table name\n    SELECT \n        REPLACE(value, '\"', '')\n    from STRING_SPLIT('\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_policy_clean_nb100\"','.',1)\n    where ordinal = 3\n)\nAND COLUMN_NAME = 'policy_status'\nAND DATA_TYPE != 'varchar'\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "policy_status", "file_key_name": "models.actuarial_policy_clean_nb100"}, "test.iginsure.is_data_type_actuarial_policy_clean_nb100_activity__varchar.419951a03a": {"test_metadata": {"name": "is_data_type", "kwargs": {"column_type": "varchar", "column_name": "activity", "model": "{{ get_where_subquery(ref('actuarial_policy_clean_nb100')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.iginsure.test_is_data_type", "macro.dbt.get_where_subquery"], "nodes": ["model.iginsure.actuarial_policy_clean_nb100"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "presentation", "reserving_model", "is_data_type_actuarial_policy_clean_nb100_activity__varchar"], "unique_id": "test.iginsure.is_data_type_actuarial_policy_clean_nb100_activity__varchar.419951a03a", "raw_code": "{{ test_is_data_type(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "is_data_type_actuarial_policy_clean_nb100_activity__varchar.sql", "original_file_path": "models\\presentation\\reserving_model\\docs.yml", "name": "is_data_type_actuarial_policy_clean_nb100_activity__varchar", "alias": "is_data_type_actuarial_policy_clean_nb100_activity__varchar", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["actuarial_policy_clean_nb100"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\presentation\\reserving_model\\docs.yml\\is_data_type_actuarial_policy_clean_nb100_activity__varchar.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701786801.425421, "compiled_code": "\n\nSELECT * FROM INFORMATION_SCHEMA.columns\nWHERE TABLE_SCHEMA = (\n    -- dbt gives us the full model name (db.schema.table)\n    -- but we want the schema name only\n    SELECT \n        REPLACE(value, '\"', '')\n    from STRING_SPLIT('\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_policy_clean_nb100\"','.',1)\n    where ordinal = 2\n)\nAND TABLE_NAME = (\n    -- same as above, but we want the table name\n    SELECT \n        REPLACE(value, '\"', '')\n    from STRING_SPLIT('\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_policy_clean_nb100\"','.',1)\n    where ordinal = 3\n)\nAND COLUMN_NAME = 'activity'\nAND DATA_TYPE != 'varchar'\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "activity", "file_key_name": "models.actuarial_policy_clean_nb100"}, "test.iginsure.is_data_type_actuarial_policy_clean_nb100_is_renewal__bit.0e68b03635": {"test_metadata": {"name": "is_data_type", "kwargs": {"column_type": "bit", "column_name": "is_renewal", "model": "{{ get_where_subquery(ref('actuarial_policy_clean_nb100')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.iginsure.test_is_data_type", "macro.dbt.get_where_subquery"], "nodes": ["model.iginsure.actuarial_policy_clean_nb100"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "presentation", "reserving_model", "is_data_type_actuarial_policy_clean_nb100_is_renewal__bit"], "unique_id": "test.iginsure.is_data_type_actuarial_policy_clean_nb100_is_renewal__bit.0e68b03635", "raw_code": "{{ test_is_data_type(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "is_data_type_actuarial_policy_clean_nb100_is_renewal__bit.sql", "original_file_path": "models\\presentation\\reserving_model\\docs.yml", "name": "is_data_type_actuarial_policy_clean_nb100_is_renewal__bit", "alias": "is_data_type_actuarial_policy_clean_nb100_is_renewal__bit", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["actuarial_policy_clean_nb100"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\presentation\\reserving_model\\docs.yml\\is_data_type_actuarial_policy_clean_nb100_is_renewal__bit.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701786801.4294186, "compiled_code": "\n\nSELECT * FROM INFORMATION_SCHEMA.columns\nWHERE TABLE_SCHEMA = (\n    -- dbt gives us the full model name (db.schema.table)\n    -- but we want the schema name only\n    SELECT \n        REPLACE(value, '\"', '')\n    from STRING_SPLIT('\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_policy_clean_nb100\"','.',1)\n    where ordinal = 2\n)\nAND TABLE_NAME = (\n    -- same as above, but we want the table name\n    SELECT \n        REPLACE(value, '\"', '')\n    from STRING_SPLIT('\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_policy_clean_nb100\"','.',1)\n    where ordinal = 3\n)\nAND COLUMN_NAME = 'is_renewal'\nAND DATA_TYPE != 'bit'\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "is_renewal", "file_key_name": "models.actuarial_policy_clean_nb100"}, "test.iginsure.is_data_type_actuarial_policy_clean_nb100_activity_status__varchar.699d86cb70": {"test_metadata": {"name": "is_data_type", "kwargs": {"column_type": "varchar", "column_name": "activity_status", "model": "{{ get_where_subquery(ref('actuarial_policy_clean_nb100')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.iginsure.test_is_data_type", "macro.dbt.get_where_subquery"], "nodes": ["model.iginsure.actuarial_policy_clean_nb100"]}, "config": {"enabled": true, "alias": "is_data_type_actuarial_policy__27ee01ddc3eb6e67b9e58a22a1ba583a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "presentation", "reserving_model", "is_data_type_actuarial_policy_clean_nb100_activity_status__varchar"], "unique_id": "test.iginsure.is_data_type_actuarial_policy_clean_nb100_activity_status__varchar.699d86cb70", "raw_code": "{{ test_is_data_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"is_data_type_actuarial_policy__27ee01ddc3eb6e67b9e58a22a1ba583a\") }}", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "is_data_type_actuarial_policy__27ee01ddc3eb6e67b9e58a22a1ba583a.sql", "original_file_path": "models\\presentation\\reserving_model\\docs.yml", "name": "is_data_type_actuarial_policy_clean_nb100_activity_status__varchar", "alias": "is_data_type_actuarial_policy__27ee01ddc3eb6e67b9e58a22a1ba583a", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["actuarial_policy_clean_nb100"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\presentation\\reserving_model\\docs.yml\\is_data_type_actuarial_policy__27ee01ddc3eb6e67b9e58a22a1ba583a.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "is_data_type_actuarial_policy__27ee01ddc3eb6e67b9e58a22a1ba583a"}, "created_at": 1701786801.432422, "compiled_code": "\n\nSELECT * FROM INFORMATION_SCHEMA.columns\nWHERE TABLE_SCHEMA = (\n    -- dbt gives us the full model name (db.schema.table)\n    -- but we want the schema name only\n    SELECT \n        REPLACE(value, '\"', '')\n    from STRING_SPLIT('\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_policy_clean_nb100\"','.',1)\n    where ordinal = 2\n)\nAND TABLE_NAME = (\n    -- same as above, but we want the table name\n    SELECT \n        REPLACE(value, '\"', '')\n    from STRING_SPLIT('\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_policy_clean_nb100\"','.',1)\n    where ordinal = 3\n)\nAND COLUMN_NAME = 'activity_status'\nAND DATA_TYPE != 'varchar'\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "activity_status", "file_key_name": "models.actuarial_policy_clean_nb100"}, "test.iginsure.is_data_type_actuarial_policy_clean_nb100_placing_code__varchar.7f645c5a8f": {"test_metadata": {"name": "is_data_type", "kwargs": {"column_type": "varchar", "column_name": "placing_code", "model": "{{ get_where_subquery(ref('actuarial_policy_clean_nb100')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.iginsure.test_is_data_type", "macro.dbt.get_where_subquery"], "nodes": ["model.iginsure.actuarial_policy_clean_nb100"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "presentation", "reserving_model", "is_data_type_actuarial_policy_clean_nb100_placing_code__varchar"], "unique_id": "test.iginsure.is_data_type_actuarial_policy_clean_nb100_placing_code__varchar.7f645c5a8f", "raw_code": "{{ test_is_data_type(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "is_data_type_actuarial_policy_clean_nb100_placing_code__varchar.sql", "original_file_path": "models\\presentation\\reserving_model\\docs.yml", "name": "is_data_type_actuarial_policy_clean_nb100_placing_code__varchar", "alias": "is_data_type_actuarial_policy_clean_nb100_placing_code__varchar", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["actuarial_policy_clean_nb100"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\presentation\\reserving_model\\docs.yml\\is_data_type_actuarial_policy_clean_nb100_placing_code__varchar.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701786801.440901, "compiled_code": "\n\nSELECT * FROM INFORMATION_SCHEMA.columns\nWHERE TABLE_SCHEMA = (\n    -- dbt gives us the full model name (db.schema.table)\n    -- but we want the schema name only\n    SELECT \n        REPLACE(value, '\"', '')\n    from STRING_SPLIT('\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_policy_clean_nb100\"','.',1)\n    where ordinal = 2\n)\nAND TABLE_NAME = (\n    -- same as above, but we want the table name\n    SELECT \n        REPLACE(value, '\"', '')\n    from STRING_SPLIT('\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_policy_clean_nb100\"','.',1)\n    where ordinal = 3\n)\nAND COLUMN_NAME = 'placing_code'\nAND DATA_TYPE != 'varchar'\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "placing_code", "file_key_name": "models.actuarial_policy_clean_nb100"}, "test.iginsure.is_data_type_actuarial_policy_clean_nb100_placing_method__varchar.f9910daf4b": {"test_metadata": {"name": "is_data_type", "kwargs": {"column_type": "varchar", "column_name": "placing_method", "model": "{{ get_where_subquery(ref('actuarial_policy_clean_nb100')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.iginsure.test_is_data_type", "macro.dbt.get_where_subquery"], "nodes": ["model.iginsure.actuarial_policy_clean_nb100"]}, "config": {"enabled": true, "alias": "is_data_type_actuarial_policy__e56ea99d1fefa82656008772a487fd45", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "presentation", "reserving_model", "is_data_type_actuarial_policy_clean_nb100_placing_method__varchar"], "unique_id": "test.iginsure.is_data_type_actuarial_policy_clean_nb100_placing_method__varchar.f9910daf4b", "raw_code": "{{ test_is_data_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"is_data_type_actuarial_policy__e56ea99d1fefa82656008772a487fd45\") }}", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "is_data_type_actuarial_policy__e56ea99d1fefa82656008772a487fd45.sql", "original_file_path": "models\\presentation\\reserving_model\\docs.yml", "name": "is_data_type_actuarial_policy_clean_nb100_placing_method__varchar", "alias": "is_data_type_actuarial_policy__e56ea99d1fefa82656008772a487fd45", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["actuarial_policy_clean_nb100"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\presentation\\reserving_model\\docs.yml\\is_data_type_actuarial_policy__e56ea99d1fefa82656008772a487fd45.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "is_data_type_actuarial_policy__e56ea99d1fefa82656008772a487fd45"}, "created_at": 1701786801.4439042, "compiled_code": "\n\nSELECT * FROM INFORMATION_SCHEMA.columns\nWHERE TABLE_SCHEMA = (\n    -- dbt gives us the full model name (db.schema.table)\n    -- but we want the schema name only\n    SELECT \n        REPLACE(value, '\"', '')\n    from STRING_SPLIT('\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_policy_clean_nb100\"','.',1)\n    where ordinal = 2\n)\nAND TABLE_NAME = (\n    -- same as above, but we want the table name\n    SELECT \n        REPLACE(value, '\"', '')\n    from STRING_SPLIT('\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_policy_clean_nb100\"','.',1)\n    where ordinal = 3\n)\nAND COLUMN_NAME = 'placing_method'\nAND DATA_TYPE != 'varchar'\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "placing_method", "file_key_name": "models.actuarial_policy_clean_nb100"}, "test.iginsure.is_data_type_actuarial_policy_clean_nb100_is_claims_made__bit.eddad831b6": {"test_metadata": {"name": "is_data_type", "kwargs": {"column_type": "bit", "column_name": "is_claims_made", "model": "{{ get_where_subquery(ref('actuarial_policy_clean_nb100')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.iginsure.test_is_data_type", "macro.dbt.get_where_subquery"], "nodes": ["model.iginsure.actuarial_policy_clean_nb100"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "presentation", "reserving_model", "is_data_type_actuarial_policy_clean_nb100_is_claims_made__bit"], "unique_id": "test.iginsure.is_data_type_actuarial_policy_clean_nb100_is_claims_made__bit.eddad831b6", "raw_code": "{{ test_is_data_type(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "is_data_type_actuarial_policy_clean_nb100_is_claims_made__bit.sql", "original_file_path": "models\\presentation\\reserving_model\\docs.yml", "name": "is_data_type_actuarial_policy_clean_nb100_is_claims_made__bit", "alias": "is_data_type_actuarial_policy_clean_nb100_is_claims_made__bit", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["actuarial_policy_clean_nb100"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\presentation\\reserving_model\\docs.yml\\is_data_type_actuarial_policy_clean_nb100_is_claims_made__bit.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701786801.4479043, "compiled_code": "\n\nSELECT * FROM INFORMATION_SCHEMA.columns\nWHERE TABLE_SCHEMA = (\n    -- dbt gives us the full model name (db.schema.table)\n    -- but we want the schema name only\n    SELECT \n        REPLACE(value, '\"', '')\n    from STRING_SPLIT('\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_policy_clean_nb100\"','.',1)\n    where ordinal = 2\n)\nAND TABLE_NAME = (\n    -- same as above, but we want the table name\n    SELECT \n        REPLACE(value, '\"', '')\n    from STRING_SPLIT('\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_policy_clean_nb100\"','.',1)\n    where ordinal = 3\n)\nAND COLUMN_NAME = 'is_claims_made'\nAND DATA_TYPE != 'bit'\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "is_claims_made", "file_key_name": "models.actuarial_policy_clean_nb100"}, "test.iginsure.is_data_type_actuarial_policy_clean_nb100_working_line_pct__float.8f80c8e1c2": {"test_metadata": {"name": "is_data_type", "kwargs": {"column_type": "float", "column_name": "working_line_pct", "model": "{{ get_where_subquery(ref('actuarial_policy_clean_nb100')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.iginsure.test_is_data_type", "macro.dbt.get_where_subquery"], "nodes": ["model.iginsure.actuarial_policy_clean_nb100"]}, "config": {"enabled": true, "alias": "is_data_type_actuarial_policy__ef26c29895a9e641b93b23ee6c481004", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "presentation", "reserving_model", "is_data_type_actuarial_policy_clean_nb100_working_line_pct__float"], "unique_id": "test.iginsure.is_data_type_actuarial_policy_clean_nb100_working_line_pct__float.8f80c8e1c2", "raw_code": "{{ test_is_data_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"is_data_type_actuarial_policy__ef26c29895a9e641b93b23ee6c481004\") }}", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "is_data_type_actuarial_policy__ef26c29895a9e641b93b23ee6c481004.sql", "original_file_path": "models\\presentation\\reserving_model\\docs.yml", "name": "is_data_type_actuarial_policy_clean_nb100_working_line_pct__float", "alias": "is_data_type_actuarial_policy__ef26c29895a9e641b93b23ee6c481004", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["actuarial_policy_clean_nb100"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\presentation\\reserving_model\\docs.yml\\is_data_type_actuarial_policy__ef26c29895a9e641b93b23ee6c481004.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "is_data_type_actuarial_policy__ef26c29895a9e641b93b23ee6c481004"}, "created_at": 1701786801.453094, "compiled_code": "\n\nSELECT * FROM INFORMATION_SCHEMA.columns\nWHERE TABLE_SCHEMA = (\n    -- dbt gives us the full model name (db.schema.table)\n    -- but we want the schema name only\n    SELECT \n        REPLACE(value, '\"', '')\n    from STRING_SPLIT('\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_policy_clean_nb100\"','.',1)\n    where ordinal = 2\n)\nAND TABLE_NAME = (\n    -- same as above, but we want the table name\n    SELECT \n        REPLACE(value, '\"', '')\n    from STRING_SPLIT('\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_policy_clean_nb100\"','.',1)\n    where ordinal = 3\n)\nAND COLUMN_NAME = 'working_line_pct'\nAND DATA_TYPE != 'float'\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "working_line_pct", "file_key_name": "models.actuarial_policy_clean_nb100"}, "test.iginsure.is_data_type_actuarial_policy_clean_nb100_gross_written_share__float.918d905f5c": {"test_metadata": {"name": "is_data_type", "kwargs": {"column_type": "float", "column_name": "gross_written_share", "model": "{{ get_where_subquery(ref('actuarial_policy_clean_nb100')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.iginsure.test_is_data_type", "macro.dbt.get_where_subquery"], "nodes": ["model.iginsure.actuarial_policy_clean_nb100"]}, "config": {"enabled": true, "alias": "is_data_type_actuarial_policy__88f3078cc5ccd1b6c74bdb76d4a33f4e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "presentation", "reserving_model", "is_data_type_actuarial_policy_clean_nb100_gross_written_share__float"], "unique_id": "test.iginsure.is_data_type_actuarial_policy_clean_nb100_gross_written_share__float.918d905f5c", "raw_code": "{{ test_is_data_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"is_data_type_actuarial_policy__88f3078cc5ccd1b6c74bdb76d4a33f4e\") }}", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "is_data_type_actuarial_policy__88f3078cc5ccd1b6c74bdb76d4a33f4e.sql", "original_file_path": "models\\presentation\\reserving_model\\docs.yml", "name": "is_data_type_actuarial_policy_clean_nb100_gross_written_share__float", "alias": "is_data_type_actuarial_policy__88f3078cc5ccd1b6c74bdb76d4a33f4e", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["actuarial_policy_clean_nb100"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\presentation\\reserving_model\\docs.yml\\is_data_type_actuarial_policy__88f3078cc5ccd1b6c74bdb76d4a33f4e.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "is_data_type_actuarial_policy__88f3078cc5ccd1b6c74bdb76d4a33f4e"}, "created_at": 1701786801.4584572, "compiled_code": "\n\nSELECT * FROM INFORMATION_SCHEMA.columns\nWHERE TABLE_SCHEMA = (\n    -- dbt gives us the full model name (db.schema.table)\n    -- but we want the schema name only\n    SELECT \n        REPLACE(value, '\"', '')\n    from STRING_SPLIT('\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_policy_clean_nb100\"','.',1)\n    where ordinal = 2\n)\nAND TABLE_NAME = (\n    -- same as above, but we want the table name\n    SELECT \n        REPLACE(value, '\"', '')\n    from STRING_SPLIT('\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_policy_clean_nb100\"','.',1)\n    where ordinal = 3\n)\nAND COLUMN_NAME = 'gross_written_share'\nAND DATA_TYPE != 'float'\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "gross_written_share", "file_key_name": "models.actuarial_policy_clean_nb100"}, "test.iginsure.is_data_type_actuarial_policy_clean_nb100_reserving_class_1__varchar.20fd1c1dfc": {"test_metadata": {"name": "is_data_type", "kwargs": {"column_type": "varchar", "column_name": "reserving_class_1", "model": "{{ get_where_subquery(ref('actuarial_policy_clean_nb100')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.iginsure.test_is_data_type", "macro.dbt.get_where_subquery"], "nodes": ["model.iginsure.actuarial_policy_clean_nb100"]}, "config": {"enabled": true, "alias": "is_data_type_actuarial_policy__0d2fa077053f03a0236a4413aaf545e3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "presentation", "reserving_model", "is_data_type_actuarial_policy_clean_nb100_reserving_class_1__varchar"], "unique_id": "test.iginsure.is_data_type_actuarial_policy_clean_nb100_reserving_class_1__varchar.20fd1c1dfc", "raw_code": "{{ test_is_data_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"is_data_type_actuarial_policy__0d2fa077053f03a0236a4413aaf545e3\") }}", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "is_data_type_actuarial_policy__0d2fa077053f03a0236a4413aaf545e3.sql", "original_file_path": "models\\presentation\\reserving_model\\docs.yml", "name": "is_data_type_actuarial_policy_clean_nb100_reserving_class_1__varchar", "alias": "is_data_type_actuarial_policy__0d2fa077053f03a0236a4413aaf545e3", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["actuarial_policy_clean_nb100"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\presentation\\reserving_model\\docs.yml\\is_data_type_actuarial_policy__0d2fa077053f03a0236a4413aaf545e3.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "is_data_type_actuarial_policy__0d2fa077053f03a0236a4413aaf545e3"}, "created_at": 1701786801.4619699, "compiled_code": "\n\nSELECT * FROM INFORMATION_SCHEMA.columns\nWHERE TABLE_SCHEMA = (\n    -- dbt gives us the full model name (db.schema.table)\n    -- but we want the schema name only\n    SELECT \n        REPLACE(value, '\"', '')\n    from STRING_SPLIT('\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_policy_clean_nb100\"','.',1)\n    where ordinal = 2\n)\nAND TABLE_NAME = (\n    -- same as above, but we want the table name\n    SELECT \n        REPLACE(value, '\"', '')\n    from STRING_SPLIT('\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_policy_clean_nb100\"','.',1)\n    where ordinal = 3\n)\nAND COLUMN_NAME = 'reserving_class_1'\nAND DATA_TYPE != 'varchar'\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "reserving_class_1", "file_key_name": "models.actuarial_policy_clean_nb100"}, "test.iginsure.is_data_type_actuarial_policy_clean_nb100_reserving_class_2__varchar.9e1db6eeb4": {"test_metadata": {"name": "is_data_type", "kwargs": {"column_type": "varchar", "column_name": "reserving_class_2", "model": "{{ get_where_subquery(ref('actuarial_policy_clean_nb100')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.iginsure.test_is_data_type", "macro.dbt.get_where_subquery"], "nodes": ["model.iginsure.actuarial_policy_clean_nb100"]}, "config": {"enabled": true, "alias": "is_data_type_actuarial_policy__8b2a639bbb0b6ff047fb57825faf18fa", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "presentation", "reserving_model", "is_data_type_actuarial_policy_clean_nb100_reserving_class_2__varchar"], "unique_id": "test.iginsure.is_data_type_actuarial_policy_clean_nb100_reserving_class_2__varchar.9e1db6eeb4", "raw_code": "{{ test_is_data_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"is_data_type_actuarial_policy__8b2a639bbb0b6ff047fb57825faf18fa\") }}", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "is_data_type_actuarial_policy__8b2a639bbb0b6ff047fb57825faf18fa.sql", "original_file_path": "models\\presentation\\reserving_model\\docs.yml", "name": "is_data_type_actuarial_policy_clean_nb100_reserving_class_2__varchar", "alias": "is_data_type_actuarial_policy__8b2a639bbb0b6ff047fb57825faf18fa", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["actuarial_policy_clean_nb100"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\presentation\\reserving_model\\docs.yml\\is_data_type_actuarial_policy__8b2a639bbb0b6ff047fb57825faf18fa.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "is_data_type_actuarial_policy__8b2a639bbb0b6ff047fb57825faf18fa"}, "created_at": 1701786801.4649696, "compiled_code": "\n\nSELECT * FROM INFORMATION_SCHEMA.columns\nWHERE TABLE_SCHEMA = (\n    -- dbt gives us the full model name (db.schema.table)\n    -- but we want the schema name only\n    SELECT \n        REPLACE(value, '\"', '')\n    from STRING_SPLIT('\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_policy_clean_nb100\"','.',1)\n    where ordinal = 2\n)\nAND TABLE_NAME = (\n    -- same as above, but we want the table name\n    SELECT \n        REPLACE(value, '\"', '')\n    from STRING_SPLIT('\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_policy_clean_nb100\"','.',1)\n    where ordinal = 3\n)\nAND COLUMN_NAME = 'reserving_class_2'\nAND DATA_TYPE != 'varchar'\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "reserving_class_2", "file_key_name": "models.actuarial_policy_clean_nb100"}, "test.iginsure.is_data_type_actuarial_policy_clean_nb100_reserving_class_3__varchar.40da7dd223": {"test_metadata": {"name": "is_data_type", "kwargs": {"column_type": "varchar", "column_name": "reserving_class_3", "model": "{{ get_where_subquery(ref('actuarial_policy_clean_nb100')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.iginsure.test_is_data_type", "macro.dbt.get_where_subquery"], "nodes": ["model.iginsure.actuarial_policy_clean_nb100"]}, "config": {"enabled": true, "alias": "is_data_type_actuarial_policy__4724f964c8a3133241f416b2a427ef56", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "presentation", "reserving_model", "is_data_type_actuarial_policy_clean_nb100_reserving_class_3__varchar"], "unique_id": "test.iginsure.is_data_type_actuarial_policy_clean_nb100_reserving_class_3__varchar.40da7dd223", "raw_code": "{{ test_is_data_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"is_data_type_actuarial_policy__4724f964c8a3133241f416b2a427ef56\") }}", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "is_data_type_actuarial_policy__4724f964c8a3133241f416b2a427ef56.sql", "original_file_path": "models\\presentation\\reserving_model\\docs.yml", "name": "is_data_type_actuarial_policy_clean_nb100_reserving_class_3__varchar", "alias": "is_data_type_actuarial_policy__4724f964c8a3133241f416b2a427ef56", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["actuarial_policy_clean_nb100"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\presentation\\reserving_model\\docs.yml\\is_data_type_actuarial_policy__4724f964c8a3133241f416b2a427ef56.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "is_data_type_actuarial_policy__4724f964c8a3133241f416b2a427ef56"}, "created_at": 1701786801.47048, "compiled_code": "\n\nSELECT * FROM INFORMATION_SCHEMA.columns\nWHERE TABLE_SCHEMA = (\n    -- dbt gives us the full model name (db.schema.table)\n    -- but we want the schema name only\n    SELECT \n        REPLACE(value, '\"', '')\n    from STRING_SPLIT('\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_policy_clean_nb100\"','.',1)\n    where ordinal = 2\n)\nAND TABLE_NAME = (\n    -- same as above, but we want the table name\n    SELECT \n        REPLACE(value, '\"', '')\n    from STRING_SPLIT('\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_policy_clean_nb100\"','.',1)\n    where ordinal = 3\n)\nAND COLUMN_NAME = 'reserving_class_3'\nAND DATA_TYPE != 'varchar'\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "reserving_class_3", "file_key_name": "models.actuarial_policy_clean_nb100"}, "test.iginsure.is_data_type_actuarial_policy_clean_nb100_reserving_class_xol_allocation__varchar.702455018c": {"test_metadata": {"name": "is_data_type", "kwargs": {"column_type": "varchar", "column_name": "reserving_class_xol_allocation", "model": "{{ get_where_subquery(ref('actuarial_policy_clean_nb100')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.iginsure.test_is_data_type", "macro.dbt.get_where_subquery"], "nodes": ["model.iginsure.actuarial_policy_clean_nb100"]}, "config": {"enabled": true, "alias": "is_data_type_actuarial_policy__e8d091ca7e69ebf58dd6303357bf4a5c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "presentation", "reserving_model", "is_data_type_actuarial_policy_clean_nb100_reserving_class_xol_allocation__varchar"], "unique_id": "test.iginsure.is_data_type_actuarial_policy_clean_nb100_reserving_class_xol_allocation__varchar.702455018c", "raw_code": "{{ test_is_data_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"is_data_type_actuarial_policy__e8d091ca7e69ebf58dd6303357bf4a5c\") }}", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "is_data_type_actuarial_policy__e8d091ca7e69ebf58dd6303357bf4a5c.sql", "original_file_path": "models\\presentation\\reserving_model\\docs.yml", "name": "is_data_type_actuarial_policy_clean_nb100_reserving_class_xol_allocation__varchar", "alias": "is_data_type_actuarial_policy__e8d091ca7e69ebf58dd6303357bf4a5c", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["actuarial_policy_clean_nb100"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\presentation\\reserving_model\\docs.yml\\is_data_type_actuarial_policy__e8d091ca7e69ebf58dd6303357bf4a5c.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "is_data_type_actuarial_policy__e8d091ca7e69ebf58dd6303357bf4a5c"}, "created_at": 1701786801.4750082, "compiled_code": "\n\nSELECT * FROM INFORMATION_SCHEMA.columns\nWHERE TABLE_SCHEMA = (\n    -- dbt gives us the full model name (db.schema.table)\n    -- but we want the schema name only\n    SELECT \n        REPLACE(value, '\"', '')\n    from STRING_SPLIT('\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_policy_clean_nb100\"','.',1)\n    where ordinal = 2\n)\nAND TABLE_NAME = (\n    -- same as above, but we want the table name\n    SELECT \n        REPLACE(value, '\"', '')\n    from STRING_SPLIT('\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_policy_clean_nb100\"','.',1)\n    where ordinal = 3\n)\nAND COLUMN_NAME = 'reserving_class_xol_allocation'\nAND DATA_TYPE != 'varchar'\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "reserving_class_xol_allocation", "file_key_name": "models.actuarial_policy_clean_nb100"}, "test.iginsure.is_data_type_actuarial_policy_clean_nb100_account_period__int.f1d12dfce9": {"test_metadata": {"name": "is_data_type", "kwargs": {"column_type": "int", "column_name": "account_period", "model": "{{ get_where_subquery(ref('actuarial_policy_clean_nb100')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.iginsure.test_is_data_type", "macro.dbt.get_where_subquery"], "nodes": ["model.iginsure.actuarial_policy_clean_nb100"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "presentation", "reserving_model", "is_data_type_actuarial_policy_clean_nb100_account_period__int"], "unique_id": "test.iginsure.is_data_type_actuarial_policy_clean_nb100_account_period__int.f1d12dfce9", "raw_code": "{{ test_is_data_type(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "is_data_type_actuarial_policy_clean_nb100_account_period__int.sql", "original_file_path": "models\\presentation\\reserving_model\\docs.yml", "name": "is_data_type_actuarial_policy_clean_nb100_account_period__int", "alias": "is_data_type_actuarial_policy_clean_nb100_account_period__int", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["actuarial_policy_clean_nb100"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\presentation\\reserving_model\\docs.yml\\is_data_type_actuarial_policy_clean_nb100_account_period__int.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701786801.4780085, "compiled_code": "\n\nSELECT * FROM INFORMATION_SCHEMA.columns\nWHERE TABLE_SCHEMA = (\n    -- dbt gives us the full model name (db.schema.table)\n    -- but we want the schema name only\n    SELECT \n        REPLACE(value, '\"', '')\n    from STRING_SPLIT('\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_policy_clean_nb100\"','.',1)\n    where ordinal = 2\n)\nAND TABLE_NAME = (\n    -- same as above, but we want the table name\n    SELECT \n        REPLACE(value, '\"', '')\n    from STRING_SPLIT('\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_policy_clean_nb100\"','.',1)\n    where ordinal = 3\n)\nAND COLUMN_NAME = 'account_period'\nAND DATA_TYPE != 'int'\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "account_period", "file_key_name": "models.actuarial_policy_clean_nb100"}, "test.iginsure.is_data_type_actuarial_policy_clean_nb100_tiv_usd__float.2da3ade511": {"test_metadata": {"name": "is_data_type", "kwargs": {"column_type": "float", "column_name": "tiv_usd", "model": "{{ get_where_subquery(ref('actuarial_policy_clean_nb100')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.iginsure.test_is_data_type", "macro.dbt.get_where_subquery"], "nodes": ["model.iginsure.actuarial_policy_clean_nb100"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "presentation", "reserving_model", "is_data_type_actuarial_policy_clean_nb100_tiv_usd__float"], "unique_id": "test.iginsure.is_data_type_actuarial_policy_clean_nb100_tiv_usd__float.2da3ade511", "raw_code": "{{ test_is_data_type(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "is_data_type_actuarial_policy_clean_nb100_tiv_usd__float.sql", "original_file_path": "models\\presentation\\reserving_model\\docs.yml", "name": "is_data_type_actuarial_policy_clean_nb100_tiv_usd__float", "alias": "is_data_type_actuarial_policy_clean_nb100_tiv_usd__float", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["actuarial_policy_clean_nb100"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\presentation\\reserving_model\\docs.yml\\is_data_type_actuarial_policy_clean_nb100_tiv_usd__float.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701786801.481004, "compiled_code": "\n\nSELECT * FROM INFORMATION_SCHEMA.columns\nWHERE TABLE_SCHEMA = (\n    -- dbt gives us the full model name (db.schema.table)\n    -- but we want the schema name only\n    SELECT \n        REPLACE(value, '\"', '')\n    from STRING_SPLIT('\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_policy_clean_nb100\"','.',1)\n    where ordinal = 2\n)\nAND TABLE_NAME = (\n    -- same as above, but we want the table name\n    SELECT \n        REPLACE(value, '\"', '')\n    from STRING_SPLIT('\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_policy_clean_nb100\"','.',1)\n    where ordinal = 3\n)\nAND COLUMN_NAME = 'tiv_usd'\nAND DATA_TYPE != 'float'\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "tiv_usd", "file_key_name": "models.actuarial_policy_clean_nb100"}, "test.iginsure.is_data_type_actuarial_policy_clean_nb100_tiv_share_usd__float.d228730228": {"test_metadata": {"name": "is_data_type", "kwargs": {"column_type": "float", "column_name": "tiv_share_usd", "model": "{{ get_where_subquery(ref('actuarial_policy_clean_nb100')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.iginsure.test_is_data_type", "macro.dbt.get_where_subquery"], "nodes": ["model.iginsure.actuarial_policy_clean_nb100"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "presentation", "reserving_model", "is_data_type_actuarial_policy_clean_nb100_tiv_share_usd__float"], "unique_id": "test.iginsure.is_data_type_actuarial_policy_clean_nb100_tiv_share_usd__float.d228730228", "raw_code": "{{ test_is_data_type(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "is_data_type_actuarial_policy_clean_nb100_tiv_share_usd__float.sql", "original_file_path": "models\\presentation\\reserving_model\\docs.yml", "name": "is_data_type_actuarial_policy_clean_nb100_tiv_share_usd__float", "alias": "is_data_type_actuarial_policy_clean_nb100_tiv_share_usd__float", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["actuarial_policy_clean_nb100"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\presentation\\reserving_model\\docs.yml\\is_data_type_actuarial_policy_clean_nb100_tiv_share_usd__float.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701786801.484159, "compiled_code": "\n\nSELECT * FROM INFORMATION_SCHEMA.columns\nWHERE TABLE_SCHEMA = (\n    -- dbt gives us the full model name (db.schema.table)\n    -- but we want the schema name only\n    SELECT \n        REPLACE(value, '\"', '')\n    from STRING_SPLIT('\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_policy_clean_nb100\"','.',1)\n    where ordinal = 2\n)\nAND TABLE_NAME = (\n    -- same as above, but we want the table name\n    SELECT \n        REPLACE(value, '\"', '')\n    from STRING_SPLIT('\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_policy_clean_nb100\"','.',1)\n    where ordinal = 3\n)\nAND COLUMN_NAME = 'tiv_share_usd'\nAND DATA_TYPE != 'float'\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "tiv_share_usd", "file_key_name": "models.actuarial_policy_clean_nb100"}, "test.iginsure.is_data_type_actuarial_policy_clean_nb100_tiv_100_usd__float.fea59393ff": {"test_metadata": {"name": "is_data_type", "kwargs": {"column_type": "float", "column_name": "tiv_100_usd", "model": "{{ get_where_subquery(ref('actuarial_policy_clean_nb100')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.iginsure.test_is_data_type", "macro.dbt.get_where_subquery"], "nodes": ["model.iginsure.actuarial_policy_clean_nb100"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "presentation", "reserving_model", "is_data_type_actuarial_policy_clean_nb100_tiv_100_usd__float"], "unique_id": "test.iginsure.is_data_type_actuarial_policy_clean_nb100_tiv_100_usd__float.fea59393ff", "raw_code": "{{ test_is_data_type(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "is_data_type_actuarial_policy_clean_nb100_tiv_100_usd__float.sql", "original_file_path": "models\\presentation\\reserving_model\\docs.yml", "name": "is_data_type_actuarial_policy_clean_nb100_tiv_100_usd__float", "alias": "is_data_type_actuarial_policy_clean_nb100_tiv_100_usd__float", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["actuarial_policy_clean_nb100"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\presentation\\reserving_model\\docs.yml\\is_data_type_actuarial_policy_clean_nb100_tiv_100_usd__float.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701786801.4928403, "compiled_code": "\n\nSELECT * FROM INFORMATION_SCHEMA.columns\nWHERE TABLE_SCHEMA = (\n    -- dbt gives us the full model name (db.schema.table)\n    -- but we want the schema name only\n    SELECT \n        REPLACE(value, '\"', '')\n    from STRING_SPLIT('\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_policy_clean_nb100\"','.',1)\n    where ordinal = 2\n)\nAND TABLE_NAME = (\n    -- same as above, but we want the table name\n    SELECT \n        REPLACE(value, '\"', '')\n    from STRING_SPLIT('\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_policy_clean_nb100\"','.',1)\n    where ordinal = 3\n)\nAND COLUMN_NAME = 'tiv_100_usd'\nAND DATA_TYPE != 'float'\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "tiv_100_usd", "file_key_name": "models.actuarial_policy_clean_nb100"}, "test.iginsure.is_data_type_actuarial_policy_clean_nb100_event_limit_100_usd__float.68dd4de27f": {"test_metadata": {"name": "is_data_type", "kwargs": {"column_type": "float", "column_name": "event_limit_100_usd", "model": "{{ get_where_subquery(ref('actuarial_policy_clean_nb100')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.iginsure.test_is_data_type", "macro.dbt.get_where_subquery"], "nodes": ["model.iginsure.actuarial_policy_clean_nb100"]}, "config": {"enabled": true, "alias": "is_data_type_actuarial_policy__be7b43c415ced1a849e20fbd58c49890", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "presentation", "reserving_model", "is_data_type_actuarial_policy_clean_nb100_event_limit_100_usd__float"], "unique_id": "test.iginsure.is_data_type_actuarial_policy_clean_nb100_event_limit_100_usd__float.68dd4de27f", "raw_code": "{{ test_is_data_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"is_data_type_actuarial_policy__be7b43c415ced1a849e20fbd58c49890\") }}", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "is_data_type_actuarial_policy__be7b43c415ced1a849e20fbd58c49890.sql", "original_file_path": "models\\presentation\\reserving_model\\docs.yml", "name": "is_data_type_actuarial_policy_clean_nb100_event_limit_100_usd__float", "alias": "is_data_type_actuarial_policy__be7b43c415ced1a849e20fbd58c49890", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["actuarial_policy_clean_nb100"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\presentation\\reserving_model\\docs.yml\\is_data_type_actuarial_policy__be7b43c415ced1a849e20fbd58c49890.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "is_data_type_actuarial_policy__be7b43c415ced1a849e20fbd58c49890"}, "created_at": 1701786801.4958408, "compiled_code": "\n\nSELECT * FROM INFORMATION_SCHEMA.columns\nWHERE TABLE_SCHEMA = (\n    -- dbt gives us the full model name (db.schema.table)\n    -- but we want the schema name only\n    SELECT \n        REPLACE(value, '\"', '')\n    from STRING_SPLIT('\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_policy_clean_nb100\"','.',1)\n    where ordinal = 2\n)\nAND TABLE_NAME = (\n    -- same as above, but we want the table name\n    SELECT \n        REPLACE(value, '\"', '')\n    from STRING_SPLIT('\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_policy_clean_nb100\"','.',1)\n    where ordinal = 3\n)\nAND COLUMN_NAME = 'event_limit_100_usd'\nAND DATA_TYPE != 'float'\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "event_limit_100_usd", "file_key_name": "models.actuarial_policy_clean_nb100"}, "test.iginsure.is_data_type_actuarial_policy_clean_nb100_pml_100_usd__float.baa87045a3": {"test_metadata": {"name": "is_data_type", "kwargs": {"column_type": "float", "column_name": "pml_100_usd", "model": "{{ get_where_subquery(ref('actuarial_policy_clean_nb100')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.iginsure.test_is_data_type", "macro.dbt.get_where_subquery"], "nodes": ["model.iginsure.actuarial_policy_clean_nb100"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "presentation", "reserving_model", "is_data_type_actuarial_policy_clean_nb100_pml_100_usd__float"], "unique_id": "test.iginsure.is_data_type_actuarial_policy_clean_nb100_pml_100_usd__float.baa87045a3", "raw_code": "{{ test_is_data_type(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "is_data_type_actuarial_policy_clean_nb100_pml_100_usd__float.sql", "original_file_path": "models\\presentation\\reserving_model\\docs.yml", "name": "is_data_type_actuarial_policy_clean_nb100_pml_100_usd__float", "alias": "is_data_type_actuarial_policy_clean_nb100_pml_100_usd__float", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["actuarial_policy_clean_nb100"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\presentation\\reserving_model\\docs.yml\\is_data_type_actuarial_policy_clean_nb100_pml_100_usd__float.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701786801.498837, "compiled_code": "\n\nSELECT * FROM INFORMATION_SCHEMA.columns\nWHERE TABLE_SCHEMA = (\n    -- dbt gives us the full model name (db.schema.table)\n    -- but we want the schema name only\n    SELECT \n        REPLACE(value, '\"', '')\n    from STRING_SPLIT('\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_policy_clean_nb100\"','.',1)\n    where ordinal = 2\n)\nAND TABLE_NAME = (\n    -- same as above, but we want the table name\n    SELECT \n        REPLACE(value, '\"', '')\n    from STRING_SPLIT('\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_policy_clean_nb100\"','.',1)\n    where ordinal = 3\n)\nAND COLUMN_NAME = 'pml_100_usd'\nAND DATA_TYPE != 'float'\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "pml_100_usd", "file_key_name": "models.actuarial_policy_clean_nb100"}, "test.iginsure.is_data_type_actuarial_policy_clean_nb100_pml_share_usd__float.891da5a110": {"test_metadata": {"name": "is_data_type", "kwargs": {"column_type": "float", "column_name": "pml_share_usd", "model": "{{ get_where_subquery(ref('actuarial_policy_clean_nb100')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.iginsure.test_is_data_type", "macro.dbt.get_where_subquery"], "nodes": ["model.iginsure.actuarial_policy_clean_nb100"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "presentation", "reserving_model", "is_data_type_actuarial_policy_clean_nb100_pml_share_usd__float"], "unique_id": "test.iginsure.is_data_type_actuarial_policy_clean_nb100_pml_share_usd__float.891da5a110", "raw_code": "{{ test_is_data_type(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "is_data_type_actuarial_policy_clean_nb100_pml_share_usd__float.sql", "original_file_path": "models\\presentation\\reserving_model\\docs.yml", "name": "is_data_type_actuarial_policy_clean_nb100_pml_share_usd__float", "alias": "is_data_type_actuarial_policy_clean_nb100_pml_share_usd__float", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["actuarial_policy_clean_nb100"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\presentation\\reserving_model\\docs.yml\\is_data_type_actuarial_policy_clean_nb100_pml_share_usd__float.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701786801.5057878, "compiled_code": "\n\nSELECT * FROM INFORMATION_SCHEMA.columns\nWHERE TABLE_SCHEMA = (\n    -- dbt gives us the full model name (db.schema.table)\n    -- but we want the schema name only\n    SELECT \n        REPLACE(value, '\"', '')\n    from STRING_SPLIT('\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_policy_clean_nb100\"','.',1)\n    where ordinal = 2\n)\nAND TABLE_NAME = (\n    -- same as above, but we want the table name\n    SELECT \n        REPLACE(value, '\"', '')\n    from STRING_SPLIT('\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_policy_clean_nb100\"','.',1)\n    where ordinal = 3\n)\nAND COLUMN_NAME = 'pml_share_usd'\nAND DATA_TYPE != 'float'\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "pml_share_usd", "file_key_name": "models.actuarial_policy_clean_nb100"}, "test.iginsure.is_data_type_actuarial_earned_premium_clean_nb100_gross_earned_premium__float.fcee4ffb07": {"test_metadata": {"name": "is_data_type", "kwargs": {"column_type": "float", "column_name": "gross_earned_premium", "model": "{{ get_where_subquery(ref('actuarial_earned_premium_clean_nb100')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.iginsure.test_is_data_type", "macro.dbt.get_where_subquery"], "nodes": ["model.iginsure.actuarial_earned_premium_clean_nb100"]}, "config": {"enabled": true, "alias": "is_data_type_actuarial_earned__c7eb8579835f10cffa599a6e4c0899dd", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "presentation", "reserving_model", "is_data_type_actuarial_earned_premium_clean_nb100_gross_earned_premium__float"], "unique_id": "test.iginsure.is_data_type_actuarial_earned_premium_clean_nb100_gross_earned_premium__float.fcee4ffb07", "raw_code": "{{ test_is_data_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"is_data_type_actuarial_earned__c7eb8579835f10cffa599a6e4c0899dd\") }}", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "is_data_type_actuarial_earned__c7eb8579835f10cffa599a6e4c0899dd.sql", "original_file_path": "models\\presentation\\reserving_model\\docs.yml", "name": "is_data_type_actuarial_earned_premium_clean_nb100_gross_earned_premium__float", "alias": "is_data_type_actuarial_earned__c7eb8579835f10cffa599a6e4c0899dd", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["actuarial_earned_premium_clean_nb100"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\presentation\\reserving_model\\docs.yml\\is_data_type_actuarial_earned__c7eb8579835f10cffa599a6e4c0899dd.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "is_data_type_actuarial_earned__c7eb8579835f10cffa599a6e4c0899dd"}, "created_at": 1701786801.508786, "compiled_code": "\n\nSELECT * FROM INFORMATION_SCHEMA.columns\nWHERE TABLE_SCHEMA = (\n    -- dbt gives us the full model name (db.schema.table)\n    -- but we want the schema name only\n    SELECT \n        REPLACE(value, '\"', '')\n    from STRING_SPLIT('\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_earned_premium_clean_nb100\"','.',1)\n    where ordinal = 2\n)\nAND TABLE_NAME = (\n    -- same as above, but we want the table name\n    SELECT \n        REPLACE(value, '\"', '')\n    from STRING_SPLIT('\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_earned_premium_clean_nb100\"','.',1)\n    where ordinal = 3\n)\nAND COLUMN_NAME = 'gross_earned_premium'\nAND DATA_TYPE != 'float'\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "gross_earned_premium", "file_key_name": "models.actuarial_earned_premium_clean_nb100"}, "test.iginsure.is_data_type_actuarial_earned_premium_clean_nb100_inward_acquisition_cost__float.0f8c3bb208": {"test_metadata": {"name": "is_data_type", "kwargs": {"column_type": "float", "column_name": "inward_acquisition_cost", "model": "{{ get_where_subquery(ref('actuarial_earned_premium_clean_nb100')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.iginsure.test_is_data_type", "macro.dbt.get_where_subquery"], "nodes": ["model.iginsure.actuarial_earned_premium_clean_nb100"]}, "config": {"enabled": true, "alias": "is_data_type_actuarial_earned__bed63d070bef74b53aac2f720699157b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "presentation", "reserving_model", "is_data_type_actuarial_earned_premium_clean_nb100_inward_acquisition_cost__float"], "unique_id": "test.iginsure.is_data_type_actuarial_earned_premium_clean_nb100_inward_acquisition_cost__float.0f8c3bb208", "raw_code": "{{ test_is_data_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"is_data_type_actuarial_earned__bed63d070bef74b53aac2f720699157b\") }}", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "is_data_type_actuarial_earned__bed63d070bef74b53aac2f720699157b.sql", "original_file_path": "models\\presentation\\reserving_model\\docs.yml", "name": "is_data_type_actuarial_earned_premium_clean_nb100_inward_acquisition_cost__float", "alias": "is_data_type_actuarial_earned__bed63d070bef74b53aac2f720699157b", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["actuarial_earned_premium_clean_nb100"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\presentation\\reserving_model\\docs.yml\\is_data_type_actuarial_earned__bed63d070bef74b53aac2f720699157b.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "is_data_type_actuarial_earned__bed63d070bef74b53aac2f720699157b"}, "created_at": 1701786801.5117848, "compiled_code": "\n\nSELECT * FROM INFORMATION_SCHEMA.columns\nWHERE TABLE_SCHEMA = (\n    -- dbt gives us the full model name (db.schema.table)\n    -- but we want the schema name only\n    SELECT \n        REPLACE(value, '\"', '')\n    from STRING_SPLIT('\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_earned_premium_clean_nb100\"','.',1)\n    where ordinal = 2\n)\nAND TABLE_NAME = (\n    -- same as above, but we want the table name\n    SELECT \n        REPLACE(value, '\"', '')\n    from STRING_SPLIT('\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_earned_premium_clean_nb100\"','.',1)\n    where ordinal = 3\n)\nAND COLUMN_NAME = 'inward_acquisition_cost'\nAND DATA_TYPE != 'float'\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "inward_acquisition_cost", "file_key_name": "models.actuarial_earned_premium_clean_nb100"}, "test.iginsure.is_data_type_actuarial_earned_premium_clean_nb100_quota_share_premium__float.8c72bb6def": {"test_metadata": {"name": "is_data_type", "kwargs": {"column_type": "float", "column_name": "quota_share_premium", "model": "{{ get_where_subquery(ref('actuarial_earned_premium_clean_nb100')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.iginsure.test_is_data_type", "macro.dbt.get_where_subquery"], "nodes": ["model.iginsure.actuarial_earned_premium_clean_nb100"]}, "config": {"enabled": true, "alias": "is_data_type_actuarial_earned__e0ef814a5d1e6eee7e62bccfca8477ae", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "presentation", "reserving_model", "is_data_type_actuarial_earned_premium_clean_nb100_quota_share_premium__float"], "unique_id": "test.iginsure.is_data_type_actuarial_earned_premium_clean_nb100_quota_share_premium__float.8c72bb6def", "raw_code": "{{ test_is_data_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"is_data_type_actuarial_earned__e0ef814a5d1e6eee7e62bccfca8477ae\") }}", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "is_data_type_actuarial_earned__e0ef814a5d1e6eee7e62bccfca8477ae.sql", "original_file_path": "models\\presentation\\reserving_model\\docs.yml", "name": "is_data_type_actuarial_earned_premium_clean_nb100_quota_share_premium__float", "alias": "is_data_type_actuarial_earned__e0ef814a5d1e6eee7e62bccfca8477ae", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["actuarial_earned_premium_clean_nb100"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\presentation\\reserving_model\\docs.yml\\is_data_type_actuarial_earned__e0ef814a5d1e6eee7e62bccfca8477ae.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "is_data_type_actuarial_earned__e0ef814a5d1e6eee7e62bccfca8477ae"}, "created_at": 1701786801.516783, "compiled_code": "\n\nSELECT * FROM INFORMATION_SCHEMA.columns\nWHERE TABLE_SCHEMA = (\n    -- dbt gives us the full model name (db.schema.table)\n    -- but we want the schema name only\n    SELECT \n        REPLACE(value, '\"', '')\n    from STRING_SPLIT('\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_earned_premium_clean_nb100\"','.',1)\n    where ordinal = 2\n)\nAND TABLE_NAME = (\n    -- same as above, but we want the table name\n    SELECT \n        REPLACE(value, '\"', '')\n    from STRING_SPLIT('\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_earned_premium_clean_nb100\"','.',1)\n    where ordinal = 3\n)\nAND COLUMN_NAME = 'quota_share_premium'\nAND DATA_TYPE != 'float'\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "quota_share_premium", "file_key_name": "models.actuarial_earned_premium_clean_nb100"}, "test.iginsure.is_data_type_actuarial_earned_premium_clean_nb100_quota_share_acquisition__float.a301bcec81": {"test_metadata": {"name": "is_data_type", "kwargs": {"column_type": "float", "column_name": "quota_share_acquisition", "model": "{{ get_where_subquery(ref('actuarial_earned_premium_clean_nb100')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.iginsure.test_is_data_type", "macro.dbt.get_where_subquery"], "nodes": ["model.iginsure.actuarial_earned_premium_clean_nb100"]}, "config": {"enabled": true, "alias": "is_data_type_actuarial_earned__1ee094f44f2517a37365276a31d5db67", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "presentation", "reserving_model", "is_data_type_actuarial_earned_premium_clean_nb100_quota_share_acquisition__float"], "unique_id": "test.iginsure.is_data_type_actuarial_earned_premium_clean_nb100_quota_share_acquisition__float.a301bcec81", "raw_code": "{{ test_is_data_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"is_data_type_actuarial_earned__1ee094f44f2517a37365276a31d5db67\") }}", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "is_data_type_actuarial_earned__1ee094f44f2517a37365276a31d5db67.sql", "original_file_path": "models\\presentation\\reserving_model\\docs.yml", "name": "is_data_type_actuarial_earned_premium_clean_nb100_quota_share_acquisition__float", "alias": "is_data_type_actuarial_earned__1ee094f44f2517a37365276a31d5db67", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["actuarial_earned_premium_clean_nb100"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\presentation\\reserving_model\\docs.yml\\is_data_type_actuarial_earned__1ee094f44f2517a37365276a31d5db67.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "is_data_type_actuarial_earned__1ee094f44f2517a37365276a31d5db67"}, "created_at": 1701786801.5223756, "compiled_code": "\n\nSELECT * FROM INFORMATION_SCHEMA.columns\nWHERE TABLE_SCHEMA = (\n    -- dbt gives us the full model name (db.schema.table)\n    -- but we want the schema name only\n    SELECT \n        REPLACE(value, '\"', '')\n    from STRING_SPLIT('\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_earned_premium_clean_nb100\"','.',1)\n    where ordinal = 2\n)\nAND TABLE_NAME = (\n    -- same as above, but we want the table name\n    SELECT \n        REPLACE(value, '\"', '')\n    from STRING_SPLIT('\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_earned_premium_clean_nb100\"','.',1)\n    where ordinal = 3\n)\nAND COLUMN_NAME = 'quota_share_acquisition'\nAND DATA_TYPE != 'float'\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "quota_share_acquisition", "file_key_name": "models.actuarial_earned_premium_clean_nb100"}, "test.iginsure.is_data_type_actuarial_earned_premium_clean_nb100_fac_premium__float.e2eb35db77": {"test_metadata": {"name": "is_data_type", "kwargs": {"column_type": "float", "column_name": "fac_premium", "model": "{{ get_where_subquery(ref('actuarial_earned_premium_clean_nb100')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.iginsure.test_is_data_type", "macro.dbt.get_where_subquery"], "nodes": ["model.iginsure.actuarial_earned_premium_clean_nb100"]}, "config": {"enabled": true, "alias": "is_data_type_actuarial_earned__bbd00db3e70e55a6b591cd0159f85b03", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "presentation", "reserving_model", "is_data_type_actuarial_earned_premium_clean_nb100_fac_premium__float"], "unique_id": "test.iginsure.is_data_type_actuarial_earned_premium_clean_nb100_fac_premium__float.e2eb35db77", "raw_code": "{{ test_is_data_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"is_data_type_actuarial_earned__bbd00db3e70e55a6b591cd0159f85b03\") }}", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "is_data_type_actuarial_earned__bbd00db3e70e55a6b591cd0159f85b03.sql", "original_file_path": "models\\presentation\\reserving_model\\docs.yml", "name": "is_data_type_actuarial_earned_premium_clean_nb100_fac_premium__float", "alias": "is_data_type_actuarial_earned__bbd00db3e70e55a6b591cd0159f85b03", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["actuarial_earned_premium_clean_nb100"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\presentation\\reserving_model\\docs.yml\\is_data_type_actuarial_earned__bbd00db3e70e55a6b591cd0159f85b03.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "is_data_type_actuarial_earned__bbd00db3e70e55a6b591cd0159f85b03"}, "created_at": 1701786801.5253756, "compiled_code": "\n\nSELECT * FROM INFORMATION_SCHEMA.columns\nWHERE TABLE_SCHEMA = (\n    -- dbt gives us the full model name (db.schema.table)\n    -- but we want the schema name only\n    SELECT \n        REPLACE(value, '\"', '')\n    from STRING_SPLIT('\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_earned_premium_clean_nb100\"','.',1)\n    where ordinal = 2\n)\nAND TABLE_NAME = (\n    -- same as above, but we want the table name\n    SELECT \n        REPLACE(value, '\"', '')\n    from STRING_SPLIT('\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_earned_premium_clean_nb100\"','.',1)\n    where ordinal = 3\n)\nAND COLUMN_NAME = 'fac_premium'\nAND DATA_TYPE != 'float'\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "fac_premium", "file_key_name": "models.actuarial_earned_premium_clean_nb100"}, "test.iginsure.is_data_type_actuarial_earned_premium_clean_nb100_fac_acquisition__float.1fc4956bcc": {"test_metadata": {"name": "is_data_type", "kwargs": {"column_type": "float", "column_name": "fac_acquisition", "model": "{{ get_where_subquery(ref('actuarial_earned_premium_clean_nb100')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.iginsure.test_is_data_type", "macro.dbt.get_where_subquery"], "nodes": ["model.iginsure.actuarial_earned_premium_clean_nb100"]}, "config": {"enabled": true, "alias": "is_data_type_actuarial_earned__427a201f6423b2b4f88c9b46228bb57a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "presentation", "reserving_model", "is_data_type_actuarial_earned_premium_clean_nb100_fac_acquisition__float"], "unique_id": "test.iginsure.is_data_type_actuarial_earned_premium_clean_nb100_fac_acquisition__float.1fc4956bcc", "raw_code": "{{ test_is_data_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"is_data_type_actuarial_earned__427a201f6423b2b4f88c9b46228bb57a\") }}", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "is_data_type_actuarial_earned__427a201f6423b2b4f88c9b46228bb57a.sql", "original_file_path": "models\\presentation\\reserving_model\\docs.yml", "name": "is_data_type_actuarial_earned_premium_clean_nb100_fac_acquisition__float", "alias": "is_data_type_actuarial_earned__427a201f6423b2b4f88c9b46228bb57a", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["actuarial_earned_premium_clean_nb100"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\presentation\\reserving_model\\docs.yml\\is_data_type_actuarial_earned__427a201f6423b2b4f88c9b46228bb57a.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "is_data_type_actuarial_earned__427a201f6423b2b4f88c9b46228bb57a"}, "created_at": 1701786801.5293753, "compiled_code": "\n\nSELECT * FROM INFORMATION_SCHEMA.columns\nWHERE TABLE_SCHEMA = (\n    -- dbt gives us the full model name (db.schema.table)\n    -- but we want the schema name only\n    SELECT \n        REPLACE(value, '\"', '')\n    from STRING_SPLIT('\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_earned_premium_clean_nb100\"','.',1)\n    where ordinal = 2\n)\nAND TABLE_NAME = (\n    -- same as above, but we want the table name\n    SELECT \n        REPLACE(value, '\"', '')\n    from STRING_SPLIT('\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_earned_premium_clean_nb100\"','.',1)\n    where ordinal = 3\n)\nAND COLUMN_NAME = 'fac_acquisition'\nAND DATA_TYPE != 'float'\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "fac_acquisition", "file_key_name": "models.actuarial_earned_premium_clean_nb100"}, "test.iginsure.is_data_type_actuarial_earned_premium_clean_nb100_allocated_xol_cost__float.eabb116cd5": {"test_metadata": {"name": "is_data_type", "kwargs": {"column_type": "float", "column_name": "allocated_xol_cost", "model": "{{ get_where_subquery(ref('actuarial_earned_premium_clean_nb100')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.iginsure.test_is_data_type", "macro.dbt.get_where_subquery"], "nodes": ["model.iginsure.actuarial_earned_premium_clean_nb100"]}, "config": {"enabled": true, "alias": "is_data_type_actuarial_earned__715a96712647db15753a5b7f0838f999", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "presentation", "reserving_model", "is_data_type_actuarial_earned_premium_clean_nb100_allocated_xol_cost__float"], "unique_id": "test.iginsure.is_data_type_actuarial_earned_premium_clean_nb100_allocated_xol_cost__float.eabb116cd5", "raw_code": "{{ test_is_data_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"is_data_type_actuarial_earned__715a96712647db15753a5b7f0838f999\") }}", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "is_data_type_actuarial_earned__715a96712647db15753a5b7f0838f999.sql", "original_file_path": "models\\presentation\\reserving_model\\docs.yml", "name": "is_data_type_actuarial_earned_premium_clean_nb100_allocated_xol_cost__float", "alias": "is_data_type_actuarial_earned__715a96712647db15753a5b7f0838f999", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["actuarial_earned_premium_clean_nb100"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\presentation\\reserving_model\\docs.yml\\is_data_type_actuarial_earned__715a96712647db15753a5b7f0838f999.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "is_data_type_actuarial_earned__715a96712647db15753a5b7f0838f999"}, "created_at": 1701786801.5347826, "compiled_code": "\n\nSELECT * FROM INFORMATION_SCHEMA.columns\nWHERE TABLE_SCHEMA = (\n    -- dbt gives us the full model name (db.schema.table)\n    -- but we want the schema name only\n    SELECT \n        REPLACE(value, '\"', '')\n    from STRING_SPLIT('\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_earned_premium_clean_nb100\"','.',1)\n    where ordinal = 2\n)\nAND TABLE_NAME = (\n    -- same as above, but we want the table name\n    SELECT \n        REPLACE(value, '\"', '')\n    from STRING_SPLIT('\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_earned_premium_clean_nb100\"','.',1)\n    where ordinal = 3\n)\nAND COLUMN_NAME = 'allocated_xol_cost'\nAND DATA_TYPE != 'float'\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "allocated_xol_cost", "file_key_name": "models.actuarial_earned_premium_clean_nb100"}, "test.iginsure.is_data_type_actuarial_claim_movement_clean_nb100_movement_date__date.87b155711f": {"test_metadata": {"name": "is_data_type", "kwargs": {"column_type": "date", "column_name": "movement_date", "model": "{{ get_where_subquery(ref('actuarial_claim_movement_clean_nb100')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.iginsure.test_is_data_type", "macro.dbt.get_where_subquery"], "nodes": ["model.iginsure.actuarial_claim_movement_clean_nb100"]}, "config": {"enabled": true, "alias": "is_data_type_actuarial_claim_m_d877bc9f6bbf61dadcbc30829acb9dc9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "presentation", "reserving_model", "is_data_type_actuarial_claim_movement_clean_nb100_movement_date__date"], "unique_id": "test.iginsure.is_data_type_actuarial_claim_movement_clean_nb100_movement_date__date.87b155711f", "raw_code": "{{ test_is_data_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"is_data_type_actuarial_claim_m_d877bc9f6bbf61dadcbc30829acb9dc9\") }}", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "is_data_type_actuarial_claim_m_d877bc9f6bbf61dadcbc30829acb9dc9.sql", "original_file_path": "models\\presentation\\reserving_model\\docs.yml", "name": "is_data_type_actuarial_claim_movement_clean_nb100_movement_date__date", "alias": "is_data_type_actuarial_claim_m_d877bc9f6bbf61dadcbc30829acb9dc9", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["actuarial_claim_movement_clean_nb100"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\presentation\\reserving_model\\docs.yml\\is_data_type_actuarial_claim_m_d877bc9f6bbf61dadcbc30829acb9dc9.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "is_data_type_actuarial_claim_m_d877bc9f6bbf61dadcbc30829acb9dc9"}, "created_at": 1701786801.540813, "compiled_code": "\n\nSELECT * FROM INFORMATION_SCHEMA.columns\nWHERE TABLE_SCHEMA = (\n    -- dbt gives us the full model name (db.schema.table)\n    -- but we want the schema name only\n    SELECT \n        REPLACE(value, '\"', '')\n    from STRING_SPLIT('\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_claim_movement_clean_nb100\"','.',1)\n    where ordinal = 2\n)\nAND TABLE_NAME = (\n    -- same as above, but we want the table name\n    SELECT \n        REPLACE(value, '\"', '')\n    from STRING_SPLIT('\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_claim_movement_clean_nb100\"','.',1)\n    where ordinal = 3\n)\nAND COLUMN_NAME = 'movement_date'\nAND DATA_TYPE != 'date'\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "movement_date", "file_key_name": "models.actuarial_claim_movement_clean_nb100"}, "test.iginsure.is_data_type_actuarial_claim_movement_clean_nb100_reinsurance_type__varchar.7c6fb1cd4f": {"test_metadata": {"name": "is_data_type", "kwargs": {"column_type": "varchar", "column_name": "reinsurance_type", "model": "{{ get_where_subquery(ref('actuarial_claim_movement_clean_nb100')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.iginsure.test_is_data_type", "macro.dbt.get_where_subquery"], "nodes": ["model.iginsure.actuarial_claim_movement_clean_nb100"]}, "config": {"enabled": true, "alias": "is_data_type_actuarial_claim_m_d05fe0ca253498faddcc59f15883a004", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "presentation", "reserving_model", "is_data_type_actuarial_claim_movement_clean_nb100_reinsurance_type__varchar"], "unique_id": "test.iginsure.is_data_type_actuarial_claim_movement_clean_nb100_reinsurance_type__varchar.7c6fb1cd4f", "raw_code": "{{ test_is_data_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"is_data_type_actuarial_claim_m_d05fe0ca253498faddcc59f15883a004\") }}", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "is_data_type_actuarial_claim_m_d05fe0ca253498faddcc59f15883a004.sql", "original_file_path": "models\\presentation\\reserving_model\\docs.yml", "name": "is_data_type_actuarial_claim_movement_clean_nb100_reinsurance_type__varchar", "alias": "is_data_type_actuarial_claim_m_d05fe0ca253498faddcc59f15883a004", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["actuarial_claim_movement_clean_nb100"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\presentation\\reserving_model\\docs.yml\\is_data_type_actuarial_claim_m_d05fe0ca253498faddcc59f15883a004.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "is_data_type_actuarial_claim_m_d05fe0ca253498faddcc59f15883a004"}, "created_at": 1701786801.5448663, "compiled_code": "\n\nSELECT * FROM INFORMATION_SCHEMA.columns\nWHERE TABLE_SCHEMA = (\n    -- dbt gives us the full model name (db.schema.table)\n    -- but we want the schema name only\n    SELECT \n        REPLACE(value, '\"', '')\n    from STRING_SPLIT('\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_claim_movement_clean_nb100\"','.',1)\n    where ordinal = 2\n)\nAND TABLE_NAME = (\n    -- same as above, but we want the table name\n    SELECT \n        REPLACE(value, '\"', '')\n    from STRING_SPLIT('\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_claim_movement_clean_nb100\"','.',1)\n    where ordinal = 3\n)\nAND COLUMN_NAME = 'reinsurance_type'\nAND DATA_TYPE != 'varchar'\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "reinsurance_type", "file_key_name": "models.actuarial_claim_movement_clean_nb100"}, "test.iginsure.is_data_type_actuarial_claim_movement_clean_nb100_loss_date__date.ac43865eec": {"test_metadata": {"name": "is_data_type", "kwargs": {"column_type": "date", "column_name": "loss_date", "model": "{{ get_where_subquery(ref('actuarial_claim_movement_clean_nb100')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.iginsure.test_is_data_type", "macro.dbt.get_where_subquery"], "nodes": ["model.iginsure.actuarial_claim_movement_clean_nb100"]}, "config": {"enabled": true, "alias": "is_data_type_actuarial_claim_m_40fce375c1503765353bcd1bbc390aa9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "presentation", "reserving_model", "is_data_type_actuarial_claim_movement_clean_nb100_loss_date__date"], "unique_id": "test.iginsure.is_data_type_actuarial_claim_movement_clean_nb100_loss_date__date.ac43865eec", "raw_code": "{{ test_is_data_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"is_data_type_actuarial_claim_m_40fce375c1503765353bcd1bbc390aa9\") }}", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "is_data_type_actuarial_claim_m_40fce375c1503765353bcd1bbc390aa9.sql", "original_file_path": "models\\presentation\\reserving_model\\docs.yml", "name": "is_data_type_actuarial_claim_movement_clean_nb100_loss_date__date", "alias": "is_data_type_actuarial_claim_m_40fce375c1503765353bcd1bbc390aa9", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["actuarial_claim_movement_clean_nb100"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\presentation\\reserving_model\\docs.yml\\is_data_type_actuarial_claim_m_40fce375c1503765353bcd1bbc390aa9.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "is_data_type_actuarial_claim_m_40fce375c1503765353bcd1bbc390aa9"}, "created_at": 1701786801.5478165, "compiled_code": "\n\nSELECT * FROM INFORMATION_SCHEMA.columns\nWHERE TABLE_SCHEMA = (\n    -- dbt gives us the full model name (db.schema.table)\n    -- but we want the schema name only\n    SELECT \n        REPLACE(value, '\"', '')\n    from STRING_SPLIT('\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_claim_movement_clean_nb100\"','.',1)\n    where ordinal = 2\n)\nAND TABLE_NAME = (\n    -- same as above, but we want the table name\n    SELECT \n        REPLACE(value, '\"', '')\n    from STRING_SPLIT('\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_claim_movement_clean_nb100\"','.',1)\n    where ordinal = 3\n)\nAND COLUMN_NAME = 'loss_date'\nAND DATA_TYPE != 'date'\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "loss_date", "file_key_name": "models.actuarial_claim_movement_clean_nb100"}, "test.iginsure.is_data_type_actuarial_claim_movement_clean_nb100_loss_date_claims_made__date.30a8d2be8c": {"test_metadata": {"name": "is_data_type", "kwargs": {"column_type": "date", "column_name": "loss_date_claims_made", "model": "{{ get_where_subquery(ref('actuarial_claim_movement_clean_nb100')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.iginsure.test_is_data_type", "macro.dbt.get_where_subquery"], "nodes": ["model.iginsure.actuarial_claim_movement_clean_nb100"]}, "config": {"enabled": true, "alias": "is_data_type_actuarial_claim_m_b0a3eaa20e8fe04728e0ad181627c120", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "presentation", "reserving_model", "is_data_type_actuarial_claim_movement_clean_nb100_loss_date_claims_made__date"], "unique_id": "test.iginsure.is_data_type_actuarial_claim_movement_clean_nb100_loss_date_claims_made__date.30a8d2be8c", "raw_code": "{{ test_is_data_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"is_data_type_actuarial_claim_m_b0a3eaa20e8fe04728e0ad181627c120\") }}", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "is_data_type_actuarial_claim_m_b0a3eaa20e8fe04728e0ad181627c120.sql", "original_file_path": "models\\presentation\\reserving_model\\docs.yml", "name": "is_data_type_actuarial_claim_movement_clean_nb100_loss_date_claims_made__date", "alias": "is_data_type_actuarial_claim_m_b0a3eaa20e8fe04728e0ad181627c120", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["actuarial_claim_movement_clean_nb100"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\presentation\\reserving_model\\docs.yml\\is_data_type_actuarial_claim_m_b0a3eaa20e8fe04728e0ad181627c120.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "is_data_type_actuarial_claim_m_b0a3eaa20e8fe04728e0ad181627c120"}, "created_at": 1701786801.5518267, "compiled_code": "\n\nSELECT * FROM INFORMATION_SCHEMA.columns\nWHERE TABLE_SCHEMA = (\n    -- dbt gives us the full model name (db.schema.table)\n    -- but we want the schema name only\n    SELECT \n        REPLACE(value, '\"', '')\n    from STRING_SPLIT('\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_claim_movement_clean_nb100\"','.',1)\n    where ordinal = 2\n)\nAND TABLE_NAME = (\n    -- same as above, but we want the table name\n    SELECT \n        REPLACE(value, '\"', '')\n    from STRING_SPLIT('\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_claim_movement_clean_nb100\"','.',1)\n    where ordinal = 3\n)\nAND COLUMN_NAME = 'loss_date_claims_made'\nAND DATA_TYPE != 'date'\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "loss_date_claims_made", "file_key_name": "models.actuarial_claim_movement_clean_nb100"}, "test.iginsure.is_data_type_actuarial_claim_movement_clean_nb100_reported_date__date.c9712e6ed2": {"test_metadata": {"name": "is_data_type", "kwargs": {"column_type": "date", "column_name": "reported_date", "model": "{{ get_where_subquery(ref('actuarial_claim_movement_clean_nb100')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.iginsure.test_is_data_type", "macro.dbt.get_where_subquery"], "nodes": ["model.iginsure.actuarial_claim_movement_clean_nb100"]}, "config": {"enabled": true, "alias": "is_data_type_actuarial_claim_m_eb7baeb0681d5075c5f5b459ec8f379e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "presentation", "reserving_model", "is_data_type_actuarial_claim_movement_clean_nb100_reported_date__date"], "unique_id": "test.iginsure.is_data_type_actuarial_claim_movement_clean_nb100_reported_date__date.c9712e6ed2", "raw_code": "{{ test_is_data_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"is_data_type_actuarial_claim_m_eb7baeb0681d5075c5f5b459ec8f379e\") }}", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "is_data_type_actuarial_claim_m_eb7baeb0681d5075c5f5b459ec8f379e.sql", "original_file_path": "models\\presentation\\reserving_model\\docs.yml", "name": "is_data_type_actuarial_claim_movement_clean_nb100_reported_date__date", "alias": "is_data_type_actuarial_claim_m_eb7baeb0681d5075c5f5b459ec8f379e", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["actuarial_claim_movement_clean_nb100"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\presentation\\reserving_model\\docs.yml\\is_data_type_actuarial_claim_m_eb7baeb0681d5075c5f5b459ec8f379e.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "is_data_type_actuarial_claim_m_eb7baeb0681d5075c5f5b459ec8f379e"}, "created_at": 1701786801.5581264, "compiled_code": "\n\nSELECT * FROM INFORMATION_SCHEMA.columns\nWHERE TABLE_SCHEMA = (\n    -- dbt gives us the full model name (db.schema.table)\n    -- but we want the schema name only\n    SELECT \n        REPLACE(value, '\"', '')\n    from STRING_SPLIT('\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_claim_movement_clean_nb100\"','.',1)\n    where ordinal = 2\n)\nAND TABLE_NAME = (\n    -- same as above, but we want the table name\n    SELECT \n        REPLACE(value, '\"', '')\n    from STRING_SPLIT('\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_claim_movement_clean_nb100\"','.',1)\n    where ordinal = 3\n)\nAND COLUMN_NAME = 'reported_date'\nAND DATA_TYPE != 'date'\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "reported_date", "file_key_name": "models.actuarial_claim_movement_clean_nb100"}, "test.iginsure.is_data_type_actuarial_claim_movement_clean_nb100_event_code__varchar.acc2e80da9": {"test_metadata": {"name": "is_data_type", "kwargs": {"column_type": "varchar", "column_name": "event_code", "model": "{{ get_where_subquery(ref('actuarial_claim_movement_clean_nb100')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.iginsure.test_is_data_type", "macro.dbt.get_where_subquery"], "nodes": ["model.iginsure.actuarial_claim_movement_clean_nb100"]}, "config": {"enabled": true, "alias": "is_data_type_actuarial_claim_m_ae1e44f41a01b2393d1d8b0dd7047223", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "presentation", "reserving_model", "is_data_type_actuarial_claim_movement_clean_nb100_event_code__varchar"], "unique_id": "test.iginsure.is_data_type_actuarial_claim_movement_clean_nb100_event_code__varchar.acc2e80da9", "raw_code": "{{ test_is_data_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"is_data_type_actuarial_claim_m_ae1e44f41a01b2393d1d8b0dd7047223\") }}", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "is_data_type_actuarial_claim_m_ae1e44f41a01b2393d1d8b0dd7047223.sql", "original_file_path": "models\\presentation\\reserving_model\\docs.yml", "name": "is_data_type_actuarial_claim_movement_clean_nb100_event_code__varchar", "alias": "is_data_type_actuarial_claim_m_ae1e44f41a01b2393d1d8b0dd7047223", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["actuarial_claim_movement_clean_nb100"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\presentation\\reserving_model\\docs.yml\\is_data_type_actuarial_claim_m_ae1e44f41a01b2393d1d8b0dd7047223.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "is_data_type_actuarial_claim_m_ae1e44f41a01b2393d1d8b0dd7047223"}, "created_at": 1701786801.561142, "compiled_code": "\n\nSELECT * FROM INFORMATION_SCHEMA.columns\nWHERE TABLE_SCHEMA = (\n    -- dbt gives us the full model name (db.schema.table)\n    -- but we want the schema name only\n    SELECT \n        REPLACE(value, '\"', '')\n    from STRING_SPLIT('\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_claim_movement_clean_nb100\"','.',1)\n    where ordinal = 2\n)\nAND TABLE_NAME = (\n    -- same as above, but we want the table name\n    SELECT \n        REPLACE(value, '\"', '')\n    from STRING_SPLIT('\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_claim_movement_clean_nb100\"','.',1)\n    where ordinal = 3\n)\nAND COLUMN_NAME = 'event_code'\nAND DATA_TYPE != 'varchar'\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "event_code", "file_key_name": "models.actuarial_claim_movement_clean_nb100"}, "test.iginsure.is_data_type_actuarial_claim_movement_clean_nb100_event_type__varchar.e1c488b54f": {"test_metadata": {"name": "is_data_type", "kwargs": {"column_type": "varchar", "column_name": "event_type", "model": "{{ get_where_subquery(ref('actuarial_claim_movement_clean_nb100')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.iginsure.test_is_data_type", "macro.dbt.get_where_subquery"], "nodes": ["model.iginsure.actuarial_claim_movement_clean_nb100"]}, "config": {"enabled": true, "alias": "is_data_type_actuarial_claim_m_73bd07714d937fe328c8f3e98fe77187", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "presentation", "reserving_model", "is_data_type_actuarial_claim_movement_clean_nb100_event_type__varchar"], "unique_id": "test.iginsure.is_data_type_actuarial_claim_movement_clean_nb100_event_type__varchar.e1c488b54f", "raw_code": "{{ test_is_data_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"is_data_type_actuarial_claim_m_73bd07714d937fe328c8f3e98fe77187\") }}", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "is_data_type_actuarial_claim_m_73bd07714d937fe328c8f3e98fe77187.sql", "original_file_path": "models\\presentation\\reserving_model\\docs.yml", "name": "is_data_type_actuarial_claim_movement_clean_nb100_event_type__varchar", "alias": "is_data_type_actuarial_claim_m_73bd07714d937fe328c8f3e98fe77187", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["actuarial_claim_movement_clean_nb100"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\presentation\\reserving_model\\docs.yml\\is_data_type_actuarial_claim_m_73bd07714d937fe328c8f3e98fe77187.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "is_data_type_actuarial_claim_m_73bd07714d937fe328c8f3e98fe77187"}, "created_at": 1701786801.5651903, "compiled_code": "\n\nSELECT * FROM INFORMATION_SCHEMA.columns\nWHERE TABLE_SCHEMA = (\n    -- dbt gives us the full model name (db.schema.table)\n    -- but we want the schema name only\n    SELECT \n        REPLACE(value, '\"', '')\n    from STRING_SPLIT('\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_claim_movement_clean_nb100\"','.',1)\n    where ordinal = 2\n)\nAND TABLE_NAME = (\n    -- same as above, but we want the table name\n    SELECT \n        REPLACE(value, '\"', '')\n    from STRING_SPLIT('\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_claim_movement_clean_nb100\"','.',1)\n    where ordinal = 3\n)\nAND COLUMN_NAME = 'event_type'\nAND DATA_TYPE != 'varchar'\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "event_type", "file_key_name": "models.actuarial_claim_movement_clean_nb100"}, "test.iginsure.is_data_type_actuarial_claim_movement_clean_nb100_event_desc__varchar.d33cdc7dcb": {"test_metadata": {"name": "is_data_type", "kwargs": {"column_type": "varchar", "column_name": "event_desc", "model": "{{ get_where_subquery(ref('actuarial_claim_movement_clean_nb100')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.iginsure.test_is_data_type", "macro.dbt.get_where_subquery"], "nodes": ["model.iginsure.actuarial_claim_movement_clean_nb100"]}, "config": {"enabled": true, "alias": "is_data_type_actuarial_claim_m_cfce5a144844c7490032c46b4365d046", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "presentation", "reserving_model", "is_data_type_actuarial_claim_movement_clean_nb100_event_desc__varchar"], "unique_id": "test.iginsure.is_data_type_actuarial_claim_movement_clean_nb100_event_desc__varchar.d33cdc7dcb", "raw_code": "{{ test_is_data_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"is_data_type_actuarial_claim_m_cfce5a144844c7490032c46b4365d046\") }}", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "is_data_type_actuarial_claim_m_cfce5a144844c7490032c46b4365d046.sql", "original_file_path": "models\\presentation\\reserving_model\\docs.yml", "name": "is_data_type_actuarial_claim_movement_clean_nb100_event_desc__varchar", "alias": "is_data_type_actuarial_claim_m_cfce5a144844c7490032c46b4365d046", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["actuarial_claim_movement_clean_nb100"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\presentation\\reserving_model\\docs.yml\\is_data_type_actuarial_claim_m_cfce5a144844c7490032c46b4365d046.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "is_data_type_actuarial_claim_m_cfce5a144844c7490032c46b4365d046"}, "created_at": 1701786801.5688562, "compiled_code": "\n\nSELECT * FROM INFORMATION_SCHEMA.columns\nWHERE TABLE_SCHEMA = (\n    -- dbt gives us the full model name (db.schema.table)\n    -- but we want the schema name only\n    SELECT \n        REPLACE(value, '\"', '')\n    from STRING_SPLIT('\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_claim_movement_clean_nb100\"','.',1)\n    where ordinal = 2\n)\nAND TABLE_NAME = (\n    -- same as above, but we want the table name\n    SELECT \n        REPLACE(value, '\"', '')\n    from STRING_SPLIT('\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_claim_movement_clean_nb100\"','.',1)\n    where ordinal = 3\n)\nAND COLUMN_NAME = 'event_desc'\nAND DATA_TYPE != 'varchar'\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "event_desc", "file_key_name": "models.actuarial_claim_movement_clean_nb100"}, "test.iginsure.is_data_type_actuarial_claim_movement_clean_nb100_claim_desc__varchar.b2c86601cc": {"test_metadata": {"name": "is_data_type", "kwargs": {"column_type": "varchar", "column_name": "claim_desc", "model": "{{ get_where_subquery(ref('actuarial_claim_movement_clean_nb100')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.iginsure.test_is_data_type", "macro.dbt.get_where_subquery"], "nodes": ["model.iginsure.actuarial_claim_movement_clean_nb100"]}, "config": {"enabled": true, "alias": "is_data_type_actuarial_claim_m_93a3e3113678c74aa71fc70f77dc3af6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "presentation", "reserving_model", "is_data_type_actuarial_claim_movement_clean_nb100_claim_desc__varchar"], "unique_id": "test.iginsure.is_data_type_actuarial_claim_movement_clean_nb100_claim_desc__varchar.b2c86601cc", "raw_code": "{{ test_is_data_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"is_data_type_actuarial_claim_m_93a3e3113678c74aa71fc70f77dc3af6\") }}", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "is_data_type_actuarial_claim_m_93a3e3113678c74aa71fc70f77dc3af6.sql", "original_file_path": "models\\presentation\\reserving_model\\docs.yml", "name": "is_data_type_actuarial_claim_movement_clean_nb100_claim_desc__varchar", "alias": "is_data_type_actuarial_claim_m_93a3e3113678c74aa71fc70f77dc3af6", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["actuarial_claim_movement_clean_nb100"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\presentation\\reserving_model\\docs.yml\\is_data_type_actuarial_claim_m_93a3e3113678c74aa71fc70f77dc3af6.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "is_data_type_actuarial_claim_m_93a3e3113678c74aa71fc70f77dc3af6"}, "created_at": 1701786801.5738554, "compiled_code": "\n\nSELECT * FROM INFORMATION_SCHEMA.columns\nWHERE TABLE_SCHEMA = (\n    -- dbt gives us the full model name (db.schema.table)\n    -- but we want the schema name only\n    SELECT \n        REPLACE(value, '\"', '')\n    from STRING_SPLIT('\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_claim_movement_clean_nb100\"','.',1)\n    where ordinal = 2\n)\nAND TABLE_NAME = (\n    -- same as above, but we want the table name\n    SELECT \n        REPLACE(value, '\"', '')\n    from STRING_SPLIT('\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_claim_movement_clean_nb100\"','.',1)\n    where ordinal = 3\n)\nAND COLUMN_NAME = 'claim_desc'\nAND DATA_TYPE != 'varchar'\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "claim_desc", "file_key_name": "models.actuarial_claim_movement_clean_nb100"}, "test.iginsure.is_data_type_actuarial_claim_movement_clean_nb100_is_cat__bit.a7a0d278b6": {"test_metadata": {"name": "is_data_type", "kwargs": {"column_type": "bit", "column_name": "is_cat", "model": "{{ get_where_subquery(ref('actuarial_claim_movement_clean_nb100')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.iginsure.test_is_data_type", "macro.dbt.get_where_subquery"], "nodes": ["model.iginsure.actuarial_claim_movement_clean_nb100"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "presentation", "reserving_model", "is_data_type_actuarial_claim_movement_clean_nb100_is_cat__bit"], "unique_id": "test.iginsure.is_data_type_actuarial_claim_movement_clean_nb100_is_cat__bit.a7a0d278b6", "raw_code": "{{ test_is_data_type(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "is_data_type_actuarial_claim_movement_clean_nb100_is_cat__bit.sql", "original_file_path": "models\\presentation\\reserving_model\\docs.yml", "name": "is_data_type_actuarial_claim_movement_clean_nb100_is_cat__bit", "alias": "is_data_type_actuarial_claim_movement_clean_nb100_is_cat__bit", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["actuarial_claim_movement_clean_nb100"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\presentation\\reserving_model\\docs.yml\\is_data_type_actuarial_claim_movement_clean_nb100_is_cat__bit.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701786801.577859, "compiled_code": "\n\nSELECT * FROM INFORMATION_SCHEMA.columns\nWHERE TABLE_SCHEMA = (\n    -- dbt gives us the full model name (db.schema.table)\n    -- but we want the schema name only\n    SELECT \n        REPLACE(value, '\"', '')\n    from STRING_SPLIT('\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_claim_movement_clean_nb100\"','.',1)\n    where ordinal = 2\n)\nAND TABLE_NAME = (\n    -- same as above, but we want the table name\n    SELECT \n        REPLACE(value, '\"', '')\n    from STRING_SPLIT('\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_claim_movement_clean_nb100\"','.',1)\n    where ordinal = 3\n)\nAND COLUMN_NAME = 'is_cat'\nAND DATA_TYPE != 'bit'\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "is_cat", "file_key_name": "models.actuarial_claim_movement_clean_nb100"}, "test.iginsure.is_data_type_actuarial_claim_movement_clean_nb100_is_nat_cat__bit.b0a7197dda": {"test_metadata": {"name": "is_data_type", "kwargs": {"column_type": "bit", "column_name": "is_nat_cat", "model": "{{ get_where_subquery(ref('actuarial_claim_movement_clean_nb100')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.iginsure.test_is_data_type", "macro.dbt.get_where_subquery"], "nodes": ["model.iginsure.actuarial_claim_movement_clean_nb100"]}, "config": {"enabled": true, "alias": "is_data_type_actuarial_claim_m_c032670d8b1397f433dd7148acd3e847", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "presentation", "reserving_model", "is_data_type_actuarial_claim_movement_clean_nb100_is_nat_cat__bit"], "unique_id": "test.iginsure.is_data_type_actuarial_claim_movement_clean_nb100_is_nat_cat__bit.b0a7197dda", "raw_code": "{{ test_is_data_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"is_data_type_actuarial_claim_m_c032670d8b1397f433dd7148acd3e847\") }}", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "is_data_type_actuarial_claim_m_c032670d8b1397f433dd7148acd3e847.sql", "original_file_path": "models\\presentation\\reserving_model\\docs.yml", "name": "is_data_type_actuarial_claim_movement_clean_nb100_is_nat_cat__bit", "alias": "is_data_type_actuarial_claim_m_c032670d8b1397f433dd7148acd3e847", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["actuarial_claim_movement_clean_nb100"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\presentation\\reserving_model\\docs.yml\\is_data_type_actuarial_claim_m_c032670d8b1397f433dd7148acd3e847.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "is_data_type_actuarial_claim_m_c032670d8b1397f433dd7148acd3e847"}, "created_at": 1701786801.5808597, "compiled_code": "\n\nSELECT * FROM INFORMATION_SCHEMA.columns\nWHERE TABLE_SCHEMA = (\n    -- dbt gives us the full model name (db.schema.table)\n    -- but we want the schema name only\n    SELECT \n        REPLACE(value, '\"', '')\n    from STRING_SPLIT('\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_claim_movement_clean_nb100\"','.',1)\n    where ordinal = 2\n)\nAND TABLE_NAME = (\n    -- same as above, but we want the table name\n    SELECT \n        REPLACE(value, '\"', '')\n    from STRING_SPLIT('\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_claim_movement_clean_nb100\"','.',1)\n    where ordinal = 3\n)\nAND COLUMN_NAME = 'is_nat_cat'\nAND DATA_TYPE != 'bit'\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "is_nat_cat", "file_key_name": "models.actuarial_claim_movement_clean_nb100"}, "test.iginsure.is_data_type_actuarial_claim_movement_clean_nb100_org_ccy_code__varchar.62f3c16590": {"test_metadata": {"name": "is_data_type", "kwargs": {"column_type": "varchar", "column_name": "org_ccy_code", "model": "{{ get_where_subquery(ref('actuarial_claim_movement_clean_nb100')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.iginsure.test_is_data_type", "macro.dbt.get_where_subquery"], "nodes": ["model.iginsure.actuarial_claim_movement_clean_nb100"]}, "config": {"enabled": true, "alias": "is_data_type_actuarial_claim_m_e446f9b68e7c018ff3604f432d467638", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "presentation", "reserving_model", "is_data_type_actuarial_claim_movement_clean_nb100_org_ccy_code__varchar"], "unique_id": "test.iginsure.is_data_type_actuarial_claim_movement_clean_nb100_org_ccy_code__varchar.62f3c16590", "raw_code": "{{ test_is_data_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"is_data_type_actuarial_claim_m_e446f9b68e7c018ff3604f432d467638\") }}", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "is_data_type_actuarial_claim_m_e446f9b68e7c018ff3604f432d467638.sql", "original_file_path": "models\\presentation\\reserving_model\\docs.yml", "name": "is_data_type_actuarial_claim_movement_clean_nb100_org_ccy_code__varchar", "alias": "is_data_type_actuarial_claim_m_e446f9b68e7c018ff3604f432d467638", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["actuarial_claim_movement_clean_nb100"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\presentation\\reserving_model\\docs.yml\\is_data_type_actuarial_claim_m_e446f9b68e7c018ff3604f432d467638.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "is_data_type_actuarial_claim_m_e446f9b68e7c018ff3604f432d467638"}, "created_at": 1701786801.584862, "compiled_code": "\n\nSELECT * FROM INFORMATION_SCHEMA.columns\nWHERE TABLE_SCHEMA = (\n    -- dbt gives us the full model name (db.schema.table)\n    -- but we want the schema name only\n    SELECT \n        REPLACE(value, '\"', '')\n    from STRING_SPLIT('\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_claim_movement_clean_nb100\"','.',1)\n    where ordinal = 2\n)\nAND TABLE_NAME = (\n    -- same as above, but we want the table name\n    SELECT \n        REPLACE(value, '\"', '')\n    from STRING_SPLIT('\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_claim_movement_clean_nb100\"','.',1)\n    where ordinal = 3\n)\nAND COLUMN_NAME = 'org_ccy_code'\nAND DATA_TYPE != 'varchar'\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "org_ccy_code", "file_key_name": "models.actuarial_claim_movement_clean_nb100"}, "test.iginsure.is_data_type_actuarial_claim_movement_clean_nb100_fx_rate_ccy_per_usd__float.68f1ba60fa": {"test_metadata": {"name": "is_data_type", "kwargs": {"column_type": "float", "column_name": "fx_rate_ccy_per_usd", "model": "{{ get_where_subquery(ref('actuarial_claim_movement_clean_nb100')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.iginsure.test_is_data_type", "macro.dbt.get_where_subquery"], "nodes": ["model.iginsure.actuarial_claim_movement_clean_nb100"]}, "config": {"enabled": true, "alias": "is_data_type_actuarial_claim_m_21f84b409d3d13e1e2155bc3ea50dadf", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "presentation", "reserving_model", "is_data_type_actuarial_claim_movement_clean_nb100_fx_rate_ccy_per_usd__float"], "unique_id": "test.iginsure.is_data_type_actuarial_claim_movement_clean_nb100_fx_rate_ccy_per_usd__float.68f1ba60fa", "raw_code": "{{ test_is_data_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"is_data_type_actuarial_claim_m_21f84b409d3d13e1e2155bc3ea50dadf\") }}", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "is_data_type_actuarial_claim_m_21f84b409d3d13e1e2155bc3ea50dadf.sql", "original_file_path": "models\\presentation\\reserving_model\\docs.yml", "name": "is_data_type_actuarial_claim_movement_clean_nb100_fx_rate_ccy_per_usd__float", "alias": "is_data_type_actuarial_claim_m_21f84b409d3d13e1e2155bc3ea50dadf", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["actuarial_claim_movement_clean_nb100"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\presentation\\reserving_model\\docs.yml\\is_data_type_actuarial_claim_m_21f84b409d3d13e1e2155bc3ea50dadf.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "is_data_type_actuarial_claim_m_21f84b409d3d13e1e2155bc3ea50dadf"}, "created_at": 1701786801.5918586, "compiled_code": "\n\nSELECT * FROM INFORMATION_SCHEMA.columns\nWHERE TABLE_SCHEMA = (\n    -- dbt gives us the full model name (db.schema.table)\n    -- but we want the schema name only\n    SELECT \n        REPLACE(value, '\"', '')\n    from STRING_SPLIT('\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_claim_movement_clean_nb100\"','.',1)\n    where ordinal = 2\n)\nAND TABLE_NAME = (\n    -- same as above, but we want the table name\n    SELECT \n        REPLACE(value, '\"', '')\n    from STRING_SPLIT('\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_claim_movement_clean_nb100\"','.',1)\n    where ordinal = 3\n)\nAND COLUMN_NAME = 'fx_rate_ccy_per_usd'\nAND DATA_TYPE != 'float'\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "fx_rate_ccy_per_usd", "file_key_name": "models.actuarial_claim_movement_clean_nb100"}, "test.iginsure.is_data_type_actuarial_claim_movement_clean_nb100_amount_type__varchar.a6d2443b06": {"test_metadata": {"name": "is_data_type", "kwargs": {"column_type": "varchar", "column_name": "amount_type", "model": "{{ get_where_subquery(ref('actuarial_claim_movement_clean_nb100')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.iginsure.test_is_data_type", "macro.dbt.get_where_subquery"], "nodes": ["model.iginsure.actuarial_claim_movement_clean_nb100"]}, "config": {"enabled": true, "alias": "is_data_type_actuarial_claim_m_78cd53ec6bb83c295ff6a6af92cb09a2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "presentation", "reserving_model", "is_data_type_actuarial_claim_movement_clean_nb100_amount_type__varchar"], "unique_id": "test.iginsure.is_data_type_actuarial_claim_movement_clean_nb100_amount_type__varchar.a6d2443b06", "raw_code": "{{ test_is_data_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"is_data_type_actuarial_claim_m_78cd53ec6bb83c295ff6a6af92cb09a2\") }}", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "is_data_type_actuarial_claim_m_78cd53ec6bb83c295ff6a6af92cb09a2.sql", "original_file_path": "models\\presentation\\reserving_model\\docs.yml", "name": "is_data_type_actuarial_claim_movement_clean_nb100_amount_type__varchar", "alias": "is_data_type_actuarial_claim_m_78cd53ec6bb83c295ff6a6af92cb09a2", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["actuarial_claim_movement_clean_nb100"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\presentation\\reserving_model\\docs.yml\\is_data_type_actuarial_claim_m_78cd53ec6bb83c295ff6a6af92cb09a2.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "is_data_type_actuarial_claim_m_78cd53ec6bb83c295ff6a6af92cb09a2"}, "created_at": 1701786801.5958557, "compiled_code": "\n\nSELECT * FROM INFORMATION_SCHEMA.columns\nWHERE TABLE_SCHEMA = (\n    -- dbt gives us the full model name (db.schema.table)\n    -- but we want the schema name only\n    SELECT \n        REPLACE(value, '\"', '')\n    from STRING_SPLIT('\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_claim_movement_clean_nb100\"','.',1)\n    where ordinal = 2\n)\nAND TABLE_NAME = (\n    -- same as above, but we want the table name\n    SELECT \n        REPLACE(value, '\"', '')\n    from STRING_SPLIT('\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_claim_movement_clean_nb100\"','.',1)\n    where ordinal = 3\n)\nAND COLUMN_NAME = 'amount_type'\nAND DATA_TYPE != 'varchar'\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "amount_type", "file_key_name": "models.actuarial_claim_movement_clean_nb100"}, "test.iginsure.is_data_type_actuarial_claim_movement_clean_nb100_historical_amount_usd__float.d5a0faca9b": {"test_metadata": {"name": "is_data_type", "kwargs": {"column_type": "float", "column_name": "historical_amount_usd", "model": "{{ get_where_subquery(ref('actuarial_claim_movement_clean_nb100')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.iginsure.test_is_data_type", "macro.dbt.get_where_subquery"], "nodes": ["model.iginsure.actuarial_claim_movement_clean_nb100"]}, "config": {"enabled": true, "alias": "is_data_type_actuarial_claim_m_e57d7af492f8662304a54d6858a96b85", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "presentation", "reserving_model", "is_data_type_actuarial_claim_movement_clean_nb100_historical_amount_usd__float"], "unique_id": "test.iginsure.is_data_type_actuarial_claim_movement_clean_nb100_historical_amount_usd__float.d5a0faca9b", "raw_code": "{{ test_is_data_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"is_data_type_actuarial_claim_m_e57d7af492f8662304a54d6858a96b85\") }}", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "is_data_type_actuarial_claim_m_e57d7af492f8662304a54d6858a96b85.sql", "original_file_path": "models\\presentation\\reserving_model\\docs.yml", "name": "is_data_type_actuarial_claim_movement_clean_nb100_historical_amount_usd__float", "alias": "is_data_type_actuarial_claim_m_e57d7af492f8662304a54d6858a96b85", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["actuarial_claim_movement_clean_nb100"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\presentation\\reserving_model\\docs.yml\\is_data_type_actuarial_claim_m_e57d7af492f8662304a54d6858a96b85.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "is_data_type_actuarial_claim_m_e57d7af492f8662304a54d6858a96b85"}, "created_at": 1701786801.5988557, "compiled_code": "\n\nSELECT * FROM INFORMATION_SCHEMA.columns\nWHERE TABLE_SCHEMA = (\n    -- dbt gives us the full model name (db.schema.table)\n    -- but we want the schema name only\n    SELECT \n        REPLACE(value, '\"', '')\n    from STRING_SPLIT('\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_claim_movement_clean_nb100\"','.',1)\n    where ordinal = 2\n)\nAND TABLE_NAME = (\n    -- same as above, but we want the table name\n    SELECT \n        REPLACE(value, '\"', '')\n    from STRING_SPLIT('\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_claim_movement_clean_nb100\"','.',1)\n    where ordinal = 3\n)\nAND COLUMN_NAME = 'historical_amount_usd'\nAND DATA_TYPE != 'float'\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "historical_amount_usd", "file_key_name": "models.actuarial_claim_movement_clean_nb100"}, "test.iginsure.is_data_type_actuarial_claim_movement_clean_nb100_current_amount_usd__float.d85d4f1830": {"test_metadata": {"name": "is_data_type", "kwargs": {"column_type": "float", "column_name": "current_amount_usd", "model": "{{ get_where_subquery(ref('actuarial_claim_movement_clean_nb100')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.iginsure.test_is_data_type", "macro.dbt.get_where_subquery"], "nodes": ["model.iginsure.actuarial_claim_movement_clean_nb100"]}, "config": {"enabled": true, "alias": "is_data_type_actuarial_claim_m_d9f88c90467a13df43f1f4a110625798", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "presentation", "reserving_model", "is_data_type_actuarial_claim_movement_clean_nb100_current_amount_usd__float"], "unique_id": "test.iginsure.is_data_type_actuarial_claim_movement_clean_nb100_current_amount_usd__float.d85d4f1830", "raw_code": "{{ test_is_data_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"is_data_type_actuarial_claim_m_d9f88c90467a13df43f1f4a110625798\") }}", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "is_data_type_actuarial_claim_m_d9f88c90467a13df43f1f4a110625798.sql", "original_file_path": "models\\presentation\\reserving_model\\docs.yml", "name": "is_data_type_actuarial_claim_movement_clean_nb100_current_amount_usd__float", "alias": "is_data_type_actuarial_claim_m_d9f88c90467a13df43f1f4a110625798", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["actuarial_claim_movement_clean_nb100"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\presentation\\reserving_model\\docs.yml\\is_data_type_actuarial_claim_m_d9f88c90467a13df43f1f4a110625798.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "is_data_type_actuarial_claim_m_d9f88c90467a13df43f1f4a110625798"}, "created_at": 1701786801.6061628, "compiled_code": "\n\nSELECT * FROM INFORMATION_SCHEMA.columns\nWHERE TABLE_SCHEMA = (\n    -- dbt gives us the full model name (db.schema.table)\n    -- but we want the schema name only\n    SELECT \n        REPLACE(value, '\"', '')\n    from STRING_SPLIT('\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_claim_movement_clean_nb100\"','.',1)\n    where ordinal = 2\n)\nAND TABLE_NAME = (\n    -- same as above, but we want the table name\n    SELECT \n        REPLACE(value, '\"', '')\n    from STRING_SPLIT('\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_claim_movement_clean_nb100\"','.',1)\n    where ordinal = 3\n)\nAND COLUMN_NAME = 'current_amount_usd'\nAND DATA_TYPE != 'float'\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "current_amount_usd", "file_key_name": "models.actuarial_claim_movement_clean_nb100"}, "test.iginsure.is_data_type_actuarial_claim_movement_clean_nb100_original_amount_ccy__float.ae59b8b839": {"test_metadata": {"name": "is_data_type", "kwargs": {"column_type": "float", "column_name": "original_amount_ccy", "model": "{{ get_where_subquery(ref('actuarial_claim_movement_clean_nb100')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.iginsure.test_is_data_type", "macro.dbt.get_where_subquery"], "nodes": ["model.iginsure.actuarial_claim_movement_clean_nb100"]}, "config": {"enabled": true, "alias": "is_data_type_actuarial_claim_m_2d9869c181f9bc365b68fcc5c2767bbe", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "presentation", "reserving_model", "is_data_type_actuarial_claim_movement_clean_nb100_original_amount_ccy__float"], "unique_id": "test.iginsure.is_data_type_actuarial_claim_movement_clean_nb100_original_amount_ccy__float.ae59b8b839", "raw_code": "{{ test_is_data_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"is_data_type_actuarial_claim_m_2d9869c181f9bc365b68fcc5c2767bbe\") }}", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "is_data_type_actuarial_claim_m_2d9869c181f9bc365b68fcc5c2767bbe.sql", "original_file_path": "models\\presentation\\reserving_model\\docs.yml", "name": "is_data_type_actuarial_claim_movement_clean_nb100_original_amount_ccy__float", "alias": "is_data_type_actuarial_claim_m_2d9869c181f9bc365b68fcc5c2767bbe", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["actuarial_claim_movement_clean_nb100"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\presentation\\reserving_model\\docs.yml\\is_data_type_actuarial_claim_m_2d9869c181f9bc365b68fcc5c2767bbe.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "is_data_type_actuarial_claim_m_2d9869c181f9bc365b68fcc5c2767bbe"}, "created_at": 1701786801.6101613, "compiled_code": "\n\nSELECT * FROM INFORMATION_SCHEMA.columns\nWHERE TABLE_SCHEMA = (\n    -- dbt gives us the full model name (db.schema.table)\n    -- but we want the schema name only\n    SELECT \n        REPLACE(value, '\"', '')\n    from STRING_SPLIT('\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_claim_movement_clean_nb100\"','.',1)\n    where ordinal = 2\n)\nAND TABLE_NAME = (\n    -- same as above, but we want the table name\n    SELECT \n        REPLACE(value, '\"', '')\n    from STRING_SPLIT('\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_claim_movement_clean_nb100\"','.',1)\n    where ordinal = 3\n)\nAND COLUMN_NAME = 'original_amount_ccy'\nAND DATA_TYPE != 'float'\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "original_amount_ccy", "file_key_name": "models.actuarial_claim_movement_clean_nb100"}, "test.iginsure.is_data_type_actuarial_claim_movement_clean_nb100_policy_inception_date_yq__int.9b3a651b30": {"test_metadata": {"name": "is_data_type", "kwargs": {"column_type": "int", "column_name": "policy_inception_date_yq", "model": "{{ get_where_subquery(ref('actuarial_claim_movement_clean_nb100')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.iginsure.test_is_data_type", "macro.dbt.get_where_subquery"], "nodes": ["model.iginsure.actuarial_claim_movement_clean_nb100"]}, "config": {"enabled": true, "alias": "is_data_type_actuarial_claim_m_0863df0a1db4af54200ea4cbd10c99f3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "presentation", "reserving_model", "is_data_type_actuarial_claim_movement_clean_nb100_policy_inception_date_yq__int"], "unique_id": "test.iginsure.is_data_type_actuarial_claim_movement_clean_nb100_policy_inception_date_yq__int.9b3a651b30", "raw_code": "{{ test_is_data_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"is_data_type_actuarial_claim_m_0863df0a1db4af54200ea4cbd10c99f3\") }}", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "is_data_type_actuarial_claim_m_0863df0a1db4af54200ea4cbd10c99f3.sql", "original_file_path": "models\\presentation\\reserving_model\\docs.yml", "name": "is_data_type_actuarial_claim_movement_clean_nb100_policy_inception_date_yq__int", "alias": "is_data_type_actuarial_claim_m_0863df0a1db4af54200ea4cbd10c99f3", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["actuarial_claim_movement_clean_nb100"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\presentation\\reserving_model\\docs.yml\\is_data_type_actuarial_claim_m_0863df0a1db4af54200ea4cbd10c99f3.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "is_data_type_actuarial_claim_m_0863df0a1db4af54200ea4cbd10c99f3"}, "created_at": 1701786801.613159, "compiled_code": "\n\nSELECT * FROM INFORMATION_SCHEMA.columns\nWHERE TABLE_SCHEMA = (\n    -- dbt gives us the full model name (db.schema.table)\n    -- but we want the schema name only\n    SELECT \n        REPLACE(value, '\"', '')\n    from STRING_SPLIT('\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_claim_movement_clean_nb100\"','.',1)\n    where ordinal = 2\n)\nAND TABLE_NAME = (\n    -- same as above, but we want the table name\n    SELECT \n        REPLACE(value, '\"', '')\n    from STRING_SPLIT('\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_claim_movement_clean_nb100\"','.',1)\n    where ordinal = 3\n)\nAND COLUMN_NAME = 'policy_inception_date_yq'\nAND DATA_TYPE != 'int'\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "policy_inception_date_yq", "file_key_name": "models.actuarial_claim_movement_clean_nb100"}, "test.iginsure.is_data_type_actuarial_claim_movement_clean_nb100_claim_reporting_date_yq__int.521c6a3b1e": {"test_metadata": {"name": "is_data_type", "kwargs": {"column_type": "int", "column_name": "claim_reporting_date_yq", "model": "{{ get_where_subquery(ref('actuarial_claim_movement_clean_nb100')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.iginsure.test_is_data_type", "macro.dbt.get_where_subquery"], "nodes": ["model.iginsure.actuarial_claim_movement_clean_nb100"]}, "config": {"enabled": true, "alias": "is_data_type_actuarial_claim_m_0df2896d67d3fbf6c099b13580d4ae0e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "presentation", "reserving_model", "is_data_type_actuarial_claim_movement_clean_nb100_claim_reporting_date_yq__int"], "unique_id": "test.iginsure.is_data_type_actuarial_claim_movement_clean_nb100_claim_reporting_date_yq__int.521c6a3b1e", "raw_code": "{{ test_is_data_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"is_data_type_actuarial_claim_m_0df2896d67d3fbf6c099b13580d4ae0e\") }}", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "is_data_type_actuarial_claim_m_0df2896d67d3fbf6c099b13580d4ae0e.sql", "original_file_path": "models\\presentation\\reserving_model\\docs.yml", "name": "is_data_type_actuarial_claim_movement_clean_nb100_claim_reporting_date_yq__int", "alias": "is_data_type_actuarial_claim_m_0df2896d67d3fbf6c099b13580d4ae0e", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["actuarial_claim_movement_clean_nb100"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\presentation\\reserving_model\\docs.yml\\is_data_type_actuarial_claim_m_0df2896d67d3fbf6c099b13580d4ae0e.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "is_data_type_actuarial_claim_m_0df2896d67d3fbf6c099b13580d4ae0e"}, "created_at": 1701786801.6183596, "compiled_code": "\n\nSELECT * FROM INFORMATION_SCHEMA.columns\nWHERE TABLE_SCHEMA = (\n    -- dbt gives us the full model name (db.schema.table)\n    -- but we want the schema name only\n    SELECT \n        REPLACE(value, '\"', '')\n    from STRING_SPLIT('\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_claim_movement_clean_nb100\"','.',1)\n    where ordinal = 2\n)\nAND TABLE_NAME = (\n    -- same as above, but we want the table name\n    SELECT \n        REPLACE(value, '\"', '')\n    from STRING_SPLIT('\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_claim_movement_clean_nb100\"','.',1)\n    where ordinal = 3\n)\nAND COLUMN_NAME = 'claim_reporting_date_yq'\nAND DATA_TYPE != 'int'\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "claim_reporting_date_yq", "file_key_name": "models.actuarial_claim_movement_clean_nb100"}, "test.iginsure.is_data_type_actuarial_claim_movement_clean_nb100_claim_loss_date_yq__int.35b9e37060": {"test_metadata": {"name": "is_data_type", "kwargs": {"column_type": "int", "column_name": "claim_loss_date_yq", "model": "{{ get_where_subquery(ref('actuarial_claim_movement_clean_nb100')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.iginsure.test_is_data_type", "macro.dbt.get_where_subquery"], "nodes": ["model.iginsure.actuarial_claim_movement_clean_nb100"]}, "config": {"enabled": true, "alias": "is_data_type_actuarial_claim_m_b0252d91ae665dc2c4ae2be0e874d4ee", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "presentation", "reserving_model", "is_data_type_actuarial_claim_movement_clean_nb100_claim_loss_date_yq__int"], "unique_id": "test.iginsure.is_data_type_actuarial_claim_movement_clean_nb100_claim_loss_date_yq__int.35b9e37060", "raw_code": "{{ test_is_data_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"is_data_type_actuarial_claim_m_b0252d91ae665dc2c4ae2be0e874d4ee\") }}", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "is_data_type_actuarial_claim_m_b0252d91ae665dc2c4ae2be0e874d4ee.sql", "original_file_path": "models\\presentation\\reserving_model\\docs.yml", "name": "is_data_type_actuarial_claim_movement_clean_nb100_claim_loss_date_yq__int", "alias": "is_data_type_actuarial_claim_m_b0252d91ae665dc2c4ae2be0e874d4ee", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["actuarial_claim_movement_clean_nb100"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\presentation\\reserving_model\\docs.yml\\is_data_type_actuarial_claim_m_b0252d91ae665dc2c4ae2be0e874d4ee.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "is_data_type_actuarial_claim_m_b0252d91ae665dc2c4ae2be0e874d4ee"}, "created_at": 1701786801.624624, "compiled_code": "\n\nSELECT * FROM INFORMATION_SCHEMA.columns\nWHERE TABLE_SCHEMA = (\n    -- dbt gives us the full model name (db.schema.table)\n    -- but we want the schema name only\n    SELECT \n        REPLACE(value, '\"', '')\n    from STRING_SPLIT('\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_claim_movement_clean_nb100\"','.',1)\n    where ordinal = 2\n)\nAND TABLE_NAME = (\n    -- same as above, but we want the table name\n    SELECT \n        REPLACE(value, '\"', '')\n    from STRING_SPLIT('\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_claim_movement_clean_nb100\"','.',1)\n    where ordinal = 3\n)\nAND COLUMN_NAME = 'claim_loss_date_yq'\nAND DATA_TYPE != 'int'\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "claim_loss_date_yq", "file_key_name": "models.actuarial_claim_movement_clean_nb100"}, "test.iginsure.is_data_type_actuarial_claim_movement_clean_nb100_claim_loss_date_claims_made_yq__int.0023848cc3": {"test_metadata": {"name": "is_data_type", "kwargs": {"column_type": "int", "column_name": "claim_loss_date_claims_made_yq", "model": "{{ get_where_subquery(ref('actuarial_claim_movement_clean_nb100')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.iginsure.test_is_data_type", "macro.dbt.get_where_subquery"], "nodes": ["model.iginsure.actuarial_claim_movement_clean_nb100"]}, "config": {"enabled": true, "alias": "is_data_type_actuarial_claim_m_d4e60b23bf45a9d472540225e3ae1fed", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "presentation", "reserving_model", "is_data_type_actuarial_claim_movement_clean_nb100_claim_loss_date_claims_made_yq__int"], "unique_id": "test.iginsure.is_data_type_actuarial_claim_movement_clean_nb100_claim_loss_date_claims_made_yq__int.0023848cc3", "raw_code": "{{ test_is_data_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"is_data_type_actuarial_claim_m_d4e60b23bf45a9d472540225e3ae1fed\") }}", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "is_data_type_actuarial_claim_m_d4e60b23bf45a9d472540225e3ae1fed.sql", "original_file_path": "models\\presentation\\reserving_model\\docs.yml", "name": "is_data_type_actuarial_claim_movement_clean_nb100_claim_loss_date_claims_made_yq__int", "alias": "is_data_type_actuarial_claim_m_d4e60b23bf45a9d472540225e3ae1fed", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["actuarial_claim_movement_clean_nb100"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\presentation\\reserving_model\\docs.yml\\is_data_type_actuarial_claim_m_d4e60b23bf45a9d472540225e3ae1fed.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "is_data_type_actuarial_claim_m_d4e60b23bf45a9d472540225e3ae1fed"}, "created_at": 1701786801.6289134, "compiled_code": "\n\nSELECT * FROM INFORMATION_SCHEMA.columns\nWHERE TABLE_SCHEMA = (\n    -- dbt gives us the full model name (db.schema.table)\n    -- but we want the schema name only\n    SELECT \n        REPLACE(value, '\"', '')\n    from STRING_SPLIT('\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_claim_movement_clean_nb100\"','.',1)\n    where ordinal = 2\n)\nAND TABLE_NAME = (\n    -- same as above, but we want the table name\n    SELECT \n        REPLACE(value, '\"', '')\n    from STRING_SPLIT('\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_claim_movement_clean_nb100\"','.',1)\n    where ordinal = 3\n)\nAND COLUMN_NAME = 'claim_loss_date_claims_made_yq'\nAND DATA_TYPE != 'int'\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "claim_loss_date_claims_made_yq", "file_key_name": "models.actuarial_claim_movement_clean_nb100"}, "test.iginsure.is_data_type_actuarial_claim_movement_clean_nb100_policy_inception_date_dev_dur_q__int.c810075eba": {"test_metadata": {"name": "is_data_type", "kwargs": {"column_type": "int", "column_name": "policy_inception_date_dev_dur_q", "model": "{{ get_where_subquery(ref('actuarial_claim_movement_clean_nb100')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.iginsure.test_is_data_type", "macro.dbt.get_where_subquery"], "nodes": ["model.iginsure.actuarial_claim_movement_clean_nb100"]}, "config": {"enabled": true, "alias": "is_data_type_actuarial_claim_m_af5486349332a1ba47a20bf05a50f7e0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "presentation", "reserving_model", "is_data_type_actuarial_claim_movement_clean_nb100_policy_inception_date_dev_dur_q__int"], "unique_id": "test.iginsure.is_data_type_actuarial_claim_movement_clean_nb100_policy_inception_date_dev_dur_q__int.c810075eba", "raw_code": "{{ test_is_data_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"is_data_type_actuarial_claim_m_af5486349332a1ba47a20bf05a50f7e0\") }}", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "is_data_type_actuarial_claim_m_af5486349332a1ba47a20bf05a50f7e0.sql", "original_file_path": "models\\presentation\\reserving_model\\docs.yml", "name": "is_data_type_actuarial_claim_movement_clean_nb100_policy_inception_date_dev_dur_q__int", "alias": "is_data_type_actuarial_claim_m_af5486349332a1ba47a20bf05a50f7e0", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["actuarial_claim_movement_clean_nb100"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\presentation\\reserving_model\\docs.yml\\is_data_type_actuarial_claim_m_af5486349332a1ba47a20bf05a50f7e0.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "is_data_type_actuarial_claim_m_af5486349332a1ba47a20bf05a50f7e0"}, "created_at": 1701786801.6319172, "compiled_code": "\n\nSELECT * FROM INFORMATION_SCHEMA.columns\nWHERE TABLE_SCHEMA = (\n    -- dbt gives us the full model name (db.schema.table)\n    -- but we want the schema name only\n    SELECT \n        REPLACE(value, '\"', '')\n    from STRING_SPLIT('\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_claim_movement_clean_nb100\"','.',1)\n    where ordinal = 2\n)\nAND TABLE_NAME = (\n    -- same as above, but we want the table name\n    SELECT \n        REPLACE(value, '\"', '')\n    from STRING_SPLIT('\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_claim_movement_clean_nb100\"','.',1)\n    where ordinal = 3\n)\nAND COLUMN_NAME = 'policy_inception_date_dev_dur_q'\nAND DATA_TYPE != 'int'\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "policy_inception_date_dev_dur_q", "file_key_name": "models.actuarial_claim_movement_clean_nb100"}, "test.iginsure.is_data_type_actuarial_claim_movement_clean_nb100_claim_reporting_date_dev_dur_q__int.1e213b5b64": {"test_metadata": {"name": "is_data_type", "kwargs": {"column_type": "int", "column_name": "claim_reporting_date_dev_dur_q", "model": "{{ get_where_subquery(ref('actuarial_claim_movement_clean_nb100')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.iginsure.test_is_data_type", "macro.dbt.get_where_subquery"], "nodes": ["model.iginsure.actuarial_claim_movement_clean_nb100"]}, "config": {"enabled": true, "alias": "is_data_type_actuarial_claim_m_3ca2a66ed75b902522e99ec05ae2137d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "presentation", "reserving_model", "is_data_type_actuarial_claim_movement_clean_nb100_claim_reporting_date_dev_dur_q__int"], "unique_id": "test.iginsure.is_data_type_actuarial_claim_movement_clean_nb100_claim_reporting_date_dev_dur_q__int.1e213b5b64", "raw_code": "{{ test_is_data_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"is_data_type_actuarial_claim_m_3ca2a66ed75b902522e99ec05ae2137d\") }}", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "is_data_type_actuarial_claim_m_3ca2a66ed75b902522e99ec05ae2137d.sql", "original_file_path": "models\\presentation\\reserving_model\\docs.yml", "name": "is_data_type_actuarial_claim_movement_clean_nb100_claim_reporting_date_dev_dur_q__int", "alias": "is_data_type_actuarial_claim_m_3ca2a66ed75b902522e99ec05ae2137d", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["actuarial_claim_movement_clean_nb100"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\presentation\\reserving_model\\docs.yml\\is_data_type_actuarial_claim_m_3ca2a66ed75b902522e99ec05ae2137d.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "is_data_type_actuarial_claim_m_3ca2a66ed75b902522e99ec05ae2137d"}, "created_at": 1701786801.635918, "compiled_code": "\n\nSELECT * FROM INFORMATION_SCHEMA.columns\nWHERE TABLE_SCHEMA = (\n    -- dbt gives us the full model name (db.schema.table)\n    -- but we want the schema name only\n    SELECT \n        REPLACE(value, '\"', '')\n    from STRING_SPLIT('\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_claim_movement_clean_nb100\"','.',1)\n    where ordinal = 2\n)\nAND TABLE_NAME = (\n    -- same as above, but we want the table name\n    SELECT \n        REPLACE(value, '\"', '')\n    from STRING_SPLIT('\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_claim_movement_clean_nb100\"','.',1)\n    where ordinal = 3\n)\nAND COLUMN_NAME = 'claim_reporting_date_dev_dur_q'\nAND DATA_TYPE != 'int'\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "claim_reporting_date_dev_dur_q", "file_key_name": "models.actuarial_claim_movement_clean_nb100"}, "test.iginsure.is_data_type_actuarial_claim_movement_clean_nb100_claim_loss_date_dev_dur_q__int.d190bb512f": {"test_metadata": {"name": "is_data_type", "kwargs": {"column_type": "int", "column_name": "claim_loss_date_dev_dur_q", "model": "{{ get_where_subquery(ref('actuarial_claim_movement_clean_nb100')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.iginsure.test_is_data_type", "macro.dbt.get_where_subquery"], "nodes": ["model.iginsure.actuarial_claim_movement_clean_nb100"]}, "config": {"enabled": true, "alias": "is_data_type_actuarial_claim_m_4e7c498fc619124af128264655220a1b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "presentation", "reserving_model", "is_data_type_actuarial_claim_movement_clean_nb100_claim_loss_date_dev_dur_q__int"], "unique_id": "test.iginsure.is_data_type_actuarial_claim_movement_clean_nb100_claim_loss_date_dev_dur_q__int.d190bb512f", "raw_code": "{{ test_is_data_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"is_data_type_actuarial_claim_m_4e7c498fc619124af128264655220a1b\") }}", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "is_data_type_actuarial_claim_m_4e7c498fc619124af128264655220a1b.sql", "original_file_path": "models\\presentation\\reserving_model\\docs.yml", "name": "is_data_type_actuarial_claim_movement_clean_nb100_claim_loss_date_dev_dur_q__int", "alias": "is_data_type_actuarial_claim_m_4e7c498fc619124af128264655220a1b", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["actuarial_claim_movement_clean_nb100"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\presentation\\reserving_model\\docs.yml\\is_data_type_actuarial_claim_m_4e7c498fc619124af128264655220a1b.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "is_data_type_actuarial_claim_m_4e7c498fc619124af128264655220a1b"}, "created_at": 1701786801.6409183, "compiled_code": "\n\nSELECT * FROM INFORMATION_SCHEMA.columns\nWHERE TABLE_SCHEMA = (\n    -- dbt gives us the full model name (db.schema.table)\n    -- but we want the schema name only\n    SELECT \n        REPLACE(value, '\"', '')\n    from STRING_SPLIT('\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_claim_movement_clean_nb100\"','.',1)\n    where ordinal = 2\n)\nAND TABLE_NAME = (\n    -- same as above, but we want the table name\n    SELECT \n        REPLACE(value, '\"', '')\n    from STRING_SPLIT('\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_claim_movement_clean_nb100\"','.',1)\n    where ordinal = 3\n)\nAND COLUMN_NAME = 'claim_loss_date_dev_dur_q'\nAND DATA_TYPE != 'int'\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "claim_loss_date_dev_dur_q", "file_key_name": "models.actuarial_claim_movement_clean_nb100"}, "test.iginsure.is_data_type_actuarial_claim_movement_clean_nb100_claim_loss_date_claims_made_dev_dur_q__int.14e20f88e0": {"test_metadata": {"name": "is_data_type", "kwargs": {"column_type": "int", "column_name": "claim_loss_date_claims_made_dev_dur_q", "model": "{{ get_where_subquery(ref('actuarial_claim_movement_clean_nb100')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.iginsure.test_is_data_type", "macro.dbt.get_where_subquery"], "nodes": ["model.iginsure.actuarial_claim_movement_clean_nb100"]}, "config": {"enabled": true, "alias": "is_data_type_actuarial_claim_m_82aee90fd22debd7e4b92d716a97951d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "presentation", "reserving_model", "is_data_type_actuarial_claim_movement_clean_nb100_claim_loss_date_claims_made_dev_dur_q__int"], "unique_id": "test.iginsure.is_data_type_actuarial_claim_movement_clean_nb100_claim_loss_date_claims_made_dev_dur_q__int.14e20f88e0", "raw_code": "{{ test_is_data_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"is_data_type_actuarial_claim_m_82aee90fd22debd7e4b92d716a97951d\") }}", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "is_data_type_actuarial_claim_m_82aee90fd22debd7e4b92d716a97951d.sql", "original_file_path": "models\\presentation\\reserving_model\\docs.yml", "name": "is_data_type_actuarial_claim_movement_clean_nb100_claim_loss_date_claims_made_dev_dur_q__int", "alias": "is_data_type_actuarial_claim_m_82aee90fd22debd7e4b92d716a97951d", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["actuarial_claim_movement_clean_nb100"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\presentation\\reserving_model\\docs.yml\\is_data_type_actuarial_claim_m_82aee90fd22debd7e4b92d716a97951d.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "is_data_type_actuarial_claim_m_82aee90fd22debd7e4b92d716a97951d"}, "created_at": 1701786801.6439176, "compiled_code": "\n\nSELECT * FROM INFORMATION_SCHEMA.columns\nWHERE TABLE_SCHEMA = (\n    -- dbt gives us the full model name (db.schema.table)\n    -- but we want the schema name only\n    SELECT \n        REPLACE(value, '\"', '')\n    from STRING_SPLIT('\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_claim_movement_clean_nb100\"','.',1)\n    where ordinal = 2\n)\nAND TABLE_NAME = (\n    -- same as above, but we want the table name\n    SELECT \n        REPLACE(value, '\"', '')\n    from STRING_SPLIT('\"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_claim_movement_clean_nb100\"','.',1)\n    where ordinal = 3\n)\nAND COLUMN_NAME = 'claim_loss_date_claims_made_dev_dur_q'\nAND DATA_TYPE != 'int'\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "claim_loss_date_claims_made_dev_dur_q", "file_key_name": "models.actuarial_claim_movement_clean_nb100"}, "test.iginsure.is_greater_than_or_equal_to_actuarial_claim_movement_clean_nb100_written_date___20000101_.861a109f45": {"test_metadata": {"name": "is_greater_than_or_equal_to", "kwargs": {"value_or_expression": "'20000101'", "column_name": "written_date", "model": "{{ get_where_subquery(ref('actuarial_claim_movement_clean_nb100')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.iginsure.test_is_greater_than_or_equal_to", "macro.dbt.get_where_subquery"], "nodes": ["model.iginsure.actuarial_claim_movement_clean_nb100"]}, "config": {"enabled": true, "alias": "is_greater_than_or_equal_to_ac_013663fc4760fc84259711e52f95d463", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "presentation", "reserving_model", "is_greater_than_or_equal_to_actuarial_claim_movement_clean_nb100_written_date___20000101_"], "unique_id": "test.iginsure.is_greater_than_or_equal_to_actuarial_claim_movement_clean_nb100_written_date___20000101_.861a109f45", "raw_code": "{{ test_is_greater_than_or_equal_to(**_dbt_generic_test_kwargs) }}{{ config(alias=\"is_greater_than_or_equal_to_ac_013663fc4760fc84259711e52f95d463\") }}", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "is_greater_than_or_equal_to_ac_013663fc4760fc84259711e52f95d463.sql", "original_file_path": "models\\presentation\\reserving_model\\docs.yml", "name": "is_greater_than_or_equal_to_actuarial_claim_movement_clean_nb100_written_date___20000101_", "alias": "is_greater_than_or_equal_to_ac_013663fc4760fc84259711e52f95d463", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["actuarial_claim_movement_clean_nb100"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\presentation\\reserving_model\\docs.yml\\is_greater_than_or_equal_to_ac_013663fc4760fc84259711e52f95d463.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "is_greater_than_or_equal_to_ac_013663fc4760fc84259711e52f95d463"}, "created_at": 1701786801.6469135, "compiled_code": "\n\nselect * from \"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_claim_movement_clean_nb100\"\nwhere written_date < '20000101'\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "written_date", "file_key_name": "models.actuarial_claim_movement_clean_nb100"}, "test.iginsure.is_greater_than_or_equal_to_actuarial_claim_movement_clean_nb100_inception_date___20000101_.a474a80f0a": {"test_metadata": {"name": "is_greater_than_or_equal_to", "kwargs": {"value_or_expression": "'20000101'", "column_name": "inception_date", "model": "{{ get_where_subquery(ref('actuarial_claim_movement_clean_nb100')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.iginsure.test_is_greater_than_or_equal_to", "macro.dbt.get_where_subquery"], "nodes": ["model.iginsure.actuarial_claim_movement_clean_nb100"]}, "config": {"enabled": true, "alias": "is_greater_than_or_equal_to_ac_9441b14f5af9cfc3439c900975f5c85b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "presentation", "reserving_model", "is_greater_than_or_equal_to_actuarial_claim_movement_clean_nb100_inception_date___20000101_"], "unique_id": "test.iginsure.is_greater_than_or_equal_to_actuarial_claim_movement_clean_nb100_inception_date___20000101_.a474a80f0a", "raw_code": "{{ test_is_greater_than_or_equal_to(**_dbt_generic_test_kwargs) }}{{ config(alias=\"is_greater_than_or_equal_to_ac_9441b14f5af9cfc3439c900975f5c85b\") }}", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "is_greater_than_or_equal_to_ac_9441b14f5af9cfc3439c900975f5c85b.sql", "original_file_path": "models\\presentation\\reserving_model\\docs.yml", "name": "is_greater_than_or_equal_to_actuarial_claim_movement_clean_nb100_inception_date___20000101_", "alias": "is_greater_than_or_equal_to_ac_9441b14f5af9cfc3439c900975f5c85b", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["actuarial_claim_movement_clean_nb100"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\presentation\\reserving_model\\docs.yml\\is_greater_than_or_equal_to_ac_9441b14f5af9cfc3439c900975f5c85b.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "is_greater_than_or_equal_to_ac_9441b14f5af9cfc3439c900975f5c85b"}, "created_at": 1701786801.6546512, "compiled_code": "\n\nselect * from \"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_claim_movement_clean_nb100\"\nwhere inception_date < '20000101'\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "inception_date", "file_key_name": "models.actuarial_claim_movement_clean_nb100"}, "test.iginsure.is_greater_than_or_equal_to_actuarial_claim_movement_clean_nb100_expiry_date___20000101_.3932473cd1": {"test_metadata": {"name": "is_greater_than_or_equal_to", "kwargs": {"value_or_expression": "'20000101'", "column_name": "expiry_date", "model": "{{ get_where_subquery(ref('actuarial_claim_movement_clean_nb100')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.iginsure.test_is_greater_than_or_equal_to", "macro.dbt.get_where_subquery"], "nodes": ["model.iginsure.actuarial_claim_movement_clean_nb100"]}, "config": {"enabled": true, "alias": "is_greater_than_or_equal_to_ac_1349f1e8a3b6c5ede39b3135f61e972f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "presentation", "reserving_model", "is_greater_than_or_equal_to_actuarial_claim_movement_clean_nb100_expiry_date___20000101_"], "unique_id": "test.iginsure.is_greater_than_or_equal_to_actuarial_claim_movement_clean_nb100_expiry_date___20000101_.3932473cd1", "raw_code": "{{ test_is_greater_than_or_equal_to(**_dbt_generic_test_kwargs) }}{{ config(alias=\"is_greater_than_or_equal_to_ac_1349f1e8a3b6c5ede39b3135f61e972f\") }}", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "is_greater_than_or_equal_to_ac_1349f1e8a3b6c5ede39b3135f61e972f.sql", "original_file_path": "models\\presentation\\reserving_model\\docs.yml", "name": "is_greater_than_or_equal_to_actuarial_claim_movement_clean_nb100_expiry_date___20000101_", "alias": "is_greater_than_or_equal_to_ac_1349f1e8a3b6c5ede39b3135f61e972f", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["actuarial_claim_movement_clean_nb100"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\presentation\\reserving_model\\docs.yml\\is_greater_than_or_equal_to_ac_1349f1e8a3b6c5ede39b3135f61e972f.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "is_greater_than_or_equal_to_ac_1349f1e8a3b6c5ede39b3135f61e972f"}, "created_at": 1701786801.6606524, "compiled_code": "\n\nselect * from \"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_claim_movement_clean_nb100\"\nwhere expiry_date < '20000101'\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "expiry_date", "file_key_name": "models.actuarial_claim_movement_clean_nb100"}, "test.iginsure.is_greater_than_or_equal_to_actuarial_claim_movement_clean_nb100_working_line_pct__0_0.aed761018f": {"test_metadata": {"name": "is_greater_than_or_equal_to", "kwargs": {"value_or_expression": 0.0, "column_name": "working_line_pct", "model": "{{ get_where_subquery(ref('actuarial_claim_movement_clean_nb100')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.iginsure.test_is_greater_than_or_equal_to", "macro.dbt.get_where_subquery"], "nodes": ["model.iginsure.actuarial_claim_movement_clean_nb100"]}, "config": {"enabled": true, "alias": "is_greater_than_or_equal_to_ac_c319baf51fcf23ebd8a08acc750d3b48", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "presentation", "reserving_model", "is_greater_than_or_equal_to_actuarial_claim_movement_clean_nb100_working_line_pct__0_0"], "unique_id": "test.iginsure.is_greater_than_or_equal_to_actuarial_claim_movement_clean_nb100_working_line_pct__0_0.aed761018f", "raw_code": "{{ test_is_greater_than_or_equal_to(**_dbt_generic_test_kwargs) }}{{ config(alias=\"is_greater_than_or_equal_to_ac_c319baf51fcf23ebd8a08acc750d3b48\") }}", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "is_greater_than_or_equal_to_ac_c319baf51fcf23ebd8a08acc750d3b48.sql", "original_file_path": "models\\presentation\\reserving_model\\docs.yml", "name": "is_greater_than_or_equal_to_actuarial_claim_movement_clean_nb100_working_line_pct__0_0", "alias": "is_greater_than_or_equal_to_ac_c319baf51fcf23ebd8a08acc750d3b48", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["actuarial_claim_movement_clean_nb100"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\presentation\\reserving_model\\docs.yml\\is_greater_than_or_equal_to_ac_c319baf51fcf23ebd8a08acc750d3b48.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "is_greater_than_or_equal_to_ac_c319baf51fcf23ebd8a08acc750d3b48"}, "created_at": 1701786801.6646512, "compiled_code": "\n\nselect * from \"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_claim_movement_clean_nb100\"\nwhere working_line_pct < 0.0\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "working_line_pct", "file_key_name": "models.actuarial_claim_movement_clean_nb100"}, "test.iginsure.is_less_than_or_equal_to_actuarial_claim_movement_clean_nb100_working_line_pct__100_0.f3de330a93": {"test_metadata": {"name": "is_less_than_or_equal_to", "kwargs": {"value_or_expression": 100.0, "column_name": "working_line_pct", "model": "{{ get_where_subquery(ref('actuarial_claim_movement_clean_nb100')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.iginsure.test_is_less_than_or_equal_to", "macro.dbt.get_where_subquery"], "nodes": ["model.iginsure.actuarial_claim_movement_clean_nb100"]}, "config": {"enabled": true, "alias": "is_less_than_or_equal_to_actua_599db847603299f925de15748825d343", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "presentation", "reserving_model", "is_less_than_or_equal_to_actuarial_claim_movement_clean_nb100_working_line_pct__100_0"], "unique_id": "test.iginsure.is_less_than_or_equal_to_actuarial_claim_movement_clean_nb100_working_line_pct__100_0.f3de330a93", "raw_code": "{{ test_is_less_than_or_equal_to(**_dbt_generic_test_kwargs) }}{{ config(alias=\"is_less_than_or_equal_to_actua_599db847603299f925de15748825d343\") }}", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "is_less_than_or_equal_to_actua_599db847603299f925de15748825d343.sql", "original_file_path": "models\\presentation\\reserving_model\\docs.yml", "name": "is_less_than_or_equal_to_actuarial_claim_movement_clean_nb100_working_line_pct__100_0", "alias": "is_less_than_or_equal_to_actua_599db847603299f925de15748825d343", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["actuarial_claim_movement_clean_nb100"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\presentation\\reserving_model\\docs.yml\\is_less_than_or_equal_to_actua_599db847603299f925de15748825d343.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "is_less_than_or_equal_to_actua_599db847603299f925de15748825d343"}, "created_at": 1701786801.667735, "compiled_code": "\n\nselect * from \"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_claim_movement_clean_nb100\"\nwhere working_line_pct > 100.0\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "working_line_pct", "file_key_name": "models.actuarial_claim_movement_clean_nb100"}, "test.iginsure.is_greater_than_or_equal_to_actuarial_claim_movement_clean_nb100_tiv_usd__0_0.7eae16bd17": {"test_metadata": {"name": "is_greater_than_or_equal_to", "kwargs": {"value_or_expression": 0.0, "column_name": "tiv_usd", "model": "{{ get_where_subquery(ref('actuarial_claim_movement_clean_nb100')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.iginsure.test_is_greater_than_or_equal_to", "macro.dbt.get_where_subquery"], "nodes": ["model.iginsure.actuarial_claim_movement_clean_nb100"]}, "config": {"enabled": true, "alias": "is_greater_than_or_equal_to_ac_47b8283502978522b5e78018ef6972b8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "presentation", "reserving_model", "is_greater_than_or_equal_to_actuarial_claim_movement_clean_nb100_tiv_usd__0_0"], "unique_id": "test.iginsure.is_greater_than_or_equal_to_actuarial_claim_movement_clean_nb100_tiv_usd__0_0.7eae16bd17", "raw_code": "{{ test_is_greater_than_or_equal_to(**_dbt_generic_test_kwargs) }}{{ config(alias=\"is_greater_than_or_equal_to_ac_47b8283502978522b5e78018ef6972b8\") }}", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "is_greater_than_or_equal_to_ac_47b8283502978522b5e78018ef6972b8.sql", "original_file_path": "models\\presentation\\reserving_model\\docs.yml", "name": "is_greater_than_or_equal_to_actuarial_claim_movement_clean_nb100_tiv_usd__0_0", "alias": "is_greater_than_or_equal_to_ac_47b8283502978522b5e78018ef6972b8", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["actuarial_claim_movement_clean_nb100"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\presentation\\reserving_model\\docs.yml\\is_greater_than_or_equal_to_ac_47b8283502978522b5e78018ef6972b8.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "is_greater_than_or_equal_to_ac_47b8283502978522b5e78018ef6972b8"}, "created_at": 1701786801.6747496, "compiled_code": "\n\nselect * from \"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_claim_movement_clean_nb100\"\nwhere tiv_usd < 0.0\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "tiv_usd", "file_key_name": "models.actuarial_claim_movement_clean_nb100"}, "test.iginsure.is_greater_than_or_equal_to_actuarial_claim_movement_clean_nb100_tiv_share_usd__0_0.fb07ef50d4": {"test_metadata": {"name": "is_greater_than_or_equal_to", "kwargs": {"value_or_expression": 0.0, "column_name": "tiv_share_usd", "model": "{{ get_where_subquery(ref('actuarial_claim_movement_clean_nb100')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.iginsure.test_is_greater_than_or_equal_to", "macro.dbt.get_where_subquery"], "nodes": ["model.iginsure.actuarial_claim_movement_clean_nb100"]}, "config": {"enabled": true, "alias": "is_greater_than_or_equal_to_ac_fcd49ce174db2cf3ae7d2cf54ce82ea9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "presentation", "reserving_model", "is_greater_than_or_equal_to_actuarial_claim_movement_clean_nb100_tiv_share_usd__0_0"], "unique_id": "test.iginsure.is_greater_than_or_equal_to_actuarial_claim_movement_clean_nb100_tiv_share_usd__0_0.fb07ef50d4", "raw_code": "{{ test_is_greater_than_or_equal_to(**_dbt_generic_test_kwargs) }}{{ config(alias=\"is_greater_than_or_equal_to_ac_fcd49ce174db2cf3ae7d2cf54ce82ea9\") }}", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "is_greater_than_or_equal_to_ac_fcd49ce174db2cf3ae7d2cf54ce82ea9.sql", "original_file_path": "models\\presentation\\reserving_model\\docs.yml", "name": "is_greater_than_or_equal_to_actuarial_claim_movement_clean_nb100_tiv_share_usd__0_0", "alias": "is_greater_than_or_equal_to_ac_fcd49ce174db2cf3ae7d2cf54ce82ea9", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["actuarial_claim_movement_clean_nb100"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\presentation\\reserving_model\\docs.yml\\is_greater_than_or_equal_to_ac_fcd49ce174db2cf3ae7d2cf54ce82ea9.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "is_greater_than_or_equal_to_ac_fcd49ce174db2cf3ae7d2cf54ce82ea9"}, "created_at": 1701786801.6777494, "compiled_code": "\n\nselect * from \"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_claim_movement_clean_nb100\"\nwhere tiv_share_usd < 0.0\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "tiv_share_usd", "file_key_name": "models.actuarial_claim_movement_clean_nb100"}, "test.iginsure.is_greater_than_or_equal_to_actuarial_claim_movement_clean_nb100_tiv_100_usd__0_0.b01b3c1163": {"test_metadata": {"name": "is_greater_than_or_equal_to", "kwargs": {"value_or_expression": 0.0, "column_name": "tiv_100_usd", "model": "{{ get_where_subquery(ref('actuarial_claim_movement_clean_nb100')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.iginsure.test_is_greater_than_or_equal_to", "macro.dbt.get_where_subquery"], "nodes": ["model.iginsure.actuarial_claim_movement_clean_nb100"]}, "config": {"enabled": true, "alias": "is_greater_than_or_equal_to_ac_03caac49e52ddf2217eb3305abf2ed71", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "presentation", "reserving_model", "is_greater_than_or_equal_to_actuarial_claim_movement_clean_nb100_tiv_100_usd__0_0"], "unique_id": "test.iginsure.is_greater_than_or_equal_to_actuarial_claim_movement_clean_nb100_tiv_100_usd__0_0.b01b3c1163", "raw_code": "{{ test_is_greater_than_or_equal_to(**_dbt_generic_test_kwargs) }}{{ config(alias=\"is_greater_than_or_equal_to_ac_03caac49e52ddf2217eb3305abf2ed71\") }}", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "is_greater_than_or_equal_to_ac_03caac49e52ddf2217eb3305abf2ed71.sql", "original_file_path": "models\\presentation\\reserving_model\\docs.yml", "name": "is_greater_than_or_equal_to_actuarial_claim_movement_clean_nb100_tiv_100_usd__0_0", "alias": "is_greater_than_or_equal_to_ac_03caac49e52ddf2217eb3305abf2ed71", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["actuarial_claim_movement_clean_nb100"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\presentation\\reserving_model\\docs.yml\\is_greater_than_or_equal_to_ac_03caac49e52ddf2217eb3305abf2ed71.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "is_greater_than_or_equal_to_ac_03caac49e52ddf2217eb3305abf2ed71"}, "created_at": 1701786801.6807463, "compiled_code": "\n\nselect * from \"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_claim_movement_clean_nb100\"\nwhere tiv_100_usd < 0.0\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "tiv_100_usd", "file_key_name": "models.actuarial_claim_movement_clean_nb100"}, "test.iginsure.is_greater_than_or_equal_to_actuarial_claim_movement_clean_nb100_event_limit_100_usd__0_0.79744f839e": {"test_metadata": {"name": "is_greater_than_or_equal_to", "kwargs": {"value_or_expression": 0.0, "column_name": "event_limit_100_usd", "model": "{{ get_where_subquery(ref('actuarial_claim_movement_clean_nb100')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.iginsure.test_is_greater_than_or_equal_to", "macro.dbt.get_where_subquery"], "nodes": ["model.iginsure.actuarial_claim_movement_clean_nb100"]}, "config": {"enabled": true, "alias": "is_greater_than_or_equal_to_ac_409c5756acd272b25af3d1a6de10dda3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "presentation", "reserving_model", "is_greater_than_or_equal_to_actuarial_claim_movement_clean_nb100_event_limit_100_usd__0_0"], "unique_id": "test.iginsure.is_greater_than_or_equal_to_actuarial_claim_movement_clean_nb100_event_limit_100_usd__0_0.79744f839e", "raw_code": "{{ test_is_greater_than_or_equal_to(**_dbt_generic_test_kwargs) }}{{ config(alias=\"is_greater_than_or_equal_to_ac_409c5756acd272b25af3d1a6de10dda3\") }}", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "is_greater_than_or_equal_to_ac_409c5756acd272b25af3d1a6de10dda3.sql", "original_file_path": "models\\presentation\\reserving_model\\docs.yml", "name": "is_greater_than_or_equal_to_actuarial_claim_movement_clean_nb100_event_limit_100_usd__0_0", "alias": "is_greater_than_or_equal_to_ac_409c5756acd272b25af3d1a6de10dda3", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["actuarial_claim_movement_clean_nb100"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\presentation\\reserving_model\\docs.yml\\is_greater_than_or_equal_to_ac_409c5756acd272b25af3d1a6de10dda3.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "is_greater_than_or_equal_to_ac_409c5756acd272b25af3d1a6de10dda3"}, "created_at": 1701786801.683746, "compiled_code": "\n\nselect * from \"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_claim_movement_clean_nb100\"\nwhere event_limit_100_usd < 0.0\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "event_limit_100_usd", "file_key_name": "models.actuarial_claim_movement_clean_nb100"}, "test.iginsure.is_greater_than_or_equal_to_actuarial_claim_movement_clean_nb100_pml_100_usd__0_0.e340e27014": {"test_metadata": {"name": "is_greater_than_or_equal_to", "kwargs": {"value_or_expression": 0.0, "column_name": "pml_100_usd", "model": "{{ get_where_subquery(ref('actuarial_claim_movement_clean_nb100')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.iginsure.test_is_greater_than_or_equal_to", "macro.dbt.get_where_subquery"], "nodes": ["model.iginsure.actuarial_claim_movement_clean_nb100"]}, "config": {"enabled": true, "alias": "is_greater_than_or_equal_to_ac_d5c7c7f5e400fc469acf3cbf144011e5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "presentation", "reserving_model", "is_greater_than_or_equal_to_actuarial_claim_movement_clean_nb100_pml_100_usd__0_0"], "unique_id": "test.iginsure.is_greater_than_or_equal_to_actuarial_claim_movement_clean_nb100_pml_100_usd__0_0.e340e27014", "raw_code": "{{ test_is_greater_than_or_equal_to(**_dbt_generic_test_kwargs) }}{{ config(alias=\"is_greater_than_or_equal_to_ac_d5c7c7f5e400fc469acf3cbf144011e5\") }}", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "is_greater_than_or_equal_to_ac_d5c7c7f5e400fc469acf3cbf144011e5.sql", "original_file_path": "models\\presentation\\reserving_model\\docs.yml", "name": "is_greater_than_or_equal_to_actuarial_claim_movement_clean_nb100_pml_100_usd__0_0", "alias": "is_greater_than_or_equal_to_ac_d5c7c7f5e400fc469acf3cbf144011e5", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["actuarial_claim_movement_clean_nb100"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\presentation\\reserving_model\\docs.yml\\is_greater_than_or_equal_to_ac_d5c7c7f5e400fc469acf3cbf144011e5.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "is_greater_than_or_equal_to_ac_d5c7c7f5e400fc469acf3cbf144011e5"}, "created_at": 1701786801.6885848, "compiled_code": "\n\nselect * from \"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_claim_movement_clean_nb100\"\nwhere pml_100_usd < 0.0\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "pml_100_usd", "file_key_name": "models.actuarial_claim_movement_clean_nb100"}, "test.iginsure.is_greater_than_or_equal_to_actuarial_claim_movement_clean_nb100_pml_share_usd__0_0.8ab689eae7": {"test_metadata": {"name": "is_greater_than_or_equal_to", "kwargs": {"value_or_expression": 0.0, "column_name": "pml_share_usd", "model": "{{ get_where_subquery(ref('actuarial_claim_movement_clean_nb100')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.iginsure.test_is_greater_than_or_equal_to", "macro.dbt.get_where_subquery"], "nodes": ["model.iginsure.actuarial_claim_movement_clean_nb100"]}, "config": {"enabled": true, "alias": "is_greater_than_or_equal_to_ac_72c6d5a2fa00635bc586a666786174e4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "presentation", "reserving_model", "is_greater_than_or_equal_to_actuarial_claim_movement_clean_nb100_pml_share_usd__0_0"], "unique_id": "test.iginsure.is_greater_than_or_equal_to_actuarial_claim_movement_clean_nb100_pml_share_usd__0_0.8ab689eae7", "raw_code": "{{ test_is_greater_than_or_equal_to(**_dbt_generic_test_kwargs) }}{{ config(alias=\"is_greater_than_or_equal_to_ac_72c6d5a2fa00635bc586a666786174e4\") }}", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "is_greater_than_or_equal_to_ac_72c6d5a2fa00635bc586a666786174e4.sql", "original_file_path": "models\\presentation\\reserving_model\\docs.yml", "name": "is_greater_than_or_equal_to_actuarial_claim_movement_clean_nb100_pml_share_usd__0_0", "alias": "is_greater_than_or_equal_to_ac_72c6d5a2fa00635bc586a666786174e4", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["actuarial_claim_movement_clean_nb100"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\presentation\\reserving_model\\docs.yml\\is_greater_than_or_equal_to_ac_72c6d5a2fa00635bc586a666786174e4.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "is_greater_than_or_equal_to_ac_72c6d5a2fa00635bc586a666786174e4"}, "created_at": 1701786801.6925888, "compiled_code": "\n\nselect * from \"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_claim_movement_clean_nb100\"\nwhere pml_share_usd < 0.0\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "pml_share_usd", "file_key_name": "models.actuarial_claim_movement_clean_nb100"}, "test.iginsure.accepted_values_actuarial_claim_movement_clean_nb110_reinsurance_type__XOL__QS__FAC__Gross.4c04d1a50f": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["XOL", "QS", "FAC", "Gross"], "column_name": "reinsurance_type", "model": "{{ get_where_subquery(ref('actuarial_claim_movement_clean_nb110')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.iginsure.actuarial_claim_movement_clean_nb110"]}, "config": {"enabled": true, "alias": "accepted_values_actuarial_clai_d593b2ced48ceef423fd99f2fea9eb1e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "presentation", "reserving_model", "accepted_values_actuarial_claim_movement_clean_nb110_reinsurance_type__XOL__QS__FAC__Gross"], "unique_id": "test.iginsure.accepted_values_actuarial_claim_movement_clean_nb110_reinsurance_type__XOL__QS__FAC__Gross.4c04d1a50f", "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_actuarial_clai_d593b2ced48ceef423fd99f2fea9eb1e\") }}", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "accepted_values_actuarial_clai_d593b2ced48ceef423fd99f2fea9eb1e.sql", "original_file_path": "models\\presentation\\reserving_model\\docs.yml", "name": "accepted_values_actuarial_claim_movement_clean_nb110_reinsurance_type__XOL__QS__FAC__Gross", "alias": "accepted_values_actuarial_clai_d593b2ced48ceef423fd99f2fea9eb1e", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["actuarial_claim_movement_clean_nb110"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\presentation\\reserving_model\\docs.yml\\accepted_values_actuarial_clai_d593b2ced48ceef423fd99f2fea9eb1e.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "accepted_values_actuarial_clai_d593b2ced48ceef423fd99f2fea9eb1e"}, "created_at": 1701786801.6945891, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        reinsurance_type as value_field,\n        count(*) as n_records\n\n    from \"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_claim_movement_clean_nb110\"\n    group by reinsurance_type\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'XOL','QS','FAC','Gross'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "reinsurance_type", "file_key_name": "models.actuarial_claim_movement_clean_nb110"}, "test.iginsure.accepted_values_actuarial_claim_movement_clean_nb110_amount_type__OS__Paid.41264baef0": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["OS", "Paid"], "column_name": "amount_type", "model": "{{ get_where_subquery(ref('actuarial_claim_movement_clean_nb110')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.iginsure.actuarial_claim_movement_clean_nb110"]}, "config": {"enabled": true, "alias": "accepted_values_actuarial_clai_1acad395524177e1b663c11823d4540e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "presentation", "reserving_model", "accepted_values_actuarial_claim_movement_clean_nb110_amount_type__OS__Paid"], "unique_id": "test.iginsure.accepted_values_actuarial_claim_movement_clean_nb110_amount_type__OS__Paid.41264baef0", "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_actuarial_clai_1acad395524177e1b663c11823d4540e\") }}", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "accepted_values_actuarial_clai_1acad395524177e1b663c11823d4540e.sql", "original_file_path": "models\\presentation\\reserving_model\\docs.yml", "name": "accepted_values_actuarial_claim_movement_clean_nb110_amount_type__OS__Paid", "alias": "accepted_values_actuarial_clai_1acad395524177e1b663c11823d4540e", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["actuarial_claim_movement_clean_nb110"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\presentation\\reserving_model\\docs.yml\\accepted_values_actuarial_clai_1acad395524177e1b663c11823d4540e.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "accepted_values_actuarial_clai_1acad395524177e1b663c11823d4540e"}, "created_at": 1701786801.7046905, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        amount_type as value_field,\n        count(*) as n_records\n\n    from \"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_claim_movement_clean_nb110\"\n    group by amount_type\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'OS','Paid'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "amount_type", "file_key_name": "models.actuarial_claim_movement_clean_nb110"}, "test.iginsure.not_null_actuarial_claim_movement_gre_agg_movement_duration_dur_inception_to_movement.a6cc232fda": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "dur_inception_to_movement", "model": "{{ get_where_subquery(ref('actuarial_claim_movement_gre_agg_movement_duration')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.iginsure.actuarial_claim_movement_gre_agg_movement_duration"]}, "config": {"enabled": true, "alias": "not_null_actuarial_claim_movem_6c18ccdd1aa196eca0bb77dc2d3a7baf", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "presentation", "reserving_model", "not_null_actuarial_claim_movement_gre_agg_movement_duration_dur_inception_to_movement"], "unique_id": "test.iginsure.not_null_actuarial_claim_movement_gre_agg_movement_duration_dur_inception_to_movement.a6cc232fda", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_actuarial_claim_movem_6c18ccdd1aa196eca0bb77dc2d3a7baf\") }}", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "not_null_actuarial_claim_movem_6c18ccdd1aa196eca0bb77dc2d3a7baf.sql", "original_file_path": "models\\presentation\\reserving_model\\docs.yml", "name": "not_null_actuarial_claim_movement_gre_agg_movement_duration_dur_inception_to_movement", "alias": "not_null_actuarial_claim_movem_6c18ccdd1aa196eca0bb77dc2d3a7baf", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["actuarial_claim_movement_gre_agg_movement_duration"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\presentation\\reserving_model\\docs.yml\\not_null_actuarial_claim_movem_6c18ccdd1aa196eca0bb77dc2d3a7baf.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_actuarial_claim_movem_6c18ccdd1aa196eca0bb77dc2d3a7baf"}, "created_at": 1701786801.7096963, "compiled_code": "\n    \n    \n\n\n\nselect dur_inception_to_movement\nfrom \"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_claim_movement_gre_agg_movement_duration\"\nwhere dur_inception_to_movement is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "dur_inception_to_movement", "file_key_name": "models.actuarial_claim_movement_gre_agg_movement_duration"}, "test.iginsure.is_greater_than_or_equal_to_actuarial_claim_movement_gre_agg_movement_duration_dur_inception_to_movement__0.9b267d3001": {"test_metadata": {"name": "is_greater_than_or_equal_to", "kwargs": {"value_or_expression": 0, "column_name": "dur_inception_to_movement", "model": "{{ get_where_subquery(ref('actuarial_claim_movement_gre_agg_movement_duration')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.iginsure.test_is_greater_than_or_equal_to", "macro.dbt.get_where_subquery"], "nodes": ["model.iginsure.actuarial_claim_movement_gre_agg_movement_duration"]}, "config": {"enabled": true, "alias": "is_greater_than_or_equal_to_ac_f37adf65c96b2ddccb09462cd5f52870", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "presentation", "reserving_model", "is_greater_than_or_equal_to_actuarial_claim_movement_gre_agg_movement_duration_dur_inception_to_movement__0"], "unique_id": "test.iginsure.is_greater_than_or_equal_to_actuarial_claim_movement_gre_agg_movement_duration_dur_inception_to_movement__0.9b267d3001", "raw_code": "{{ test_is_greater_than_or_equal_to(**_dbt_generic_test_kwargs) }}{{ config(alias=\"is_greater_than_or_equal_to_ac_f37adf65c96b2ddccb09462cd5f52870\") }}", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "is_greater_than_or_equal_to_ac_f37adf65c96b2ddccb09462cd5f52870.sql", "original_file_path": "models\\presentation\\reserving_model\\docs.yml", "name": "is_greater_than_or_equal_to_actuarial_claim_movement_gre_agg_movement_duration_dur_inception_to_movement__0", "alias": "is_greater_than_or_equal_to_ac_f37adf65c96b2ddccb09462cd5f52870", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["actuarial_claim_movement_gre_agg_movement_duration"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\presentation\\reserving_model\\docs.yml\\is_greater_than_or_equal_to_ac_f37adf65c96b2ddccb09462cd5f52870.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "is_greater_than_or_equal_to_ac_f37adf65c96b2ddccb09462cd5f52870"}, "created_at": 1701786801.7106943, "compiled_code": "\n\nselect * from \"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_claim_movement_gre_agg_movement_duration\"\nwhere dur_inception_to_movement < 0\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "dur_inception_to_movement", "file_key_name": "models.actuarial_claim_movement_gre_agg_movement_duration"}, "test.iginsure.not_null_actuarial_claim_movement_gre_agg_movement_duration_dur_inception_to_loss.dee7878a77": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "dur_inception_to_loss", "model": "{{ get_where_subquery(ref('actuarial_claim_movement_gre_agg_movement_duration')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.iginsure.actuarial_claim_movement_gre_agg_movement_duration"]}, "config": {"enabled": true, "alias": "not_null_actuarial_claim_movem_b4d4cf4b6db97ec199bffc8306880b96", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "presentation", "reserving_model", "not_null_actuarial_claim_movement_gre_agg_movement_duration_dur_inception_to_loss"], "unique_id": "test.iginsure.not_null_actuarial_claim_movement_gre_agg_movement_duration_dur_inception_to_loss.dee7878a77", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_actuarial_claim_movem_b4d4cf4b6db97ec199bffc8306880b96\") }}", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "not_null_actuarial_claim_movem_b4d4cf4b6db97ec199bffc8306880b96.sql", "original_file_path": "models\\presentation\\reserving_model\\docs.yml", "name": "not_null_actuarial_claim_movement_gre_agg_movement_duration_dur_inception_to_loss", "alias": "not_null_actuarial_claim_movem_b4d4cf4b6db97ec199bffc8306880b96", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["actuarial_claim_movement_gre_agg_movement_duration"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\presentation\\reserving_model\\docs.yml\\not_null_actuarial_claim_movem_b4d4cf4b6db97ec199bffc8306880b96.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_actuarial_claim_movem_b4d4cf4b6db97ec199bffc8306880b96"}, "created_at": 1701786801.713694, "compiled_code": "\n    \n    \n\n\n\nselect dur_inception_to_loss\nfrom \"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_claim_movement_gre_agg_movement_duration\"\nwhere dur_inception_to_loss is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "dur_inception_to_loss", "file_key_name": "models.actuarial_claim_movement_gre_agg_movement_duration"}, "test.iginsure.not_null_actuarial_claim_movement_gre_agg_movement_duration_dur_inception_to_loss_claims_made.c532fac9f8": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "dur_inception_to_loss_claims_made", "model": "{{ get_where_subquery(ref('actuarial_claim_movement_gre_agg_movement_duration')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.iginsure.actuarial_claim_movement_gre_agg_movement_duration"]}, "config": {"enabled": true, "alias": "not_null_actuarial_claim_movem_12bf474f208c8224f420c1d45d96caa8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "presentation", "reserving_model", "not_null_actuarial_claim_movement_gre_agg_movement_duration_dur_inception_to_loss_claims_made"], "unique_id": "test.iginsure.not_null_actuarial_claim_movement_gre_agg_movement_duration_dur_inception_to_loss_claims_made.c532fac9f8", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_actuarial_claim_movem_12bf474f208c8224f420c1d45d96caa8\") }}", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "not_null_actuarial_claim_movem_12bf474f208c8224f420c1d45d96caa8.sql", "original_file_path": "models\\presentation\\reserving_model\\docs.yml", "name": "not_null_actuarial_claim_movement_gre_agg_movement_duration_dur_inception_to_loss_claims_made", "alias": "not_null_actuarial_claim_movem_12bf474f208c8224f420c1d45d96caa8", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["actuarial_claim_movement_gre_agg_movement_duration"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\presentation\\reserving_model\\docs.yml\\not_null_actuarial_claim_movem_12bf474f208c8224f420c1d45d96caa8.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_actuarial_claim_movem_12bf474f208c8224f420c1d45d96caa8"}, "created_at": 1701786801.7146938, "compiled_code": "\n    \n    \n\n\n\nselect dur_inception_to_loss_claims_made\nfrom \"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_claim_movement_gre_agg_movement_duration\"\nwhere dur_inception_to_loss_claims_made is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "dur_inception_to_loss_claims_made", "file_key_name": "models.actuarial_claim_movement_gre_agg_movement_duration"}, "test.iginsure.not_null_actuarial_claim_movement_gre_agg_movement_duration_dur_loss_to_reported.b98d184fa2": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "dur_loss_to_reported", "model": "{{ get_where_subquery(ref('actuarial_claim_movement_gre_agg_movement_duration')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.iginsure.actuarial_claim_movement_gre_agg_movement_duration"]}, "config": {"enabled": true, "alias": "not_null_actuarial_claim_movem_385e30702be474fe3a86ce836f245bcb", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "presentation", "reserving_model", "not_null_actuarial_claim_movement_gre_agg_movement_duration_dur_loss_to_reported"], "unique_id": "test.iginsure.not_null_actuarial_claim_movement_gre_agg_movement_duration_dur_loss_to_reported.b98d184fa2", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_actuarial_claim_movem_385e30702be474fe3a86ce836f245bcb\") }}", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "not_null_actuarial_claim_movem_385e30702be474fe3a86ce836f245bcb.sql", "original_file_path": "models\\presentation\\reserving_model\\docs.yml", "name": "not_null_actuarial_claim_movement_gre_agg_movement_duration_dur_loss_to_reported", "alias": "not_null_actuarial_claim_movem_385e30702be474fe3a86ce836f245bcb", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["actuarial_claim_movement_gre_agg_movement_duration"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\presentation\\reserving_model\\docs.yml\\not_null_actuarial_claim_movem_385e30702be474fe3a86ce836f245bcb.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_actuarial_claim_movem_385e30702be474fe3a86ce836f245bcb"}, "created_at": 1701786801.7156937, "compiled_code": "\n    \n    \n\n\n\nselect dur_loss_to_reported\nfrom \"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_claim_movement_gre_agg_movement_duration\"\nwhere dur_loss_to_reported is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "dur_loss_to_reported", "file_key_name": "models.actuarial_claim_movement_gre_agg_movement_duration"}, "test.iginsure.not_null_actuarial_claim_movement_gre_agg_movement_duration_dur_loss_claims_made_to_reported.13ae7be5ab": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "dur_loss_claims_made_to_reported", "model": "{{ get_where_subquery(ref('actuarial_claim_movement_gre_agg_movement_duration')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.iginsure.actuarial_claim_movement_gre_agg_movement_duration"]}, "config": {"enabled": true, "alias": "not_null_actuarial_claim_movem_8dcdedaf099a62e0319b01b196663a79", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "presentation", "reserving_model", "not_null_actuarial_claim_movement_gre_agg_movement_duration_dur_loss_claims_made_to_reported"], "unique_id": "test.iginsure.not_null_actuarial_claim_movement_gre_agg_movement_duration_dur_loss_claims_made_to_reported.13ae7be5ab", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_actuarial_claim_movem_8dcdedaf099a62e0319b01b196663a79\") }}", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "not_null_actuarial_claim_movem_8dcdedaf099a62e0319b01b196663a79.sql", "original_file_path": "models\\presentation\\reserving_model\\docs.yml", "name": "not_null_actuarial_claim_movement_gre_agg_movement_duration_dur_loss_claims_made_to_reported", "alias": "not_null_actuarial_claim_movem_8dcdedaf099a62e0319b01b196663a79", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["actuarial_claim_movement_gre_agg_movement_duration"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\presentation\\reserving_model\\docs.yml\\not_null_actuarial_claim_movem_8dcdedaf099a62e0319b01b196663a79.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_actuarial_claim_movem_8dcdedaf099a62e0319b01b196663a79"}, "created_at": 1701786801.7198675, "compiled_code": "\n    \n    \n\n\n\nselect dur_loss_claims_made_to_reported\nfrom \"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_claim_movement_gre_agg_movement_duration\"\nwhere dur_loss_claims_made_to_reported is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "dur_loss_claims_made_to_reported", "file_key_name": "models.actuarial_claim_movement_gre_agg_movement_duration"}, "test.iginsure.not_null_actuarial_claim_movement_gre_agg_movement_duration_current_amount_usd_sum.a5bb4e4c0d": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "current_amount_usd_sum", "model": "{{ get_where_subquery(ref('actuarial_claim_movement_gre_agg_movement_duration')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.iginsure.actuarial_claim_movement_gre_agg_movement_duration"]}, "config": {"enabled": true, "alias": "not_null_actuarial_claim_movem_c69c806ad78c74a64ad69de77e5c8187", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "presentation", "reserving_model", "not_null_actuarial_claim_movement_gre_agg_movement_duration_current_amount_usd_sum"], "unique_id": "test.iginsure.not_null_actuarial_claim_movement_gre_agg_movement_duration_current_amount_usd_sum.a5bb4e4c0d", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_actuarial_claim_movem_c69c806ad78c74a64ad69de77e5c8187\") }}", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "not_null_actuarial_claim_movem_c69c806ad78c74a64ad69de77e5c8187.sql", "original_file_path": "models\\presentation\\reserving_model\\docs.yml", "name": "not_null_actuarial_claim_movement_gre_agg_movement_duration_current_amount_usd_sum", "alias": "not_null_actuarial_claim_movem_c69c806ad78c74a64ad69de77e5c8187", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["actuarial_claim_movement_gre_agg_movement_duration"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\presentation\\reserving_model\\docs.yml\\not_null_actuarial_claim_movem_c69c806ad78c74a64ad69de77e5c8187.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_actuarial_claim_movem_c69c806ad78c74a64ad69de77e5c8187"}, "created_at": 1701786801.7228665, "compiled_code": "\n    \n    \n\n\n\nselect current_amount_usd_sum\nfrom \"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_claim_movement_gre_agg_movement_duration\"\nwhere current_amount_usd_sum is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "current_amount_usd_sum", "file_key_name": "models.actuarial_claim_movement_gre_agg_movement_duration"}, "test.iginsure.not_null_actuarial_claim_movement_gre_agg_movement_duration_historical_amount_usd_sum.ff7953a709": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "historical_amount_usd_sum", "model": "{{ get_where_subquery(ref('actuarial_claim_movement_gre_agg_movement_duration')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.iginsure.actuarial_claim_movement_gre_agg_movement_duration"]}, "config": {"enabled": true, "alias": "not_null_actuarial_claim_movem_3ee2ececf90334adb02138a9f303064d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "presentation", "reserving_model", "not_null_actuarial_claim_movement_gre_agg_movement_duration_historical_amount_usd_sum"], "unique_id": "test.iginsure.not_null_actuarial_claim_movement_gre_agg_movement_duration_historical_amount_usd_sum.ff7953a709", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_actuarial_claim_movem_3ee2ececf90334adb02138a9f303064d\") }}", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "not_null_actuarial_claim_movem_3ee2ececf90334adb02138a9f303064d.sql", "original_file_path": "models\\presentation\\reserving_model\\docs.yml", "name": "not_null_actuarial_claim_movement_gre_agg_movement_duration_historical_amount_usd_sum", "alias": "not_null_actuarial_claim_movem_3ee2ececf90334adb02138a9f303064d", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["actuarial_claim_movement_gre_agg_movement_duration"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\presentation\\reserving_model\\docs.yml\\not_null_actuarial_claim_movem_3ee2ececf90334adb02138a9f303064d.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_actuarial_claim_movem_3ee2ececf90334adb02138a9f303064d"}, "created_at": 1701786801.7238712, "compiled_code": "\n    \n    \n\n\n\nselect historical_amount_usd_sum\nfrom \"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_claim_movement_gre_agg_movement_duration\"\nwhere historical_amount_usd_sum is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "historical_amount_usd_sum", "file_key_name": "models.actuarial_claim_movement_gre_agg_movement_duration"}, "test.iginsure.table_contains_resevol_required_columns_actuarial_claim_movement_gre_agg_movement_duration_.0c4f872cbe": {"test_metadata": {"name": "table_contains_resevol_required_columns", "kwargs": {"model": "{{ get_where_subquery(ref('actuarial_claim_movement_gre_agg_movement_duration')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.iginsure.test_table_contains_resevol_required_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.iginsure.actuarial_claim_movement_gre_agg_movement_duration"]}, "config": {"enabled": false, "alias": "table_contains_resevol_require_734e03256a50a8e1f88bc5244dea82bd", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "presentation", "reserving_model", "table_contains_resevol_required_columns_actuarial_claim_movement_gre_agg_movement_duration_"], "unique_id": "test.iginsure.table_contains_resevol_required_columns_actuarial_claim_movement_gre_agg_movement_duration_.0c4f872cbe", "raw_code": "{{ test_table_contains_resevol_required_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"table_contains_resevol_require_734e03256a50a8e1f88bc5244dea82bd\") }}", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "table_contains_resevol_require_734e03256a50a8e1f88bc5244dea82bd.sql", "original_file_path": "models\\presentation\\reserving_model\\docs.yml", "name": "table_contains_resevol_required_columns_actuarial_claim_movement_gre_agg_movement_duration_", "alias": "table_contains_resevol_require_734e03256a50a8e1f88bc5244dea82bd", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["actuarial_claim_movement_gre_agg_movement_duration"], ["resevol_required_columns"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "table_contains_resevol_require_734e03256a50a8e1f88bc5244dea82bd"}, "created_at": 1701786801.7248664, "column_name": null, "file_key_name": "models.actuarial_claim_movement_gre_agg_movement_duration"}, "test.iginsure.not_null_actuarial_claim_movement_nre_agg_movement_duration_dur_inception_to_movement.9a7d9b4515": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "dur_inception_to_movement", "model": "{{ get_where_subquery(ref('actuarial_claim_movement_nre_agg_movement_duration')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.iginsure.actuarial_claim_movement_nre_agg_movement_duration"]}, "config": {"enabled": true, "alias": "not_null_actuarial_claim_movem_695df5d2bf8e47a4d84d8c3a38c8a11f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "presentation", "reserving_model", "not_null_actuarial_claim_movement_nre_agg_movement_duration_dur_inception_to_movement"], "unique_id": "test.iginsure.not_null_actuarial_claim_movement_nre_agg_movement_duration_dur_inception_to_movement.9a7d9b4515", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_actuarial_claim_movem_695df5d2bf8e47a4d84d8c3a38c8a11f\") }}", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "not_null_actuarial_claim_movem_695df5d2bf8e47a4d84d8c3a38c8a11f.sql", "original_file_path": "models\\presentation\\reserving_model\\docs.yml", "name": "not_null_actuarial_claim_movement_nre_agg_movement_duration_dur_inception_to_movement", "alias": "not_null_actuarial_claim_movem_695df5d2bf8e47a4d84d8c3a38c8a11f", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["actuarial_claim_movement_nre_agg_movement_duration"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\presentation\\reserving_model\\docs.yml\\not_null_actuarial_claim_movem_695df5d2bf8e47a4d84d8c3a38c8a11f.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_actuarial_claim_movem_695df5d2bf8e47a4d84d8c3a38c8a11f"}, "created_at": 1701786801.7288663, "compiled_code": "\n    \n    \n\n\n\nselect dur_inception_to_movement\nfrom \"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_claim_movement_nre_agg_movement_duration\"\nwhere dur_inception_to_movement is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "dur_inception_to_movement", "file_key_name": "models.actuarial_claim_movement_nre_agg_movement_duration"}, "test.iginsure.is_greater_than_or_equal_to_actuarial_claim_movement_nre_agg_movement_duration_dur_inception_to_movement__0.15594da3a2": {"test_metadata": {"name": "is_greater_than_or_equal_to", "kwargs": {"value_or_expression": 0, "column_name": "dur_inception_to_movement", "model": "{{ get_where_subquery(ref('actuarial_claim_movement_nre_agg_movement_duration')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.iginsure.test_is_greater_than_or_equal_to", "macro.dbt.get_where_subquery"], "nodes": ["model.iginsure.actuarial_claim_movement_nre_agg_movement_duration"]}, "config": {"enabled": true, "alias": "is_greater_than_or_equal_to_ac_ef7cdeedb3cf578b8f48827db331ebbf", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "presentation", "reserving_model", "is_greater_than_or_equal_to_actuarial_claim_movement_nre_agg_movement_duration_dur_inception_to_movement__0"], "unique_id": "test.iginsure.is_greater_than_or_equal_to_actuarial_claim_movement_nre_agg_movement_duration_dur_inception_to_movement__0.15594da3a2", "raw_code": "{{ test_is_greater_than_or_equal_to(**_dbt_generic_test_kwargs) }}{{ config(alias=\"is_greater_than_or_equal_to_ac_ef7cdeedb3cf578b8f48827db331ebbf\") }}", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "is_greater_than_or_equal_to_ac_ef7cdeedb3cf578b8f48827db331ebbf.sql", "original_file_path": "models\\presentation\\reserving_model\\docs.yml", "name": "is_greater_than_or_equal_to_actuarial_claim_movement_nre_agg_movement_duration_dur_inception_to_movement__0", "alias": "is_greater_than_or_equal_to_ac_ef7cdeedb3cf578b8f48827db331ebbf", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["actuarial_claim_movement_nre_agg_movement_duration"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\presentation\\reserving_model\\docs.yml\\is_greater_than_or_equal_to_ac_ef7cdeedb3cf578b8f48827db331ebbf.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "is_greater_than_or_equal_to_ac_ef7cdeedb3cf578b8f48827db331ebbf"}, "created_at": 1701786801.730916, "compiled_code": "\n\nselect * from \"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_claim_movement_nre_agg_movement_duration\"\nwhere dur_inception_to_movement < 0\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "dur_inception_to_movement", "file_key_name": "models.actuarial_claim_movement_nre_agg_movement_duration"}, "test.iginsure.not_null_actuarial_claim_movement_nre_agg_movement_duration_dur_inception_to_loss.04e0e879e0": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "dur_inception_to_loss", "model": "{{ get_where_subquery(ref('actuarial_claim_movement_nre_agg_movement_duration')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.iginsure.actuarial_claim_movement_nre_agg_movement_duration"]}, "config": {"enabled": true, "alias": "not_null_actuarial_claim_movem_74ef5ef7221e27c7aa67f39c4245576b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "presentation", "reserving_model", "not_null_actuarial_claim_movement_nre_agg_movement_duration_dur_inception_to_loss"], "unique_id": "test.iginsure.not_null_actuarial_claim_movement_nre_agg_movement_duration_dur_inception_to_loss.04e0e879e0", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_actuarial_claim_movem_74ef5ef7221e27c7aa67f39c4245576b\") }}", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "not_null_actuarial_claim_movem_74ef5ef7221e27c7aa67f39c4245576b.sql", "original_file_path": "models\\presentation\\reserving_model\\docs.yml", "name": "not_null_actuarial_claim_movement_nre_agg_movement_duration_dur_inception_to_loss", "alias": "not_null_actuarial_claim_movem_74ef5ef7221e27c7aa67f39c4245576b", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["actuarial_claim_movement_nre_agg_movement_duration"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\presentation\\reserving_model\\docs.yml\\not_null_actuarial_claim_movem_74ef5ef7221e27c7aa67f39c4245576b.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_actuarial_claim_movem_74ef5ef7221e27c7aa67f39c4245576b"}, "created_at": 1701786801.7356443, "compiled_code": "\n    \n    \n\n\n\nselect dur_inception_to_loss\nfrom \"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_claim_movement_nre_agg_movement_duration\"\nwhere dur_inception_to_loss is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "dur_inception_to_loss", "file_key_name": "models.actuarial_claim_movement_nre_agg_movement_duration"}, "test.iginsure.not_null_actuarial_claim_movement_nre_agg_movement_duration_dur_inception_to_loss_claims_made.5d59d313a3": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "dur_inception_to_loss_claims_made", "model": "{{ get_where_subquery(ref('actuarial_claim_movement_nre_agg_movement_duration')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.iginsure.actuarial_claim_movement_nre_agg_movement_duration"]}, "config": {"enabled": true, "alias": "not_null_actuarial_claim_movem_55e16806cf857a2b44e65976648c57c0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "presentation", "reserving_model", "not_null_actuarial_claim_movement_nre_agg_movement_duration_dur_inception_to_loss_claims_made"], "unique_id": "test.iginsure.not_null_actuarial_claim_movement_nre_agg_movement_duration_dur_inception_to_loss_claims_made.5d59d313a3", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_actuarial_claim_movem_55e16806cf857a2b44e65976648c57c0\") }}", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "not_null_actuarial_claim_movem_55e16806cf857a2b44e65976648c57c0.sql", "original_file_path": "models\\presentation\\reserving_model\\docs.yml", "name": "not_null_actuarial_claim_movement_nre_agg_movement_duration_dur_inception_to_loss_claims_made", "alias": "not_null_actuarial_claim_movem_55e16806cf857a2b44e65976648c57c0", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["actuarial_claim_movement_nre_agg_movement_duration"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\presentation\\reserving_model\\docs.yml\\not_null_actuarial_claim_movem_55e16806cf857a2b44e65976648c57c0.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_actuarial_claim_movem_55e16806cf857a2b44e65976648c57c0"}, "created_at": 1701786801.7377772, "compiled_code": "\n    \n    \n\n\n\nselect dur_inception_to_loss_claims_made\nfrom \"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_claim_movement_nre_agg_movement_duration\"\nwhere dur_inception_to_loss_claims_made is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "dur_inception_to_loss_claims_made", "file_key_name": "models.actuarial_claim_movement_nre_agg_movement_duration"}, "test.iginsure.not_null_actuarial_claim_movement_nre_agg_movement_duration_dur_loss_to_reported.511320386a": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "dur_loss_to_reported", "model": "{{ get_where_subquery(ref('actuarial_claim_movement_nre_agg_movement_duration')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.iginsure.actuarial_claim_movement_nre_agg_movement_duration"]}, "config": {"enabled": true, "alias": "not_null_actuarial_claim_movem_4c307d402731248d1ef987dc8d102ed9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "presentation", "reserving_model", "not_null_actuarial_claim_movement_nre_agg_movement_duration_dur_loss_to_reported"], "unique_id": "test.iginsure.not_null_actuarial_claim_movement_nre_agg_movement_duration_dur_loss_to_reported.511320386a", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_actuarial_claim_movem_4c307d402731248d1ef987dc8d102ed9\") }}", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "not_null_actuarial_claim_movem_4c307d402731248d1ef987dc8d102ed9.sql", "original_file_path": "models\\presentation\\reserving_model\\docs.yml", "name": "not_null_actuarial_claim_movement_nre_agg_movement_duration_dur_loss_to_reported", "alias": "not_null_actuarial_claim_movem_4c307d402731248d1ef987dc8d102ed9", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["actuarial_claim_movement_nre_agg_movement_duration"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\presentation\\reserving_model\\docs.yml\\not_null_actuarial_claim_movem_4c307d402731248d1ef987dc8d102ed9.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_actuarial_claim_movem_4c307d402731248d1ef987dc8d102ed9"}, "created_at": 1701786801.7397926, "compiled_code": "\n    \n    \n\n\n\nselect dur_loss_to_reported\nfrom \"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_claim_movement_nre_agg_movement_duration\"\nwhere dur_loss_to_reported is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "dur_loss_to_reported", "file_key_name": "models.actuarial_claim_movement_nre_agg_movement_duration"}, "test.iginsure.not_null_actuarial_claim_movement_nre_agg_movement_duration_dur_loss_claims_made_to_reported.31905ba313": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "dur_loss_claims_made_to_reported", "model": "{{ get_where_subquery(ref('actuarial_claim_movement_nre_agg_movement_duration')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.iginsure.actuarial_claim_movement_nre_agg_movement_duration"]}, "config": {"enabled": true, "alias": "not_null_actuarial_claim_movem_af6fc7a7d7c0737a276e296efaeecdca", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "presentation", "reserving_model", "not_null_actuarial_claim_movement_nre_agg_movement_duration_dur_loss_claims_made_to_reported"], "unique_id": "test.iginsure.not_null_actuarial_claim_movement_nre_agg_movement_duration_dur_loss_claims_made_to_reported.31905ba313", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_actuarial_claim_movem_af6fc7a7d7c0737a276e296efaeecdca\") }}", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "not_null_actuarial_claim_movem_af6fc7a7d7c0737a276e296efaeecdca.sql", "original_file_path": "models\\presentation\\reserving_model\\docs.yml", "name": "not_null_actuarial_claim_movement_nre_agg_movement_duration_dur_loss_claims_made_to_reported", "alias": "not_null_actuarial_claim_movem_af6fc7a7d7c0737a276e296efaeecdca", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["actuarial_claim_movement_nre_agg_movement_duration"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\presentation\\reserving_model\\docs.yml\\not_null_actuarial_claim_movem_af6fc7a7d7c0737a276e296efaeecdca.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_actuarial_claim_movem_af6fc7a7d7c0737a276e296efaeecdca"}, "created_at": 1701786801.7417812, "compiled_code": "\n    \n    \n\n\n\nselect dur_loss_claims_made_to_reported\nfrom \"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_claim_movement_nre_agg_movement_duration\"\nwhere dur_loss_claims_made_to_reported is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "dur_loss_claims_made_to_reported", "file_key_name": "models.actuarial_claim_movement_nre_agg_movement_duration"}, "test.iginsure.not_null_actuarial_claim_movement_nre_agg_movement_duration_current_amount_usd_sum.6e8dc4a8c0": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "current_amount_usd_sum", "model": "{{ get_where_subquery(ref('actuarial_claim_movement_nre_agg_movement_duration')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.iginsure.actuarial_claim_movement_nre_agg_movement_duration"]}, "config": {"enabled": true, "alias": "not_null_actuarial_claim_movem_283fe8f90248cd52936782c7ac85f859", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "presentation", "reserving_model", "not_null_actuarial_claim_movement_nre_agg_movement_duration_current_amount_usd_sum"], "unique_id": "test.iginsure.not_null_actuarial_claim_movement_nre_agg_movement_duration_current_amount_usd_sum.6e8dc4a8c0", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_actuarial_claim_movem_283fe8f90248cd52936782c7ac85f859\") }}", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "not_null_actuarial_claim_movem_283fe8f90248cd52936782c7ac85f859.sql", "original_file_path": "models\\presentation\\reserving_model\\docs.yml", "name": "not_null_actuarial_claim_movement_nre_agg_movement_duration_current_amount_usd_sum", "alias": "not_null_actuarial_claim_movem_283fe8f90248cd52936782c7ac85f859", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["actuarial_claim_movement_nre_agg_movement_duration"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\presentation\\reserving_model\\docs.yml\\not_null_actuarial_claim_movem_283fe8f90248cd52936782c7ac85f859.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_actuarial_claim_movem_283fe8f90248cd52936782c7ac85f859"}, "created_at": 1701786801.7437801, "compiled_code": "\n    \n    \n\n\n\nselect current_amount_usd_sum\nfrom \"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_claim_movement_nre_agg_movement_duration\"\nwhere current_amount_usd_sum is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "current_amount_usd_sum", "file_key_name": "models.actuarial_claim_movement_nre_agg_movement_duration"}, "test.iginsure.not_null_actuarial_claim_movement_nre_agg_movement_duration_historical_amount_usd_sum.98c780fe7b": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "historical_amount_usd_sum", "model": "{{ get_where_subquery(ref('actuarial_claim_movement_nre_agg_movement_duration')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.iginsure.actuarial_claim_movement_nre_agg_movement_duration"]}, "config": {"enabled": true, "alias": "not_null_actuarial_claim_movem_20005d52e7ffce219b1bc87ac631c7c4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "presentation", "reserving_model", "not_null_actuarial_claim_movement_nre_agg_movement_duration_historical_amount_usd_sum"], "unique_id": "test.iginsure.not_null_actuarial_claim_movement_nre_agg_movement_duration_historical_amount_usd_sum.98c780fe7b", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_actuarial_claim_movem_20005d52e7ffce219b1bc87ac631c7c4\") }}", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "not_null_actuarial_claim_movem_20005d52e7ffce219b1bc87ac631c7c4.sql", "original_file_path": "models\\presentation\\reserving_model\\docs.yml", "name": "not_null_actuarial_claim_movement_nre_agg_movement_duration_historical_amount_usd_sum", "alias": "not_null_actuarial_claim_movem_20005d52e7ffce219b1bc87ac631c7c4", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["actuarial_claim_movement_nre_agg_movement_duration"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\iginsure\\models\\presentation\\reserving_model\\docs.yml\\not_null_actuarial_claim_movem_20005d52e7ffce219b1bc87ac631c7c4.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_actuarial_claim_movem_20005d52e7ffce219b1bc87ac631c7c4"}, "created_at": 1701786801.7447803, "compiled_code": "\n    \n    \n\n\n\nselect historical_amount_usd_sum\nfrom \"IGI_PROD_DW\".\"dbt_dev\".\"actuarial_claim_movement_nre_agg_movement_duration\"\nwhere historical_amount_usd_sum is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "historical_amount_usd_sum", "file_key_name": "models.actuarial_claim_movement_nre_agg_movement_duration"}, "test.iginsure.table_contains_resevol_required_columns_actuarial_claim_movement_nre_agg_movement_duration_.47cf34c92b": {"test_metadata": {"name": "table_contains_resevol_required_columns", "kwargs": {"model": "{{ get_where_subquery(ref('actuarial_claim_movement_nre_agg_movement_duration')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.iginsure.test_table_contains_resevol_required_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.iginsure.actuarial_claim_movement_nre_agg_movement_duration"]}, "config": {"enabled": false, "alias": "table_contains_resevol_require_306ec28d15b417d08c55708e87fca0e9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "IGI_PROD_DW", "schema": "dbt_dev", "fqn": ["iginsure", "presentation", "reserving_model", "table_contains_resevol_required_columns_actuarial_claim_movement_nre_agg_movement_duration_"], "unique_id": "test.iginsure.table_contains_resevol_required_columns_actuarial_claim_movement_nre_agg_movement_duration_.47cf34c92b", "raw_code": "{{ test_table_contains_resevol_required_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"table_contains_resevol_require_306ec28d15b417d08c55708e87fca0e9\") }}", "language": "sql", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "table_contains_resevol_require_306ec28d15b417d08c55708e87fca0e9.sql", "original_file_path": "models\\presentation\\reserving_model\\docs.yml", "name": "table_contains_resevol_required_columns_actuarial_claim_movement_nre_agg_movement_duration_", "alias": "table_contains_resevol_require_306ec28d15b417d08c55708e87fca0e9", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["actuarial_claim_movement_nre_agg_movement_duration"], ["resevol_required_columns"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "table_contains_resevol_require_306ec28d15b417d08c55708e87fca0e9"}, "created_at": 1701786801.7457802, "column_name": null, "file_key_name": "models.actuarial_claim_movement_nre_agg_movement_duration"}}, "sources": {"source.iginsure.dbo.budget_testing": {"fqn": ["iginsure", "sources", "dbo", "budget_testing"], "database": "IGI_BI", "schema": "dbo", "unique_id": "source.iginsure.dbo.budget_testing", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "models\\sources\\bi_dbo.yml", "original_file_path": "models\\sources\\bi_dbo.yml", "name": "budget_testing", "source_name": "dbo", "source_description": "Main source schema for BI database", "loader": "", "identifier": "BudgetTesting", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "The enum of budget (monthly)\n", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"IGI_BI\".\"dbo\".\"BudgetTesting\"", "created_at": 1701786801.9453192}, "source.iginsure.dbo.configurations": {"fqn": ["iginsure", "sources", "dbo", "configurations"], "database": "IGI_BI", "schema": "dbo", "unique_id": "source.iginsure.dbo.configurations", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "models\\sources\\bi_dbo.yml", "original_file_path": "models\\sources\\bi_dbo.yml", "name": "configurations", "source_name": "dbo", "source_description": "Main source schema for BI database", "loader": "", "identifier": "Configurations", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "BI configurations", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"IGI_BI\".\"dbo\".\"Configurations\"", "created_at": 1701786801.9453192}, "source.iginsure.dbo.budget": {"fqn": ["iginsure", "sources", "dbo", "budget"], "database": "IGI_PROD_DW", "schema": "dbo", "unique_id": "source.iginsure.dbo.budget", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "models\\sources\\dbo.yml", "original_file_path": "models\\sources\\dbo.yml", "name": "budget", "source_name": "dbo", "source_description": "Main source schema for transactional database", "loader": "", "identifier": "budget", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Table that contains the up to date budget figures\n", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["budget"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"IGI_PROD_DW\".\"dbo\".\"budget\"", "created_at": 1701786801.9453192}, "source.iginsure.dbo.claimgrouplinkedclaims": {"fqn": ["iginsure", "sources", "dbo", "claimgrouplinkedclaims"], "database": "IGI_PROD_DW", "schema": "dbo", "unique_id": "source.iginsure.dbo.claimgrouplinkedclaims", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "models\\sources\\dbo.yml", "original_file_path": "models\\sources\\dbo.yml", "name": "claimgrouplinkedclaims", "source_name": "dbo", "source_description": "Main source schema for transactional database", "loader": "", "identifier": "claimgrouplinkedclaims", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Table for getting the child\\parent claim linkage\n", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["Claims"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"IGI_PROD_DW\".\"dbo\".\"claimgrouplinkedclaims\"", "created_at": 1701786801.9453192}, "source.iginsure.dbo.ClaimsASAT": {"fqn": ["iginsure", "sources", "dbo", "ClaimsASAT"], "database": "IGI_PROD_DW", "schema": "dbo", "unique_id": "source.iginsure.dbo.ClaimsASAT", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "models\\sources\\dbo.yml", "original_file_path": "models\\sources\\dbo.yml", "name": "ClaimsASAT", "source_name": "dbo", "source_description": "Main source schema for transactional database", "loader": "", "identifier": "ClaimsASAT", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "The table for getting Claims ASAT figures \n", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["Claims"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"IGI_PROD_DW\".\"dbo\".\"ClaimsASAT\"", "created_at": 1701786801.9453192}, "source.iginsure.dbo.product": {"fqn": ["iginsure", "sources", "dbo", "product"], "database": "IGI_PROD_DW", "schema": "dbo", "unique_id": "source.iginsure.dbo.product", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "models\\sources\\dbo.yml", "original_file_path": "models\\sources\\dbo.yml", "name": "product", "source_name": "dbo", "source_description": "Main source schema for transactional database", "loader": "", "identifier": "PRODUCT", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "The enum of policy products\n", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["InwardPremium"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"IGI_PROD_DW\".\"dbo\".\"PRODUCT\"", "created_at": 1701786801.9453192}, "source.iginsure.dbo.entity_instance_states": {"fqn": ["iginsure", "sources", "dbo", "entity_instance_states"], "database": "IGI_PROD_DW", "schema": "dbo", "unique_id": "source.iginsure.dbo.entity_instance_states", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "models\\sources\\dbo.yml", "original_file_path": "models\\sources\\dbo.yml", "name": "entity_instance_states", "source_name": "dbo", "source_description": "Main source schema for transactional database", "loader": "", "identifier": "EntityInstanceStates", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "The enum of entity instance states???\n", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["InwardPremium"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"IGI_PROD_DW\".\"dbo\".\"EntityInstanceStates\"", "created_at": 1701786801.9453192}, "source.iginsure.dbo.auditrows": {"fqn": ["iginsure", "sources", "dbo", "auditrows"], "database": "IGI_PROD_DW", "schema": "dbo", "unique_id": "source.iginsure.dbo.auditrows", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "models\\sources\\dbo.yml", "original_file_path": "models\\sources\\dbo.yml", "name": "auditrows", "source_name": "dbo", "source_description": "Main source schema for transactional database", "loader": "", "identifier": "auditrows", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["InwardPremium"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"IGI_PROD_DW\".\"dbo\".\"auditrows\"", "created_at": 1701786801.9453192}, "source.iginsure.dbo.auditheader": {"fqn": ["iginsure", "sources", "dbo", "auditheader"], "database": "IGI_PROD_DW", "schema": "dbo", "unique_id": "source.iginsure.dbo.auditheader", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "models\\sources\\dbo.yml", "original_file_path": "models\\sources\\dbo.yml", "name": "auditheader", "source_name": "dbo", "source_description": "Main source schema for transactional database", "loader": "", "identifier": "auditheader", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["InwardPremium"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"IGI_PROD_DW\".\"dbo\".\"auditheader\"", "created_at": 1701786801.9453192}, "source.iginsure.dbo.auditcolumns": {"fqn": ["iginsure", "sources", "dbo", "auditcolumns"], "database": "IGI_PROD_DW", "schema": "dbo", "unique_id": "source.iginsure.dbo.auditcolumns", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "models\\sources\\dbo.yml", "original_file_path": "models\\sources\\dbo.yml", "name": "auditcolumns", "source_name": "dbo", "source_description": "Main source schema for transactional database", "loader": "", "identifier": "auditcolumns", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["InwardPremium"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"IGI_PROD_DW\".\"dbo\".\"auditcolumns\"", "created_at": 1701786801.9453192}, "source.iginsure.dbo.entity_state_members": {"fqn": ["iginsure", "sources", "dbo", "entity_state_members"], "database": "IGI_PROD_DW", "schema": "dbo", "unique_id": "source.iginsure.dbo.entity_state_members", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "models\\sources\\dbo.yml", "original_file_path": "models\\sources\\dbo.yml", "name": "entity_state_members", "source_name": "dbo", "source_description": "Main source schema for transactional database", "loader": "", "identifier": "ENTITYSTATEMEMBERS", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "The members of entity states???\n", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["InwardPremium"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"IGI_PROD_DW\".\"dbo\".\"ENTITYSTATEMEMBERS\"", "created_at": 1701786801.9453192}, "source.iginsure.dbo.entity_type": {"fqn": ["iginsure", "sources", "dbo", "entity_type"], "database": "IGI_PROD_DW", "schema": "dbo", "unique_id": "source.iginsure.dbo.entity_type", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "models\\sources\\dbo.yml", "original_file_path": "models\\sources\\dbo.yml", "name": "entity_type", "source_name": "dbo", "source_description": "Main source schema for transactional database", "loader": "", "identifier": "ENTITY", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Types of entities\n", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"IGI_PROD_DW\".\"dbo\".\"ENTITY\"", "created_at": 1701786801.9453192}, "source.iginsure.dbo.policy": {"fqn": ["iginsure", "sources", "dbo", "policy"], "database": "IGI_PROD_DW", "schema": "dbo", "unique_id": "source.iginsure.dbo.policy", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "models\\sources\\dbo.yml", "original_file_path": "models\\sources\\dbo.yml", "name": "policy", "source_name": "dbo", "source_description": "Main source schema for transactional database", "loader": "", "identifier": "Policy", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Policies\n", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["InwardPremium"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"IGI_PROD_DW\".\"dbo\".\"Policy\"", "created_at": 1701786801.9453192}, "source.iginsure.dbo.policy_activity": {"fqn": ["iginsure", "sources", "dbo", "policy_activity"], "database": "IGI_PROD_DW", "schema": "dbo", "unique_id": "source.iginsure.dbo.policy_activity", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "models\\sources\\dbo.yml", "original_file_path": "models\\sources\\dbo.yml", "name": "policy_activity", "source_name": "dbo", "source_description": "Main source schema for transactional database", "loader": "", "identifier": "PolicyActivity", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Policy activities\n", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["InwardPremium"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"IGI_PROD_DW\".\"dbo\".\"PolicyActivity\"", "created_at": 1701786801.9463196}, "source.iginsure.dbo.policy_line": {"fqn": ["iginsure", "sources", "dbo", "policy_line"], "database": "IGI_PROD_DW", "schema": "dbo", "unique_id": "source.iginsure.dbo.policy_line", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "models\\sources\\dbo.yml", "original_file_path": "models\\sources\\dbo.yml", "name": "policy_line", "source_name": "dbo", "source_description": "Main source schema for transactional database", "loader": "", "identifier": "PolicyLine", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Policy lines\n", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["InwardPremium"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"IGI_PROD_DW\".\"dbo\".\"PolicyLine\"", "created_at": 1701786801.9463196}, "source.iginsure.dbo.policy_section": {"fqn": ["iginsure", "sources", "dbo", "policy_section"], "database": "IGI_PROD_DW", "schema": "dbo", "unique_id": "source.iginsure.dbo.policy_section", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "models\\sources\\dbo.yml", "original_file_path": "models\\sources\\dbo.yml", "name": "policy_section", "source_name": "dbo", "source_description": "Main source schema for transactional database", "loader": "", "identifier": "PolicySection", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Policy sections\n", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["InwardPremium"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"IGI_PROD_DW\".\"dbo\".\"PolicySection\"", "created_at": 1701786801.9463196}, "source.iginsure.dbo.apr": {"fqn": ["iginsure", "sources", "dbo", "apr"], "database": "IGI_PROD_DW", "schema": "dbo", "unique_id": "source.iginsure.dbo.apr", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "models\\sources\\dbo.yml", "original_file_path": "models\\sources\\dbo.yml", "name": "apr", "source_name": "dbo", "source_description": "Main source schema for transactional database", "loader": "", "identifier": "AccountsPayableReceivable", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Transactions in and out\n", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["InwardPremium"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"IGI_PROD_DW\".\"dbo\".\"AccountsPayableReceivable\"", "created_at": 1701786801.9463196}, "source.iginsure.dbo.currency": {"fqn": ["iginsure", "sources", "dbo", "currency"], "database": "IGI_PROD_DW", "schema": "dbo", "unique_id": "source.iginsure.dbo.currency", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "models\\sources\\dbo.yml", "original_file_path": "models\\sources\\dbo.yml", "name": "currency", "source_name": "dbo", "source_description": "Main source schema for transactional database", "loader": "", "identifier": "Currency", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "The enum of currencies\n", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["InwardPremium"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"IGI_PROD_DW\".\"dbo\".\"Currency\"", "created_at": 1701786801.9463196}, "source.iginsure.dbo.account_period": {"fqn": ["iginsure", "sources", "dbo", "account_period"], "database": "IGI_PROD_DW", "schema": "dbo", "unique_id": "source.iginsure.dbo.account_period", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "models\\sources\\dbo.yml", "original_file_path": "models\\sources\\dbo.yml", "name": "account_period", "source_name": "dbo", "source_description": "Main source schema for transactional database", "loader": "", "identifier": "AccountPeriod", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "The enum of account periods (monthly)\n", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["InwardPremium"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"IGI_PROD_DW\".\"dbo\".\"AccountPeriod\"", "created_at": 1701786801.9463196}, "source.iginsure.dbo.type_of_monetary_amount": {"fqn": ["iginsure", "sources", "dbo", "type_of_monetary_amount"], "database": "IGI_PROD_DW", "schema": "dbo", "unique_id": "source.iginsure.dbo.type_of_monetary_amount", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "models\\sources\\dbo.yml", "original_file_path": "models\\sources\\dbo.yml", "name": "type_of_monetary_amount", "source_name": "dbo", "source_description": "Main source schema for transactional database", "loader": "", "identifier": "TypeOfMonetaryAmount", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "The enum of monetary amount types\n", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["InwardPremium"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"IGI_PROD_DW\".\"dbo\".\"TypeOfMonetaryAmount\"", "created_at": 1701786801.9463196}, "source.iginsure.dbo.type_of_class": {"fqn": ["iginsure", "sources", "dbo", "type_of_class"], "database": "IGI_PROD_DW", "schema": "dbo", "unique_id": "source.iginsure.dbo.type_of_class", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "models\\sources\\dbo.yml", "original_file_path": "models\\sources\\dbo.yml", "name": "type_of_class", "source_name": "dbo", "source_description": "Main source schema for transactional database", "loader": "", "identifier": "TYPEOFCLASS", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "The enum of types of class\n", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["InwardPremium"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"IGI_PROD_DW\".\"dbo\".\"TYPEOFCLASS\"", "created_at": 1701786801.9463196}, "source.iginsure.dbo.type_of_placement": {"fqn": ["iginsure", "sources", "dbo", "type_of_placement"], "database": "IGI_PROD_DW", "schema": "dbo", "unique_id": "source.iginsure.dbo.type_of_placement", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "models\\sources\\dbo.yml", "original_file_path": "models\\sources\\dbo.yml", "name": "type_of_placement", "source_name": "dbo", "source_description": "Main source schema for transactional database", "loader": "", "identifier": "TYPEOFPLACEMENT", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "The type of placement (for policy parts)\n", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"IGI_PROD_DW\".\"dbo\".\"TYPEOFPLACEMENT\"", "created_at": 1701786801.9463196}, "source.iginsure.dbo.zone_country": {"fqn": ["iginsure", "sources", "dbo", "zone_country"], "database": "IGI_PROD_DW", "schema": "dbo", "unique_id": "source.iginsure.dbo.zone_country", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "models\\sources\\dbo.yml", "original_file_path": "models\\sources\\dbo.yml", "name": "zone_country", "source_name": "dbo", "source_description": "Main source schema for transactional database", "loader": "", "identifier": "ZoneCountry", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Country dimensional attributes\n", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["InwardPremium"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"IGI_PROD_DW\".\"dbo\".\"ZoneCountry\"", "created_at": 1701786801.9463196}, "source.iginsure.dbo.zone_territory": {"fqn": ["iginsure", "sources", "dbo", "zone_territory"], "database": "IGI_PROD_DW", "schema": "dbo", "unique_id": "source.iginsure.dbo.zone_territory", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "models\\sources\\dbo.yml", "original_file_path": "models\\sources\\dbo.yml", "name": "zone_territory", "source_name": "dbo", "source_description": "Main source schema for transactional database", "loader": "", "identifier": "ZONETERRITORY", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Territory dimensional attributes\n", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["InwardPremium"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"IGI_PROD_DW\".\"dbo\".\"ZONETERRITORY\"", "created_at": 1701786801.9463196}, "source.iginsure.dbo.claim_movement": {"fqn": ["iginsure", "sources", "dbo", "claim_movement"], "database": "IGI_PROD_DW", "schema": "dbo", "unique_id": "source.iginsure.dbo.claim_movement", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "models\\sources\\dbo.yml", "original_file_path": "models\\sources\\dbo.yml", "name": "claim_movement", "source_name": "dbo", "source_description": "Main source schema for transactional database", "loader": "", "identifier": "ClaimMovement", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Claim movements\n", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"IGI_PROD_DW\".\"dbo\".\"ClaimMovement\"", "created_at": 1701786801.9463196}, "source.iginsure.dbo.type_of_movement": {"fqn": ["iginsure", "sources", "dbo", "type_of_movement"], "database": "IGI_PROD_DW", "schema": "dbo", "unique_id": "source.iginsure.dbo.type_of_movement", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "models\\sources\\dbo.yml", "original_file_path": "models\\sources\\dbo.yml", "name": "type_of_movement", "source_name": "dbo", "source_description": "Main source schema for transactional database", "loader": "", "identifier": "TypeOfMovement", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "The enum of monetary movement types\n", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"IGI_PROD_DW\".\"dbo\".\"TypeOfMovement\"", "created_at": 1701786801.9463196}, "source.iginsure.dbo.policy_liability": {"fqn": ["iginsure", "sources", "dbo", "policy_liability"], "database": "IGI_PROD_DW", "schema": "dbo", "unique_id": "source.iginsure.dbo.policy_liability", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "models\\sources\\dbo.yml", "original_file_path": "models\\sources\\dbo.yml", "name": "policy_liability", "source_name": "dbo", "source_description": "Main source schema for transactional database", "loader": "", "identifier": "PolicyLiability", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Policy liabilities\n", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["InwardPremium"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"IGI_PROD_DW\".\"dbo\".\"PolicyLiability\"", "created_at": 1701786801.9463196}, "source.iginsure.dbo.type_of_policy_activity": {"fqn": ["iginsure", "sources", "dbo", "type_of_policy_activity"], "database": "IGI_PROD_DW", "schema": "dbo", "unique_id": "source.iginsure.dbo.type_of_policy_activity", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "models\\sources\\dbo.yml", "original_file_path": "models\\sources\\dbo.yml", "name": "type_of_policy_activity", "source_name": "dbo", "source_description": "Main source schema for transactional database", "loader": "", "identifier": "typeofpolicyactivity", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Type of policy activity \n", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["InwardPremium"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"IGI_PROD_DW\".\"dbo\".\"typeofpolicyactivity\"", "created_at": 1701786801.9473193}, "source.iginsure.dbo.type_of_activity_source": {"fqn": ["iginsure", "sources", "dbo", "type_of_activity_source"], "database": "IGI_PROD_DW", "schema": "dbo", "unique_id": "source.iginsure.dbo.type_of_activity_source", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "models\\sources\\dbo.yml", "original_file_path": "models\\sources\\dbo.yml", "name": "type_of_activity_source", "source_name": "dbo", "source_description": "Main source schema for transactional database", "loader": "", "identifier": "typeofactivitysource", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Type of activity source (\"Internal\" or \"External\")\n", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["InwardPremium"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"IGI_PROD_DW\".\"dbo\".\"typeofactivitysource\"", "created_at": 1701786801.9473193}, "source.iginsure.dbo.type_of_insurance": {"fqn": ["iginsure", "sources", "dbo", "type_of_insurance"], "database": "IGI_PROD_DW", "schema": "dbo", "unique_id": "source.iginsure.dbo.type_of_insurance", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "models\\sources\\dbo.yml", "original_file_path": "models\\sources\\dbo.yml", "name": "type_of_insurance", "source_name": "dbo", "source_description": "Main source schema for transactional database", "loader": "", "identifier": "TYPEOFINSURANCE", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "The enum of types of insurances\n", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"IGI_PROD_DW\".\"dbo\".\"TYPEOFINSURANCE\"", "created_at": 1701786801.9473193}, "source.iginsure.dbo.type_of_sub_class": {"fqn": ["iginsure", "sources", "dbo", "type_of_sub_class"], "database": "IGI_PROD_DW", "schema": "dbo", "unique_id": "source.iginsure.dbo.type_of_sub_class", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "models\\sources\\dbo.yml", "original_file_path": "models\\sources\\dbo.yml", "name": "type_of_sub_class", "source_name": "dbo", "source_description": "Main source schema for transactional database", "loader": "", "identifier": "TYPEOFSUBCLASS", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "The enum of types of coverage\n", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["InwardPremium"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"IGI_PROD_DW\".\"dbo\".\"TYPEOFSUBCLASS\"", "created_at": 1701786801.9473193}, "source.iginsure.dbo.subdivision": {"fqn": ["iginsure", "sources", "dbo", "subdivision"], "database": "IGI_PROD_DW", "schema": "dbo", "unique_id": "source.iginsure.dbo.subdivision", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "models\\sources\\dbo.yml", "original_file_path": "models\\sources\\dbo.yml", "name": "subdivision", "source_name": "dbo", "source_description": "Main source schema for transactional database", "loader": "", "identifier": "SUBDIVISION", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "The enum of subdivisions\n", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["InwardPremium"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"IGI_PROD_DW\".\"dbo\".\"SUBDIVISION\"", "created_at": 1701786801.9473193}, "source.iginsure.dbo.contact": {"fqn": ["iginsure", "sources", "dbo", "contact"], "database": "IGI_PROD_DW", "schema": "dbo", "unique_id": "source.iginsure.dbo.contact", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "models\\sources\\dbo.yml", "original_file_path": "models\\sources\\dbo.yml", "name": "contact", "source_name": "dbo", "source_description": "Main source schema for transactional database", "loader": "", "identifier": "Contact", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "List of contacts and additional keys\n", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["InwardPremium"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"IGI_PROD_DW\".\"dbo\".\"Contact\"", "created_at": 1701786801.9473193}, "source.iginsure.dbo.type_of_profit_centre": {"fqn": ["iginsure", "sources", "dbo", "type_of_profit_centre"], "database": "IGI_PROD_DW", "schema": "dbo", "unique_id": "source.iginsure.dbo.type_of_profit_centre", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "models\\sources\\dbo.yml", "original_file_path": "models\\sources\\dbo.yml", "name": "type_of_profit_centre", "source_name": "dbo", "source_description": "Main source schema for transactional database", "loader": "", "identifier": "TypeOfProfitCentre", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "The enum of types of profit centres\n", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["InwardPremium"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"IGI_PROD_DW\".\"dbo\".\"TypeOfProfitCentre\"", "created_at": 1701786801.9473193}, "source.iginsure.dbo.division": {"fqn": ["iginsure", "sources", "dbo", "division"], "database": "IGI_PROD_DW", "schema": "dbo", "unique_id": "source.iginsure.dbo.division", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "models\\sources\\dbo.yml", "original_file_path": "models\\sources\\dbo.yml", "name": "division", "source_name": "dbo", "source_description": "Main source schema for transactional database", "loader": "", "identifier": "Division", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Division dimensional attributes\n", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["InwardPremium"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"IGI_PROD_DW\".\"dbo\".\"Division\"", "created_at": 1701786801.9473193}, "source.iginsure.dbo.claim_section": {"fqn": ["iginsure", "sources", "dbo", "claim_section"], "database": "IGI_PROD_DW", "schema": "dbo", "unique_id": "source.iginsure.dbo.claim_section", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "models\\sources\\dbo.yml", "original_file_path": "models\\sources\\dbo.yml", "name": "claim_section", "source_name": "dbo", "source_description": "Main source schema for transactional database", "loader": "", "identifier": "ClaimSection", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Claim sections\n", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"IGI_PROD_DW\".\"dbo\".\"ClaimSection\"", "created_at": 1701786801.9473193}, "source.iginsure.dbo.inward_claim": {"fqn": ["iginsure", "sources", "dbo", "inward_claim"], "database": "IGI_PROD_DW", "schema": "dbo", "unique_id": "source.iginsure.dbo.inward_claim", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "models\\sources\\dbo.yml", "original_file_path": "models\\sources\\dbo.yml", "name": "inward_claim", "source_name": "dbo", "source_description": "Main source schema for transactional database", "loader": "", "identifier": "Claim", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Inward claims\n", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"IGI_PROD_DW\".\"dbo\".\"Claim\"", "created_at": 1701786801.9473193}, "source.iginsure.dbo.account": {"fqn": ["iginsure", "sources", "dbo", "account"], "database": "IGI_PROD_DW", "schema": "dbo", "unique_id": "source.iginsure.dbo.account", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "models\\sources\\dbo.yml", "original_file_path": "models\\sources\\dbo.yml", "name": "account", "source_name": "dbo", "source_description": "Main source schema for transactional database", "loader": "", "identifier": "Account", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Where the money is kept\n", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"IGI_PROD_DW\".\"dbo\".\"Account\"", "created_at": 1701786801.9473193}, "source.iginsure.dbo.type_of_accounting_element": {"fqn": ["iginsure", "sources", "dbo", "type_of_accounting_element"], "database": "IGI_PROD_DW", "schema": "dbo", "unique_id": "source.iginsure.dbo.type_of_accounting_element", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "models\\sources\\dbo.yml", "original_file_path": "models\\sources\\dbo.yml", "name": "type_of_accounting_element", "source_name": "dbo", "source_description": "Main source schema for transactional database", "loader": "", "identifier": "TypeOfAccountingElement", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Enum of the types of accounting element\n", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"IGI_PROD_DW\".\"dbo\".\"TypeOfAccountingElement\"", "created_at": 1701786801.9473193}, "source.iginsure.dbo.type_of_debit_credit": {"fqn": ["iginsure", "sources", "dbo", "type_of_debit_credit"], "database": "IGI_PROD_DW", "schema": "dbo", "unique_id": "source.iginsure.dbo.type_of_debit_credit", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "models\\sources\\dbo.yml", "original_file_path": "models\\sources\\dbo.yml", "name": "type_of_debit_credit", "source_name": "dbo", "source_description": "Main source schema for transactional database", "loader": "", "identifier": "TypeOfDebitCredit", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Enum of debit/credit types\n", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"IGI_PROD_DW\".\"dbo\".\"TypeOfDebitCredit\"", "created_at": 1701786801.9473193}, "source.iginsure.dbo.journal_activity": {"fqn": ["iginsure", "sources", "dbo", "journal_activity"], "database": "IGI_PROD_DW", "schema": "dbo", "unique_id": "source.iginsure.dbo.journal_activity", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "models\\sources\\dbo.yml", "original_file_path": "models\\sources\\dbo.yml", "name": "journal_activity", "source_name": "dbo", "source_description": "Main source schema for transactional database", "loader": "", "identifier": "JournalActivity", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Heterogenous table of multi-double-entry transactions\n", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"IGI_PROD_DW\".\"dbo\".\"JournalActivity\"", "created_at": 1701786801.9473193}, "source.iginsure.dbo.journal_pair": {"fqn": ["iginsure", "sources", "dbo", "journal_pair"], "database": "IGI_PROD_DW", "schema": "dbo", "unique_id": "source.iginsure.dbo.journal_pair", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "models\\sources\\dbo.yml", "original_file_path": "models\\sources\\dbo.yml", "name": "journal_pair", "source_name": "dbo", "source_description": "Main source schema for transactional database", "loader": "", "identifier": "JournalPair", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Base entity for pair of double-entry money transfer operations\n", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"IGI_PROD_DW\".\"dbo\".\"JournalPair\"", "created_at": 1701786801.9473193}, "source.iginsure.dbo.journal_line_item": {"fqn": ["iginsure", "sources", "dbo", "journal_line_item"], "database": "IGI_PROD_DW", "schema": "dbo", "unique_id": "source.iginsure.dbo.journal_line_item", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "models\\sources\\dbo.yml", "original_file_path": "models\\sources\\dbo.yml", "name": "journal_line_item", "source_name": "dbo", "source_description": "Main source schema for transactional database", "loader": "", "identifier": "JournalLineItem", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Single money transfer operation, part of a pair\n", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"IGI_PROD_DW\".\"dbo\".\"JournalLineItem\"", "created_at": 1701786801.9473193}, "source.iginsure.dbo.journal_template": {"fqn": ["iginsure", "sources", "dbo", "journal_template"], "database": "IGI_PROD_DW", "schema": "dbo", "unique_id": "source.iginsure.dbo.journal_template", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "models\\sources\\dbo.yml", "original_file_path": "models\\sources\\dbo.yml", "name": "journal_template", "source_name": "dbo", "source_description": "Main source schema for transactional database", "loader": "", "identifier": "TemplateJournalActivity", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Template records for journal activities\n", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"IGI_PROD_DW\".\"dbo\".\"TemplateJournalActivity\"", "created_at": 1701786801.948319}, "source.iginsure.dbo.type_of_premium_payment_warranty": {"fqn": ["iginsure", "sources", "dbo", "type_of_premium_payment_warranty"], "database": "IGI_PROD_DW", "schema": "dbo", "unique_id": "source.iginsure.dbo.type_of_premium_payment_warranty", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "models\\sources\\dbo.yml", "original_file_path": "models\\sources\\dbo.yml", "name": "type_of_premium_payment_warranty", "source_name": "dbo", "source_description": "Main source schema for transactional database", "loader": "", "identifier": "TypeofPremiumPaymentWarranty", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "The enum of type of premium payment warrenty\n", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"IGI_PROD_DW\".\"dbo\".\"TypeofPremiumPaymentWarranty\"", "created_at": 1701786801.948445}, "source.iginsure.dbo.sub_division": {"fqn": ["iginsure", "sources", "dbo", "sub_division"], "database": "IGI_PROD_DW", "schema": "dbo", "unique_id": "source.iginsure.dbo.sub_division", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "models\\sources\\dbo.yml", "original_file_path": "models\\sources\\dbo.yml", "name": "sub_division", "source_name": "dbo", "source_description": "Main source schema for transactional database", "loader": "", "identifier": "SubDivision", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "The enum of sub division\n", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["InwardPremium"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"IGI_PROD_DW\".\"dbo\".\"SubDivision\"", "created_at": 1701786801.948445}, "source.iginsure.dbo.classification": {"fqn": ["iginsure", "sources", "dbo", "classification"], "database": "IGI_PROD_DW", "schema": "dbo", "unique_id": "source.iginsure.dbo.classification", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "models\\sources\\dbo.yml", "original_file_path": "models\\sources\\dbo.yml", "name": "classification", "source_name": "dbo", "source_description": "Main source schema for transactional database", "loader": "", "identifier": "Classification", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "The enum of classification\n", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["InwardPremium"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"IGI_PROD_DW\".\"dbo\".\"Classification\"", "created_at": 1701786801.948445}, "source.iginsure.dbo.entity_matching_journal": {"fqn": ["iginsure", "sources", "dbo", "entity_matching_journal"], "database": "IGI_PROD_DW", "schema": "dbo", "unique_id": "source.iginsure.dbo.entity_matching_journal", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "models\\sources\\dbo.yml", "original_file_path": "models\\sources\\dbo.yml", "name": "entity_matching_journal", "source_name": "dbo", "source_description": "Main source schema for transactional database", "loader": "", "identifier": "EntityMatchingJournal", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "The APRs allocation table\n", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["InwardPremium"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"IGI_PROD_DW\".\"dbo\".\"EntityMatchingJournal\"", "created_at": 1701786801.948445}, "source.iginsure.dbo.audit_state_transitions": {"fqn": ["iginsure", "sources", "dbo", "audit_state_transitions"], "database": "IGI_PROD_DW", "schema": "dbo", "unique_id": "source.iginsure.dbo.audit_state_transitions", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "models\\sources\\dbo.yml", "original_file_path": "models\\sources\\dbo.yml", "name": "audit_state_transitions", "source_name": "dbo", "source_description": "Main source schema for transactional database", "loader": "", "identifier": "AUDITSTATETRANSITIONS", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "The audit trail of the states per entity\n", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["InwardPremium"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"IGI_PROD_DW\".\"dbo\".\"AUDITSTATETRANSITIONS\"", "created_at": 1701786801.948445}, "source.iginsure.dbo.apr_message_instalment": {"fqn": ["iginsure", "sources", "dbo", "apr_message_instalment"], "database": "IGI_PROD_DW", "schema": "dbo", "unique_id": "source.iginsure.dbo.apr_message_instalment", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "models\\sources\\dbo.yml", "original_file_path": "models\\sources\\dbo.yml", "name": "apr_message_instalment", "source_name": "dbo", "source_description": "Main source schema for transactional database", "loader": "", "identifier": "APRMessageInstalment", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "The APR message installment table \n", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["InwardPremium"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"IGI_PROD_DW\".\"dbo\".\"APRMessageInstalment\"", "created_at": 1701786801.948445}, "source.iginsure.dbo.type_of_bureau_message": {"fqn": ["iginsure", "sources", "dbo", "type_of_bureau_message"], "database": "IGI_PROD_DW", "schema": "dbo", "unique_id": "source.iginsure.dbo.type_of_bureau_message", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "models\\sources\\dbo.yml", "original_file_path": "models\\sources\\dbo.yml", "name": "type_of_bureau_message", "source_name": "dbo", "source_description": "Main source schema for transactional database", "loader": "", "identifier": "TypeOfBureauMessage", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "The enum of type of bureau messages\n", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"IGI_PROD_DW\".\"dbo\".\"TypeOfBureauMessage\"", "created_at": 1701786801.948445}, "source.iginsure.dbo.market_source": {"fqn": ["iginsure", "sources", "dbo", "market_source"], "database": "IGI_PROD_DW", "schema": "dbo", "unique_id": "source.iginsure.dbo.market_source", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "models\\sources\\dbo.yml", "original_file_path": "models\\sources\\dbo.yml", "name": "market_source", "source_name": "dbo", "source_description": "Main source schema for transactional database", "loader": "", "identifier": "MarketSource", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "The enum of market sources\n", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["InwardPremium"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"IGI_PROD_DW\".\"dbo\".\"MarketSource\"", "created_at": 1701786801.948445}, "source.iginsure.dbo.type_of_us_classification": {"fqn": ["iginsure", "sources", "dbo", "type_of_us_classification"], "database": "IGI_PROD_DW", "schema": "dbo", "unique_id": "source.iginsure.dbo.type_of_us_classification", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "models\\sources\\dbo.yml", "original_file_path": "models\\sources\\dbo.yml", "name": "type_of_us_classification", "source_name": "dbo", "source_description": "Main source schema for transactional database", "loader": "", "identifier": "TypeofUSClassification", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "The enum of US classification\n", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["InwardPremium"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"IGI_PROD_DW\".\"dbo\".\"TypeofUSClassification\"", "created_at": 1701786801.948445}, "source.iginsure.dbo.contact_link": {"fqn": ["iginsure", "sources", "dbo", "contact_link"], "database": "IGI_PROD_DW", "schema": "dbo", "unique_id": "source.iginsure.dbo.contact_link", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "models\\sources\\dbo.yml", "original_file_path": "models\\sources\\dbo.yml", "name": "contact_link", "source_name": "dbo", "source_description": "Main source schema for transactional database", "loader": "", "identifier": "CONTACTLINK", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "The table in which the contacts get linked\n", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["InwardPremium"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"IGI_PROD_DW\".\"dbo\".\"CONTACTLINK\"", "created_at": 1701786801.948445}, "source.iginsure.dbo.sub_class": {"fqn": ["iginsure", "sources", "dbo", "sub_class"], "database": "IGI_PROD_DW", "schema": "dbo", "unique_id": "source.iginsure.dbo.sub_class", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "models\\sources\\dbo.yml", "original_file_path": "models\\sources\\dbo.yml", "name": "sub_class", "source_name": "dbo", "source_description": "Main source schema for transactional database", "loader": "", "identifier": "SubClass", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "The enum of sub classes\n", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["InwardPremium"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"IGI_PROD_DW\".\"dbo\".\"SubClass\"", "created_at": 1701786801.948445}, "source.iginsure.dbo.segmentation": {"fqn": ["iginsure", "sources", "dbo", "segmentation"], "database": "IGI_PROD_DW", "schema": "dbo", "unique_id": "source.iginsure.dbo.segmentation", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "models\\sources\\dbo.yml", "original_file_path": "models\\sources\\dbo.yml", "name": "segmentation", "source_name": "dbo", "source_description": "Main source schema for transactional database", "loader": "", "identifier": "Segmentation", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "The enum of policy segmentation\n", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["InwardPremium"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"IGI_PROD_DW\".\"dbo\".\"Segmentation\"", "created_at": 1701786801.948445}, "source.iginsure.dbo.claim": {"fqn": ["iginsure", "sources", "dbo", "claim"], "database": "IGI_PROD_DW", "schema": "dbo", "unique_id": "source.iginsure.dbo.claim", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "models\\sources\\dbo.yml", "original_file_path": "models\\sources\\dbo.yml", "name": "claim", "source_name": "dbo", "source_description": "Main source schema for transactional database", "loader": "", "identifier": "Claim", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "The claims table\n", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"IGI_PROD_DW\".\"dbo\".\"Claim\"", "created_at": 1701786801.948445}, "source.iginsure.dbo.ri_policy": {"fqn": ["iginsure", "sources", "dbo", "ri_policy"], "database": "IGI_PROD_DW", "schema": "dbo", "unique_id": "source.iginsure.dbo.ri_policy", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "models\\sources\\dbo.yml", "original_file_path": "models\\sources\\dbo.yml", "name": "ri_policy", "source_name": "dbo", "source_description": "Main source schema for transactional database", "loader": "", "identifier": "RIPolicy", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "The RI policies \n", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"IGI_PROD_DW\".\"dbo\".\"RIPolicy\"", "created_at": 1701786801.948445}, "source.iginsure.dbo.ri_activity": {"fqn": ["iginsure", "sources", "dbo", "ri_activity"], "database": "IGI_PROD_DW", "schema": "dbo", "unique_id": "source.iginsure.dbo.ri_activity", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "models\\sources\\dbo.yml", "original_file_path": "models\\sources\\dbo.yml", "name": "ri_activity", "source_name": "dbo", "source_description": "Main source schema for transactional database", "loader": "", "identifier": "RIActivity", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "The RI activities\n", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"IGI_PROD_DW\".\"dbo\".\"RIActivity\"", "created_at": 1701786801.948445}, "source.iginsure.dbo.ri_section": {"fqn": ["iginsure", "sources", "dbo", "ri_section"], "database": "IGI_PROD_DW", "schema": "dbo", "unique_id": "source.iginsure.dbo.ri_section", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "models\\sources\\dbo.yml", "original_file_path": "models\\sources\\dbo.yml", "name": "ri_section", "source_name": "dbo", "source_description": "Main source schema for transactional database", "loader": "", "identifier": "RISection", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "The RI sections\n", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"IGI_PROD_DW\".\"dbo\".\"RISection\"", "created_at": 1701786801.9494553}, "source.iginsure.dbo.ri_section_broker": {"fqn": ["iginsure", "sources", "dbo", "ri_section_broker"], "database": "IGI_PROD_DW", "schema": "dbo", "unique_id": "source.iginsure.dbo.ri_section_broker", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "models\\sources\\dbo.yml", "original_file_path": "models\\sources\\dbo.yml", "name": "ri_section_broker", "source_name": "dbo", "source_description": "Main source schema for transactional database", "loader": "", "identifier": "RISectionBroker", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "The RI section broker\n", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"IGI_PROD_DW\".\"dbo\".\"RISectionBroker\"", "created_at": 1701786801.9494553}, "source.iginsure.dbo.ri_section_broker_security": {"fqn": ["iginsure", "sources", "dbo", "ri_section_broker_security"], "database": "IGI_PROD_DW", "schema": "dbo", "unique_id": "source.iginsure.dbo.ri_section_broker_security", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "models\\sources\\dbo.yml", "original_file_path": "models\\sources\\dbo.yml", "name": "ri_section_broker_security", "source_name": "dbo", "source_description": "Main source schema for transactional database", "loader": "", "identifier": "RISectionBrokerSecurity", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "The RI section broker securities  \n", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"IGI_PROD_DW\".\"dbo\".\"RISectionBrokerSecurity\"", "created_at": 1701786801.9494553}, "source.iginsure.dbo.type_of_ri_policy": {"fqn": ["iginsure", "sources", "dbo", "type_of_ri_policy"], "database": "IGI_PROD_DW", "schema": "dbo", "unique_id": "source.iginsure.dbo.type_of_ri_policy", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "models\\sources\\dbo.yml", "original_file_path": "models\\sources\\dbo.yml", "name": "type_of_ri_policy", "source_name": "dbo", "source_description": "Main source schema for transactional database", "loader": "", "identifier": "TypeofRIPolicy", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "The enum of RI policy types   \n", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"IGI_PROD_DW\".\"dbo\".\"TypeofRIPolicy\"", "created_at": 1701786801.9494553}, "source.iginsure.dbo.ri_policy_period_prop": {"fqn": ["iginsure", "sources", "dbo", "ri_policy_period_prop"], "database": "IGI_PROD_DW", "schema": "dbo", "unique_id": "source.iginsure.dbo.ri_policy_period_prop", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "models\\sources\\dbo.yml", "original_file_path": "models\\sources\\dbo.yml", "name": "ri_policy_period_prop", "source_name": "dbo", "source_description": "Main source schema for transactional database", "loader": "", "identifier": "RIPolicyPeriodProp", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "The ow premium and claims proportional recoveries\n", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"IGI_PROD_DW\".\"dbo\".\"RIPolicyPeriodProp\"", "created_at": 1701786801.9494553}, "source.iginsure.dbo.ri_policy_period": {"fqn": ["iginsure", "sources", "dbo", "ri_policy_period"], "database": "IGI_PROD_DW", "schema": "dbo", "unique_id": "source.iginsure.dbo.ri_policy_period", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "models\\sources\\dbo.yml", "original_file_path": "models\\sources\\dbo.yml", "name": "ri_policy_period", "source_name": "dbo", "source_description": "Main source schema for transactional database", "loader": "", "identifier": "RIPolicyPeriod", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "The table that links the ri policy key with account period   \n", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"IGI_PROD_DW\".\"dbo\".\"RIPolicyPeriod\"", "created_at": 1701786801.9494553}, "source.iginsure.dbo.type_of_fronting": {"fqn": ["iginsure", "sources", "dbo", "type_of_fronting"], "database": "IGI_PROD_DW", "schema": "dbo", "unique_id": "source.iginsure.dbo.type_of_fronting", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "models\\sources\\dbo.yml", "original_file_path": "models\\sources\\dbo.yml", "name": "type_of_fronting", "source_name": "dbo", "source_description": "Main source schema for transactional database", "loader": "", "identifier": "TypeofFronting", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "The enum of fronting types  \n", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"IGI_PROD_DW\".\"dbo\".\"TypeofFronting\"", "created_at": 1701786801.9494553}, "source.iginsure.dbo.type_of_event": {"fqn": ["iginsure", "sources", "dbo", "type_of_event"], "database": "IGI_PROD_DW", "schema": "dbo", "unique_id": "source.iginsure.dbo.type_of_event", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "models\\sources\\dbo.yml", "original_file_path": "models\\sources\\dbo.yml", "name": "type_of_event", "source_name": "dbo", "source_description": "Main source schema for transactional database", "loader": "", "identifier": "TYPEOFEVENT", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "The enum of event types \n", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"IGI_PROD_DW\".\"dbo\".\"TYPEOFEVENT\"", "created_at": 1701786801.9494553}, "source.iginsure.dbo.type_of_event_type": {"fqn": ["iginsure", "sources", "dbo", "type_of_event_type"], "database": "IGI_PROD_DW", "schema": "dbo", "unique_id": "source.iginsure.dbo.type_of_event_type", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "models\\sources\\dbo.yml", "original_file_path": "models\\sources\\dbo.yml", "name": "type_of_event_type", "source_name": "dbo", "source_description": "Main source schema for transactional database", "loader": "", "identifier": "TYPEOFEVENTTPE", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "The enum of type of event types \n", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"IGI_PROD_DW\".\"dbo\".\"TYPEOFEVENTTPE\"", "created_at": 1701786801.9494553}, "source.iginsure.dbo.type_of_rag": {"fqn": ["iginsure", "sources", "dbo", "type_of_rag"], "database": "IGI_PROD_DW", "schema": "dbo", "unique_id": "source.iginsure.dbo.type_of_rag", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "models\\sources\\dbo.yml", "original_file_path": "models\\sources\\dbo.yml", "name": "type_of_rag", "source_name": "dbo", "source_description": "Main source schema for transactional database", "loader": "", "identifier": "TypeOfRAG", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "The enum of type of rag\n", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"IGI_PROD_DW\".\"dbo\".\"TypeOfRAG\"", "created_at": 1701786801.950239}, "source.iginsure.dbo.type_of_loss": {"fqn": ["iginsure", "sources", "dbo", "type_of_loss"], "database": "IGI_PROD_DW", "schema": "dbo", "unique_id": "source.iginsure.dbo.type_of_loss", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "models\\sources\\dbo.yml", "original_file_path": "models\\sources\\dbo.yml", "name": "type_of_loss", "source_name": "dbo", "source_description": "Main source schema for transactional database", "loader": "", "identifier": "TYPEOFLOSS", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "The enum of type of loss\n", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"IGI_PROD_DW\".\"dbo\".\"TYPEOFLOSS\"", "created_at": 1701786801.950239}, "source.iginsure.dbo.type_of_pricing": {"fqn": ["iginsure", "sources", "dbo", "type_of_pricing"], "database": "IGI_PROD_DW", "schema": "dbo", "unique_id": "source.iginsure.dbo.type_of_pricing", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "models\\sources\\dbo.yml", "original_file_path": "models\\sources\\dbo.yml", "name": "type_of_pricing", "source_name": "dbo", "source_description": "Main source schema for transactional database", "loader": "", "identifier": "TypeOfPricing", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "The list of available pricing types\n", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"IGI_PROD_DW\".\"dbo\".\"TypeOfPricing\"", "created_at": 1701786801.950239}, "source.iginsure.dbo.type_of_pricing_time": {"fqn": ["iginsure", "sources", "dbo", "type_of_pricing_time"], "database": "IGI_PROD_DW", "schema": "dbo", "unique_id": "source.iginsure.dbo.type_of_pricing_time", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "models\\sources\\dbo.yml", "original_file_path": "models\\sources\\dbo.yml", "name": "type_of_pricing_time", "source_name": "dbo", "source_description": "Main source schema for transactional database", "loader": "", "identifier": "TypeOfPricingTime", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "The list of available pricing time types\n", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"IGI_PROD_DW\".\"dbo\".\"TypeOfPricingTime\"", "created_at": 1701786801.9509022}, "source.iginsure.dbo.version_audit_trail": {"fqn": ["iginsure", "sources", "dbo", "version_audit_trail"], "database": "IGI_PROD_DW", "schema": "dbo", "unique_id": "source.iginsure.dbo.version_audit_trail", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "models\\sources\\dbo.yml", "original_file_path": "models\\sources\\dbo.yml", "name": "version_audit_trail", "source_name": "dbo", "source_description": "Main source schema for transactional database", "loader": "", "identifier": "versionaudittrail", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Activity versioning audit trail\n", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["InwardPremium"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"IGI_PROD_DW\".\"dbo\".\"versionaudittrail\"", "created_at": 1701786801.9509022}, "source.iginsure.dbo.security_users": {"fqn": ["iginsure", "sources", "dbo", "security_users"], "database": "IGI_PROD_DW", "schema": "dbo", "unique_id": "source.iginsure.dbo.security_users", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "models\\sources\\dbo.yml", "original_file_path": "models\\sources\\dbo.yml", "name": "security_users", "source_name": "dbo", "source_description": "Main source schema for transactional database", "loader": "", "identifier": "securityusers", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Internal users info \n", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["InwardPremium"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"IGI_PROD_DW\".\"dbo\".\"securityusers\"", "created_at": 1701786801.9509022}, "source.iginsure.dbo.actuarial_all_core": {"fqn": ["iginsure", "sources", "dbo", "actuarial_all_core"], "database": "IGI_PROD_DW", "schema": "dbo", "unique_id": "source.iginsure.dbo.actuarial_all_core", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "models\\sources\\dbo.yml", "original_file_path": "models\\sources\\dbo.yml", "name": "actuarial_all_core", "source_name": "dbo", "source_description": "Main source schema for transactional database", "loader": "", "identifier": "ActuarialCopy_AllCore", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Copy of the AllCore table from the Actuarial database\n", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"IGI_PROD_DW\".\"dbo\".\"ActuarialCopy_AllCore\"", "created_at": 1701786801.9509022}, "source.iginsure.dbo.actuarial_all_core_historical": {"fqn": ["iginsure", "sources", "dbo", "actuarial_all_core_historical"], "database": "IGI_PROD_DW", "schema": "dbo", "unique_id": "source.iginsure.dbo.actuarial_all_core_historical", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "models\\sources\\dbo.yml", "original_file_path": "models\\sources\\dbo.yml", "name": "actuarial_all_core_historical", "source_name": "dbo", "source_description": "Main source schema for transactional database", "loader": "", "identifier": "ActuarialCopy_AllCore_Historical", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Copy of the AllCore_Historical table from the Actuarial database\n", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"IGI_PROD_DW\".\"dbo\".\"ActuarialCopy_AllCore_Historical\"", "created_at": 1701786801.9509022}, "source.iginsure.dbo.actuarial_claims_data": {"fqn": ["iginsure", "sources", "dbo", "actuarial_claims_data"], "database": "IGI_PROD_DW", "schema": "dbo", "unique_id": "source.iginsure.dbo.actuarial_claims_data", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "models\\sources\\dbo.yml", "original_file_path": "models\\sources\\dbo.yml", "name": "actuarial_claims_data", "source_name": "dbo", "source_description": "Main source schema for transactional database", "loader": "", "identifier": "ActuarialCopy_ClaimsData_Unpivoted", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Copy of the ClaimsData_Unpivoted table from the Actuarial database\n", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"IGI_PROD_DW\".\"dbo\".\"ActuarialCopy_ClaimsData_Unpivoted\"", "created_at": 1701786801.9509022}, "source.iginsure.dbo.actuarial_earned_premium": {"fqn": ["iginsure", "sources", "dbo", "actuarial_earned_premium"], "database": "IGI_PROD_DW", "schema": "dbo", "unique_id": "source.iginsure.dbo.actuarial_earned_premium", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "models\\sources\\dbo.yml", "original_file_path": "models\\sources\\dbo.yml", "name": "actuarial_earned_premium", "source_name": "dbo", "source_description": "Main source schema for transactional database", "loader": "", "identifier": "ActuarialCopy_Earned_Premium_Data_with_XOL", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Copy of the Earned_Premium_Data_with_XOL table from the Actuarial database\n", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"IGI_PROD_DW\".\"dbo\".\"ActuarialCopy_Earned_Premium_Data_with_XOL\"", "created_at": 1701786801.9509022}, "source.iginsure.dbo.Type_Of_Product_Group": {"fqn": ["iginsure", "sources", "dbo", "Type_Of_Product_Group"], "database": "IGI_PROD_DW", "schema": "dbo", "unique_id": "source.iginsure.dbo.Type_Of_Product_Group", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "models\\sources\\dbo.yml", "original_file_path": "models\\sources\\dbo.yml", "name": "Type_Of_Product_Group", "source_name": "dbo", "source_description": "Main source schema for transactional database", "loader": "", "identifier": "TypeOfProductGroup", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "The enum of product groups\n", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"IGI_PROD_DW\".\"dbo\".\"TypeOfProductGroup\"", "created_at": 1701786801.9509022}, "source.iginsure.dbo.ZONE_MAJOR_TERRITORY": {"fqn": ["iginsure", "sources", "dbo", "ZONE_MAJOR_TERRITORY"], "database": "IGI_PROD_DW", "schema": "dbo", "unique_id": "source.iginsure.dbo.ZONE_MAJOR_TERRITORY", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "models\\sources\\dbo.yml", "original_file_path": "models\\sources\\dbo.yml", "name": "ZONE_MAJOR_TERRITORY", "source_name": "dbo", "source_description": "Main source schema for transactional database", "loader": "", "identifier": "ZONEMAJORTERRITORY", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "The enum of major regions\n", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"IGI_PROD_DW\".\"dbo\".\"ZONEMAJORTERRITORY\"", "created_at": 1701786801.9509022}, "source.iginsure.dbo.Policy_Reinsurance_Profile": {"fqn": ["iginsure", "sources", "dbo", "Policy_Reinsurance_Profile"], "database": "IGI_PROD_DW", "schema": "dbo", "unique_id": "source.iginsure.dbo.Policy_Reinsurance_Profile", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "models\\sources\\dbo.yml", "original_file_path": "models\\sources\\dbo.yml", "name": "Policy_Reinsurance_Profile", "source_name": "dbo", "source_description": "Main source schema for transactional database", "loader": "", "identifier": "PolicyReinsuranceProfile", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "The table that links the inward policy with it's attached ow policies\n", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"IGI_PROD_DW\".\"dbo\".\"PolicyReinsuranceProfile\"", "created_at": 1701786801.9509022}, "source.iginsure.dbo.Currency_Roe_History": {"fqn": ["iginsure", "sources", "dbo", "Currency_Roe_History"], "database": "IGI_PROD_DW", "schema": "dbo", "unique_id": "source.iginsure.dbo.Currency_Roe_History", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "models\\sources\\dbo.yml", "original_file_path": "models\\sources\\dbo.yml", "name": "Currency_Roe_History", "source_name": "dbo", "source_description": "Main source schema for transactional database", "loader": "", "identifier": "currencyroehistory", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "The table that contains the currency roe history \n", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"IGI_PROD_DW\".\"dbo\".\"currencyroehistory\"", "created_at": 1701786801.952002}, "source.iginsure.dbo.type_of_policy_line": {"fqn": ["iginsure", "sources", "dbo", "type_of_policy_line"], "database": "IGI_PROD_DW", "schema": "dbo", "unique_id": "source.iginsure.dbo.type_of_policy_line", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "models\\sources\\dbo.yml", "original_file_path": "models\\sources\\dbo.yml", "name": "type_of_policy_line", "source_name": "dbo", "source_description": "Main source schema for transactional database", "loader": "", "identifier": "TYPEOFPOLICYLINE", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Types of policy line (New, Renewal, NA)\n", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["InwardPremium"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"IGI_PROD_DW\".\"dbo\".\"TYPEOFPOLICYLINE\"", "created_at": 1701786801.952002}, "source.iginsure.dbo.type_of_ri_class": {"fqn": ["iginsure", "sources", "dbo", "type_of_ri_class"], "database": "IGI_PROD_DW", "schema": "dbo", "unique_id": "source.iginsure.dbo.type_of_ri_class", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "models\\sources\\dbo.yml", "original_file_path": "models\\sources\\dbo.yml", "name": "type_of_ri_class", "source_name": "dbo", "source_description": "Main source schema for transactional database", "loader": "", "identifier": "typeofriclass", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "The enum of ri classes\n", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"IGI_PROD_DW\".\"dbo\".\"typeofriclass\"", "created_at": 1701786801.952002}, "source.iginsure.iris.IRIS_INW_GWP_Movemnets": {"fqn": ["iginsure", "sources", "iris", "IRIS_INW_GWP_Movemnets"], "database": "IGI_PROD_DW", "schema": "iris", "unique_id": "source.iginsure.iris.IRIS_INW_GWP_Movemnets", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "models\\sources\\dbo.yml", "original_file_path": "models\\sources\\dbo.yml", "name": "IRIS_INW_GWP_Movemnets", "source_name": "iris", "source_description": "Main source schema for iris's data", "loader": "", "identifier": "IRIS_INW_GWP_Movemnets", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A table containing the inward gwp movements from iris up until Mar 2020", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"IGI_PROD_DW\".\"iris\".\"IRIS_INW_GWP_Movemnets\"", "created_at": 1701786801.952002}}, "macros": {"macro.iginsure.generate_schema_name": {"unique_id": "macro.iginsure.generate_schema_name", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "macros\\get_custom_schema.sql", "original_file_path": "macros\\get_custom_schema.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name, node) -%}\r\n    {{ generate_schema_name_for_env(custom_schema_name, node) }}\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.generate_schema_name_for_env"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.700187, "supported_languages": null}, "macro.iginsure.include": {"unique_id": "macro.iginsure.include", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "macros\\include.sql", "original_file_path": "macros\\include.sql", "name": "include", "macro_sql": "{% macro include (source) %}\r\n\r\n{{source}} as (\r\n    select\r\n        *\r\n    from\r\n        {{ref (source) }}\r\n),\r\n\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.7022016, "supported_languages": null}, "macro.iginsure.mcr_source_deduplication": {"unique_id": "macro.iginsure.mcr_source_deduplication", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "macros\\mcr_source_deduplication.sql", "original_file_path": "macros\\mcr_source_deduplication.sql", "name": "mcr_source_deduplication", "macro_sql": "{%\r\nmacro\r\n    mcr_source_deduplication (\r\n        source,\r\n        partition_field,\r\n        order_field,\r\n        order\r\n    )\r\n%}\r\nwith\r\nordered as (\r\n    select\r\n        *,\r\n        row_number() over (\r\n            partition by\r\n                {{ partition_field }}\r\n            order by\r\n                {{ order_field }} {{ order }}\r\n        ) as row_number\r\n    from\r\n        {{ source }}\r\n),\r\ndeduplicated as (\r\n    select\r\n        *\r\n    from\r\n        ordered\r\n    where\r\n        row_number = 1\r\n)\r\nselect * from deduplicated\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.7042048, "supported_languages": null}, "macro.iginsure.pricing_types_unpiv": {"unique_id": "macro.iginsure.pricing_types_unpiv", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "macros\\pricing_types_unpiv.sql", "original_file_path": "macros\\pricing_types_unpiv.sql", "name": "pricing_types_unpiv", "macro_sql": "{%macro pricing_types_unpiv(actual_gwp_igi_sgn_line)%}\r\n\r\n-- run it in execute mode \r\n{%- if execute -%}\r\n    {%-set query -%}\r\n\r\n    select sPricingType from typeofpricing\r\n\r\n\r\n    {%- endset -%}\r\n\r\n    {%- set pricing_types = run_query(query).columns[0].values() -%}\r\n\r\n\r\n\r\n    {%- for pricing_type in pricing_types  %}\r\n\r\n        --case when pricing_type = '{{pricing_type}}' then sum(case when pricing_type = '{{pricing_type}}' then actual_gwp_100 else 0 end)\r\n          --                                               over(partition by lob, Reserving_Class_2, pricing_type) end as {{pricing_type}}_actual_gwp_100,\r\n\r\n        case when pricing_type = '{{pricing_type}}' then {{actual_gwp_igi_sgn_line}} else 0 end as {{pricing_type}}_actual_gwp_igi_sgn_line ,\r\n\r\n        --case when pricing_type = '{{pricing_type}}' then sum({{actual_gwp_igi_sgn_line}}) over (partition by Reserving_Class_2) /\r\n          --                                               sum({{plan_premium_igi_sgn_line}}) over (partition by Reserving_Class_2) \r\n            --                                             end as {{pricing_type}}_plan_premium_percentage,\r\n\r\n        --case when pricing_type = '{{pricing_type}}' then sum({{actual_gwp_igi_sgn_line}}) over (partition by Reserving_Class_2) /\r\n          --                                               sum({{technical_premium_igi_sgn_line}}) over (partition by Reserving_Class_2) \r\n            --                                             end as {{pricing_type}}_technical_premium_percentage\r\n\r\n\r\n    {%- if not loop.last -%}\r\n\r\n     ,\r\n\r\n    {%- endif -%}\r\n\r\n    {%- endfor %}    \r\n\r\n     \r\n\r\n\r\n{%- endif -%}\r\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.7071996, "supported_languages": null}, "macro.iginsure.reserving_class_2": {"unique_id": "macro.iginsure.reserving_class_2", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "macros\\reserving_class_2.sql", "original_file_path": "macros\\reserving_class_2.sql", "name": "reserving_class_2", "macro_sql": "\r\n\r\n\r\n{%-macro reserving_class_2(policy_reference,subclass,product,coverage_code,mop,classification)-%}\r\n\r\nCASE \r\n    WHEN LEFT({{policy_reference}},1) IN ('9', '8') THEN 'Outward'\r\n    WHEN {{product}} = 'DOWNSTREAM ENERGY' THEN 'DownstreamEnergy'\r\n    WHEN {{product}} = 'UPSTREAM ENERGY' THEN 'UpstreamEnergy'\r\n    WHEN LEFT({{policy_reference}}, 6) = '100006' THEN 'K6'\r\n    WHEN LEFT({{policy_reference}}, 6) = '600494' THEN 'CasualtyPen' \r\n    WHEN {{subclass}} IN ('MOTOR WHOLE ACCOUNT', 'MEDICAL EXPENSES XL') THEN 'InwardMedMotorEXP'\r\n    WHEN {{product}} = 'INWARDS PPN' THEN 'InwardPPN'\r\n    WHEN {{product}} = 'INWARDS XOL' THEN 'InwardXL'\r\n    WHEN {{mop}} = 'Inwards Reinsurance XOL' THEN 'InwardXL' \r\n    WHEN {{mop}} = 'Inwards Reinsurance Proportional' THEN 'InwardPPN'\r\n    WHEN {{product}} = 'FORESTRY' THEN 'PropertyForestry'\r\n    WHEN {{product}} = 'PROPERTY' THEN 'PropertyexForestry'\t\t\t\t\t\r\n    WHEN {{product}} = 'PORTS & TERMINALS' THEN 'PortsTerminals'\r\n    WHEN {{product}} = 'FINANCIAL INSTITUTIONS' THEN \r\n        CASE WHEN {{coverage_code}} IN ('F1','F3', 'PI', 'DO', 'F6') THEN 'FIDOEO'\r\n        ELSE 'FIBBBCC' END \r\n    WHEN {{product}} = 'ENGINEERING' THEN \r\n        CASE WHEN {{coverage_code}} IN ('CG', 'CO') THEN 'EngineeringCAR'\r\n        ELSE \r\n        CASE WHEN {{coverage_code}} IN ('EAR PD', 'EAR PD + BI', 'EAR TPL (C.M.)' ,'EAR BI', 'EAR (OCC.)', 'ER', 'TP', 'BI', 'MB')\r\n        OR ({{coverage_code}} = 'DS' AND {{classification}} IN ('COMMERCE INDUSTRY', 'OIL & GAS'))\r\n        THEN 'EngineeringEAR'\r\n        WHEN {{coverage_code}} IN ('ID','IB') THEN 'EngineeringIDI'\r\n        WHEN {{coverage_code}} IN ('DO', 'TE', 'PI', 'PD', 'PR', 'S1', 'OB', 'MM', 'GL', 'WO', 'PL', 'EP', 'G2')\r\n        THEN 'EngineeringOTHER'\r\n        ELSE 'EngineeringCAR' END END\r\n    WHEN {{coverage_code}} = 'LE' THEN \r\n        CASE WHEN RIGHT({{subclass}}, 3) = 'ATE' THEN 'CasualtyATE' \r\n        ELSE 'CasualtyBTE' END \r\n    WHEN {{product}} = 'Casualty' THEN\r\n        CASE WHEN {{coverage_code}} = 'DO' THEN 'CasualtyComDO'\r\n        WHEN {{coverage_code}} = 'WI' THEN 'CasualtyWI'\r\n        WHEN {{coverage_code}} = 'SU' THEN 'Surety'\r\n        ELSE 'CasualtyOther' END\r\n    --WHEN {{coverage_code}} = 'PI' THEN 'CasualtyProf'\r\n\r\n    WHEN {{product}} = 'MARINE LIABILITY' THEN 'MarineLiability'\r\n    WHEN {{product}} = 'MARINE TRADE' THEN 'MarineTrade'\r\n    WHEN {{product}} = 'MARINE' AND {{classification}} = 'MARINE LIABILITY' THEN 'MarineLiability'\r\n    WHEN {{product}} = 'MARINE' THEN 'MarineCargo'\r\n\r\n    --WHEN {{product}} = 'Reinsurance' THEN \r\n    --\tCASE WHEN mop = 'I/W L/S' THEN 'InwardLS' END \r\n        \r\n    WHEN {{product}} = '' OR {{product}} = 'All' THEN 'Excluded'\r\n    WHEN {{product}} = 'POLITICAL VIOLENCE' THEN 'PoliticalViolence'\r\n    WHEN {{product}} = 'CONTINGENCY' THEN 'Contingency'\r\n    ELSE {{product}} END AS Reserving_Class_2\r\n\r\n\r\n{%-endmacro-%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.711199, "supported_languages": null}, "macro.iginsure.test_is_data_type": {"unique_id": "macro.iginsure.test_is_data_type", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "tests\\generic\\is_data_type.sql", "original_file_path": "tests\\generic\\is_data_type.sql", "name": "test_is_data_type", "macro_sql": "{% test is_data_type(model, column_name, column_type) %}\r\n\r\nSELECT * FROM INFORMATION_SCHEMA.columns\r\nWHERE TABLE_SCHEMA = (\r\n    -- dbt gives us the full model name (db.schema.table)\r\n    -- but we want the schema name only\r\n    SELECT \r\n        REPLACE(value, '\"', '')\r\n    from STRING_SPLIT('{{ model }}','.',1)\r\n    where ordinal = 2\r\n)\r\nAND TABLE_NAME = (\r\n    -- same as above, but we want the table name\r\n    SELECT \r\n        REPLACE(value, '\"', '')\r\n    from STRING_SPLIT('{{ model }}','.',1)\r\n    where ordinal = 3\r\n)\r\nAND COLUMN_NAME = '{{ column_name }}'\r\nAND DATA_TYPE != '{{ column_type }}'\r\n\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.7121994, "supported_languages": null}, "macro.iginsure.test_is_greater_than_or_equal_to": {"unique_id": "macro.iginsure.test_is_greater_than_or_equal_to", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "tests\\generic\\is_greater_than_or_equal_to.sql", "original_file_path": "tests\\generic\\is_greater_than_or_equal_to.sql", "name": "test_is_greater_than_or_equal_to", "macro_sql": "{% test is_greater_than_or_equal_to(model, column_name, value_or_expression) %}\r\n\r\nselect * from {{ model }}\r\nwhere {{ column_name }} < {{ value_or_expression }}\r\n\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.7131996, "supported_languages": null}, "macro.iginsure.test_is_greater_than_or_equal_to_abs": {"unique_id": "macro.iginsure.test_is_greater_than_or_equal_to_abs", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "tests\\generic\\is_greater_than_or_equal_to_abs.sql", "original_file_path": "tests\\generic\\is_greater_than_or_equal_to_abs.sql", "name": "test_is_greater_than_or_equal_to_abs", "macro_sql": "{% test is_greater_than_or_equal_to_abs(model, column_name, value_or_expression) %}\r\n\r\nselect * from {{ model }}\r\nwhere abs({{ column_name }}) < abs({{ value_or_expression }})\r\n\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.7131996, "supported_languages": null}, "macro.iginsure.test_is_less_than_or_equal_to": {"unique_id": "macro.iginsure.test_is_less_than_or_equal_to", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "tests\\generic\\is_less_than_or_equal_to.sql", "original_file_path": "tests\\generic\\is_less_than_or_equal_to.sql", "name": "test_is_less_than_or_equal_to", "macro_sql": "{% test is_less_than_or_equal_to(model, column_name, value_or_expression) %}\r\n\r\nselect * from {{ model }}\r\nwhere {{ column_name }} > {{ value_or_expression }}\r\n\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.7141993, "supported_languages": null}, "macro.iginsure.test_table_contains_resevol_required_columns": {"unique_id": "macro.iginsure.test_table_contains_resevol_required_columns", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "tests\\generic\\table_contains_resevol_required_columns.sql", "original_file_path": "tests\\generic\\table_contains_resevol_required_columns.sql", "name": "test_table_contains_resevol_required_columns", "macro_sql": "{% test table_contains_resevol_required_columns(model) %}\r\n\r\nwith existing as (\r\n    SELECT * FROM INFORMATION_SCHEMA.columns\r\n    WHERE TABLE_SCHEMA = (\r\n        -- dbt gives us the full model name (db.schema.table)\r\n        -- but we want the schema name only\r\n        SELECT \r\n            REPLACE(value, '\"', '')\r\n        from STRING_SPLIT('{{ model }}','.',1)\r\n        where ordinal = 2\r\n    )\r\n    AND TABLE_NAME = (\r\n        -- same as above, but we want the table name\r\n        SELECT \r\n            REPLACE(value, '\"', '')\r\n        from STRING_SPLIT('{{ model }}','.',1)\r\n        where ordinal = 3\r\n    )\r\n),\r\nrequired as (\r\n    SELECT * FROM {{ ref('resevol_required_columns')  }}\r\n) \r\nselect required.column_name from required\r\nleft join existing\r\n    on required.column_name = existing.column_name\r\nwhere existing.column_name is NULL\r\n\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.7169046, "supported_languages": null}, "macro.dbt_synapse.synapse__get_columns_in_relation": {"unique_id": "macro.dbt_synapse.synapse__get_columns_in_relation", "package_name": "dbt_synapse", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\synapse", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "synapse__get_columns_in_relation", "macro_sql": "{% macro synapse__get_columns_in_relation(relation) -%}\n  {# hack because tempdb has no infoschema see: #}\n  {# https://stackoverflow.com/questions/63800841/get-column-names-of-temp-table-in-azure-synapse-dw #}\n  {% if relation.identifier.startswith(\"#\") %}\n    {% set tmp_tbl_hack = relation.incorporate(\n      path={\"identifier\": relation.identifier.replace(\"#\", \"\") ~ '_tmp_tbl_hack'},\n      type='table')-%}\n\n    {% do  drop_relation(tmp_tbl_hack) %}\n    {% set sql_create %}\n        CREATE TABLE {{ tmp_tbl_hack }}\n        WITH(\n          -- Always use a round-robin heap, since columns with types like varbinaries\n          -- cannot be part of a clustered column store, which is the default index\n          DISTRIBUTION = ROUND_ROBIN,\n          HEAP\n        )\n        AS\n        SELECT TOP(1) *\n        FROM {{relation}}\n    {% endset %}\n    {% call statement() -%} {{ sql_create }} {%- endcall %}\n\n    {% set output = get_columns_in_relation(tmp_tbl_hack) %}\n    {% do  drop_relation(tmp_tbl_hack) %}\n    {{ return(output) }}\n  {% endif %}\n\n  {% call statement('get_columns_in_relation', fetch_result=True) %}\n    select\n        column_name,\n        data_type,\n        character_maximum_length,\n        numeric_precision,\n        numeric_scale\n    from INFORMATION_SCHEMA.COLUMNS\n    where table_name = '{{ relation.identifier }}'\n      and table_schema = '{{ relation.schema }}'\n  {% endcall %}\n  {% set table = load_result('get_columns_in_relation').table %}\n  {{ return(sql_convert_columns_in_relation(table)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.drop_relation", "macro.dbt.statement", "macro.dbt.get_columns_in_relation", "macro.dbt.sql_convert_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.7199817, "supported_languages": null}, "macro.dbt_synapse.synapse__get_columns_in_query": {"unique_id": "macro.dbt_synapse.synapse__get_columns_in_query", "package_name": "dbt_synapse", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\synapse", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "synapse__get_columns_in_query", "macro_sql": "{% macro synapse__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select TOP 0 * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n    {% endcall %}\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.7209558, "supported_languages": null}, "macro.dbt_synapse.synapse__create_clustered_columnstore_index": {"unique_id": "macro.dbt_synapse.synapse__create_clustered_columnstore_index", "package_name": "dbt_synapse", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\synapse", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "name": "synapse__create_clustered_columnstore_index", "macro_sql": "{% macro synapse__create_clustered_columnstore_index(relation) -%}\n  {%- set cci_name = (relation.schema ~ '_' ~ relation.identifier ~ '_cci') | replace(\".\", \"\") | replace(\" \", \"\") -%}\n  {%- set relation_name = relation.schema ~ '_' ~ relation.identifier -%}\n  {%- set full_relation = '\"' ~ relation.schema ~ '\".\"' ~ relation.identifier ~ '\"' -%}\n  if object_id ('{{relation_name}}.{{cci_name}}','U') is not null\n      begin\n      drop index {{relation_name}}.{{cci_name}}\n      end\n\n  CREATE CLUSTERED COLUMNSTORE INDEX {{cci_name}}\n    ON {{full_relation}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.7229083, "supported_languages": null}, "macro.dbt_synapse.drop_xml_indexes": {"unique_id": "macro.dbt_synapse.drop_xml_indexes", "package_name": "dbt_synapse", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\synapse", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "name": "drop_xml_indexes", "macro_sql": "{% macro drop_xml_indexes() -%}\n{# Altered from https://stackoverflow.com/q/1344401/10415173 #}\n{# and https://stackoverflow.com/a/33785833/10415173         #}\n\n\n{{ log(\"Running drop_xml_indexes() macro...\") }}\n\ndeclare @drop_xml_indexes nvarchar(max) = (\n  select STRING_AGG(a.command, ' ') from (\n    select 'IF INDEXPROPERTY(' + CONVERT(VARCHAR(MAX), sys.tables.[object_id]) + ', ''' + sys.indexes.[name] + ''', ''IndexId'') IS NOT NULL DROP INDEX [' + sys.indexes.[name] + '] ON ' + '[' + SCHEMA_NAME(sys.tables.[schema_id]) + '].[' + OBJECT_NAME(sys.tables.[object_id]) + ']; ' as command\n    from sys.indexes\n    inner join sys.tables on sys.indexes.object_id = sys.tables.object_id\n    where sys.indexes.[name] is not null\n      and sys.indexes.type_desc = 'XML'\n      and sys.tables.[name] = '{{ this.table }}'\n    ) a\n); exec sp_executesql @drop_xml_indexes;\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.7239082, "supported_languages": null}, "macro.dbt_synapse.drop_spatial_indexes": {"unique_id": "macro.dbt_synapse.drop_spatial_indexes", "package_name": "dbt_synapse", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\synapse", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "name": "drop_spatial_indexes", "macro_sql": "{% macro drop_spatial_indexes() -%}\n{# Altered from https://stackoverflow.com/q/1344401/10415173 #}\n{# and https://stackoverflow.com/a/33785833/10415173         #}\n\n{{ log(\"Running drop_spatial_indexes() macro...\") }}\n\ndeclare @drop_spatial_indexes nvarchar(max) = (\n  select STRING_AGG(a.command, ' ') from (\n    select 'IF INDEXPROPERTY(' + CONVERT(VARCHAR(MAX), sys.tables.[object_id]) + ', ''' + sys.indexes.[name] + ''', ''IndexId'') IS NOT NULL DROP INDEX [' + sys.indexes.[name] + '] ON ' + '[' + SCHEMA_NAME(sys.tables.[schema_id]) + '].[' + OBJECT_NAME(sys.tables.[object_id]) + ']; ' as command\n    from sys.indexes\n    inner join sys.tables on sys.indexes.object_id = sys.tables.object_id\n    where sys.indexes.[name] is not null\n      and sys.indexes.type_desc = 'Spatial'\n      and sys.tables.[name] = '{{ this.table }}'\n    ) a\n); exec sp_executesql @drop_spatial_indexes;\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.7239082, "supported_languages": null}, "macro.dbt_synapse.drop_fk_constraints": {"unique_id": "macro.dbt_synapse.drop_fk_constraints", "package_name": "dbt_synapse", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\synapse", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "name": "drop_fk_constraints", "macro_sql": "{% macro drop_fk_constraints() -%}\n{# Altered from https://stackoverflow.com/q/1344401/10415173 #}\n\n{{ log(\"Running drop_fk_constraints() macro...\") }}\n\ndeclare @drop_fk_constraints nvarchar(max) = (\n  select STRING_AGG(a.command, ' ') from (\n    select 'IF OBJECT_ID(''' + SCHEMA_NAME(CONVERT(VARCHAR(MAX), sys.foreign_keys.[schema_id])) + '.' + sys.foreign_keys.[name] + ''', ''F'') IS NOT NULL ALTER TABLE [' + SCHEMA_NAME(sys.foreign_keys.[schema_id]) + '].[' + OBJECT_NAME(sys.foreign_keys.[parent_object_id]) + '] DROP CONSTRAINT [' + sys.foreign_keys.[name]+ '];' as command\n    from sys.foreign_keys\n    inner join sys.tables on sys.foreign_keys.[referenced_object_id] = sys.tables.[object_id]\n    where sys.tables.[name] = '{{ this.table }}'\n    ) a\n); exec sp_executesql @drop_fk_constraints;\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.7239082, "supported_languages": null}, "macro.dbt_synapse.drop_pk_constraints": {"unique_id": "macro.dbt_synapse.drop_pk_constraints", "package_name": "dbt_synapse", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\synapse", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "name": "drop_pk_constraints", "macro_sql": "{% macro drop_pk_constraints() -%}\n{# Altered from https://stackoverflow.com/q/1344401/10415173 #}\n{# and https://stackoverflow.com/a/33785833/10415173         #}\n\n{{ drop_xml_indexes() }}\n\n{{ drop_spatial_indexes() }}\n\n{{ drop_fk_constraints() }}\n\n{{ log(\"Running drop_pk_constraints() macro...\") }}\n\ndeclare @drop_pk_constraints nvarchar(max) = (\n  select STRING_AGG(a.command, ' ') from (\n    select 'IF INDEXPROPERTY(' + CONVERT(VARCHAR(MAX), sys.tables.[object_id]) + ', ''' + sys.indexes.[name] + ''', ''IndexId'') IS NOT NULL ALTER TABLE [' + SCHEMA_NAME(sys.tables.[schema_id]) + '].[' + sys.tables.[name] + '] DROP CONSTRAINT [' + sys.indexes.[name]+ '];' as command\n    from sys.indexes\n    inner join sys.tables on sys.indexes.[object_id] = sys.tables.[object_id]\n    where sys.indexes.is_primary_key = 1\n      and sys.tables.[name] = '{{ this.table }}'\n    ) a\n); exec sp_executesql @drop_pk_constraints;\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_synapse.drop_xml_indexes", "macro.dbt_synapse.drop_spatial_indexes", "macro.dbt_synapse.drop_fk_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.7239082, "supported_languages": null}, "macro.dbt_synapse.drop_all_indexes_on_table": {"unique_id": "macro.dbt_synapse.drop_all_indexes_on_table", "package_name": "dbt_synapse", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\synapse", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "name": "drop_all_indexes_on_table", "macro_sql": "{% macro drop_all_indexes_on_table() -%}\n{# Altered from https://stackoverflow.com/q/1344401/10415173 #}\n{# and https://stackoverflow.com/a/33785833/10415173         #}\n\n{{ drop_pk_constraints() }}\n\n{{ log(\"Dropping remaining indexes...\") }}\n\ndeclare @drop_remaining_indexes_last nvarchar(max) = (\n  select STRING_AGG(a.command, ' ') from (\n    select 'IF INDEXPROPERTY(' + CONVERT(VARCHAR(MAX), sys.tables.[object_id]) + ', ''' + sys.indexes.[name] + ''', ''IndexId'') IS NOT NULL DROP INDEX [' + sys.indexes.[name] + '] ON ' + '[' + SCHEMA_NAME(sys.tables.[schema_id]) + '].[' + OBJECT_NAME(sys.tables.[object_id]) + ']; ' as command\n    from sys.indexes\n    inner join sys.tables on sys.indexes.object_id = sys.tables.object_id\n    where sys.indexes.[name] is not null\n      and sys.tables.[name] = '{{ this.table }}'\n    ) a\n); exec sp_executesql @drop_remaining_indexes_last;\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_synapse.drop_pk_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.724908, "supported_languages": null}, "macro.dbt_synapse.create_clustered_index": {"unique_id": "macro.dbt_synapse.create_clustered_index", "package_name": "dbt_synapse", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\synapse", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "name": "create_clustered_index", "macro_sql": "{% macro create_clustered_index(columns, unique=False) -%}\n  {{ return(create_clustered_index(columns, unique=False)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.724908, "supported_languages": null}, "macro.dbt_synapse.create_nonclustered_index": {"unique_id": "macro.dbt_synapse.create_nonclustered_index", "package_name": "dbt_synapse", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\synapse", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "name": "create_nonclustered_index", "macro_sql": "{% macro create_nonclustered_index(columns, includes=False) %}\n  {{ return(create_nonclustered_index(columns, includes=False)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.724908, "supported_languages": null}, "macro.dbt_synapse.synapse__list_schemas": {"unique_id": "macro.dbt_synapse.synapse__list_schemas", "package_name": "dbt_synapse", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\synapse", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "synapse__list_schemas", "macro_sql": "{% macro synapse__list_schemas(database) %}\n  {% call statement('list_schemas', fetch_result=True, auto_begin=False) -%}\n    select  name as [schema]\n    from sys.schemas\n  {% endcall %}\n  {{ return(load_result('list_schemas').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.725908, "supported_languages": null}, "macro.dbt_synapse.synapse__list_relations_without_caching": {"unique_id": "macro.dbt_synapse.synapse__list_relations_without_caching", "package_name": "dbt_synapse", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\synapse", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "synapse__list_relations_without_caching", "macro_sql": "{% macro synapse__list_relations_without_caching(schema_relation) %}\n  {% call statement('list_relations_without_caching', fetch_result=True) -%}\n    select\n      table_catalog as [database],\n      table_name as [name],\n      table_schema as [schema],\n      case when table_type = 'BASE TABLE' then 'table'\n           when table_type = 'VIEW' then 'view'\n           else table_type\n      end as table_type\n\n    from INFORMATION_SCHEMA.TABLES\n    where table_schema like '{{ schema_relation.schema }}'\n      and table_catalog like '{{ schema_relation.database }}'\n  {% endcall %}\n  {{ return(load_result('list_relations_without_caching').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.7269099, "supported_languages": null}, "macro.dbt_synapse.synapse__drop_relation": {"unique_id": "macro.dbt_synapse.synapse__drop_relation", "package_name": "dbt_synapse", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\synapse", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "synapse__drop_relation", "macro_sql": "{% macro synapse__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    {{ synapse__drop_relation_script(relation) }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_synapse.synapse__drop_relation_script"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.7279088, "supported_languages": null}, "macro.dbt_synapse.synapse__drop_relation_script": {"unique_id": "macro.dbt_synapse.synapse__drop_relation_script", "package_name": "dbt_synapse", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\synapse", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "synapse__drop_relation_script", "macro_sql": "{% macro synapse__drop_relation_script(relation) -%}\n  {% if relation.type == 'view' -%}\n    {% set object_id_type = 'V' %}\n  {% elif relation.type == 'table'%}\n    {% set object_id_type = 'U' %}\n  {%- else -%} invalid target name\n  {% endif %}\n  if object_id ('{{ relation.include(database=False) }}','{{ object_id_type }}') is not null\n    begin\n    drop {{ relation.type }} {{ relation.include(database=False) }}\n    end\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.iginsure.include"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.7279088, "supported_languages": null}, "macro.dbt_synapse.synapse__rename_relation": {"unique_id": "macro.dbt_synapse.synapse__rename_relation", "package_name": "dbt_synapse", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\synapse", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "synapse__rename_relation", "macro_sql": "{% macro synapse__rename_relation(from_relation, to_relation) -%}\n  {% call statement('rename_relation') -%}\n\n    rename object {{ from_relation.include(database=False) }} to {{ to_relation.identifier }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.iginsure.include"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.728911, "supported_languages": null}, "macro.dbt_synapse.synapse__create_schema": {"unique_id": "macro.dbt_synapse.synapse__create_schema", "package_name": "dbt_synapse", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\synapse", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "name": "synapse__create_schema", "macro_sql": "{% macro synapse__create_schema(relation) -%}\n  {% call statement('create_schema') -%}\n    IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = '{{ relation.without_identifier().schema }}')\n    BEGIN\n    EXEC('CREATE SCHEMA [{{ relation.without_identifier().schema }}]')\n    END\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.728911, "supported_languages": null}, "macro.dbt_synapse.synapse__create_table_as": {"unique_id": "macro.dbt_synapse.synapse__create_table_as", "package_name": "dbt_synapse", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\synapse", "path": "macros\\materializations\\models\\table\\create_table_as.sql", "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql", "name": "synapse__create_table_as", "macro_sql": "{% macro synapse__create_table_as(temporary, relation, sql) -%}\n   {%- set index = config.get('index', default=\"CLUSTERED COLUMNSTORE INDEX\") -%}\n   {%- set dist = config.get('dist', default=\"ROUND_ROBIN\") -%}\n   {% set tmp_relation = relation.incorporate(\n   path={\"identifier\": relation.identifier.replace(\"#\", \"\") ~ '_temp_view'},\n   type='view')-%}\n   {%- set temp_view_sql = sql.replace(\"'\", \"''\") -%}\n\n   {{ synapse__drop_relation_script(tmp_relation) }}\n\n   {{ synapse__drop_relation_script(relation) }}\n\n   EXEC('create view [{{ tmp_relation.schema }}].[{{ tmp_relation.identifier }}] as\n    {{ temp_view_sql }}\n    ');\n\n  CREATE TABLE {{ relation.include(database=False) }}\n    WITH(\n      DISTRIBUTION = {{dist}},\n      {{index}}\n      )\n    AS (SELECT * FROM [{{ tmp_relation.schema }}].[{{ tmp_relation.identifier }}])\n\n   {{ synapse__drop_relation_script(tmp_relation) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.replace", "macro.dbt_synapse.synapse__drop_relation_script", "macro.iginsure.include"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.7309084, "supported_languages": null}, "macro.dbt_synapse.synapse__create_view_as": {"unique_id": "macro.dbt_synapse.synapse__create_view_as", "package_name": "dbt_synapse", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\synapse", "path": "macros\\materializations\\models\\view\\create_view_as.sql", "original_file_path": "macros\\materializations\\models\\view\\create_view_as.sql", "name": "synapse__create_view_as", "macro_sql": "{% macro synapse__create_view_as(relation, sql) -%}\n  create view {{ relation.include(database=False) }} as\n    {{ sql }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.iginsure.include"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.7319045, "supported_languages": null}, "macro.dbt_synapse.synapse__create_csv_table": {"unique_id": "macro.dbt_synapse.synapse__create_csv_table", "package_name": "dbt_synapse", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\synapse", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "synapse__create_csv_table", "macro_sql": "{% macro synapse__create_csv_table(model, agate_table) %}\n    {%- set column_override = config.get('column_types', {}) -%}\n    {%- set quote_seed_column = config.get('quote_columns', None) -%}\n    {%- set index = config.get('index', \"HEAP\") -%}\n    {%- set dist = config.get('dist', \"ROUND_ROBIN\") -%}\n\n    {% set sql %}\n        create table {{ this.render() }} (\n            {%- for col_name in agate_table.column_names -%}\n                {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n                {%- set type = column_override.get(col_name, inferred_type) -%}\n                {%- set column_name = (col_name | string) -%}\n                {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n            {%- endfor -%}\n        )\n        WITH (DISTRIBUTION = {{dist}}, {{index}})\n    {% endset %}\n\n    {% call statement('_') -%}\n        {{ sql }}\n    {%- endcall %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.7361875, "supported_languages": null}, "macro.dbt_synapse.synapse__load_csv_rows": {"unique_id": "macro.dbt_synapse.synapse__load_csv_rows", "package_name": "dbt_synapse", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\synapse", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "synapse__load_csv_rows", "macro_sql": "{% macro synapse__load_csv_rows(model, agate_table) %}\n\n    {# Synapse does not support the normal Table Value Constructor #}\n\n    {% set batch_size = get_batch_size() %}\n\n    {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n\n    {% set statements = [] %}\n\n    {% for chunk in agate_table.rows | batch(batch_size) %}\n\n        {% set sql %}\n            insert into {{ this.render() }} ({{ cols_sql }})\n            {% for row in chunk -%}\n                {{'select'+' '}}\n                {%- for column in agate_table.column_names -%}\n                    {#\n                        TSQL catch 22:\n                        strings must be single-quoted &\n                        single-quotes inside of strings must be doubled\n                    #}\n\n                    {% set col_type = agate_table.columns[column].data_type | string %}\n                    {#\n                        None should result in NULL, If the value in the seed file is 0, the database entry should 0\n                    #}\n                    {%-if None == row[column]-%}\n                        NULL\n                    {%-elif ((\"text.Text\" in col_type))-%}\n                        '{{str_replace(row[column])}}'\n                    {#\n                        else handles all other data types such as Date, DateTime, Int, Float (Numeric and Decimal is treated as float)\n                        int, float are implicit conversions\n                    #}\n                    {% else %}\n                        '{{row[column]}}'\n                    {%- endif -%}\n                    {%- if not loop.last%},{%- endif -%}\n                {%- endfor -%}\n                {%- if not loop.last -%} {{' '+'union all'+'\\n'}} {%- endif -%}\n            {%- endfor -%}\n        {% endset %}\n        {% do adapter.add_query(sql, abridge_sql_log=True) %}\n\n        {% if loop.index0 == 0 %}\n            {% do statements.append(sql) %}\n        {% endif %}\n    {% endfor %}\n\n    {# Return SQL so we can render it out into the compiled files #}\n    {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt_synapse.str_replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.7391934, "supported_languages": null}, "macro.dbt_synapse.str_replace": {"unique_id": "macro.dbt_synapse.str_replace", "package_name": "dbt_synapse", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\synapse", "path": "macros\\materializations\\seeds\\str_replace.sql", "original_file_path": "macros\\materializations\\seeds\\str_replace.sql", "name": "str_replace", "macro_sql": "{% macro str_replace(input_string) %}\n  {{ return(input_string.replace(\"'\",\"''\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.7401917, "supported_languages": null}, "macro.dbt_synapse.synapse__split_part": {"unique_id": "macro.dbt_synapse.synapse__split_part", "package_name": "dbt_synapse", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\synapse", "path": "macros\\utils\\split_part.sql", "original_file_path": "macros\\utils\\split_part.sql", "name": "synapse__split_part", "macro_sql": "{% macro synapse__split_part(string_text, delimiter_text, part_number) %}\n\n    (select value from string_split({{ string_text }}, {{ delimiter_text }}, 1) where ordinal = {{ part_number }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.741056, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__get_show_grant_sql": {"unique_id": "macro.dbt_sqlserver.sqlserver__get_show_grant_sql", "package_name": "dbt_sqlserver", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\sqlserver", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "sqlserver__get_show_grant_sql", "macro_sql": "{% macro sqlserver__get_show_grant_sql(relation) %}\n    select\n        GRANTEE as grantee,\n        PRIVILEGE_TYPE as privilege_type\n    from INFORMATION_SCHEMA.TABLE_PRIVILEGES\n    where TABLE_CATALOG = '{{ relation.database }}'\n      and TABLE_SCHEMA = '{{ relation.schema }}'\n      and TABLE_NAME = '{{ relation.identifier }}'\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.742085, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__get_grant_sql": {"unique_id": "macro.dbt_sqlserver.sqlserver__get_grant_sql", "package_name": "dbt_sqlserver", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\sqlserver", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "sqlserver__get_grant_sql", "macro_sql": "\n\n\n{%- macro sqlserver__get_grant_sql(relation, privilege, grantees) -%}\n    {%- set grantees_safe = [] -%}\n    {%- for grantee in grantees -%}\n        {%- set grantee_safe = \"[\" ~ grantee ~ \"]\" -%}\n        {%- do grantees_safe.append(grantee_safe) -%}\n    {%- endfor -%}\n    grant {{ privilege }} on {{ relation }} to {{ grantees_safe | join(', ') }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.7430844, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__get_revoke_sql": {"unique_id": "macro.dbt_sqlserver.sqlserver__get_revoke_sql", "package_name": "dbt_sqlserver", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\sqlserver", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "sqlserver__get_revoke_sql", "macro_sql": "{%- macro sqlserver__get_revoke_sql(relation, privilege, grantees) -%}\n    {%- set grantees_safe = [] -%}\n    {%- for grantee in grantees -%}\n        {%- set grantee_safe = \"[\" ~ grantee ~ \"]\" -%}\n        {%- do grantees_safe.append(grantee_safe) -%}\n    {%- endfor -%}\n    revoke {{ privilege }} on {{ relation }} from {{ grantees_safe | join(', ') }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.7440846, "supported_languages": null}, "macro.dbt_sqlserver.get_provision_sql": {"unique_id": "macro.dbt_sqlserver.get_provision_sql", "package_name": "dbt_sqlserver", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\sqlserver", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "get_provision_sql", "macro_sql": "{% macro get_provision_sql(relation, privilege, grantees) %}\n    {% for grantee in grantees %}\n        if not exists(select name from sys.database_principals where name = '{{ grantee }}')\n        create user [{{ grantee }}] from external provider;\n    {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.7440846, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__apply_grants": {"unique_id": "macro.dbt_sqlserver.sqlserver__apply_grants", "package_name": "dbt_sqlserver", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\sqlserver", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "sqlserver__apply_grants", "macro_sql": "{% macro sqlserver__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n\n            {% if config.get('auto_provision_aad_principals', False) %}\n                {% set provision_statement_list = get_dcl_statement_list(relation, needs_granting, get_provision_sql) %}\n            {% else %}\n                {% set provision_statement_list = [] %}\n            {% endif %}\n\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + provision_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.7462418, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__get_columns_in_relation": {"unique_id": "macro.dbt_sqlserver.sqlserver__get_columns_in_relation", "package_name": "dbt_sqlserver", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\sqlserver", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "sqlserver__get_columns_in_relation", "macro_sql": "{% macro sqlserver__get_columns_in_relation(relation) -%}\n  {% call statement('get_columns_in_relation', fetch_result=True) %}\n\n    with\n        regular_db_cols as (\n            select\n                ordinal_position,\n                column_name,\n                data_type,\n                character_maximum_length,\n                numeric_precision,\n                numeric_scale\n            from [{{ relation.database }}].INFORMATION_SCHEMA.COLUMNS\n            where table_name = '{{ relation.identifier }}'\n              and table_schema = '{{ relation.schema }}'\n        ),\n\n        temp_db_cols as (\n            select\n                ordinal_position,\n                column_name collate database_default as column_name,\n                data_type collate database_default as data_type,\n                character_maximum_length,\n                numeric_precision,\n                numeric_scale\n            from tempdb.INFORMATION_SCHEMA.COLUMNS\n            where table_name like '{{ relation.identifier }}%'\n        ),\n\n        all_cols as (\n            select *\n            from regular_db_cols\n            union\n            select *\n            from temp_db_cols\n        )\n\n    select\n        column_name,\n        data_type,\n        character_maximum_length,\n        numeric_precision,\n        numeric_scale\n    from\n        all_cols\n    order by ordinal_position\n\n  {% endcall %}\n  {% set table = load_result('get_columns_in_relation').table %}\n  {{ return(sql_convert_columns_in_relation(table)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.sql_convert_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.7482603, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__get_columns_in_query": {"unique_id": "macro.dbt_sqlserver.sqlserver__get_columns_in_query", "package_name": "dbt_sqlserver", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\sqlserver", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "sqlserver__get_columns_in_query", "macro_sql": "{% macro sqlserver__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select TOP 0 * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where 0 = 1\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.7482603, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__alter_column_type": {"unique_id": "macro.dbt_sqlserver.sqlserver__alter_column_type", "package_name": "dbt_sqlserver", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\sqlserver", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "sqlserver__alter_column_type", "macro_sql": "{% macro sqlserver__alter_column_type(relation, column_name, new_column_type) %}\n\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') -%}\n\n    alter {{ relation.type }} {{ relation }} add {{ tmp_column }} {{ new_column_type }};\n    update {{ relation }} set {{ tmp_column }} = {{ column_name }};\n    alter {{ relation.type }} {{ relation }} drop column {{ column_name }};\n    exec sp_rename '{{ relation | replace('\"', '') }}.{{ tmp_column }}', '{{ column_name }}', 'column'\n\n  {%- endcall -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.7499588, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__current_timestamp": {"unique_id": "macro.dbt_sqlserver.sqlserver__current_timestamp", "package_name": "dbt_sqlserver", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\sqlserver", "path": "macros\\adapters\\freshness.sql", "original_file_path": "macros\\adapters\\freshness.sql", "name": "sqlserver__current_timestamp", "macro_sql": "{% macro sqlserver__current_timestamp() -%}\n  SYSDATETIME()\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.7508924, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__create_clustered_columnstore_index": {"unique_id": "macro.dbt_sqlserver.sqlserver__create_clustered_columnstore_index", "package_name": "dbt_sqlserver", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\sqlserver", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "name": "sqlserver__create_clustered_columnstore_index", "macro_sql": "{% macro sqlserver__create_clustered_columnstore_index(relation) -%}\n  {%- set cci_name = (relation.schema ~ '_' ~ relation.identifier ~ '_cci') | replace(\".\", \"\") | replace(\" \", \"\") -%}\n  {%- set relation_name = relation.schema ~ '_' ~ relation.identifier -%}\n  {%- set full_relation = '\"' ~ relation.schema ~ '\".\"' ~ relation.identifier ~ '\"' -%}\n  use [{{ relation.database }}];\n  if EXISTS (\n        SELECT * FROM\n        sys.indexes WHERE name = '{{cci_name}}'\n        AND object_id=object_id('{{relation_name}}')\n    )\n  DROP index {{full_relation}}.{{cci_name}}\n  CREATE CLUSTERED COLUMNSTORE INDEX {{cci_name}}\n    ON {{full_relation}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.7553139, "supported_languages": null}, "macro.dbt_sqlserver.drop_xml_indexes": {"unique_id": "macro.dbt_sqlserver.drop_xml_indexes", "package_name": "dbt_sqlserver", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\sqlserver", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "name": "drop_xml_indexes", "macro_sql": "{% macro drop_xml_indexes() -%}\n{# Altered from https://stackoverflow.com/q/1344401/10415173 #}\n{# and https://stackoverflow.com/a/33785833/10415173         #}\n\n\n{{ log(\"Running drop_xml_indexes() macro...\") }}\n\ndeclare @drop_xml_indexes nvarchar(max);\nselect @drop_xml_indexes = (\n    select 'IF INDEXPROPERTY(' + CONVERT(VARCHAR(MAX), sys.tables.[object_id]) + ', ''' + sys.indexes.[name] + ''', ''IndexId'') IS NOT NULL DROP INDEX [' + sys.indexes.[name] + '] ON ' + '[' + SCHEMA_NAME(sys.tables.[schema_id]) + '].[' + OBJECT_NAME(sys.tables.[object_id]) + ']; '\n\tfrom sys.indexes\n    inner join sys.tables on sys.indexes.object_id = sys.tables.object_id\n    where sys.indexes.[name] is not null\n      and sys.indexes.type_desc = 'XML'\n      and sys.tables.[name] = '{{ this.table }}'\n    for xml path('')\n); exec sp_executesql @drop_xml_indexes;\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.7553139, "supported_languages": null}, "macro.dbt_sqlserver.drop_spatial_indexes": {"unique_id": "macro.dbt_sqlserver.drop_spatial_indexes", "package_name": "dbt_sqlserver", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\sqlserver", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "name": "drop_spatial_indexes", "macro_sql": "{% macro drop_spatial_indexes() -%}\n{# Altered from https://stackoverflow.com/q/1344401/10415173 #}\n{# and https://stackoverflow.com/a/33785833/10415173         #}\n\n{{ log(\"Running drop_spatial_indexes() macro...\") }}\n\ndeclare @drop_spatial_indexes nvarchar(max);\nselect @drop_spatial_indexes = (\n    select 'IF INDEXPROPERTY(' + CONVERT(VARCHAR(MAX), sys.tables.[object_id]) + ', ''' + sys.indexes.[name] + ''', ''IndexId'') IS NOT NULL DROP INDEX [' + sys.indexes.[name] + '] ON ' + '[' + SCHEMA_NAME(sys.tables.[schema_id]) + '].[' + OBJECT_NAME(sys.tables.[object_id]) + ']; '\n    from sys.indexes\n    inner join sys.tables on sys.indexes.object_id = sys.tables.object_id\n    where sys.indexes.[name] is not null\n      and sys.indexes.type_desc = 'Spatial'\n      and sys.tables.[name] = '{{ this.table }}'\n    for xml path('')\n); exec sp_executesql @drop_spatial_indexes;\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.7563, "supported_languages": null}, "macro.dbt_sqlserver.drop_fk_constraints": {"unique_id": "macro.dbt_sqlserver.drop_fk_constraints", "package_name": "dbt_sqlserver", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\sqlserver", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "name": "drop_fk_constraints", "macro_sql": "{% macro drop_fk_constraints() -%}\n{# Altered from https://stackoverflow.com/q/1344401/10415173 #}\n\n{{ log(\"Running drop_fk_constraints() macro...\") }}\n\ndeclare @drop_fk_constraints nvarchar(max);\nselect @drop_fk_constraints = (\n    select 'IF OBJECT_ID(''' + SCHEMA_NAME(CONVERT(VARCHAR(MAX), sys.foreign_keys.[schema_id])) + '.' + sys.foreign_keys.[name] + ''', ''F'') IS NOT NULL ALTER TABLE [' + SCHEMA_NAME(sys.foreign_keys.[schema_id]) + '].[' + OBJECT_NAME(sys.foreign_keys.[parent_object_id]) + '] DROP CONSTRAINT [' + sys.foreign_keys.[name]+ '];'\n    from sys.foreign_keys\n    inner join sys.tables on sys.foreign_keys.[referenced_object_id] = sys.tables.[object_id]\n    where sys.tables.[name] = '{{ this.table }}'\n    for xml path('')\n); exec sp_executesql @drop_fk_constraints;\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.7563, "supported_languages": null}, "macro.dbt_sqlserver.drop_pk_constraints": {"unique_id": "macro.dbt_sqlserver.drop_pk_constraints", "package_name": "dbt_sqlserver", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\sqlserver", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "name": "drop_pk_constraints", "macro_sql": "{% macro drop_pk_constraints() -%}\n{# Altered from https://stackoverflow.com/q/1344401/10415173 #}\n{# and https://stackoverflow.com/a/33785833/10415173         #}\n\n{{ drop_xml_indexes() }}\n\n{{ drop_spatial_indexes() }}\n\n{{ drop_fk_constraints() }}\n\n{{ log(\"Running drop_pk_constraints() macro...\") }}\n\ndeclare @drop_pk_constraints nvarchar(max);\nselect @drop_pk_constraints = (\n    select 'IF INDEXPROPERTY(' + CONVERT(VARCHAR(MAX), sys.tables.[object_id]) + ', ''' + sys.indexes.[name] + ''', ''IndexId'') IS NOT NULL ALTER TABLE [' + SCHEMA_NAME(sys.tables.[schema_id]) + '].[' + sys.tables.[name] + '] DROP CONSTRAINT [' + sys.indexes.[name]+ '];'\n    from sys.indexes\n    inner join sys.tables on sys.indexes.[object_id] = sys.tables.[object_id]\n    where sys.indexes.is_primary_key = 1\n      and sys.tables.[name] = '{{ this.table }}'\n    for xml path('')\n); exec sp_executesql @drop_pk_constraints;\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_sqlserver.drop_xml_indexes", "macro.dbt_sqlserver.drop_spatial_indexes", "macro.dbt_sqlserver.drop_fk_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.7563, "supported_languages": null}, "macro.dbt_sqlserver.drop_all_indexes_on_table": {"unique_id": "macro.dbt_sqlserver.drop_all_indexes_on_table", "package_name": "dbt_sqlserver", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\sqlserver", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "name": "drop_all_indexes_on_table", "macro_sql": "{% macro drop_all_indexes_on_table() -%}\n{# Altered from https://stackoverflow.com/q/1344401/10415173 #}\n{# and https://stackoverflow.com/a/33785833/10415173         #}\n\n{{ drop_pk_constraints() }}\n\n{{ log(\"Dropping remaining indexes...\") }}\n\ndeclare @drop_remaining_indexes_last nvarchar(max);\nselect @drop_remaining_indexes_last = (\n    select 'IF INDEXPROPERTY(' + CONVERT(VARCHAR(MAX), sys.tables.[object_id]) + ', ''' + sys.indexes.[name] + ''', ''IndexId'') IS NOT NULL DROP INDEX [' + sys.indexes.[name] + '] ON ' + '[' + SCHEMA_NAME(sys.tables.[schema_id]) + '].[' + OBJECT_NAME(sys.tables.[object_id]) + ']; '\n    from sys.indexes\n    inner join sys.tables on sys.indexes.object_id = sys.tables.object_id\n    where sys.indexes.[name] is not null\n      and sys.tables.[name] = '{{ this.table }}'\n    for xml path('')\n); exec sp_executesql @drop_remaining_indexes_last;\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_sqlserver.drop_pk_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.7572975, "supported_languages": null}, "macro.dbt_sqlserver.create_clustered_index": {"unique_id": "macro.dbt_sqlserver.create_clustered_index", "package_name": "dbt_sqlserver", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\sqlserver", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "name": "create_clustered_index", "macro_sql": "{% macro create_clustered_index(columns, unique=False) -%}\n\n{{ log(\"Creating clustered index...\") }}\n\n{% set idx_name = this.table + '__clustered_index_on_' + columns|join('_') %}\n\nif not exists(select * from sys.indexes\n                where\n                name = '{{ idx_name }}' and\n                object_id = OBJECT_ID('{{ this }}')\n)\nbegin\n\ncreate\n{% if unique -%}\nunique\n{% endif %}\nclustered index\n    {{ idx_name }}\n      on {{ this }} ({{ '[' + columns|join(\"], [\") + ']' }})\nend\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.7572975, "supported_languages": null}, "macro.dbt_sqlserver.create_nonclustered_index": {"unique_id": "macro.dbt_sqlserver.create_nonclustered_index", "package_name": "dbt_sqlserver", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\sqlserver", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "name": "create_nonclustered_index", "macro_sql": "{% macro create_nonclustered_index(columns, includes=False) %}\n\n{{ log(\"Creating nonclustered index...\") }}\n\n{% if includes -%}\n  {% set idx_name = this.table + '__index_on_' + columns|join('_')|replace(\" \", \"_\") + '_includes_' + includes|join('_')|replace(\" \", \"_\") %}\n{% else -%}\n  {% set idx_name = this.table + '__index_on_' + columns|join('_')|replace(\" \", \"_\") %}\n{% endif %}\n\nif not exists(select * from sys.indexes\n                where\n                name = '{{ idx_name }}' and\n                object_id = OBJECT_ID('{{ this }}')\n)\nbegin\ncreate nonclustered index\n    {{ idx_name }}\n      on {{ this }} ({{ '[' + columns|join(\"], [\") + ']' }})\n      {% if includes -%}\n        include ({{ '[' + includes|join(\"], [\") + ']' }})\n      {% endif %}\nend\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.7592928, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__get_catalog": {"unique_id": "macro.dbt_sqlserver.sqlserver__get_catalog", "package_name": "dbt_sqlserver", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\sqlserver", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "sqlserver__get_catalog", "macro_sql": "{% macro sqlserver__get_catalog(information_schemas, schemas) -%}\n\n  {%- call statement('catalog', fetch_result=True) -%}\n\n    with\n    principals as (\n        select\n            name as principal_name,\n            principal_id as principal_id\n        from\n            sys.database_principals\n    ),\n\n    schemas as (\n        select\n            name as schema_name,\n            schema_id as schema_id,\n            principal_id as principal_id\n        from\n            sys.schemas\n    ),\n\n    tables as (\n        select\n            name as table_name,\n            schema_id as schema_id,\n            principal_id as principal_id,\n            'BASE TABLE' as table_type\n        from\n            sys.tables\n    ),\n\n    tables_with_metadata as (\n        select\n            table_name,\n            schema_name,\n            coalesce(tables.principal_id, schemas.principal_id) as owner_principal_id,\n            table_type\n        from\n            tables\n        join schemas on tables.schema_id = schemas.schema_id\n    ),\n\n    views as (\n        select\n            name as table_name,\n            schema_id as schema_id,\n            principal_id as principal_id,\n            'VIEW' as table_type\n        from\n            sys.views\n    ),\n\n    views_with_metadata as (\n        select\n            table_name,\n            schema_name,\n            coalesce(views.principal_id, schemas.principal_id) as owner_principal_id,\n            table_type\n        from\n            views\n        join schemas on views.schema_id = schemas.schema_id\n    ),\n\n    tables_and_views as (\n        select\n            table_name,\n            schema_name,\n            principal_name,\n            table_type\n        from\n            tables_with_metadata\n        join principals on tables_with_metadata.owner_principal_id = principals.principal_id\n        union all\n        select\n            table_name,\n            schema_name,\n            principal_name,\n            table_type\n        from\n            views_with_metadata\n        join principals on views_with_metadata.owner_principal_id = principals.principal_id\n    ),\n\n    cols as (\n\n        select\n            table_catalog as table_database,\n            table_schema,\n            table_name,\n            column_name,\n            ordinal_position as column_index,\n            data_type as column_type\n        from INFORMATION_SCHEMA.COLUMNS\n\n    )\n\n    select\n        cols.table_database,\n        tv.schema_name as table_schema,\n        tv.table_name,\n        tv.table_type,\n        null as table_comment,\n        tv.principal_name as table_owner,\n        cols.column_name,\n        cols.column_index,\n        cols.column_type,\n        null as column_comment\n    from tables_and_views tv\n             join cols on tv.schema_name = cols.table_schema and tv.table_name = cols.table_name\n    order by column_index\n\n    {%- endcall -%}\n\n  {{ return(load_result('catalog').table) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.7612972, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__information_schema_name": {"unique_id": "macro.dbt_sqlserver.sqlserver__information_schema_name", "package_name": "dbt_sqlserver", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\sqlserver", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "sqlserver__information_schema_name", "macro_sql": "{% macro sqlserver__information_schema_name(database) -%}\n  information_schema\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.7612972, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__list_schemas": {"unique_id": "macro.dbt_sqlserver.sqlserver__list_schemas", "package_name": "dbt_sqlserver", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\sqlserver", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "sqlserver__list_schemas", "macro_sql": "{% macro sqlserver__list_schemas(database) %}\n  {% call statement('list_schemas', fetch_result=True, auto_begin=False) -%}\n    USE {{ database }};\n    select  name as [schema]\n    from sys.schemas\n  {% endcall %}\n  {{ return(load_result('list_schemas').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.7612972, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__check_schema_exists": {"unique_id": "macro.dbt_sqlserver.sqlserver__check_schema_exists", "package_name": "dbt_sqlserver", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\sqlserver", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "sqlserver__check_schema_exists", "macro_sql": "{% macro sqlserver__check_schema_exists(information_schema, schema) -%}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) -%}\n    --USE {{ database_name }}\n    SELECT count(*) as schema_exist FROM sys.schemas WHERE name = '{{ schema }}'\n  {%- endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.7622983, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__list_relations_without_caching": {"unique_id": "macro.dbt_sqlserver.sqlserver__list_relations_without_caching", "package_name": "dbt_sqlserver", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\sqlserver", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "sqlserver__list_relations_without_caching", "macro_sql": "{% macro sqlserver__list_relations_without_caching(schema_relation) %}\n  {% call statement('list_relations_without_caching', fetch_result=True) -%}\n    select\n      table_catalog as [database],\n      table_name as [name],\n      table_schema as [schema],\n      case when table_type = 'BASE TABLE' then 'table'\n           when table_type = 'VIEW' then 'view'\n           else table_type\n      end as table_type\n\n    from [{{ schema_relation.database }}].INFORMATION_SCHEMA.TABLES\n    where table_schema like '{{ schema_relation.schema }}'\n  {% endcall %}\n  {{ return(load_result('list_relations_without_caching').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.7622983, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__make_temp_relation": {"unique_id": "macro.dbt_sqlserver.sqlserver__make_temp_relation", "package_name": "dbt_sqlserver", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\sqlserver", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "sqlserver__make_temp_relation", "macro_sql": "{% macro sqlserver__make_temp_relation(base_relation, suffix) %}\n    {% set tmp_identifier = '#' ~  base_relation.identifier ~ suffix %}\n    {% set tmp_relation = base_relation.incorporate(\n                                path={\"identifier\": tmp_identifier}) -%}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.7642977, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__drop_relation": {"unique_id": "macro.dbt_sqlserver.sqlserver__drop_relation", "package_name": "dbt_sqlserver", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\sqlserver", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "sqlserver__drop_relation", "macro_sql": "{% macro sqlserver__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    {{ sqlserver__drop_relation_script(relation) }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_sqlserver.sqlserver__drop_relation_script"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.765297, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__drop_relation_script": {"unique_id": "macro.dbt_sqlserver.sqlserver__drop_relation_script", "package_name": "dbt_sqlserver", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\sqlserver", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "sqlserver__drop_relation_script", "macro_sql": "{% macro sqlserver__drop_relation_script(relation) -%}\n  {% if relation.type == 'view' -%}\n   {% set object_id_type = 'V' %}\n   {% elif relation.type == 'table'%}\n   {% set object_id_type = 'U' %}\n   {%- else -%} invalid target name\n   {% endif %}\n  USE [{{ relation.database }}];\n  if object_id ('{{ relation.include(database=False) }}','{{ object_id_type }}') is not null\n      begin\n      drop {{ relation.type }} {{ relation.include(database=False) }}\n      end\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.iginsure.include"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.765297, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__rename_relation": {"unique_id": "macro.dbt_sqlserver.sqlserver__rename_relation", "package_name": "dbt_sqlserver", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\sqlserver", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "sqlserver__rename_relation", "macro_sql": "{% macro sqlserver__rename_relation(from_relation, to_relation) -%}\n  {% call statement('rename_relation') -%}\n    USE [{{ to_relation.database }}];\n    EXEC sp_rename '{{ from_relation.schema }}.{{ from_relation.identifier }}', '{{ to_relation.identifier }}'\n    IF EXISTS(\n    SELECT *\n    FROM sys.indexes\n    WHERE name='{{ from_relation.schema }}_{{ from_relation.identifier }}_cci' and object_id = OBJECT_ID('{{ from_relation.schema }}.{{ to_relation.identifier }}'))\n    EXEC sp_rename N'{{ from_relation.schema }}.{{ to_relation.identifier }}.{{ from_relation.schema }}_{{ from_relation.identifier }}_cci', N'{{ from_relation.schema }}_{{ to_relation.identifier }}_cci', N'INDEX'\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.7662976, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__create_schema": {"unique_id": "macro.dbt_sqlserver.sqlserver__create_schema", "package_name": "dbt_sqlserver", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\sqlserver", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "name": "sqlserver__create_schema", "macro_sql": "{% macro sqlserver__create_schema(relation) -%}\n  {% call statement('create_schema') -%}\n    USE [{{ relation.database }}];\n    IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = '{{ relation.without_identifier().schema }}')\n    BEGIN\n    EXEC('CREATE SCHEMA [{{ relation.without_identifier().schema }}]')\n    END\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.7682943, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__drop_schema": {"unique_id": "macro.dbt_sqlserver.sqlserver__drop_schema", "package_name": "dbt_sqlserver", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\sqlserver", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "name": "sqlserver__drop_schema", "macro_sql": "{% macro sqlserver__drop_schema(relation) -%}\n  {%- set relations_in_schema = list_relations_without_caching(relation) %}\n\n  {% for row in relations_in_schema %}\n    {%- set schema_relation = api.Relation.create(database=relation.database,\n                                               schema=relation.schema,\n                                               identifier=row[1],\n                                               type=row[3]\n                                               ) -%}\n    {% do drop_relation(schema_relation) %}\n  {%- endfor %}\n\n  {% call statement('drop_schema') -%}\n      IF EXISTS (SELECT * FROM sys.schemas WHERE name = '{{ relation.schema }}')\n      BEGIN\n      EXEC('DROP SCHEMA {{ relation.schema }}')\n      END  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.list_relations_without_caching", "macro.dbt.drop_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.7692955, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__get_incremental_default_sql": {"unique_id": "macro.dbt_sqlserver.sqlserver__get_incremental_default_sql", "package_name": "dbt_sqlserver", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\sqlserver", "path": "macros\\materializations\\models\\incremental\\incremental_strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\incremental_strategies.sql", "name": "sqlserver__get_incremental_default_sql", "macro_sql": "{% macro sqlserver__get_incremental_default_sql(arg_dict) %}\n\n    {% if arg_dict[\"unique_key\"] %}\n        {% do return(get_incremental_delete_insert_sql(arg_dict)) %}\n    {% else %}\n        {% do return(get_incremental_append_sql(arg_dict)) %}\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_incremental_delete_insert_sql", "macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.771298, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__get_merge_sql": {"unique_id": "macro.dbt_sqlserver.sqlserver__get_merge_sql", "package_name": "dbt_sqlserver", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\sqlserver", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "name": "sqlserver__get_merge_sql", "macro_sql": "{% macro sqlserver__get_merge_sql(target, source, unique_key, dest_columns, predicates) %}\n  {{ default__get_merge_sql(target, source, unique_key, dest_columns, predicates) }};\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.7722974, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__get_delete_insert_merge_sql": {"unique_id": "macro.dbt_sqlserver.sqlserver__get_delete_insert_merge_sql", "package_name": "dbt_sqlserver", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\sqlserver", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "name": "sqlserver__get_delete_insert_merge_sql", "macro_sql": "{% macro sqlserver__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) %}\n\n      {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n      {% if unique_key %}\n      {% if unique_key is sequence and unique_key is not string %}\n      delete from {{ target }}\n          where exists (\n                SELECT NULL\n                FROM\n                  {{ source }}\n                WHERE\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last }}\n                {% endfor %}\n            );\n      {% else %}\n      delete from {{ target }}\n          where (\n                {{ unique_key }}) in (\n      select ({{ unique_key }})\n      from {{ source }}\n          );\n\n      {% endif %}\n      {% endif %}\n\n      insert into {{ target }} ({{ dest_cols_csv }})\n          (\n      select {{ dest_cols_csv }}\n      from {{ source }}\n          )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.773297, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt_sqlserver.sqlserver__get_insert_overwrite_merge_sql", "package_name": "dbt_sqlserver", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\sqlserver", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "name": "sqlserver__get_insert_overwrite_merge_sql", "macro_sql": "{% macro sqlserver__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) %}\n  {{ default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) }};\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.773297, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__create_table_as": {"unique_id": "macro.dbt_sqlserver.sqlserver__create_table_as", "package_name": "dbt_sqlserver", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\sqlserver", "path": "macros\\materializations\\models\\table\\create_table_as.sql", "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql", "name": "sqlserver__create_table_as", "macro_sql": "{% macro sqlserver__create_table_as(temporary, relation, sql) -%}\n   {%- set as_columnstore = config.get('as_columnstore', default=true) -%}\n   {% set tmp_relation = relation.incorporate(\n   path={\"identifier\": relation.identifier.replace(\"#\", \"\") ~ '_temp_view'},\n   type='view')-%}\n   {%- set temp_view_sql = sql.replace(\"'\", \"''\") -%}\n\n   {{ sqlserver__drop_relation_script(tmp_relation) }}\n\n   {{ sqlserver__drop_relation_script(relation) }}\n\n   USE [{{ relation.database }}];\n   EXEC('create view {{ tmp_relation.include(database=False) }} as\n    {{ temp_view_sql }}\n    ');\n\n   SELECT * INTO {{ relation }} FROM\n    {{ tmp_relation }}\n\n   {{ sqlserver__drop_relation_script(tmp_relation) }}\n\n   {% if not temporary and as_columnstore -%}\n   {{ sqlserver__create_clustered_columnstore_index(relation) }}\n   {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.replace", "macro.dbt_sqlserver.sqlserver__drop_relation_script", "macro.iginsure.include", "macro.dbt_sqlserver.sqlserver__create_clustered_columnstore_index"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.7754676, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__create_view_exec": {"unique_id": "macro.dbt_sqlserver.sqlserver__create_view_exec", "package_name": "dbt_sqlserver", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\sqlserver", "path": "macros\\materializations\\models\\view\\create_view_as.sql", "original_file_path": "macros\\materializations\\models\\view\\create_view_as.sql", "name": "sqlserver__create_view_exec", "macro_sql": "{% macro sqlserver__create_view_exec(relation, sql) -%}\n    {%- set temp_view_sql = sql.replace(\"'\", \"''\") -%}\n    execute('create view {{ relation.include(database=False) }} as\n    {{ temp_view_sql }}\n    ');\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.replace", "macro.iginsure.include"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.7764678, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__create_view_as": {"unique_id": "macro.dbt_sqlserver.sqlserver__create_view_as", "package_name": "dbt_sqlserver", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\sqlserver", "path": "macros\\materializations\\models\\view\\create_view_as.sql", "original_file_path": "macros\\materializations\\models\\view\\create_view_as.sql", "name": "sqlserver__create_view_as", "macro_sql": "{% macro sqlserver__create_view_as(relation, sql) -%}\n    USE [{{ relation.database }}];\n    {{ sqlserver__create_view_exec(relation, sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__create_view_exec"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.7764678, "supported_languages": null}, "macro.dbt_sqlserver.calc_batch_size": {"unique_id": "macro.dbt_sqlserver.calc_batch_size", "package_name": "dbt_sqlserver", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\sqlserver", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "calc_batch_size", "macro_sql": "{% macro calc_batch_size(num_columns,max_batch_size) %}\n    {#\n        SQL Server allows for a max of 2100 parameters in a single statement.\n        Check if the max_batch_size fits with the number of columns, otherwise\n        reduce the batch size so it fits.\n    #}\n    {% if num_columns * max_batch_size < 2100 %}\n    {% set batch_size = max_batch_size %}\n    {% else %}\n    {% set batch_size = (2100 / num_columns)|int %}\n    {% endif %}\n\n    {{ return(batch_size) }}\n{%  endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.7784684, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__get_binding_char": {"unique_id": "macro.dbt_sqlserver.sqlserver__get_binding_char", "package_name": "dbt_sqlserver", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\sqlserver", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "sqlserver__get_binding_char", "macro_sql": "{% macro sqlserver__get_binding_char() %}\n  {{ return('?') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.7784684, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__get_batch_size": {"unique_id": "macro.dbt_sqlserver.sqlserver__get_batch_size", "package_name": "dbt_sqlserver", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\sqlserver", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "sqlserver__get_batch_size", "macro_sql": "{% macro sqlserver__get_batch_size() %}\n  {{ return(400) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.7784684, "supported_languages": null}, "macro.dbt_sqlserver.basic_load_csv_rows": {"unique_id": "macro.dbt_sqlserver.basic_load_csv_rows", "package_name": "dbt_sqlserver", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\sqlserver", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "basic_load_csv_rows", "macro_sql": "{% macro basic_load_csv_rows(model, batch_size, agate_table) %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.7804682, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__load_csv_rows": {"unique_id": "macro.dbt_sqlserver.sqlserver__load_csv_rows", "package_name": "dbt_sqlserver", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\sqlserver", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "sqlserver__load_csv_rows", "macro_sql": "{% macro sqlserver__load_csv_rows(model, agate_table) %}\n  {% set max_batch_size = get_batch_size() %}\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set batch_size = calc_batch_size(cols_sql|length, max_batch_size) %}\n\n  {{ return(basic_load_csv_rows(model, batch_size, agate_table) )}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt_sqlserver.calc_batch_size", "macro.dbt_sqlserver.basic_load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.7814636, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__post_snapshot": {"unique_id": "macro.dbt_sqlserver.sqlserver__post_snapshot", "package_name": "dbt_sqlserver", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\sqlserver", "path": "macros\\materializations\\snapshots\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshots\\snapshot.sql", "name": "sqlserver__post_snapshot", "macro_sql": "{% macro sqlserver__post_snapshot(staging_relation) %}\n  -- Clean up the snapshot temp table\n  {% do drop_relation(staging_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.7814636, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__create_columns": {"unique_id": "macro.dbt_sqlserver.sqlserver__create_columns", "package_name": "dbt_sqlserver", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\sqlserver", "path": "macros\\materializations\\snapshots\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshots\\snapshot.sql", "name": "sqlserver__create_columns", "macro_sql": "{% macro sqlserver__create_columns(relation, columns) %}\n  {# default__ macro uses \"add column\"\n     TSQL preferes just \"add\"\n  #}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.7824683, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__get_true_sql": {"unique_id": "macro.dbt_sqlserver.sqlserver__get_true_sql", "package_name": "dbt_sqlserver", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\sqlserver", "path": "macros\\materializations\\snapshots\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshots\\snapshot.sql", "name": "sqlserver__get_true_sql", "macro_sql": "{% macro sqlserver__get_true_sql() %}\n  {{ return('1=1') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.7824683, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__snapshot_merge_sql": {"unique_id": "macro.dbt_sqlserver.sqlserver__snapshot_merge_sql", "package_name": "dbt_sqlserver", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\sqlserver", "path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "original_file_path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "name": "sqlserver__snapshot_merge_sql", "macro_sql": "{% macro sqlserver__snapshot_merge_sql(target, source, insert_cols) %}\n  {{ default__snapshot_merge_sql(target, source, insert_cols) }};\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.7833886, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__snapshot_hash_arguments": {"unique_id": "macro.dbt_sqlserver.sqlserver__snapshot_hash_arguments", "package_name": "dbt_sqlserver", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\sqlserver", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "sqlserver__snapshot_hash_arguments", "macro_sql": "{% macro sqlserver__snapshot_hash_arguments(args) %}\n    CONVERT(VARCHAR(32), HashBytes('MD5', {% for arg in args %}\n        coalesce(cast({{ arg }} as varchar(max)), '') {% if not loop.last %} + '|' + {% endif %}\n    {% endfor %}), 2)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.7849107, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__snapshot_string_as_time": {"unique_id": "macro.dbt_sqlserver.sqlserver__snapshot_string_as_time", "package_name": "dbt_sqlserver", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\sqlserver", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "sqlserver__snapshot_string_as_time", "macro_sql": "{% macro sqlserver__snapshot_string_as_time(timestamp) -%}\n    {%- set result = \"CONVERT(DATETIME2, '\" ~ timestamp ~ \"')\" -%}\n    {{ return(result) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.7849107, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__get_test_sql": {"unique_id": "macro.dbt_sqlserver.sqlserver__get_test_sql", "package_name": "dbt_sqlserver", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\sqlserver", "path": "macros\\materializations\\tests\\helpers.sql", "original_file_path": "macros\\materializations\\tests\\helpers.sql", "name": "sqlserver__get_test_sql", "macro_sql": "{% macro sqlserver__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ \"top (\" ~ limit ~ ')' if limit != none }}\n      {{ fail_calc }} as failures,\n      case when {{ fail_calc }} {{ warn_if }}\n        then 'true' else 'false' end as should_warn,\n      case when {{ fail_calc }} {{ error_if }}\n        then 'true' else 'false' end as should_error\n    from (\n      {{ main_sql }}\n    ) dbt_internal_test\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.786899, "supported_languages": null}, "macro.dbt_sqlserver.materialization_test_sqlserver": {"unique_id": "macro.dbt_sqlserver.materialization_test_sqlserver", "package_name": "dbt_sqlserver", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\sqlserver", "path": "macros\\materializations\\tests\\test.sql", "original_file_path": "macros\\materializations\\tests\\test.sql", "name": "materialization_test_sqlserver", "macro_sql": "{%- materialization test, adapter='sqlserver' -%}\n\n  {% set relations = [] %}\n\n  {% set identifier = model['alias'] %}\n  {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n  {% set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database, type='table') -%} %}\n\n\n  {% if old_relation %}\n    {% do adapter.drop_relation(old_relation) %}\n  {% elif not old_relation %}\n    {% do adapter.create_schema(target_relation) %}\n  {% endif %}\n\n  {% call statement(auto_begin=True) %}\n      {{ create_table_as(False, target_relation, sql) }}\n  {% endcall %}\n\n  {% set main_sql %}\n      select *\n      from {{ target_relation }}\n  {% endset %}\n\n  {{ adapter.commit() }}\n\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {% if should_store_failures() %}\n    {% do relations.append(target_relation) %}\n  {% elif not should_store_failures() %}\n    {% do adapter.drop_relation(target_relation) %}\n  {% endif %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.get_test_sql", "macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.7918978, "supported_languages": ["sql"]}, "macro.dbt_sqlserver.sqlserver__any_value": {"unique_id": "macro.dbt_sqlserver.sqlserver__any_value", "package_name": "dbt_sqlserver", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\sqlserver", "path": "macros\\utils\\any_value.sql", "original_file_path": "macros\\utils\\any_value.sql", "name": "sqlserver__any_value", "macro_sql": "{% macro sqlserver__any_value(expression) -%}\n\n    min({{ expression }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.7928991, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__array_construct": {"unique_id": "macro.dbt_sqlserver.sqlserver__array_construct", "package_name": "dbt_sqlserver", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\sqlserver", "path": "macros\\utils\\array_construct.sql", "original_file_path": "macros\\utils\\array_construct.sql", "name": "sqlserver__array_construct", "macro_sql": "{% macro sqlserver__array_construct(inputs, data_type) -%}\n    JSON_ARRAY({{ inputs|join(' , ') }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.7928991, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__cast_bool_to_text": {"unique_id": "macro.dbt_sqlserver.sqlserver__cast_bool_to_text", "package_name": "dbt_sqlserver", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\sqlserver", "path": "macros\\utils\\cast_bool_to_text.sql", "original_file_path": "macros\\utils\\cast_bool_to_text.sql", "name": "sqlserver__cast_bool_to_text", "macro_sql": "{% macro sqlserver__cast_bool_to_text(field) %}\n    case {{ field }}\n        when 1 then 'true'\n        when 0 then 'false'\n        else null\n    end\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.7938979, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__concat": {"unique_id": "macro.dbt_sqlserver.sqlserver__concat", "package_name": "dbt_sqlserver", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\sqlserver", "path": "macros\\utils\\concat.sql", "original_file_path": "macros\\utils\\concat.sql", "name": "sqlserver__concat", "macro_sql": "{% macro sqlserver__concat(fields) -%}\n    concat({{ fields|join(', ') }}, '')\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.7938979, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__dateadd": {"unique_id": "macro.dbt_sqlserver.sqlserver__dateadd", "package_name": "dbt_sqlserver", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\sqlserver", "path": "macros\\utils\\dateadd.sql", "original_file_path": "macros\\utils\\dateadd.sql", "name": "sqlserver__dateadd", "macro_sql": "{% macro sqlserver__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        cast({{ from_date_or_timestamp }} as datetime)\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.794894, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__date_trunc": {"unique_id": "macro.dbt_sqlserver.sqlserver__date_trunc", "package_name": "dbt_sqlserver", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\sqlserver", "path": "macros\\utils\\date_trunc.sql", "original_file_path": "macros\\utils\\date_trunc.sql", "name": "sqlserver__date_trunc", "macro_sql": "{% macro sqlserver__date_trunc(datepart, date) %}\n    CAST(DATEADD({{datepart}}, DATEDIFF({{datepart}}, 0, {{date}}), 0) AS DATE)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.794894, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__hash": {"unique_id": "macro.dbt_sqlserver.sqlserver__hash", "package_name": "dbt_sqlserver", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\sqlserver", "path": "macros\\utils\\hash.sql", "original_file_path": "macros\\utils\\hash.sql", "name": "sqlserver__hash", "macro_sql": "{% macro sqlserver__hash(field) %}\n    convert(varchar(50), hashbytes('md5', {{field}}), 2)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.7958946, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__last_day": {"unique_id": "macro.dbt_sqlserver.sqlserver__last_day", "package_name": "dbt_sqlserver", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\sqlserver", "path": "macros\\utils\\last_day.sql", "original_file_path": "macros\\utils\\last_day.sql", "name": "sqlserver__last_day", "macro_sql": "{% macro sqlserver__last_day(date, datepart) -%}\n\n    {%- if datepart == 'quarter' -%}\n    \tCAST(DATEADD(QUARTER, DATEDIFF(QUARTER, 0, {{ date }}) + 1, -1) AS DATE)\n    {%- elif datepart == 'month' -%}\n        EOMONTH ( {{ date }})\n    {%- elif datepart == 'year' -%}\n        CAST(DATEADD(YEAR, DATEDIFF(year, 0, {{ date }}) + 1, -1) AS DATE)\n    {%- else -%}\n        {{dbt_utils.default_last_day(date, datepart)}}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.796898, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__length": {"unique_id": "macro.dbt_sqlserver.sqlserver__length", "package_name": "dbt_sqlserver", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\sqlserver", "path": "macros\\utils\\length.sql", "original_file_path": "macros\\utils\\length.sql", "name": "sqlserver__length", "macro_sql": "{% macro sqlserver__length(expression) %}\n\n    len( {{ expression }} )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.796898, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__listagg": {"unique_id": "macro.dbt_sqlserver.sqlserver__listagg", "package_name": "dbt_sqlserver", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\sqlserver", "path": "macros\\utils\\listagg.sql", "original_file_path": "macros\\utils\\listagg.sql", "name": "sqlserver__listagg", "macro_sql": "{% macro sqlserver__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    string_agg({{ measure }}, {{ delimiter_text }})\n        {%- if order_by_clause != None %}\n            within group ({{ order_by_clause }})\n        {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.7978983, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__position": {"unique_id": "macro.dbt_sqlserver.sqlserver__position", "package_name": "dbt_sqlserver", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\sqlserver", "path": "macros\\utils\\position.sql", "original_file_path": "macros\\utils\\position.sql", "name": "sqlserver__position", "macro_sql": "{% macro sqlserver__position(substring_text, string_text) %}\n\n    CHARINDEX(\n        {{ substring_text }},\n        {{ string_text }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.7978983, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__safe_cast": {"unique_id": "macro.dbt_sqlserver.sqlserver__safe_cast", "package_name": "dbt_sqlserver", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\sqlserver", "path": "macros\\utils\\safe_cast.sql", "original_file_path": "macros\\utils\\safe_cast.sql", "name": "sqlserver__safe_cast", "macro_sql": "{% macro sqlserver__safe_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.7989, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__split_part": {"unique_id": "macro.dbt_sqlserver.sqlserver__split_part", "package_name": "dbt_sqlserver", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\sqlserver", "path": "macros\\utils\\split_part.sql", "original_file_path": "macros\\utils\\split_part.sql", "name": "sqlserver__split_part", "macro_sql": "{% macro sqlserver__split_part(string_text, delimiter_text, part_number) %}\n\n    LTRIM(CAST(('<X>'+REPLACE({{ string_text }},{{ delimiter_text }} ,'</X><X>')+'</X>') AS XML).value('(/X)[{{ part_number }}]', 'VARCHAR(128)'))\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.799202, "supported_languages": null}, "macro.dbt.copy_grants": {"unique_id": "macro.dbt.copy_grants", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.8022254, "supported_languages": null}, "macro.dbt.default__copy_grants": {"unique_id": "macro.dbt.default__copy_grants", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.8032355, "supported_languages": null}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.8032355, "supported_languages": null}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.8042288, "supported_languages": null}, "macro.dbt.should_revoke": {"unique_id": "macro.dbt.should_revoke", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.8052278, "supported_languages": null}, "macro.dbt.get_show_grant_sql": {"unique_id": "macro.dbt.get_show_grant_sql", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.8052278, "supported_languages": null}, "macro.dbt.default__get_show_grant_sql": {"unique_id": "macro.dbt.default__get_show_grant_sql", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.8052278, "supported_languages": null}, "macro.dbt.get_grant_sql": {"unique_id": "macro.dbt.get_grant_sql", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.8052278, "supported_languages": null}, "macro.dbt.default__get_grant_sql": {"unique_id": "macro.dbt.default__get_grant_sql", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.806222, "supported_languages": null}, "macro.dbt.get_revoke_sql": {"unique_id": "macro.dbt.get_revoke_sql", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.806222, "supported_languages": null}, "macro.dbt.default__get_revoke_sql": {"unique_id": "macro.dbt.default__get_revoke_sql", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.806222, "supported_languages": null}, "macro.dbt.get_dcl_statement_list": {"unique_id": "macro.dbt.get_dcl_statement_list", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.806222, "supported_languages": null}, "macro.dbt.default__get_dcl_statement_list": {"unique_id": "macro.dbt.default__get_dcl_statement_list", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.808228, "supported_languages": null}, "macro.dbt.call_dcl_statements": {"unique_id": "macro.dbt.call_dcl_statements", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.808228, "supported_languages": null}, "macro.dbt.default__call_dcl_statements": {"unique_id": "macro.dbt.default__call_dcl_statements", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.808228, "supported_languages": null}, "macro.dbt.apply_grants": {"unique_id": "macro.dbt.apply_grants", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.808228, "supported_languages": null}, "macro.dbt.default__apply_grants": {"unique_id": "macro.dbt.default__apply_grants", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.8102267, "supported_languages": null}, "macro.dbt.get_columns_in_relation": {"unique_id": "macro.dbt.get_columns_in_relation", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_synapse.synapse__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.8122268, "supported_languages": null}, "macro.dbt.default__get_columns_in_relation": {"unique_id": "macro.dbt.default__get_columns_in_relation", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.8132224, "supported_languages": null}, "macro.dbt.sql_convert_columns_in_relation": {"unique_id": "macro.dbt.sql_convert_columns_in_relation", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.8132224, "supported_languages": null}, "macro.dbt.get_columns_in_query": {"unique_id": "macro.dbt.get_columns_in_query", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_synapse.synapse__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.8132224, "supported_languages": null}, "macro.dbt.default__get_columns_in_query": {"unique_id": "macro.dbt.default__get_columns_in_query", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.8142262, "supported_languages": null}, "macro.dbt.alter_column_type": {"unique_id": "macro.dbt.alter_column_type", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.8142262, "supported_languages": null}, "macro.dbt.default__alter_column_type": {"unique_id": "macro.dbt.default__alter_column_type", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.8152258, "supported_languages": null}, "macro.dbt.alter_relation_add_remove_columns": {"unique_id": "macro.dbt.alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.816226, "supported_languages": null}, "macro.dbt.default__alter_relation_add_remove_columns": {"unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.816709, "supported_languages": null}, "macro.dbt.collect_freshness": {"unique_id": "macro.dbt.collect_freshness", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\freshness.sql", "original_file_path": "macros\\adapters\\freshness.sql", "name": "collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.8197198, "supported_languages": null}, "macro.dbt.default__collect_freshness": {"unique_id": "macro.dbt.default__collect_freshness", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\freshness.sql", "original_file_path": "macros\\adapters\\freshness.sql", "name": "default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.8207173, "supported_languages": null}, "macro.dbt.get_create_index_sql": {"unique_id": "macro.dbt.get_create_index_sql", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "name": "get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.8217182, "supported_languages": null}, "macro.dbt.default__get_create_index_sql": {"unique_id": "macro.dbt.default__get_create_index_sql", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "name": "default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.8227205, "supported_languages": null}, "macro.dbt.create_indexes": {"unique_id": "macro.dbt.create_indexes", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "name": "create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.8227205, "supported_languages": null}, "macro.dbt.default__create_indexes": {"unique_id": "macro.dbt.default__create_indexes", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "name": "default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.8238947, "supported_languages": null}, "macro.dbt.get_catalog": {"unique_id": "macro.dbt.get_catalog", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.8260055, "supported_languages": null}, "macro.dbt.default__get_catalog": {"unique_id": "macro.dbt.default__get_catalog", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.8260055, "supported_languages": null}, "macro.dbt.information_schema_name": {"unique_id": "macro.dbt.information_schema_name", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.8260055, "supported_languages": null}, "macro.dbt.default__information_schema_name": {"unique_id": "macro.dbt.default__information_schema_name", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.8270097, "supported_languages": null}, "macro.dbt.list_schemas": {"unique_id": "macro.dbt.list_schemas", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_synapse.synapse__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.8270097, "supported_languages": null}, "macro.dbt.default__list_schemas": {"unique_id": "macro.dbt.default__list_schemas", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.8270097, "supported_languages": null}, "macro.dbt.check_schema_exists": {"unique_id": "macro.dbt.check_schema_exists", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.8280091, "supported_languages": null}, "macro.dbt.default__check_schema_exists": {"unique_id": "macro.dbt.default__check_schema_exists", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.8280091, "supported_languages": null}, "macro.dbt.list_relations_without_caching": {"unique_id": "macro.dbt.list_relations_without_caching", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_synapse.synapse__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.8280091, "supported_languages": null}, "macro.dbt.default__list_relations_without_caching": {"unique_id": "macro.dbt.default__list_relations_without_caching", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.8280091, "supported_languages": null}, "macro.dbt.alter_column_comment": {"unique_id": "macro.dbt.alter_column_comment", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "name": "alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.8300118, "supported_languages": null}, "macro.dbt.default__alter_column_comment": {"unique_id": "macro.dbt.default__alter_column_comment", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "name": "default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.8300118, "supported_languages": null}, "macro.dbt.alter_relation_comment": {"unique_id": "macro.dbt.alter_relation_comment", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "name": "alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.8300118, "supported_languages": null}, "macro.dbt.default__alter_relation_comment": {"unique_id": "macro.dbt.default__alter_relation_comment", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "name": "default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.8310099, "supported_languages": null}, "macro.dbt.persist_docs": {"unique_id": "macro.dbt.persist_docs", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "name": "persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.8310099, "supported_languages": null}, "macro.dbt.default__persist_docs": {"unique_id": "macro.dbt.default__persist_docs", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "name": "default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.8320057, "supported_languages": null}, "macro.dbt.make_intermediate_relation": {"unique_id": "macro.dbt.make_intermediate_relation", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.8362534, "supported_languages": null}, "macro.dbt.default__make_intermediate_relation": {"unique_id": "macro.dbt.default__make_intermediate_relation", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.8362534, "supported_languages": null}, "macro.dbt.make_temp_relation": {"unique_id": "macro.dbt.make_temp_relation", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.8372526, "supported_languages": null}, "macro.dbt.default__make_temp_relation": {"unique_id": "macro.dbt.default__make_temp_relation", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.8372526, "supported_languages": null}, "macro.dbt.make_backup_relation": {"unique_id": "macro.dbt.make_backup_relation", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.8382566, "supported_languages": null}, "macro.dbt.default__make_backup_relation": {"unique_id": "macro.dbt.default__make_backup_relation", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.8382566, "supported_languages": null}, "macro.dbt.drop_relation": {"unique_id": "macro.dbt.drop_relation", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_synapse.synapse__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.8382566, "supported_languages": null}, "macro.dbt.default__drop_relation": {"unique_id": "macro.dbt.default__drop_relation", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.8392594, "supported_languages": null}, "macro.dbt.truncate_relation": {"unique_id": "macro.dbt.truncate_relation", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.8392594, "supported_languages": null}, "macro.dbt.default__truncate_relation": {"unique_id": "macro.dbt.default__truncate_relation", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.8392594, "supported_languages": null}, "macro.dbt.rename_relation": {"unique_id": "macro.dbt.rename_relation", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_synapse.synapse__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.8392594, "supported_languages": null}, "macro.dbt.default__rename_relation": {"unique_id": "macro.dbt.default__rename_relation", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.8402548, "supported_languages": null}, "macro.dbt.get_or_create_relation": {"unique_id": "macro.dbt.get_or_create_relation", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.8402548, "supported_languages": null}, "macro.dbt.default__get_or_create_relation": {"unique_id": "macro.dbt.default__get_or_create_relation", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.8412545, "supported_languages": null}, "macro.dbt.load_cached_relation": {"unique_id": "macro.dbt.load_cached_relation", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.8412545, "supported_languages": null}, "macro.dbt.load_relation": {"unique_id": "macro.dbt.load_relation", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.8422542, "supported_languages": null}, "macro.dbt.drop_relation_if_exists": {"unique_id": "macro.dbt.drop_relation_if_exists", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.8422542, "supported_languages": null}, "macro.dbt.create_schema": {"unique_id": "macro.dbt.create_schema", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "name": "create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_synapse.synapse__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.8432508, "supported_languages": null}, "macro.dbt.default__create_schema": {"unique_id": "macro.dbt.default__create_schema", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "name": "default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.8432508, "supported_languages": null}, "macro.dbt.drop_schema": {"unique_id": "macro.dbt.drop_schema", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "name": "drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.8432508, "supported_languages": null}, "macro.dbt.default__drop_schema": {"unique_id": "macro.dbt.default__drop_schema", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "name": "default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.8442547, "supported_languages": null}, "macro.dbt.current_timestamp": {"unique_id": "macro.dbt.current_timestamp", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "name": "current_timestamp", "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.8452542, "supported_languages": null}, "macro.dbt.default__current_timestamp": {"unique_id": "macro.dbt.default__current_timestamp", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.8452542, "supported_languages": null}, "macro.dbt.snapshot_get_time": {"unique_id": "macro.dbt.snapshot_get_time", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "name": "snapshot_get_time", "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.8452542, "supported_languages": null}, "macro.dbt.default__snapshot_get_time": {"unique_id": "macro.dbt.default__snapshot_get_time", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "name": "default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.8452542, "supported_languages": null}, "macro.dbt.current_timestamp_backcompat": {"unique_id": "macro.dbt.current_timestamp_backcompat", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "name": "current_timestamp_backcompat", "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.8452542, "supported_languages": null}, "macro.dbt.default__current_timestamp_backcompat": {"unique_id": "macro.dbt.default__current_timestamp_backcompat", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "name": "default__current_timestamp_backcompat", "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.8452542, "supported_languages": null}, "macro.dbt.current_timestamp_in_utc_backcompat": {"unique_id": "macro.dbt.current_timestamp_in_utc_backcompat", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "name": "current_timestamp_in_utc_backcompat", "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__current_timestamp_in_utc_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.8462546, "supported_languages": null}, "macro.dbt.default__current_timestamp_in_utc_backcompat": {"unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "name": "default__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.current_timestamp_backcompat", "macro.dbt.default__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.8462546, "supported_languages": null}, "macro.dbt.convert_datetime": {"unique_id": "macro.dbt.convert_datetime", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "name": "convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.8482542, "supported_languages": null}, "macro.dbt.dates_in_range": {"unique_id": "macro.dbt.dates_in_range", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "name": "dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.8512607, "supported_languages": null}, "macro.dbt.partition_range": {"unique_id": "macro.dbt.partition_range", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "name": "partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.8532557, "supported_languages": null}, "macro.dbt.py_current_timestring": {"unique_id": "macro.dbt.py_current_timestring", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "name": "py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.8547935, "supported_languages": null}, "macro.dbt.statement": {"unique_id": "macro.dbt.statement", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\statement.sql", "original_file_path": "macros\\etc\\statement.sql", "name": "statement", "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.8577938, "supported_languages": null}, "macro.dbt.noop_statement": {"unique_id": "macro.dbt.noop_statement", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\statement.sql", "original_file_path": "macros\\etc\\statement.sql", "name": "noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.8587897, "supported_languages": null}, "macro.dbt.run_query": {"unique_id": "macro.dbt.run_query", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\statement.sql", "original_file_path": "macros\\etc\\statement.sql", "name": "run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.8597896, "supported_languages": null}, "macro.dbt.default__test_accepted_values": {"unique_id": "macro.dbt.default__test_accepted_values", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\generic_test_sql\\accepted_values.sql", "original_file_path": "macros\\generic_test_sql\\accepted_values.sql", "name": "default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.860804, "supported_languages": null}, "macro.dbt.default__test_not_null": {"unique_id": "macro.dbt.default__test_not_null", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\generic_test_sql\\not_null.sql", "original_file_path": "macros\\generic_test_sql\\not_null.sql", "name": "default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.860804, "supported_languages": null}, "macro.dbt.default__test_relationships": {"unique_id": "macro.dbt.default__test_relationships", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\generic_test_sql\\relationships.sql", "original_file_path": "macros\\generic_test_sql\\relationships.sql", "name": "default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.8617897, "supported_languages": null}, "macro.dbt.default__test_unique": {"unique_id": "macro.dbt.default__test_unique", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\generic_test_sql\\unique.sql", "original_file_path": "macros\\generic_test_sql\\unique.sql", "name": "default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.8627899, "supported_languages": null}, "macro.dbt.generate_alias_name": {"unique_id": "macro.dbt.generate_alias_name", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\get_custom_name\\get_custom_alias.sql", "original_file_path": "macros\\get_custom_name\\get_custom_alias.sql", "name": "generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.8627899, "supported_languages": null}, "macro.dbt.default__generate_alias_name": {"unique_id": "macro.dbt.default__generate_alias_name", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\get_custom_name\\get_custom_alias.sql", "original_file_path": "macros\\get_custom_name\\get_custom_alias.sql", "name": "default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name is none -%}\n\n        {{ node.name }}\n\n    {%- else -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.8637898, "supported_languages": null}, "macro.dbt.generate_database_name": {"unique_id": "macro.dbt.generate_database_name", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\get_custom_name\\get_custom_database.sql", "original_file_path": "macros\\get_custom_name\\get_custom_database.sql", "name": "generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.8637898, "supported_languages": null}, "macro.dbt.default__generate_database_name": {"unique_id": "macro.dbt.default__generate_database_name", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\get_custom_name\\get_custom_database.sql", "original_file_path": "macros\\get_custom_name\\get_custom_database.sql", "name": "default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.86479, "supported_languages": null}, "macro.dbt.generate_schema_name": {"unique_id": "macro.dbt.generate_schema_name", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\get_custom_name\\get_custom_schema.sql", "original_file_path": "macros\\get_custom_name\\get_custom_schema.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.8657897, "supported_languages": null}, "macro.dbt.default__generate_schema_name": {"unique_id": "macro.dbt.default__generate_schema_name", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\get_custom_name\\get_custom_schema.sql", "original_file_path": "macros\\get_custom_name\\get_custom_schema.sql", "name": "default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.8657897, "supported_languages": null}, "macro.dbt.generate_schema_name_for_env": {"unique_id": "macro.dbt.generate_schema_name_for_env", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\get_custom_name\\get_custom_schema.sql", "original_file_path": "macros\\get_custom_name\\get_custom_schema.sql", "name": "generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.8669147, "supported_languages": null}, "macro.dbt.set_sql_header": {"unique_id": "macro.dbt.set_sql_header", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\configs.sql", "original_file_path": "macros\\materializations\\configs.sql", "name": "set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.8686454, "supported_languages": null}, "macro.dbt.should_full_refresh": {"unique_id": "macro.dbt.should_full_refresh", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\configs.sql", "original_file_path": "macros\\materializations\\configs.sql", "name": "should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.870654, "supported_languages": null}, "macro.dbt.should_store_failures": {"unique_id": "macro.dbt.should_store_failures", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\configs.sql", "original_file_path": "macros\\materializations\\configs.sql", "name": "should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.8716505, "supported_languages": null}, "macro.dbt.run_hooks": {"unique_id": "macro.dbt.run_hooks", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "name": "run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.874647, "supported_languages": null}, "macro.dbt.make_hook_config": {"unique_id": "macro.dbt.make_hook_config", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "name": "make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.874647, "supported_languages": null}, "macro.dbt.before_begin": {"unique_id": "macro.dbt.before_begin", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "name": "before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.874647, "supported_languages": null}, "macro.dbt.in_transaction": {"unique_id": "macro.dbt.in_transaction", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "name": "in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.8756456, "supported_languages": null}, "macro.dbt.after_commit": {"unique_id": "macro.dbt.after_commit", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "name": "after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.8756456, "supported_languages": null}, "macro.dbt.get_quoted_csv": {"unique_id": "macro.dbt.get_quoted_csv", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "name": "get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.8776467, "supported_languages": null}, "macro.dbt.diff_columns": {"unique_id": "macro.dbt.diff_columns", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "name": "diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.8786478, "supported_languages": null}, "macro.dbt.diff_column_data_types": {"unique_id": "macro.dbt.diff_column_data_types", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "name": "diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.8796415, "supported_languages": null}, "macro.dbt.get_merge_update_columns": {"unique_id": "macro.dbt.get_merge_update_columns", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "name": "get_merge_update_columns", "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.8796415, "supported_languages": null}, "macro.dbt.default__get_merge_update_columns": {"unique_id": "macro.dbt.default__get_merge_update_columns", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "name": "default__get_merge_update_columns", "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.8816462, "supported_languages": null}, "macro.dbt.materialization_incremental_default": {"unique_id": "macro.dbt.materialization_incremental_default", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\incremental.sql", "original_file_path": "macros\\materializations\\models\\incremental\\incremental.sql", "name": "materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n    {% set incremental_predicates = config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.8901951, "supported_languages": ["sql"]}, "macro.dbt.is_incremental": {"unique_id": "macro.dbt.is_incremental", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\is_incremental.sql", "original_file_path": "macros\\materializations\\models\\incremental\\is_incremental.sql", "name": "is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.891054, "supported_languages": null}, "macro.dbt.get_merge_sql": {"unique_id": "macro.dbt.get_merge_sql", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "name": "get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, predicates=none) -%}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, predicates) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.8960707, "supported_languages": null}, "macro.dbt.default__get_merge_sql": {"unique_id": "macro.dbt.default__get_merge_sql", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "name": "default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, predicates) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{ predicates | join(' and ') }}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.8980708, "supported_languages": null}, "macro.dbt.get_delete_insert_merge_sql": {"unique_id": "macro.dbt.get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "name": "get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.899072, "supported_languages": null}, "macro.dbt.default__get_delete_insert_merge_sql": {"unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "name": "default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last }}\n                {% endfor %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            );\n\n        {% endif %}\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.9017057, "supported_languages": null}, "macro.dbt.get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "name": "get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.9027073, "supported_languages": null}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "name": "default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.9046972, "supported_languages": null}, "macro.dbt.incremental_validate_on_schema_change": {"unique_id": "macro.dbt.incremental_validate_on_schema_change", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "name": "incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.9117424, "supported_languages": null}, "macro.dbt.check_for_schema_changes": {"unique_id": "macro.dbt.check_for_schema_changes", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "name": "check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.9127393, "supported_languages": null}, "macro.dbt.sync_column_schemas": {"unique_id": "macro.dbt.sync_column_schemas", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "name": "sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.9146922, "supported_languages": null}, "macro.dbt.process_schema_changes": {"unique_id": "macro.dbt.process_schema_changes", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "name": "process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.916817, "supported_languages": null}, "macro.dbt.get_incremental_append_sql": {"unique_id": "macro.dbt.get_incremental_append_sql", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "name": "get_incremental_append_sql", "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.9190292, "supported_languages": null}, "macro.dbt.default__get_incremental_append_sql": {"unique_id": "macro.dbt.default__get_incremental_append_sql", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "name": "default__get_incremental_append_sql", "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_insert_into_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.9195263, "supported_languages": null}, "macro.dbt.get_incremental_delete_insert_sql": {"unique_id": "macro.dbt.get_incremental_delete_insert_sql", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "name": "get_incremental_delete_insert_sql", "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.9205346, "supported_languages": null}, "macro.dbt.default__get_incremental_delete_insert_sql": {"unique_id": "macro.dbt.default__get_incremental_delete_insert_sql", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "name": "default__get_incremental_delete_insert_sql", "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.9215467, "supported_languages": null}, "macro.dbt.get_incremental_merge_sql": {"unique_id": "macro.dbt.get_incremental_merge_sql", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "name": "get_incremental_merge_sql", "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.9215467, "supported_languages": null}, "macro.dbt.default__get_incremental_merge_sql": {"unique_id": "macro.dbt.default__get_incremental_merge_sql", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "name": "default__get_incremental_merge_sql", "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.9215467, "supported_languages": null}, "macro.dbt.get_incremental_insert_overwrite_sql": {"unique_id": "macro.dbt.get_incremental_insert_overwrite_sql", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "name": "get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_incremental_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.9225345, "supported_languages": null}, "macro.dbt.default__get_incremental_insert_overwrite_sql": {"unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "name": "default__get_incremental_insert_overwrite_sql", "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"predicates\"])) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.9225345, "supported_languages": null}, "macro.dbt.get_incremental_default_sql": {"unique_id": "macro.dbt.get_incremental_default_sql", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "name": "get_incremental_default_sql", "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__get_incremental_default_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.9225345, "supported_languages": null}, "macro.dbt.default__get_incremental_default_sql": {"unique_id": "macro.dbt.default__get_incremental_default_sql", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "name": "default__get_incremental_default_sql", "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.9235685, "supported_languages": null}, "macro.dbt.get_insert_into_sql": {"unique_id": "macro.dbt.get_insert_into_sql", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "name": "get_insert_into_sql", "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.9235685, "supported_languages": null}, "macro.dbt.get_create_table_as_sql": {"unique_id": "macro.dbt.get_create_table_as_sql", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\table\\create_table_as.sql", "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql", "name": "get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.9245956, "supported_languages": null}, "macro.dbt.default__get_create_table_as_sql": {"unique_id": "macro.dbt.default__get_create_table_as_sql", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\table\\create_table_as.sql", "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql", "name": "default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.925538, "supported_languages": null}, "macro.dbt.create_table_as": {"unique_id": "macro.dbt.create_table_as", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\table\\create_table_as.sql", "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql", "name": "create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_synapse.synapse__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.925538, "supported_languages": null}, "macro.dbt.default__create_table_as": {"unique_id": "macro.dbt.default__create_table_as", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\table\\create_table_as.sql", "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql", "name": "default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.iginsure.include"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.926537, "supported_languages": null}, "macro.dbt.materialization_table_default": {"unique_id": "macro.dbt.materialization_table_default", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\table\\table.sql", "original_file_path": "macros\\materializations\\models\\table\\table.sql", "name": "materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n      {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.9295373, "supported_languages": ["sql"]}, "macro.dbt.create_or_replace_view": {"unique_id": "macro.dbt.create_or_replace_view", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\view\\create_or_replace_view.sql", "original_file_path": "macros\\materializations\\models\\view\\create_or_replace_view.sql", "name": "create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=True) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.9325361, "supported_languages": null}, "macro.dbt.get_create_view_as_sql": {"unique_id": "macro.dbt.get_create_view_as_sql", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\view\\create_view_as.sql", "original_file_path": "macros\\materializations\\models\\view\\create_view_as.sql", "name": "get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.9335322, "supported_languages": null}, "macro.dbt.default__get_create_view_as_sql": {"unique_id": "macro.dbt.default__get_create_view_as_sql", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\view\\create_view_as.sql", "original_file_path": "macros\\materializations\\models\\view\\create_view_as.sql", "name": "default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.9335322, "supported_languages": null}, "macro.dbt.create_view_as": {"unique_id": "macro.dbt.create_view_as", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\view\\create_view_as.sql", "original_file_path": "macros\\materializations\\models\\view\\create_view_as.sql", "name": "create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_synapse.synapse__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.9335322, "supported_languages": null}, "macro.dbt.default__create_view_as": {"unique_id": "macro.dbt.default__create_view_as", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\view\\create_view_as.sql", "original_file_path": "macros\\materializations\\models\\view\\create_view_as.sql", "name": "default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.9345396, "supported_languages": null}, "macro.dbt.handle_existing_table": {"unique_id": "macro.dbt.handle_existing_table", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\view\\helpers.sql", "original_file_path": "macros\\materializations\\models\\view\\helpers.sql", "name": "handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.9364562, "supported_languages": null}, "macro.dbt.default__handle_existing_table": {"unique_id": "macro.dbt.default__handle_existing_table", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\view\\helpers.sql", "original_file_path": "macros\\materializations\\models\\view\\helpers.sql", "name": "default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.9364562, "supported_languages": null}, "macro.dbt.materialization_view_default": {"unique_id": "macro.dbt.materialization_view_default", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\view\\view.sql", "original_file_path": "macros\\materializations\\models\\view\\view.sql", "name": "materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n    {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.940458, "supported_languages": ["sql"]}, "macro.dbt.create_csv_table": {"unique_id": "macro.dbt.create_csv_table", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_synapse.synapse__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.9464583, "supported_languages": null}, "macro.dbt.default__create_csv_table": {"unique_id": "macro.dbt.default__create_csv_table", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.947459, "supported_languages": null}, "macro.dbt.reset_csv_table": {"unique_id": "macro.dbt.reset_csv_table", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.947459, "supported_languages": null}, "macro.dbt.default__reset_csv_table": {"unique_id": "macro.dbt.default__reset_csv_table", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.9484582, "supported_languages": null}, "macro.dbt.get_csv_sql": {"unique_id": "macro.dbt.get_csv_sql", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.9484582, "supported_languages": null}, "macro.dbt.default__get_csv_sql": {"unique_id": "macro.dbt.default__get_csv_sql", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.9494603, "supported_languages": null}, "macro.dbt.get_binding_char": {"unique_id": "macro.dbt.get_binding_char", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.9494603, "supported_languages": null}, "macro.dbt.default__get_binding_char": {"unique_id": "macro.dbt.default__get_binding_char", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.9494603, "supported_languages": null}, "macro.dbt.get_batch_size": {"unique_id": "macro.dbt.get_batch_size", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.9502406, "supported_languages": null}, "macro.dbt.default__get_batch_size": {"unique_id": "macro.dbt.default__get_batch_size", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.9502406, "supported_languages": null}, "macro.dbt.get_seed_column_quoted_csv": {"unique_id": "macro.dbt.get_seed_column_quoted_csv", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.9507744, "supported_languages": null}, "macro.dbt.load_csv_rows": {"unique_id": "macro.dbt.load_csv_rows", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_synapse.synapse__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.951886, "supported_languages": null}, "macro.dbt.default__load_csv_rows": {"unique_id": "macro.dbt.default__load_csv_rows", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.9538717, "supported_languages": null}, "macro.dbt.materialization_seed_default": {"unique_id": "macro.dbt.materialization_seed_default", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\seed.sql", "original_file_path": "macros\\materializations\\seeds\\seed.sql", "name": "materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparision later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.9588723, "supported_languages": ["sql"]}, "macro.dbt.create_columns": {"unique_id": "macro.dbt.create_columns", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.9630542, "supported_languages": null}, "macro.dbt.default__create_columns": {"unique_id": "macro.dbt.default__create_columns", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.9640534, "supported_languages": null}, "macro.dbt.post_snapshot": {"unique_id": "macro.dbt.post_snapshot", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.9640534, "supported_languages": null}, "macro.dbt.default__post_snapshot": {"unique_id": "macro.dbt.default__post_snapshot", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.9640534, "supported_languages": null}, "macro.dbt.get_true_sql": {"unique_id": "macro.dbt.get_true_sql", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.9640534, "supported_languages": null}, "macro.dbt.default__get_true_sql": {"unique_id": "macro.dbt.default__get_true_sql", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.9640534, "supported_languages": null}, "macro.dbt.snapshot_staging_table": {"unique_id": "macro.dbt.snapshot_staging_table", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.965053, "supported_languages": null}, "macro.dbt.default__snapshot_staging_table": {"unique_id": "macro.dbt.default__snapshot_staging_table", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.966053, "supported_languages": null}, "macro.dbt.build_snapshot_table": {"unique_id": "macro.dbt.build_snapshot_table", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.966053, "supported_languages": null}, "macro.dbt.default__build_snapshot_table": {"unique_id": "macro.dbt.default__build_snapshot_table", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.9670491, "supported_languages": null}, "macro.dbt.build_snapshot_staging_table": {"unique_id": "macro.dbt.build_snapshot_staging_table", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.967575, "supported_languages": null}, "macro.dbt.materialization_snapshot_default": {"unique_id": "macro.dbt.materialization_snapshot_default", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshots\\snapshot.sql", "name": "materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.9771326, "supported_languages": ["sql"]}, "macro.dbt.snapshot_merge_sql": {"unique_id": "macro.dbt.snapshot_merge_sql", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "original_file_path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "name": "snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.9780786, "supported_languages": null}, "macro.dbt.default__snapshot_merge_sql": {"unique_id": "macro.dbt.default__snapshot_merge_sql", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "original_file_path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "name": "default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.9790893, "supported_languages": null}, "macro.dbt.strategy_dispatch": {"unique_id": "macro.dbt.strategy_dispatch", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.9835086, "supported_languages": null}, "macro.dbt.snapshot_hash_arguments": {"unique_id": "macro.dbt.snapshot_hash_arguments", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.9841774, "supported_languages": null}, "macro.dbt.default__snapshot_hash_arguments": {"unique_id": "macro.dbt.default__snapshot_hash_arguments", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.9851868, "supported_languages": null}, "macro.dbt.snapshot_timestamp_strategy": {"unique_id": "macro.dbt.snapshot_timestamp_strategy", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.986187, "supported_languages": null}, "macro.dbt.snapshot_string_as_time": {"unique_id": "macro.dbt.snapshot_string_as_time", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.986187, "supported_languages": null}, "macro.dbt.default__snapshot_string_as_time": {"unique_id": "macro.dbt.default__snapshot_string_as_time", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.9871905, "supported_languages": null}, "macro.dbt.snapshot_check_all_get_existing_columns": {"unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n          select {{ check_cols_config | join(', ') }} from ({{ node['compiled_code'] }}) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.9891903, "supported_languages": null}, "macro.dbt.snapshot_check_strategy": {"unique_id": "macro.dbt.snapshot_check_strategy", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    {% set updated_at = config.get('updated_at', snapshot_get_time()) %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.9911878, "supported_languages": null}, "macro.dbt.get_test_sql": {"unique_id": "macro.dbt.get_test_sql", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\tests\\helpers.sql", "original_file_path": "macros\\materializations\\tests\\helpers.sql", "name": "get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.9927378, "supported_languages": null}, "macro.dbt.default__get_test_sql": {"unique_id": "macro.dbt.default__get_test_sql", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\tests\\helpers.sql", "original_file_path": "macros\\materializations\\tests\\helpers.sql", "name": "default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.9927378, "supported_languages": null}, "macro.dbt.materialization_test_default": {"unique_id": "macro.dbt.materialization_test_default", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\tests\\test.sql", "original_file_path": "macros\\materializations\\tests\\test.sql", "name": "materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.996233, "supported_languages": ["sql"]}, "macro.dbt.get_where_subquery": {"unique_id": "macro.dbt.get_where_subquery", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\tests\\where_subquery.sql", "original_file_path": "macros\\materializations\\tests\\where_subquery.sql", "name": "get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.9970624, "supported_languages": null}, "macro.dbt.default__get_where_subquery": {"unique_id": "macro.dbt.default__get_where_subquery", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\tests\\where_subquery.sql", "original_file_path": "macros\\materializations\\tests\\where_subquery.sql", "name": "default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786799.998063, "supported_languages": null}, "macro.dbt.build_ref_function": {"unique_id": "macro.dbt.build_ref_function", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "name": "build_ref_function", "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {%- set resolved = ref(*_ref) -%}\n        {%- do ref_dict.update({_ref | join(\".\"): resolved.quote(database=False, schema=False, identifier=False) | string}) -%}\n    {%- endfor -%}\n\ndef ref(*args,dbt_load_df_function):\n    refs = {{ ref_dict | tojson }}\n    key = \".\".join(args)\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.000063, "supported_languages": null}, "macro.dbt.build_source_function": {"unique_id": "macro.dbt.build_source_function", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "name": "build_source_function", "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join(\".\"): resolved.quote(database=False, schema=False, identifier=False) | string}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = \".\".join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.0009887, "supported_languages": null}, "macro.dbt.build_config_dict": {"unique_id": "macro.dbt.build_config_dict", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "name": "build_config_dict", "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {%- for key in model.config.config_keys_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == 'language' -%}\n          {%- set value = 'python' -%}\n        {%- endif -%}\n        {%- set value = model.config[key] -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.0029948, "supported_languages": null}, "macro.dbt.py_script_postfix": {"unique_id": "macro.dbt.py_script_postfix", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "name": "py_script_postfix", "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = '{{ this.database }}'\n    schema = '{{ this.schema }}'\n    identifier = '{{ this.identifier }}'\n    def __repr__(self):\n        return '{{ this }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args: ref(*args, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.build_ref_function", "macro.dbt.build_source_function", "macro.dbt.build_config_dict", "macro.dbt.is_incremental", "macro.dbt.py_script_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.003997, "supported_languages": null}, "macro.dbt.py_script_comment": {"unique_id": "macro.dbt.py_script_comment", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "name": "py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.003997, "supported_languages": null}, "macro.dbt.any_value": {"unique_id": "macro.dbt.any_value", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\any_value.sql", "original_file_path": "macros\\utils\\any_value.sql", "name": "any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.0051792, "supported_languages": null}, "macro.dbt.default__any_value": {"unique_id": "macro.dbt.default__any_value", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\any_value.sql", "original_file_path": "macros\\utils\\any_value.sql", "name": "default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.0051792, "supported_languages": null}, "macro.dbt.array_append": {"unique_id": "macro.dbt.array_append", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\array_append.sql", "original_file_path": "macros\\utils\\array_append.sql", "name": "array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.0051792, "supported_languages": null}, "macro.dbt.default__array_append": {"unique_id": "macro.dbt.default__array_append", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\array_append.sql", "original_file_path": "macros\\utils\\array_append.sql", "name": "default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.0061994, "supported_languages": null}, "macro.dbt.array_concat": {"unique_id": "macro.dbt.array_concat", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\array_concat.sql", "original_file_path": "macros\\utils\\array_concat.sql", "name": "array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.0061994, "supported_languages": null}, "macro.dbt.default__array_concat": {"unique_id": "macro.dbt.default__array_concat", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\array_concat.sql", "original_file_path": "macros\\utils\\array_concat.sql", "name": "default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.0061994, "supported_languages": null}, "macro.dbt.array_construct": {"unique_id": "macro.dbt.array_construct", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\array_construct.sql", "original_file_path": "macros\\utils\\array_construct.sql", "name": "array_construct", "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.0072002, "supported_languages": null}, "macro.dbt.default__array_construct": {"unique_id": "macro.dbt.default__array_construct", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\array_construct.sql", "original_file_path": "macros\\utils\\array_construct.sql", "name": "default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.0072002, "supported_languages": null}, "macro.dbt.bool_or": {"unique_id": "macro.dbt.bool_or", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\bool_or.sql", "original_file_path": "macros\\utils\\bool_or.sql", "name": "bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.0085022, "supported_languages": null}, "macro.dbt.default__bool_or": {"unique_id": "macro.dbt.default__bool_or", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\bool_or.sql", "original_file_path": "macros\\utils\\bool_or.sql", "name": "default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.0085022, "supported_languages": null}, "macro.dbt.cast_bool_to_text": {"unique_id": "macro.dbt.cast_bool_to_text", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\cast_bool_to_text.sql", "original_file_path": "macros\\utils\\cast_bool_to_text.sql", "name": "cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.0095422, "supported_languages": null}, "macro.dbt.default__cast_bool_to_text": {"unique_id": "macro.dbt.default__cast_bool_to_text", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\cast_bool_to_text.sql", "original_file_path": "macros\\utils\\cast_bool_to_text.sql", "name": "default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.0095422, "supported_languages": null}, "macro.dbt.concat": {"unique_id": "macro.dbt.concat", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\concat.sql", "original_file_path": "macros\\utils\\concat.sql", "name": "concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.0095422, "supported_languages": null}, "macro.dbt.default__concat": {"unique_id": "macro.dbt.default__concat", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\concat.sql", "original_file_path": "macros\\utils\\concat.sql", "name": "default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.0105352, "supported_languages": null}, "macro.dbt.type_string": {"unique_id": "macro.dbt.type_string", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.011539, "supported_languages": null}, "macro.dbt.default__type_string": {"unique_id": "macro.dbt.default__type_string", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.011539, "supported_languages": null}, "macro.dbt.type_timestamp": {"unique_id": "macro.dbt.type_timestamp", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.011539, "supported_languages": null}, "macro.dbt.default__type_timestamp": {"unique_id": "macro.dbt.default__type_timestamp", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.0125391, "supported_languages": null}, "macro.dbt.type_float": {"unique_id": "macro.dbt.type_float", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.0125391, "supported_languages": null}, "macro.dbt.default__type_float": {"unique_id": "macro.dbt.default__type_float", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.0125391, "supported_languages": null}, "macro.dbt.type_numeric": {"unique_id": "macro.dbt.type_numeric", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.0125391, "supported_languages": null}, "macro.dbt.default__type_numeric": {"unique_id": "macro.dbt.default__type_numeric", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.0125391, "supported_languages": null}, "macro.dbt.type_bigint": {"unique_id": "macro.dbt.type_bigint", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.013539, "supported_languages": null}, "macro.dbt.default__type_bigint": {"unique_id": "macro.dbt.default__type_bigint", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.013539, "supported_languages": null}, "macro.dbt.type_int": {"unique_id": "macro.dbt.type_int", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.013539, "supported_languages": null}, "macro.dbt.default__type_int": {"unique_id": "macro.dbt.default__type_int", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.013539, "supported_languages": null}, "macro.dbt.type_boolean": {"unique_id": "macro.dbt.type_boolean", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "type_boolean", "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.013539, "supported_languages": null}, "macro.dbt.default__type_boolean": {"unique_id": "macro.dbt.default__type_boolean", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "default__type_boolean", "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.014539, "supported_languages": null}, "macro.dbt.dateadd": {"unique_id": "macro.dbt.dateadd", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\dateadd.sql", "original_file_path": "macros\\utils\\dateadd.sql", "name": "dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.014539, "supported_languages": null}, "macro.dbt.default__dateadd": {"unique_id": "macro.dbt.default__dateadd", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\dateadd.sql", "original_file_path": "macros\\utils\\dateadd.sql", "name": "default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.01554, "supported_languages": null}, "macro.dbt.datediff": {"unique_id": "macro.dbt.datediff", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\datediff.sql", "original_file_path": "macros\\utils\\datediff.sql", "name": "datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.01554, "supported_languages": null}, "macro.dbt.default__datediff": {"unique_id": "macro.dbt.default__datediff", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\datediff.sql", "original_file_path": "macros\\utils\\datediff.sql", "name": "default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.016539, "supported_languages": null}, "macro.dbt.date_trunc": {"unique_id": "macro.dbt.date_trunc", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\date_trunc.sql", "original_file_path": "macros\\utils\\date_trunc.sql", "name": "date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.0167918, "supported_languages": null}, "macro.dbt.default__date_trunc": {"unique_id": "macro.dbt.default__date_trunc", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\date_trunc.sql", "original_file_path": "macros\\utils\\date_trunc.sql", "name": "default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.0176938, "supported_languages": null}, "macro.dbt.escape_single_quotes": {"unique_id": "macro.dbt.escape_single_quotes", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\escape_single_quotes.sql", "original_file_path": "macros\\utils\\escape_single_quotes.sql", "name": "escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.0202796, "supported_languages": null}, "macro.dbt.default__escape_single_quotes": {"unique_id": "macro.dbt.default__escape_single_quotes", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\escape_single_quotes.sql", "original_file_path": "macros\\utils\\escape_single_quotes.sql", "name": "default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.0213027, "supported_languages": null}, "macro.dbt.except": {"unique_id": "macro.dbt.except", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\except.sql", "original_file_path": "macros\\utils\\except.sql", "name": "except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.0223026, "supported_languages": null}, "macro.dbt.default__except": {"unique_id": "macro.dbt.default__except", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\except.sql", "original_file_path": "macros\\utils\\except.sql", "name": "default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.0232935, "supported_languages": null}, "macro.dbt.hash": {"unique_id": "macro.dbt.hash", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\hash.sql", "original_file_path": "macros\\utils\\hash.sql", "name": "hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.0243511, "supported_languages": null}, "macro.dbt.default__hash": {"unique_id": "macro.dbt.default__hash", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\hash.sql", "original_file_path": "macros\\utils\\hash.sql", "name": "default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.0243511, "supported_languages": null}, "macro.dbt.intersect": {"unique_id": "macro.dbt.intersect", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\intersect.sql", "original_file_path": "macros\\utils\\intersect.sql", "name": "intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.0243511, "supported_languages": null}, "macro.dbt.default__intersect": {"unique_id": "macro.dbt.default__intersect", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\intersect.sql", "original_file_path": "macros\\utils\\intersect.sql", "name": "default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.0253668, "supported_languages": null}, "macro.dbt.last_day": {"unique_id": "macro.dbt.last_day", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\last_day.sql", "original_file_path": "macros\\utils\\last_day.sql", "name": "last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.0253668, "supported_languages": null}, "macro.dbt.default_last_day": {"unique_id": "macro.dbt.default_last_day", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\last_day.sql", "original_file_path": "macros\\utils\\last_day.sql", "name": "default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.0264227, "supported_languages": null}, "macro.dbt.default__last_day": {"unique_id": "macro.dbt.default__last_day", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\last_day.sql", "original_file_path": "macros\\utils\\last_day.sql", "name": "default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.0264227, "supported_languages": null}, "macro.dbt.length": {"unique_id": "macro.dbt.length", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\length.sql", "original_file_path": "macros\\utils\\length.sql", "name": "length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.0273674, "supported_languages": null}, "macro.dbt.default__length": {"unique_id": "macro.dbt.default__length", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\length.sql", "original_file_path": "macros\\utils\\length.sql", "name": "default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.0273674, "supported_languages": null}, "macro.dbt.listagg": {"unique_id": "macro.dbt.listagg", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\listagg.sql", "original_file_path": "macros\\utils\\listagg.sql", "name": "listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.0283666, "supported_languages": null}, "macro.dbt.default__listagg": {"unique_id": "macro.dbt.default__listagg", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\listagg.sql", "original_file_path": "macros\\utils\\listagg.sql", "name": "default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.0283666, "supported_languages": null}, "macro.dbt.string_literal": {"unique_id": "macro.dbt.string_literal", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\literal.sql", "original_file_path": "macros\\utils\\literal.sql", "name": "string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.029368, "supported_languages": null}, "macro.dbt.default__string_literal": {"unique_id": "macro.dbt.default__string_literal", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\literal.sql", "original_file_path": "macros\\utils\\literal.sql", "name": "default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.029368, "supported_languages": null}, "macro.dbt.position": {"unique_id": "macro.dbt.position", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\position.sql", "original_file_path": "macros\\utils\\position.sql", "name": "position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.030318, "supported_languages": null}, "macro.dbt.default__position": {"unique_id": "macro.dbt.default__position", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\position.sql", "original_file_path": "macros\\utils\\position.sql", "name": "default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.030318, "supported_languages": null}, "macro.dbt.replace": {"unique_id": "macro.dbt.replace", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\replace.sql", "original_file_path": "macros\\utils\\replace.sql", "name": "replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.0313363, "supported_languages": null}, "macro.dbt.default__replace": {"unique_id": "macro.dbt.default__replace", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\replace.sql", "original_file_path": "macros\\utils\\replace.sql", "name": "default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.0313363, "supported_languages": null}, "macro.dbt.right": {"unique_id": "macro.dbt.right", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\right.sql", "original_file_path": "macros\\utils\\right.sql", "name": "right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.0323353, "supported_languages": null}, "macro.dbt.default__right": {"unique_id": "macro.dbt.default__right", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\right.sql", "original_file_path": "macros\\utils\\right.sql", "name": "default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.0323353, "supported_languages": null}, "macro.dbt.safe_cast": {"unique_id": "macro.dbt.safe_cast", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\safe_cast.sql", "original_file_path": "macros\\utils\\safe_cast.sql", "name": "safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.0323353, "supported_languages": null}, "macro.dbt.default__safe_cast": {"unique_id": "macro.dbt.default__safe_cast", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\safe_cast.sql", "original_file_path": "macros\\utils\\safe_cast.sql", "name": "default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.033429, "supported_languages": null}, "macro.dbt.split_part": {"unique_id": "macro.dbt.split_part", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\split_part.sql", "original_file_path": "macros\\utils\\split_part.sql", "name": "split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_synapse.synapse__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.0352108, "supported_languages": null}, "macro.dbt.default__split_part": {"unique_id": "macro.dbt.default__split_part", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\split_part.sql", "original_file_path": "macros\\utils\\split_part.sql", "name": "default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.0352108, "supported_languages": null}, "macro.dbt._split_part_negative": {"unique_id": "macro.dbt._split_part_negative", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\split_part.sql", "original_file_path": "macros\\utils\\split_part.sql", "name": "_split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.0362153, "supported_languages": null}, "macro.dbt.test_unique": {"unique_id": "macro.dbt.test_unique", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "name": "test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.038212, "supported_languages": null}, "macro.dbt.test_not_null": {"unique_id": "macro.dbt.test_not_null", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "name": "test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.038212, "supported_languages": null}, "macro.dbt.test_accepted_values": {"unique_id": "macro.dbt.test_accepted_values", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "name": "test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.038212, "supported_languages": null}, "macro.dbt.test_relationships": {"unique_id": "macro.dbt.test_relationships", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "name": "test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.0392144, "supported_languages": null}, "macro.dbt_utils.any_value": {"unique_id": "macro.dbt_utils.any_value", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\any_value.sql", "original_file_path": "macros\\cross_db_utils\\any_value.sql", "name": "any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.0400605, "supported_languages": null}, "macro.dbt_utils.default__any_value": {"unique_id": "macro.dbt_utils.default__any_value", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\any_value.sql", "original_file_path": "macros\\cross_db_utils\\any_value.sql", "name": "default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n    \n    any_value({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.0400605, "supported_languages": null}, "macro.dbt_utils.postgres__any_value": {"unique_id": "macro.dbt_utils.postgres__any_value", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\any_value.sql", "original_file_path": "macros\\cross_db_utils\\any_value.sql", "name": "postgres__any_value", "macro_sql": "{% macro postgres__any_value(expression) -%}\n    {#- /*Postgres doesn't support any_value, so we're using min() to get the same result*/ -#}\n    min({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.0400605, "supported_languages": null}, "macro.dbt_utils.array_append": {"unique_id": "macro.dbt_utils.array_append", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\array_append.sql", "original_file_path": "macros\\cross_db_utils\\array_append.sql", "name": "array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt_utils')(array, new_element)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.041433, "supported_languages": null}, "macro.dbt_utils.default__array_append": {"unique_id": "macro.dbt_utils.default__array_append", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\array_append.sql", "original_file_path": "macros\\cross_db_utils\\array_append.sql", "name": "default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.041433, "supported_languages": null}, "macro.dbt_utils.bigquery__array_append": {"unique_id": "macro.dbt_utils.bigquery__array_append", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\array_append.sql", "original_file_path": "macros\\cross_db_utils\\array_append.sql", "name": "bigquery__array_append", "macro_sql": "{% macro bigquery__array_append(array, new_element) -%}\n    {{ dbt_utils.array_concat(array, dbt_utils.array_construct([new_element])) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.array_concat", "macro.dbt_utils.array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.042432, "supported_languages": null}, "macro.dbt_utils.redshift__array_append": {"unique_id": "macro.dbt_utils.redshift__array_append", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\array_append.sql", "original_file_path": "macros\\cross_db_utils\\array_append.sql", "name": "redshift__array_append", "macro_sql": "{% macro redshift__array_append(array, new_element) -%}\n    {{ dbt_utils.array_concat(array, dbt_utils.array_construct([new_element])) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.array_concat", "macro.dbt_utils.array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.042432, "supported_languages": null}, "macro.dbt_utils.array_concat": {"unique_id": "macro.dbt_utils.array_concat", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\array_concat.sql", "original_file_path": "macros\\cross_db_utils\\array_concat.sql", "name": "array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt_utils')(array_1, array_2)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.0434287, "supported_languages": null}, "macro.dbt_utils.default__array_concat": {"unique_id": "macro.dbt_utils.default__array_concat", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\array_concat.sql", "original_file_path": "macros\\cross_db_utils\\array_concat.sql", "name": "default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.0434287, "supported_languages": null}, "macro.dbt_utils.bigquery__array_concat": {"unique_id": "macro.dbt_utils.bigquery__array_concat", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\array_concat.sql", "original_file_path": "macros\\cross_db_utils\\array_concat.sql", "name": "bigquery__array_concat", "macro_sql": "{% macro bigquery__array_concat(array_1, array_2) -%}\n    array_concat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.0434287, "supported_languages": null}, "macro.dbt_utils.redshift__array_concat": {"unique_id": "macro.dbt_utils.redshift__array_concat", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\array_concat.sql", "original_file_path": "macros\\cross_db_utils\\array_concat.sql", "name": "redshift__array_concat", "macro_sql": "{% macro redshift__array_concat(array_1, array_2) -%}\n    array_concat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.0434287, "supported_languages": null}, "macro.dbt_utils.array_construct": {"unique_id": "macro.dbt_utils.array_construct", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\array_construct.sql", "original_file_path": "macros\\cross_db_utils\\array_construct.sql", "name": "array_construct", "macro_sql": "{% macro array_construct(inputs = [], data_type = api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt_utils')(inputs, data_type)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.0444322, "supported_languages": null}, "macro.dbt_utils.default__array_construct": {"unique_id": "macro.dbt_utils.default__array_construct", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\array_construct.sql", "original_file_path": "macros\\cross_db_utils\\array_construct.sql", "name": "default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.0444322, "supported_languages": null}, "macro.dbt_utils.snowflake__array_construct": {"unique_id": "macro.dbt_utils.snowflake__array_construct", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\array_construct.sql", "original_file_path": "macros\\cross_db_utils\\array_construct.sql", "name": "snowflake__array_construct", "macro_sql": "{% macro snowflake__array_construct(inputs, data_type) -%}\n    array_construct( {{ inputs|join(' , ') }} )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.0454283, "supported_languages": null}, "macro.dbt_utils.redshift__array_construct": {"unique_id": "macro.dbt_utils.redshift__array_construct", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\array_construct.sql", "original_file_path": "macros\\cross_db_utils\\array_construct.sql", "name": "redshift__array_construct", "macro_sql": "{% macro redshift__array_construct(inputs, data_type) -%}\n    array( {{ inputs|join(' , ') }} )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.0454283, "supported_languages": null}, "macro.dbt_utils.bigquery__array_construct": {"unique_id": "macro.dbt_utils.bigquery__array_construct", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\array_construct.sql", "original_file_path": "macros\\cross_db_utils\\array_construct.sql", "name": "bigquery__array_construct", "macro_sql": "{% macro bigquery__array_construct(inputs, data_type) -%}\n    [ {{ inputs|join(' , ') }} ]\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.0454283, "supported_languages": null}, "macro.dbt_utils.bool_or": {"unique_id": "macro.dbt_utils.bool_or", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\bool_or.sql", "original_file_path": "macros\\cross_db_utils\\bool_or.sql", "name": "bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.0464277, "supported_languages": null}, "macro.dbt_utils.default__bool_or": {"unique_id": "macro.dbt_utils.default__bool_or", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\bool_or.sql", "original_file_path": "macros\\cross_db_utils\\bool_or.sql", "name": "default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n    \n    bool_or({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.0464277, "supported_languages": null}, "macro.dbt_utils.snowflake__bool_or": {"unique_id": "macro.dbt_utils.snowflake__bool_or", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\bool_or.sql", "original_file_path": "macros\\cross_db_utils\\bool_or.sql", "name": "snowflake__bool_or", "macro_sql": "{% macro snowflake__bool_or(expression) -%}\n    \n    boolor_agg({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.0464277, "supported_languages": null}, "macro.dbt_utils.bigquery__bool_or": {"unique_id": "macro.dbt_utils.bigquery__bool_or", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\bool_or.sql", "original_file_path": "macros\\cross_db_utils\\bool_or.sql", "name": "bigquery__bool_or", "macro_sql": "{% macro bigquery__bool_or(expression) -%}\n    \n    logical_or({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.0464277, "supported_languages": null}, "macro.dbt_utils.cast_array_to_string": {"unique_id": "macro.dbt_utils.cast_array_to_string", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\cast_array_to_string.sql", "original_file_path": "macros\\cross_db_utils\\cast_array_to_string.sql", "name": "cast_array_to_string", "macro_sql": "{% macro cast_array_to_string(array) %}\n  {{ adapter.dispatch('cast_array_to_string', 'dbt_utils') (array) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__cast_array_to_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.047433, "supported_languages": null}, "macro.dbt_utils.default__cast_array_to_string": {"unique_id": "macro.dbt_utils.default__cast_array_to_string", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\cast_array_to_string.sql", "original_file_path": "macros\\cross_db_utils\\cast_array_to_string.sql", "name": "default__cast_array_to_string", "macro_sql": "{% macro default__cast_array_to_string(array) %}\n    cast({{ array }} as {{ dbt_utils.type_string() }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.047433, "supported_languages": null}, "macro.dbt_utils.postgres__cast_array_to_string": {"unique_id": "macro.dbt_utils.postgres__cast_array_to_string", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\cast_array_to_string.sql", "original_file_path": "macros\\cross_db_utils\\cast_array_to_string.sql", "name": "postgres__cast_array_to_string", "macro_sql": "{% macro postgres__cast_array_to_string(array) %}\n    {%- set array_as_string -%}cast({{ array }} as {{ dbt_utils.type_string() }}){%- endset -%}\n    {{ dbt_utils.replace(dbt_utils.replace(array_as_string,\"'}'\",\"']'\"),\"'{'\",\"'['\") }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string", "macro.dbt_utils.replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.048432, "supported_languages": null}, "macro.dbt_utils.redshift__cast_array_to_string": {"unique_id": "macro.dbt_utils.redshift__cast_array_to_string", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\cast_array_to_string.sql", "original_file_path": "macros\\cross_db_utils\\cast_array_to_string.sql", "name": "redshift__cast_array_to_string", "macro_sql": "{% macro redshift__cast_array_to_string(array) %}\n    cast({{ array }} as {{ dbt_utils.type_string() }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.048432, "supported_languages": null}, "macro.dbt_utils.bigquery__cast_array_to_string": {"unique_id": "macro.dbt_utils.bigquery__cast_array_to_string", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\cast_array_to_string.sql", "original_file_path": "macros\\cross_db_utils\\cast_array_to_string.sql", "name": "bigquery__cast_array_to_string", "macro_sql": "{% macro bigquery__cast_array_to_string(array) %}\n    '['||(select string_agg(cast(element as string), ',') from unnest({{ array }}) element)||']'\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.048432, "supported_languages": null}, "macro.dbt_utils.cast_bool_to_text": {"unique_id": "macro.dbt_utils.cast_bool_to_text", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\cast_bool_to_text.sql", "original_file_path": "macros\\cross_db_utils\\cast_bool_to_text.sql", "name": "cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt_utils') (field) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.0494306, "supported_languages": null}, "macro.dbt_utils.default__cast_bool_to_text": {"unique_id": "macro.dbt_utils.default__cast_bool_to_text", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\cast_bool_to_text.sql", "original_file_path": "macros\\cross_db_utils\\cast_bool_to_text.sql", "name": "default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ dbt_utils.type_string() }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.0494306, "supported_languages": null}, "macro.dbt_utils.redshift__cast_bool_to_text": {"unique_id": "macro.dbt_utils.redshift__cast_bool_to_text", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\cast_bool_to_text.sql", "original_file_path": "macros\\cross_db_utils\\cast_bool_to_text.sql", "name": "redshift__cast_bool_to_text", "macro_sql": "{% macro redshift__cast_bool_to_text(field) %}\n    case\n        when {{ field }} is true then 'true'\n        when {{ field }} is false then 'false'\n    end::text\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.0494306, "supported_languages": null}, "macro.dbt_utils.concat": {"unique_id": "macro.dbt_utils.concat", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\concat.sql", "original_file_path": "macros\\cross_db_utils\\concat.sql", "name": "concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt_utils')(fields)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.0504289, "supported_languages": null}, "macro.dbt_utils.default__concat": {"unique_id": "macro.dbt_utils.default__concat", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\concat.sql", "original_file_path": "macros\\cross_db_utils\\concat.sql", "name": "default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.0504289, "supported_languages": null}, "macro.dbt_utils.current_timestamp": {"unique_id": "macro.dbt_utils.current_timestamp", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\current_timestamp.sql", "original_file_path": "macros\\cross_db_utils\\current_timestamp.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {{ return(adapter.dispatch('current_timestamp', 'dbt_utils')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.0534348, "supported_languages": null}, "macro.dbt_utils.default__current_timestamp": {"unique_id": "macro.dbt_utils.default__current_timestamp", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\current_timestamp.sql", "original_file_path": "macros\\cross_db_utils\\current_timestamp.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() %}\n    current_timestamp::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.0534348, "supported_languages": null}, "macro.dbt_utils.redshift__current_timestamp": {"unique_id": "macro.dbt_utils.redshift__current_timestamp", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\current_timestamp.sql", "original_file_path": "macros\\cross_db_utils\\current_timestamp.sql", "name": "redshift__current_timestamp", "macro_sql": "{% macro redshift__current_timestamp() %}\n    getdate()\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.0534348, "supported_languages": null}, "macro.dbt_utils.bigquery__current_timestamp": {"unique_id": "macro.dbt_utils.bigquery__current_timestamp", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\current_timestamp.sql", "original_file_path": "macros\\cross_db_utils\\current_timestamp.sql", "name": "bigquery__current_timestamp", "macro_sql": "{% macro bigquery__current_timestamp() %}\n    current_timestamp\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.0534348, "supported_languages": null}, "macro.dbt_utils.current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\current_timestamp.sql", "original_file_path": "macros\\cross_db_utils\\current_timestamp.sql", "name": "current_timestamp_in_utc", "macro_sql": "{% macro current_timestamp_in_utc() -%}\n  {{ return(adapter.dispatch('current_timestamp_in_utc', 'dbt_utils')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__current_timestamp_in_utc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.0544353, "supported_languages": null}, "macro.dbt_utils.default__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.default__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\current_timestamp.sql", "original_file_path": "macros\\cross_db_utils\\current_timestamp.sql", "name": "default__current_timestamp_in_utc", "macro_sql": "{% macro default__current_timestamp_in_utc() %}\n    {{dbt_utils.current_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.0544353, "supported_languages": null}, "macro.dbt_utils.snowflake__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.snowflake__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\current_timestamp.sql", "original_file_path": "macros\\cross_db_utils\\current_timestamp.sql", "name": "snowflake__current_timestamp_in_utc", "macro_sql": "{% macro snowflake__current_timestamp_in_utc() %}\n    convert_timezone('UTC', {{dbt_utils.current_timestamp()}})::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp", "macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.0544353, "supported_languages": null}, "macro.dbt_utils.postgres__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.postgres__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\current_timestamp.sql", "original_file_path": "macros\\cross_db_utils\\current_timestamp.sql", "name": "postgres__current_timestamp_in_utc", "macro_sql": "{% macro postgres__current_timestamp_in_utc() %}\n    (current_timestamp at time zone 'utc')::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.0544353, "supported_languages": null}, "macro.dbt_utils.redshift__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.redshift__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\current_timestamp.sql", "original_file_path": "macros\\cross_db_utils\\current_timestamp.sql", "name": "redshift__current_timestamp_in_utc", "macro_sql": "{% macro redshift__current_timestamp_in_utc() %}\n    {{ return(dbt_utils.default__current_timestamp_in_utc()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__current_timestamp_in_utc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.0544353, "supported_languages": null}, "macro.dbt_utils.type_string": {"unique_id": "macro.dbt_utils.type_string", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "name": "type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.056435, "supported_languages": null}, "macro.dbt_utils.default__type_string": {"unique_id": "macro.dbt_utils.default__type_string", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "name": "default__type_string", "macro_sql": "{% macro default__type_string() %}\n    string\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.056435, "supported_languages": null}, "macro.dbt_utils.redshift__type_string": {"unique_id": "macro.dbt_utils.redshift__type_string", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "name": "redshift__type_string", "macro_sql": "\n\n{%- macro redshift__type_string() -%}\n    varchar\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.056435, "supported_languages": null}, "macro.dbt_utils.postgres__type_string": {"unique_id": "macro.dbt_utils.postgres__type_string", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "name": "postgres__type_string", "macro_sql": "{% macro postgres__type_string() %}\n    varchar\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.056435, "supported_languages": null}, "macro.dbt_utils.snowflake__type_string": {"unique_id": "macro.dbt_utils.snowflake__type_string", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "name": "snowflake__type_string", "macro_sql": "{% macro snowflake__type_string() %}\n    varchar\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.056435, "supported_languages": null}, "macro.dbt_utils.type_timestamp": {"unique_id": "macro.dbt_utils.type_timestamp", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "name": "type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.0574324, "supported_languages": null}, "macro.dbt_utils.default__type_timestamp": {"unique_id": "macro.dbt_utils.default__type_timestamp", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "name": "default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    timestamp\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.0574324, "supported_languages": null}, "macro.dbt_utils.postgres__type_timestamp": {"unique_id": "macro.dbt_utils.postgres__type_timestamp", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "name": "postgres__type_timestamp", "macro_sql": "{% macro postgres__type_timestamp() %}\n    timestamp without time zone\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.0574324, "supported_languages": null}, "macro.dbt_utils.snowflake__type_timestamp": {"unique_id": "macro.dbt_utils.snowflake__type_timestamp", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "name": "snowflake__type_timestamp", "macro_sql": "{% macro snowflake__type_timestamp() %}\n    timestamp_ntz\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.0574324, "supported_languages": null}, "macro.dbt_utils.type_float": {"unique_id": "macro.dbt_utils.type_float", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "name": "type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.0574324, "supported_languages": null}, "macro.dbt_utils.default__type_float": {"unique_id": "macro.dbt_utils.default__type_float", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "name": "default__type_float", "macro_sql": "{% macro default__type_float() %}\n    float\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.0574324, "supported_languages": null}, "macro.dbt_utils.bigquery__type_float": {"unique_id": "macro.dbt_utils.bigquery__type_float", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "name": "bigquery__type_float", "macro_sql": "{% macro bigquery__type_float() %}\n    float64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.0574324, "supported_languages": null}, "macro.dbt_utils.type_numeric": {"unique_id": "macro.dbt_utils.type_numeric", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "name": "type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.058432, "supported_languages": null}, "macro.dbt_utils.default__type_numeric": {"unique_id": "macro.dbt_utils.default__type_numeric", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "name": "default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    numeric(28, 6)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.058432, "supported_languages": null}, "macro.dbt_utils.bigquery__type_numeric": {"unique_id": "macro.dbt_utils.bigquery__type_numeric", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "name": "bigquery__type_numeric", "macro_sql": "{% macro bigquery__type_numeric() %}\n    numeric\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.058432, "supported_languages": null}, "macro.dbt_utils.type_bigint": {"unique_id": "macro.dbt_utils.type_bigint", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "name": "type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.058432, "supported_languages": null}, "macro.dbt_utils.default__type_bigint": {"unique_id": "macro.dbt_utils.default__type_bigint", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "name": "default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    bigint\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.058432, "supported_languages": null}, "macro.dbt_utils.bigquery__type_bigint": {"unique_id": "macro.dbt_utils.bigquery__type_bigint", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "name": "bigquery__type_bigint", "macro_sql": "{% macro bigquery__type_bigint() %}\n    int64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.058432, "supported_languages": null}, "macro.dbt_utils.type_int": {"unique_id": "macro.dbt_utils.type_int", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "name": "type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.058432, "supported_languages": null}, "macro.dbt_utils.default__type_int": {"unique_id": "macro.dbt_utils.default__type_int", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "name": "default__type_int", "macro_sql": "{% macro default__type_int() %}\n    int\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.059429, "supported_languages": null}, "macro.dbt_utils.bigquery__type_int": {"unique_id": "macro.dbt_utils.bigquery__type_int", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "name": "bigquery__type_int", "macro_sql": "{% macro bigquery__type_int() %}\n    int64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.059429, "supported_languages": null}, "macro.dbt_utils.dateadd": {"unique_id": "macro.dbt_utils.dateadd", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\dateadd.sql", "original_file_path": "macros\\cross_db_utils\\dateadd.sql", "name": "dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt_utils')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.0604327, "supported_languages": null}, "macro.dbt_utils.default__dateadd": {"unique_id": "macro.dbt_utils.default__dateadd", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\dateadd.sql", "original_file_path": "macros\\cross_db_utils\\dateadd.sql", "name": "default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.0604327, "supported_languages": null}, "macro.dbt_utils.bigquery__dateadd": {"unique_id": "macro.dbt_utils.bigquery__dateadd", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\dateadd.sql", "original_file_path": "macros\\cross_db_utils\\dateadd.sql", "name": "bigquery__dateadd", "macro_sql": "{% macro bigquery__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n        datetime_add(\n            cast( {{ from_date_or_timestamp }} as datetime),\n        interval {{ interval }} {{ datepart }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.0604327, "supported_languages": null}, "macro.dbt_utils.postgres__dateadd": {"unique_id": "macro.dbt_utils.postgres__dateadd", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\dateadd.sql", "original_file_path": "macros\\cross_db_utils\\dateadd.sql", "name": "postgres__dateadd", "macro_sql": "{% macro postgres__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ from_date_or_timestamp }} + ((interval '1 {{ datepart }}') * ({{ interval }}))\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.0604327, "supported_languages": null}, "macro.dbt_utils.redshift__dateadd": {"unique_id": "macro.dbt_utils.redshift__dateadd", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\dateadd.sql", "original_file_path": "macros\\cross_db_utils\\dateadd.sql", "name": "redshift__dateadd", "macro_sql": "{% macro redshift__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ return(dbt_utils.default__dateadd(datepart, interval, from_date_or_timestamp)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.061428, "supported_languages": null}, "macro.dbt_utils.datediff": {"unique_id": "macro.dbt_utils.datediff", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datediff.sql", "original_file_path": "macros\\cross_db_utils\\datediff.sql", "name": "datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt_utils')(first_date, second_date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.0644321, "supported_languages": null}, "macro.dbt_utils.default__datediff": {"unique_id": "macro.dbt_utils.default__datediff", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datediff.sql", "original_file_path": "macros\\cross_db_utils\\datediff.sql", "name": "default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.0644321, "supported_languages": null}, "macro.dbt_utils.bigquery__datediff": {"unique_id": "macro.dbt_utils.bigquery__datediff", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datediff.sql", "original_file_path": "macros\\cross_db_utils\\datediff.sql", "name": "bigquery__datediff", "macro_sql": "{% macro bigquery__datediff(first_date, second_date, datepart) -%}\n\n    datetime_diff(\n        cast({{second_date}} as datetime),\n        cast({{first_date}} as datetime),\n        {{datepart}}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.0644321, "supported_languages": null}, "macro.dbt_utils.postgres__datediff": {"unique_id": "macro.dbt_utils.postgres__datediff", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datediff.sql", "original_file_path": "macros\\cross_db_utils\\datediff.sql", "name": "postgres__datediff", "macro_sql": "{% macro postgres__datediff(first_date, second_date, datepart) -%}\n\n    {% if datepart == 'year' %}\n        (date_part('year', ({{second_date}})::date) - date_part('year', ({{first_date}})::date))\n    {% elif datepart == 'quarter' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 4 + date_part('quarter', ({{second_date}})::date) - date_part('quarter', ({{first_date}})::date))\n    {% elif datepart == 'month' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 12 + date_part('month', ({{second_date}})::date) - date_part('month', ({{first_date}})::date))\n    {% elif datepart == 'day' %}\n        (({{second_date}})::date - ({{first_date}})::date)\n    {% elif datepart == 'week' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} / 7 + case\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {% elif datepart == 'hour' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} * 24 + date_part('hour', ({{second_date}})::timestamp) - date_part('hour', ({{first_date}})::timestamp))\n    {% elif datepart == 'minute' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'hour') }} * 60 + date_part('minute', ({{second_date}})::timestamp) - date_part('minute', ({{first_date}})::timestamp))\n    {% elif datepart == 'second' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60 + floor(date_part('second', ({{second_date}})::timestamp)) - floor(date_part('second', ({{first_date}})::timestamp)))\n    {% elif datepart == 'millisecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000 + floor(date_part('millisecond', ({{second_date}})::timestamp)) - floor(date_part('millisecond', ({{first_date}})::timestamp)))\n    {% elif datepart == 'microsecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000000 + floor(date_part('microsecond', ({{second_date}})::timestamp)) - floor(date_part('microsecond', ({{first_date}})::timestamp)))\n    {% else %}\n        {{ exceptions.raise_compiler_error(\"Unsupported datepart for macro datediff in postgres: {!r}\".format(datepart)) }}\n    {% endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.0674298, "supported_languages": null}, "macro.dbt_utils.redshift__datediff": {"unique_id": "macro.dbt_utils.redshift__datediff", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datediff.sql", "original_file_path": "macros\\cross_db_utils\\datediff.sql", "name": "redshift__datediff", "macro_sql": "{% macro redshift__datediff(first_date, second_date, datepart) -%}\n\n    {{ return(dbt_utils.default__datediff(first_date, second_date, datepart)) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.0674298, "supported_languages": null}, "macro.dbt_utils.date_trunc": {"unique_id": "macro.dbt_utils.date_trunc", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\date_trunc.sql", "original_file_path": "macros\\cross_db_utils\\date_trunc.sql", "name": "date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt_utils') (datepart, date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.070416, "supported_languages": null}, "macro.dbt_utils.default__date_trunc": {"unique_id": "macro.dbt_utils.default__date_trunc", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\date_trunc.sql", "original_file_path": "macros\\cross_db_utils\\date_trunc.sql", "name": "default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.070416, "supported_languages": null}, "macro.dbt_utils.bigquery__date_trunc": {"unique_id": "macro.dbt_utils.bigquery__date_trunc", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\date_trunc.sql", "original_file_path": "macros\\cross_db_utils\\date_trunc.sql", "name": "bigquery__date_trunc", "macro_sql": "{% macro bigquery__date_trunc(datepart, date) -%}\n    timestamp_trunc(\n        cast({{date}} as timestamp),\n        {{datepart}}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.070416, "supported_languages": null}, "macro.dbt_utils.escape_single_quotes": {"unique_id": "macro.dbt_utils.escape_single_quotes", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\escape_single_quotes.sql", "original_file_path": "macros\\cross_db_utils\\escape_single_quotes.sql", "name": "escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.0714133, "supported_languages": null}, "macro.dbt_utils.default__escape_single_quotes": {"unique_id": "macro.dbt_utils.default__escape_single_quotes", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\escape_single_quotes.sql", "original_file_path": "macros\\cross_db_utils\\escape_single_quotes.sql", "name": "default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.0714133, "supported_languages": null}, "macro.dbt_utils.snowflake__escape_single_quotes": {"unique_id": "macro.dbt_utils.snowflake__escape_single_quotes", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\escape_single_quotes.sql", "original_file_path": "macros\\cross_db_utils\\escape_single_quotes.sql", "name": "snowflake__escape_single_quotes", "macro_sql": "{% macro snowflake__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.0714133, "supported_languages": null}, "macro.dbt_utils.bigquery__escape_single_quotes": {"unique_id": "macro.dbt_utils.bigquery__escape_single_quotes", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\escape_single_quotes.sql", "original_file_path": "macros\\cross_db_utils\\escape_single_quotes.sql", "name": "bigquery__escape_single_quotes", "macro_sql": "{% macro bigquery__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.072417, "supported_languages": null}, "macro.dbt_utils.except": {"unique_id": "macro.dbt_utils.except", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\except.sql", "original_file_path": "macros\\cross_db_utils\\except.sql", "name": "except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt_utils')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.072417, "supported_languages": null}, "macro.dbt_utils.default__except": {"unique_id": "macro.dbt_utils.default__except", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\except.sql", "original_file_path": "macros\\cross_db_utils\\except.sql", "name": "default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.072417, "supported_languages": null}, "macro.dbt_utils.bigquery__except": {"unique_id": "macro.dbt_utils.bigquery__except", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\except.sql", "original_file_path": "macros\\cross_db_utils\\except.sql", "name": "bigquery__except", "macro_sql": "{% macro bigquery__except() %}\n\n    except distinct\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.072417, "supported_languages": null}, "macro.dbt_utils.hash": {"unique_id": "macro.dbt_utils.hash", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\hash.sql", "original_file_path": "macros\\cross_db_utils\\hash.sql", "name": "hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt_utils') (field)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.0737324, "supported_languages": null}, "macro.dbt_utils.default__hash": {"unique_id": "macro.dbt_utils.default__hash", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\hash.sql", "original_file_path": "macros\\cross_db_utils\\hash.sql", "name": "default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{field}} as {{dbt_utils.type_string()}}))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.0737324, "supported_languages": null}, "macro.dbt_utils.bigquery__hash": {"unique_id": "macro.dbt_utils.bigquery__hash", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\hash.sql", "original_file_path": "macros\\cross_db_utils\\hash.sql", "name": "bigquery__hash", "macro_sql": "{% macro bigquery__hash(field) -%}\n    to_hex({{dbt_utils.default__hash(field)}})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.0737324, "supported_languages": null}, "macro.dbt_utils.identifier": {"unique_id": "macro.dbt_utils.identifier", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\identifier.sql", "original_file_path": "macros\\cross_db_utils\\identifier.sql", "name": "identifier", "macro_sql": "{% macro identifier(value) %}\t\n  {%- set error_message = '\n    Warning: the `identifier` macro is no longer supported and will be deprecated in a future release of dbt-utils. \\\n    Use `adapter.quote` instead. The {}.{} model triggered this warning. \\\n    '.format(model.package_name, model.name) -%}\n  {%- do exceptions.warn(error_message) -%}\n  {{ return(adapter.dispatch('identifier', 'dbt_utils') (value)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__identifier"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.0747497, "supported_languages": null}, "macro.dbt_utils.default__identifier": {"unique_id": "macro.dbt_utils.default__identifier", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\identifier.sql", "original_file_path": "macros\\cross_db_utils\\identifier.sql", "name": "default__identifier", "macro_sql": "{% macro default__identifier(value) -%}\t\n    \"{{ value }}\"\t\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.0747497, "supported_languages": null}, "macro.dbt_utils.bigquery__identifier": {"unique_id": "macro.dbt_utils.bigquery__identifier", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\identifier.sql", "original_file_path": "macros\\cross_db_utils\\identifier.sql", "name": "bigquery__identifier", "macro_sql": "{% macro bigquery__identifier(value) -%}\t\n    `{{ value }}`\t\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.0747497, "supported_languages": null}, "macro.dbt_utils.intersect": {"unique_id": "macro.dbt_utils.intersect", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\intersect.sql", "original_file_path": "macros\\cross_db_utils\\intersect.sql", "name": "intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt_utils')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.0761862, "supported_languages": null}, "macro.dbt_utils.default__intersect": {"unique_id": "macro.dbt_utils.default__intersect", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\intersect.sql", "original_file_path": "macros\\cross_db_utils\\intersect.sql", "name": "default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.0761862, "supported_languages": null}, "macro.dbt_utils.bigquery__intersect": {"unique_id": "macro.dbt_utils.bigquery__intersect", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\intersect.sql", "original_file_path": "macros\\cross_db_utils\\intersect.sql", "name": "bigquery__intersect", "macro_sql": "{% macro bigquery__intersect() %}\n\n    intersect distinct\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.0761862, "supported_languages": null}, "macro.dbt_utils.last_day": {"unique_id": "macro.dbt_utils.last_day", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\last_day.sql", "original_file_path": "macros\\cross_db_utils\\last_day.sql", "name": "last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt_utils') (date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.0772004, "supported_languages": null}, "macro.dbt_utils.default_last_day": {"unique_id": "macro.dbt_utils.default_last_day", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\last_day.sql", "original_file_path": "macros\\cross_db_utils\\last_day.sql", "name": "default_last_day", "macro_sql": "\n\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt_utils.dateadd('day', '-1',\n        dbt_utils.dateadd(datepart, '1', dbt_utils.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.0772004, "supported_languages": null}, "macro.dbt_utils.default__last_day": {"unique_id": "macro.dbt_utils.default__last_day", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\last_day.sql", "original_file_path": "macros\\cross_db_utils\\last_day.sql", "name": "default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt_utils.default_last_day(date, datepart)}}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.0772004, "supported_languages": null}, "macro.dbt_utils.postgres__last_day": {"unique_id": "macro.dbt_utils.postgres__last_day", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\last_day.sql", "original_file_path": "macros\\cross_db_utils\\last_day.sql", "name": "postgres__last_day", "macro_sql": "{% macro postgres__last_day(date, datepart) -%}\n\n    {%- if datepart == 'quarter' -%}\n    -- postgres dateadd does not support quarter interval.\n    cast(\n        {{dbt_utils.dateadd('day', '-1',\n        dbt_utils.dateadd('month', '3', dbt_utils.date_trunc(datepart, date))\n        )}}\n        as date)\n    {%- else -%}\n    {{dbt_utils.default_last_day(date, datepart)}}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.date_trunc", "macro.dbt_utils.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.0781996, "supported_languages": null}, "macro.dbt_utils.redshift__last_day": {"unique_id": "macro.dbt_utils.redshift__last_day", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\last_day.sql", "original_file_path": "macros\\cross_db_utils\\last_day.sql", "name": "redshift__last_day", "macro_sql": "{% macro redshift__last_day(date, datepart) %}\n\n    {{ return(dbt_utils.default__last_day(date, datepart)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.0781996, "supported_languages": null}, "macro.dbt_utils.length": {"unique_id": "macro.dbt_utils.length", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\length.sql", "original_file_path": "macros\\cross_db_utils\\length.sql", "name": "length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.0791967, "supported_languages": null}, "macro.dbt_utils.default__length": {"unique_id": "macro.dbt_utils.default__length", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\length.sql", "original_file_path": "macros\\cross_db_utils\\length.sql", "name": "default__length", "macro_sql": "{% macro default__length(expression) %}\n    \n    length(\n        {{ expression }}\n    )\n    \n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.0791967, "supported_languages": null}, "macro.dbt_utils.redshift__length": {"unique_id": "macro.dbt_utils.redshift__length", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\length.sql", "original_file_path": "macros\\cross_db_utils\\length.sql", "name": "redshift__length", "macro_sql": "{% macro redshift__length(expression) %}\n\n    len(\n        {{ expression }}\n    )\n    \n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.0791967, "supported_languages": null}, "macro.dbt_utils.listagg": {"unique_id": "macro.dbt_utils.listagg", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\listagg.sql", "original_file_path": "macros\\cross_db_utils\\listagg.sql", "name": "listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt_utils') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.082199, "supported_languages": null}, "macro.dbt_utils.default__listagg": {"unique_id": "macro.dbt_utils.default__listagg", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\listagg.sql", "original_file_path": "macros\\cross_db_utils\\listagg.sql", "name": "default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.082199, "supported_languages": null}, "macro.dbt_utils.bigquery__listagg": {"unique_id": "macro.dbt_utils.bigquery__listagg", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\listagg.sql", "original_file_path": "macros\\cross_db_utils\\listagg.sql", "name": "bigquery__listagg", "macro_sql": "{% macro bigquery__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        {% if limit_num -%}\n        limit {{ limit_num }}\n        {%- endif %}\n        )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.0832822, "supported_languages": null}, "macro.dbt_utils.postgres__listagg": {"unique_id": "macro.dbt_utils.postgres__listagg", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\listagg.sql", "original_file_path": "macros\\cross_db_utils\\listagg.sql", "name": "postgres__listagg", "macro_sql": "{% macro postgres__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n    \n    {% if limit_num -%}\n    array_to_string(\n        (array_agg(\n            {{ measure }}\n            {% if order_by_clause -%}\n            {{ order_by_clause }}\n            {%- endif %}\n        ))[1:{{ limit_num }}],\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        )\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.0843198, "supported_languages": null}, "macro.dbt_utils.redshift__listagg": {"unique_id": "macro.dbt_utils.redshift__listagg", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\listagg.sql", "original_file_path": "macros\\cross_db_utils\\listagg.sql", "name": "redshift__listagg", "macro_sql": "{% macro redshift__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    {% set ns = namespace() %}\n    {% set ns.delimiter_text_regex = delimiter_text|trim(\"'\") %}\n    {% set special_chars %}\\,^,$,.,|,?,*,+,(,),[,],{,}{% endset %}  \n    {%- for char in special_chars.split(',') -%}\n        {% set escape_char %}\\\\{{ char }}{% endset %}\n        {% set ns.delimiter_text_regex = ns.delimiter_text_regex|replace(char,escape_char) %}\n    {%- endfor -%}\n\n    {% set regex %}'([^{{ ns.delimiter_text_regex }}]+{{ ns.delimiter_text_regex }}){1,{{ limit_num - 1}}}[^{{ ns.delimiter_text_regex }}]+'{% endset %}\n    regexp_substr(\n        listagg(\n            {{ measure }},\n            {{ delimiter_text }}\n            )\n            {% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n        ,{{ regex }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.08633, "supported_languages": null}, "macro.dbt_utils.string_literal": {"unique_id": "macro.dbt_utils.string_literal", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\literal.sql", "original_file_path": "macros\\cross_db_utils\\literal.sql", "name": "string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt_utils') (value)) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.088331, "supported_languages": null}, "macro.dbt_utils.default__string_literal": {"unique_id": "macro.dbt_utils.default__string_literal", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\literal.sql", "original_file_path": "macros\\cross_db_utils\\literal.sql", "name": "default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.089341, "supported_languages": null}, "macro.dbt_utils.position": {"unique_id": "macro.dbt_utils.position", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\position.sql", "original_file_path": "macros\\cross_db_utils\\position.sql", "name": "position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt_utils') (substring_text, string_text)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.0903347, "supported_languages": null}, "macro.dbt_utils.default__position": {"unique_id": "macro.dbt_utils.default__position", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\position.sql", "original_file_path": "macros\\cross_db_utils\\position.sql", "name": "default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n    \n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.0903347, "supported_languages": null}, "macro.dbt_utils.bigquery__position": {"unique_id": "macro.dbt_utils.bigquery__position", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\position.sql", "original_file_path": "macros\\cross_db_utils\\position.sql", "name": "bigquery__position", "macro_sql": "{% macro bigquery__position(substring_text, string_text) %}\n\n    strpos(\n        {{ string_text }},\n        {{ substring_text }}\n        \n    )\n    \n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.0903347, "supported_languages": null}, "macro.dbt_utils.replace": {"unique_id": "macro.dbt_utils.replace", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\replace.sql", "original_file_path": "macros\\cross_db_utils\\replace.sql", "name": "replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt_utils') (field, old_chars, new_chars)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.0913289, "supported_languages": null}, "macro.dbt_utils.default__replace": {"unique_id": "macro.dbt_utils.default__replace", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\replace.sql", "original_file_path": "macros\\cross_db_utils\\replace.sql", "name": "default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n    \n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.0913289, "supported_languages": null}, "macro.dbt_utils.right": {"unique_id": "macro.dbt_utils.right", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\right.sql", "original_file_path": "macros\\cross_db_utils\\right.sql", "name": "right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt_utils') (string_text, length_expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.0923326, "supported_languages": null}, "macro.dbt_utils.default__right": {"unique_id": "macro.dbt_utils.default__right", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\right.sql", "original_file_path": "macros\\cross_db_utils\\right.sql", "name": "default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n    \n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.0923326, "supported_languages": null}, "macro.dbt_utils.bigquery__right": {"unique_id": "macro.dbt_utils.bigquery__right", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\right.sql", "original_file_path": "macros\\cross_db_utils\\right.sql", "name": "bigquery__right", "macro_sql": "{% macro bigquery__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0 \n        then ''\n    else \n        substr(\n            {{ string_text }},\n            -1 * ({{ length_expression }})\n        )\n    end\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.0923326, "supported_languages": null}, "macro.dbt_utils.snowflake__right": {"unique_id": "macro.dbt_utils.snowflake__right", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\right.sql", "original_file_path": "macros\\cross_db_utils\\right.sql", "name": "snowflake__right", "macro_sql": "{% macro snowflake__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0 \n        then ''\n    else \n        right(\n            {{ string_text }},\n            {{ length_expression }}\n        )\n    end\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.093332, "supported_languages": null}, "macro.dbt_utils.safe_cast": {"unique_id": "macro.dbt_utils.safe_cast", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\safe_cast.sql", "original_file_path": "macros\\cross_db_utils\\safe_cast.sql", "name": "safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt_utils') (field, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.093332, "supported_languages": null}, "macro.dbt_utils.default__safe_cast": {"unique_id": "macro.dbt_utils.default__safe_cast", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\safe_cast.sql", "original_file_path": "macros\\cross_db_utils\\safe_cast.sql", "name": "default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.094333, "supported_languages": null}, "macro.dbt_utils.snowflake__safe_cast": {"unique_id": "macro.dbt_utils.snowflake__safe_cast", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\safe_cast.sql", "original_file_path": "macros\\cross_db_utils\\safe_cast.sql", "name": "snowflake__safe_cast", "macro_sql": "{% macro snowflake__safe_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.094333, "supported_languages": null}, "macro.dbt_utils.bigquery__safe_cast": {"unique_id": "macro.dbt_utils.bigquery__safe_cast", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\safe_cast.sql", "original_file_path": "macros\\cross_db_utils\\safe_cast.sql", "name": "bigquery__safe_cast", "macro_sql": "{% macro bigquery__safe_cast(field, type) %}\n    safe_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.094333, "supported_languages": null}, "macro.dbt_utils.split_part": {"unique_id": "macro.dbt_utils.split_part", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\split_part.sql", "original_file_path": "macros\\cross_db_utils\\split_part.sql", "name": "split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt_utils') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.0963323, "supported_languages": null}, "macro.dbt_utils.default__split_part": {"unique_id": "macro.dbt_utils.default__split_part", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\split_part.sql", "original_file_path": "macros\\cross_db_utils\\split_part.sql", "name": "default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.0963323, "supported_languages": null}, "macro.dbt_utils._split_part_negative": {"unique_id": "macro.dbt_utils._split_part_negative", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\split_part.sql", "original_file_path": "macros\\cross_db_utils\\split_part.sql", "name": "_split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }}) \n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.0973325, "supported_languages": null}, "macro.dbt_utils.postgres__split_part": {"unique_id": "macro.dbt_utils.postgres__split_part", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\split_part.sql", "original_file_path": "macros\\cross_db_utils\\split_part.sql", "name": "postgres__split_part", "macro_sql": "{% macro postgres__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    {{ dbt_utils.default__split_part(string_text, delimiter_text, part_number) }}\n  {% else %}\n    {{ dbt_utils._split_part_negative(string_text, delimiter_text, part_number) }}\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__split_part", "macro.dbt_utils._split_part_negative"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.0973325, "supported_languages": null}, "macro.dbt_utils.redshift__split_part": {"unique_id": "macro.dbt_utils.redshift__split_part", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\split_part.sql", "original_file_path": "macros\\cross_db_utils\\split_part.sql", "name": "redshift__split_part", "macro_sql": "{% macro redshift__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    {{ dbt_utils.default__split_part(string_text, delimiter_text, part_number) }}\n  {% else %}\n    {{ dbt_utils._split_part_negative(string_text, delimiter_text, part_number) }}\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__split_part", "macro.dbt_utils._split_part_negative"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.098332, "supported_languages": null}, "macro.dbt_utils.bigquery__split_part": {"unique_id": "macro.dbt_utils.bigquery__split_part", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\split_part.sql", "original_file_path": "macros\\cross_db_utils\\split_part.sql", "name": "bigquery__split_part", "macro_sql": "{% macro bigquery__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset({{ part_number - 1 }})]\n  {% else %}\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset(\n          length({{ string_text }}) \n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 1\n        )]\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.098332, "supported_languages": null}, "macro.dbt_utils.width_bucket": {"unique_id": "macro.dbt_utils.width_bucket", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\width_bucket.sql", "original_file_path": "macros\\cross_db_utils\\width_bucket.sql", "name": "width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__width_bucket"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.1010315, "supported_languages": null}, "macro.dbt_utils.default__width_bucket": {"unique_id": "macro.dbt_utils.default__width_bucket", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\width_bucket.sql", "original_file_path": "macros\\cross_db_utils\\width_bucket.sql", "name": "default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt_utils.safe_cast(expr, dbt_utils.type_numeric() ) }},\n                    {{ dbt_utils.safe_cast(bin_size, dbt_utils.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.safe_cast", "macro.dbt_utils.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.1020386, "supported_languages": null}, "macro.dbt_utils.redshift__width_bucket": {"unique_id": "macro.dbt_utils.redshift__width_bucket", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\width_bucket.sql", "original_file_path": "macros\\cross_db_utils\\width_bucket.sql", "name": "redshift__width_bucket", "macro_sql": "{% macro redshift__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is exactly at the bucket edge\n        case\n            when\n                {{ dbt_utils.safe_cast(expr, dbt_utils.type_numeric() ) }} %\n                {{ dbt_utils.safe_cast(bin_size, dbt_utils.type_numeric() ) }}\n                 = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.safe_cast", "macro.dbt_utils.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.1020386, "supported_languages": null}, "macro.dbt_utils.snowflake__width_bucket": {"unique_id": "macro.dbt_utils.snowflake__width_bucket", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\width_bucket.sql", "original_file_path": "macros\\cross_db_utils\\width_bucket.sql", "name": "snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.1030507, "supported_languages": null}, "macro.dbt_utils._is_ephemeral": {"unique_id": "macro.dbt_utils._is_ephemeral", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\_is_ephemeral.sql", "original_file_path": "macros\\cross_db_utils\\_is_ephemeral.sql", "name": "_is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.1050408, "supported_languages": null}, "macro.dbt_utils._is_relation": {"unique_id": "macro.dbt_utils._is_relation", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\_is_relation.sql", "original_file_path": "macros\\cross_db_utils\\_is_relation.sql", "name": "_is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.1060452, "supported_languages": null}, "macro.dbt_utils.test_accepted_range": {"unique_id": "macro.dbt_utils.test_accepted_range", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\accepted_range.sql", "original_file_path": "macros\\generic_tests\\accepted_range.sql", "name": "test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_accepted_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.1070628, "supported_languages": null}, "macro.dbt_utils.default__test_accepted_range": {"unique_id": "macro.dbt_utils.default__test_accepted_range", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\accepted_range.sql", "original_file_path": "macros\\generic_tests\\accepted_range.sql", "name": "default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.1080618, "supported_languages": null}, "macro.dbt_utils.test_at_least_one": {"unique_id": "macro.dbt_utils.test_at_least_one", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\at_least_one.sql", "original_file_path": "macros\\generic_tests\\at_least_one.sql", "name": "test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_at_least_one"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.1090581, "supported_languages": null}, "macro.dbt_utils.default__test_at_least_one": {"unique_id": "macro.dbt_utils.default__test_at_least_one", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\at_least_one.sql", "original_file_path": "macros\\generic_tests\\at_least_one.sql", "name": "default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name) %}\n\nselect *\nfrom (\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      count({{ column_name }}) as filler_column\n\n    from {{ model }}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.1090581, "supported_languages": null}, "macro.dbt_utils.test_cardinality_equality": {"unique_id": "macro.dbt_utils.test_cardinality_equality", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\cardinality_equality.sql", "original_file_path": "macros\\generic_tests\\cardinality_equality.sql", "name": "test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_cardinality_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.1100621, "supported_languages": null}, "macro.dbt_utils.default__test_cardinality_equality": {"unique_id": "macro.dbt_utils.default__test_cardinality_equality", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\cardinality_equality.sql", "original_file_path": "macros\\generic_tests\\cardinality_equality.sql", "name": "default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt_utils.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt_utils.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.1100621, "supported_languages": null}, "macro.dbt_utils.test_equality": {"unique_id": "macro.dbt_utils.test_equality", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\equality.sql", "original_file_path": "macros\\generic_tests\\equality.sql", "name": "test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.1110582, "supported_languages": null}, "macro.dbt_utils.default__test_equality": {"unique_id": "macro.dbt_utils.default__test_equality", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\equality.sql", "original_file_path": "macros\\generic_tests\\equality.sql", "name": "default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None) %}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema\u00a0\u2014 this allows the model to be an ephemeral model\n-#}\n\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt_utils.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt_utils.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.1238403, "supported_languages": null}, "macro.dbt_utils.test_equal_rowcount": {"unique_id": "macro.dbt_utils.test_equal_rowcount", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\equal_rowcount.sql", "original_file_path": "macros\\generic_tests\\equal_rowcount.sql", "name": "test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_equal_rowcount"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.12484, "supported_languages": null}, "macro.dbt_utils.default__test_equal_rowcount": {"unique_id": "macro.dbt_utils.default__test_equal_rowcount", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\equal_rowcount.sql", "original_file_path": "macros\\generic_tests\\equal_rowcount.sql", "name": "default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'coalesce(diff_count, 0)') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\nwith a as (\n\n    select count(*) as count_a from {{ model }}\n\n),\nb as (\n\n    select count(*) as count_b from {{ compare_model }}\n\n),\nfinal as (\n\n    select\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n    from a\n    cross join b\n\n)\n\nselect * from final\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.12484, "supported_languages": null}, "macro.dbt_utils.test_expression_is_true": {"unique_id": "macro.dbt_utils.test_expression_is_true", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\expression_is_true.sql", "original_file_path": "macros\\generic_tests\\expression_is_true.sql", "name": "test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None, condition='1=1') %}\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name, condition)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.1258397, "supported_languages": null}, "macro.dbt_utils.default__test_expression_is_true": {"unique_id": "macro.dbt_utils.default__test_expression_is_true", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\expression_is_true.sql", "original_file_path": "macros\\generic_tests\\expression_is_true.sql", "name": "default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name, condition) %}\n\nwith meet_condition as (\n    select * from {{ model }} where {{ condition }}\n)\n\nselect\n    *\nfrom meet_condition\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.1268396, "supported_languages": null}, "macro.dbt_utils.test_fewer_rows_than": {"unique_id": "macro.dbt_utils.test_fewer_rows_than", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\fewer_rows_than.sql", "original_file_path": "macros\\generic_tests\\fewer_rows_than.sql", "name": "test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_fewer_rows_than"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.1268396, "supported_languages": null}, "macro.dbt_utils.default__test_fewer_rows_than": {"unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\fewer_rows_than.sql", "original_file_path": "macros\\generic_tests\\fewer_rows_than.sql", "name": "default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model) %}\n\n{{ config(fail_calc = 'coalesce(row_count_delta, 0)') }}\n\nwith a as (\n\n    select count(*) as count_our_model from {{ model }}\n\n),\nb as (\n\n    select count(*) as count_comparison_model from {{ compare_model }}\n\n),\ncounts as (\n\n    select\n        count_our_model,\n        count_comparison_model\n    from a\n    cross join b\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.1278396, "supported_languages": null}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\mutually_exclusive_ranges.sql", "original_file_path": "macros\\generic_tests\\mutually_exclusive_ranges.sql", "name": "test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.1313496, "supported_languages": null}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\mutually_exclusive_ranges.sql", "original_file_path": "macros\\generic_tests\\mutually_exclusive_ranges.sql", "name": "default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions nore cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.1348877, "supported_languages": null}, "macro.dbt_utils.test_not_accepted_values": {"unique_id": "macro.dbt_utils.test_not_accepted_values", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\not_accepted_values.sql", "original_file_path": "macros\\generic_tests\\not_accepted_values.sql", "name": "test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.138913, "supported_languages": null}, "macro.dbt_utils.default__test_not_accepted_values": {"unique_id": "macro.dbt_utils.default__test_not_accepted_values", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\not_accepted_values.sql", "original_file_path": "macros\\generic_tests\\not_accepted_values.sql", "name": "default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.1399124, "supported_languages": null}, "macro.dbt_utils.test_not_constant": {"unique_id": "macro.dbt_utils.test_not_constant", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\not_constant.sql", "original_file_path": "macros\\generic_tests\\not_constant.sql", "name": "test_not_constant", "macro_sql": "{% test not_constant(model, column_name) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_constant"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.1409628, "supported_languages": null}, "macro.dbt_utils.default__test_not_constant": {"unique_id": "macro.dbt_utils.default__test_not_constant", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\not_constant.sql", "original_file_path": "macros\\generic_tests\\not_constant.sql", "name": "default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name) %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.1409628, "supported_languages": null}, "macro.dbt_utils.test_not_null_proportion": {"unique_id": "macro.dbt_utils.test_not_null_proportion", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\not_null_proportion.sql", "original_file_path": "macros\\generic_tests\\not_null_proportion.sql", "name": "test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, **kwargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.141984, "supported_languages": null}, "macro.dbt_utils.default__test_not_null_proportion": {"unique_id": "macro.dbt_utils.default__test_not_null_proportion", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\not_null_proportion.sql", "original_file_path": "macros\\generic_tests\\not_null_proportion.sql", "name": "default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\nwith validation as (\n  select\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from {{ model }}\n),\nvalidation_errors as (\n  select\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.1429744, "supported_languages": null}, "macro.dbt_utils.test_recency": {"unique_id": "macro.dbt_utils.test_recency", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\recency.sql", "original_file_path": "macros\\generic_tests\\recency.sql", "name": "test_recency", "macro_sql": "{% test recency(model, field, datepart, interval) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_recency"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.1429744, "supported_languages": null}, "macro.dbt_utils.default__test_recency": {"unique_id": "macro.dbt_utils.default__test_recency", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\recency.sql", "original_file_path": "macros\\generic_tests\\recency.sql", "name": "default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval) %}\n\n{% set threshold = dbt_utils.dateadd(datepart, interval * -1, dbt_utils.current_timestamp()) %}\n\nwith recency as (\n\n    select max({{field}}) as most_recent\n    from {{ model }}\n\n)\n\nselect\n\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.1439862, "supported_languages": null}, "macro.dbt_utils.test_relationships_where": {"unique_id": "macro.dbt_utils.test_relationships_where", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\relationships_where.sql", "original_file_path": "macros\\generic_tests\\relationships_where.sql", "name": "test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.1449668, "supported_languages": null}, "macro.dbt_utils.default__test_relationships_where": {"unique_id": "macro.dbt_utils.default__test_relationships_where", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\relationships_where.sql", "original_file_path": "macros\\generic_tests\\relationships_where.sql", "name": "default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.1449668, "supported_languages": null}, "macro.dbt_utils.test_sequential_values": {"unique_id": "macro.dbt_utils.test_sequential_values", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\sequential_values.sql", "original_file_path": "macros\\generic_tests\\sequential_values.sql", "name": "test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart)) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_sequential_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.1463802, "supported_languages": null}, "macro.dbt_utils.default__test_sequential_values": {"unique_id": "macro.dbt_utils.default__test_sequential_values", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\sequential_values.sql", "original_file_path": "macros\\generic_tests\\sequential_values.sql", "name": "default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\nwith windowed as (\n\n    select\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            order by {{ column_name }}\n        ) as {{ previous_column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt_utils.type_timestamp() }})= cast({{ dbt_utils.dateadd(datepart, interval, previous_column_name) }} as {{ dbt_utils.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.slugify", "macro.dbt_utils.type_timestamp", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.1484003, "supported_languages": null}, "macro.dbt_utils.test_not_null_where": {"unique_id": "macro.dbt_utils.test_not_null_where", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\test_not_null_where.sql", "original_file_path": "macros\\generic_tests\\test_not_null_where.sql", "name": "test_not_null_where", "macro_sql": "{% test not_null_where(model, column_name) %}\r\n  {%- set deprecation_warning = '\r\n    Warning: `dbt_utils.not_null_where` is no longer supported.\r\n    Starting in dbt v0.20.0, the built-in `not_null` test supports a `where` config.\r\n    ' -%}\r\n  {%- do exceptions.warn(deprecation_warning) -%}\r\n  {{ return(adapter.dispatch('test_not_null_where', 'dbt_utils')(model, column_name)) }}\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_where"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.1484003, "supported_languages": null}, "macro.dbt_utils.default__test_not_null_where": {"unique_id": "macro.dbt_utils.default__test_not_null_where", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\test_not_null_where.sql", "original_file_path": "macros\\generic_tests\\test_not_null_where.sql", "name": "default__test_not_null_where", "macro_sql": "{% macro default__test_not_null_where(model, column_name) %}\r\n  {{ return(test_not_null(model, column_name)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.149396, "supported_languages": null}, "macro.dbt_utils.test_unique_where": {"unique_id": "macro.dbt_utils.test_unique_where", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\test_unique_where.sql", "original_file_path": "macros\\generic_tests\\test_unique_where.sql", "name": "test_unique_where", "macro_sql": "{% test unique_where(model, column_name) %}\r\n  {%- set deprecation_warning = '\r\n    Warning: `dbt_utils.unique_where` is no longer supported.\r\n    Starting in dbt v0.20.0, the built-in `unique` test supports a `where` config.\r\n    ' -%}\r\n  {%- do exceptions.warn(deprecation_warning) -%}\r\n  {{ return(adapter.dispatch('test_unique_where', 'dbt_utils')(model, column_name)) }}\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_where"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.150396, "supported_languages": null}, "macro.dbt_utils.default__test_unique_where": {"unique_id": "macro.dbt_utils.default__test_unique_where", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\test_unique_where.sql", "original_file_path": "macros\\generic_tests\\test_unique_where.sql", "name": "default__test_unique_where", "macro_sql": "{% macro default__test_unique_where(model, column_name) %}\r\n  {{ return(test_unique(model, column_name)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.1508274, "supported_languages": null}, "macro.dbt_utils.test_unique_combination_of_columns": {"unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\unique_combination_of_columns.sql", "original_file_path": "macros\\generic_tests\\unique_combination_of_columns.sql", "name": "test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_combination_of_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.1538424, "supported_languages": null}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\unique_combination_of_columns.sql", "original_file_path": "macros\\generic_tests\\unique_combination_of_columns.sql", "name": "default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.1558363, "supported_languages": null}, "macro.dbt_utils.log_info": {"unique_id": "macro.dbt_utils.log_info", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\jinja_helpers\\log_info.sql", "original_file_path": "macros\\jinja_helpers\\log_info.sql", "name": "log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__log_info"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.1568363, "supported_languages": null}, "macro.dbt_utils.default__log_info": {"unique_id": "macro.dbt_utils.default__log_info", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\jinja_helpers\\log_info.sql", "original_file_path": "macros\\jinja_helpers\\log_info.sql", "name": "default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.1568363, "supported_languages": null}, "macro.dbt_utils.pretty_log_format": {"unique_id": "macro.dbt_utils.pretty_log_format", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\jinja_helpers\\pretty_log_format.sql", "original_file_path": "macros\\jinja_helpers\\pretty_log_format.sql", "name": "pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.1578705, "supported_languages": null}, "macro.dbt_utils.default__pretty_log_format": {"unique_id": "macro.dbt_utils.default__pretty_log_format", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\jinja_helpers\\pretty_log_format.sql", "original_file_path": "macros\\jinja_helpers\\pretty_log_format.sql", "name": "default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.1578705, "supported_languages": null}, "macro.dbt_utils.pretty_time": {"unique_id": "macro.dbt_utils.pretty_time", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\jinja_helpers\\pretty_time.sql", "original_file_path": "macros\\jinja_helpers\\pretty_time.sql", "name": "pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.158882, "supported_languages": null}, "macro.dbt_utils.default__pretty_time": {"unique_id": "macro.dbt_utils.default__pretty_time", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\jinja_helpers\\pretty_time.sql", "original_file_path": "macros\\jinja_helpers\\pretty_time.sql", "name": "default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.158882, "supported_languages": null}, "macro.dbt_utils.slugify": {"unique_id": "macro.dbt_utils.slugify", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\jinja_helpers\\slugify.sql", "original_file_path": "macros\\jinja_helpers\\slugify.sql", "name": "slugify", "macro_sql": "{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n\n{{ return(string) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.1598868, "supported_languages": null}, "macro.dbt_utils.get_period_boundaries": {"unique_id": "macro.dbt_utils.get_period_boundaries", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\materializations\\insert_by_period_materialization.sql", "original_file_path": "macros\\materializations\\insert_by_period_materialization.sql", "name": "get_period_boundaries", "macro_sql": "{% macro get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n    {{ return(adapter.dispatch('get_period_boundaries', 'dbt_utils')(target_schema, target_table, timestamp_field, start_date, stop_date, period)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_period_boundaries"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.1667874, "supported_languages": null}, "macro.dbt_utils.default__get_period_boundaries": {"unique_id": "macro.dbt_utils.default__get_period_boundaries", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\materializations\\insert_by_period_materialization.sql", "original_file_path": "macros\\materializations\\insert_by_period_materialization.sql", "name": "default__get_period_boundaries", "macro_sql": "{% macro default__get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n\n  {% call statement('period_boundaries', fetch_result=True) -%}\n    with data as (\n      select\n          coalesce(max(\"{{timestamp_field}}\"), '{{start_date}}')::timestamp as start_timestamp,\n          coalesce(\n            {{dbt_utils.dateadd('millisecond',\n                                -1,\n                                \"nullif('\" ~ stop_date ~ \"','')::timestamp\")}},\n            {{dbt_utils.current_timestamp()}}\n          ) as stop_timestamp\n      from \"{{target_schema}}\".\"{{target_table}}\"\n    )\n\n    select\n      start_timestamp,\n      stop_timestamp,\n      {{dbt_utils.datediff('start_timestamp',\n                           'stop_timestamp',\n                           period)}}  + 1 as num_periods\n    from data\n  {%- endcall %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.dateadd", "macro.dbt_utils.current_timestamp", "macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.1683843, "supported_languages": null}, "macro.dbt_utils.get_period_sql": {"unique_id": "macro.dbt_utils.get_period_sql", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\materializations\\insert_by_period_materialization.sql", "original_file_path": "macros\\materializations\\insert_by_period_materialization.sql", "name": "get_period_sql", "macro_sql": "{% macro get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n    {{ return(adapter.dispatch('get_period_sql', 'dbt_utils')(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_period_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.1683843, "supported_languages": null}, "macro.dbt_utils.default__get_period_sql": {"unique_id": "macro.dbt_utils.default__get_period_sql", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\materializations\\insert_by_period_materialization.sql", "original_file_path": "macros\\materializations\\insert_by_period_materialization.sql", "name": "default__get_period_sql", "macro_sql": "{% macro default__get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n\n  {%- set period_filter -%}\n    (\"{{timestamp_field}}\" >  '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' and\n     \"{{timestamp_field}}\" <= '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' + interval '1 {{period}}' and\n     \"{{timestamp_field}}\" <  '{{stop_timestamp}}'::timestamp)\n  {%- endset -%}\n\n  {%- set filtered_sql = sql | replace(\"__PERIOD_FILTER__\", period_filter) -%}\n\n  select\n    {{target_cols_csv}}\n  from (\n    {{filtered_sql}}\n  )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.1703932, "supported_languages": null}, "macro.dbt_utils.materialization_insert_by_period_default": {"unique_id": "macro.dbt_utils.materialization_insert_by_period_default", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\materializations\\insert_by_period_materialization.sql", "original_file_path": "macros\\materializations\\insert_by_period_materialization.sql", "name": "materialization_insert_by_period_default", "macro_sql": "{% materialization insert_by_period, default -%}\n  {%- set timestamp_field = config.require('timestamp_field') -%}\n  {%- set start_date = config.require('start_date') -%}\n  {%- set stop_date = config.get('stop_date') or '' -%}\n  {%- set period = config.get('period') or 'week' -%}\n\n  {%- if sql.find('__PERIOD_FILTER__') == -1 -%}\n    {%- set error_message -%}\n      Model '{{ model.unique_id }}' does not include the required string '__PERIOD_FILTER__' in its sql\n    {%- endset -%}\n    {{ exceptions.raise_compiler_error(error_message) }}\n  {%- endif -%}\n\n  {%- set identifier = model['name'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, type='table') -%}\n\n  {%- set non_destructive_mode = (flags.NON_DESTRUCTIVE == True) -%}\n  {%- set full_refresh_mode = (flags.FULL_REFRESH == True) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_not_as_table = (old_relation is not none and not old_relation.is_table) -%}\n\n  {%- set should_truncate = (non_destructive_mode and full_refresh_mode and exists_as_table) -%}\n  {%- set should_drop = (not should_truncate and (full_refresh_mode or exists_not_as_table)) -%}\n  {%- set force_create = (flags.FULL_REFRESH and not flags.NON_DESTRUCTIVE) -%}\n\n  -- setup\n  {% if old_relation is none -%}\n    -- noop\n  {%- elif should_truncate -%}\n    {{adapter.truncate_relation(old_relation)}}\n  {%- elif should_drop -%}\n    {{adapter.drop_relation(old_relation)}}\n    {%- set old_relation = none -%}\n  {%- endif %}\n\n  {{run_hooks(pre_hooks, inside_transaction=False)}}\n\n  -- `begin` happens here, so `commit` after it to finish the transaction\n  {{run_hooks(pre_hooks, inside_transaction=True)}}\n  {% call statement() -%}\n    begin; -- make extra sure we've closed out the transaction\n    commit;\n  {%- endcall %}\n\n  -- build model\n  {% if force_create or old_relation is none -%}\n    {# Create an empty target table -#}\n    {% call statement('main') -%}\n      {%- set empty_sql = sql | replace(\"__PERIOD_FILTER__\", 'false') -%}\n      {{create_table_as(False, target_relation, empty_sql)}}\n    {%- endcall %}\n  {%- endif %}\n\n  {% set _ = dbt_utils.get_period_boundaries(schema,\n                                              identifier,\n                                              timestamp_field,\n                                              start_date,\n                                              stop_date,\n                                              period) %}\n  {%- set start_timestamp = load_result('period_boundaries')['data'][0][0] | string -%}\n  {%- set stop_timestamp = load_result('period_boundaries')['data'][0][1] | string -%}\n  {%- set num_periods = load_result('period_boundaries')['data'][0][2] | int -%}\n\n  {% set target_columns = adapter.get_columns_in_relation(target_relation) %}\n  {%- set target_cols_csv = target_columns | map(attribute='quoted') | join(', ') -%}\n  {%- set loop_vars = {'sum_rows_inserted': 0} -%}\n\n  -- commit each period as a separate transaction\n  {% for i in range(num_periods) -%}\n    {%- set msg = \"Running for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) -%}\n    {{ dbt_utils.log_info(msg) }}\n\n    {%- set tmp_identifier = model['name'] ~ '__dbt_incremental_period' ~ i ~ '_tmp' -%}\n    {%- set tmp_relation = api.Relation.create(identifier=tmp_identifier,\n                                               schema=schema, type='table') -%}\n    {% call statement() -%}\n      {% set tmp_table_sql = dbt_utils.get_period_sql(target_cols_csv,\n                                                       sql,\n                                                       timestamp_field,\n                                                       period,\n                                                       start_timestamp,\n                                                       stop_timestamp,\n                                                       i) %}\n      {{dbt.create_table_as(True, tmp_relation, tmp_table_sql)}}\n    {%- endcall %}\n\n    {{adapter.expand_target_column_types(from_relation=tmp_relation,\n                                         to_relation=target_relation)}}\n    {%- set name = 'main-' ~ i -%}\n    {% call statement(name, fetch_result=True) -%}\n      insert into {{target_relation}} ({{target_cols_csv}})\n      (\n          select\n              {{target_cols_csv}}\n          from {{tmp_relation.include(schema=False)}}\n      );\n    {%- endcall %}\n    {% set result = load_result('main-' ~ i) %}\n    {% if 'response' in result.keys() %} {# added in v0.19.0 #}\n        {% set rows_inserted = result['response']['rows_affected'] %}\n    {% else %} {# older versions #}\n        {% set rows_inserted = result['status'].split(\" \")[2] | int %}\n    {% endif %}\n    \n    {%- set sum_rows_inserted = loop_vars['sum_rows_inserted'] + rows_inserted -%}\n    {%- if loop_vars.update({'sum_rows_inserted': sum_rows_inserted}) %} {% endif -%}\n\n    {%- set msg = \"Ran for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) ~ \"; \" ~ rows_inserted ~ \" records inserted\" -%}\n    {{ dbt_utils.log_info(msg) }}\n\n  {%- endfor %}\n\n  {% call statement() -%}\n    begin;\n  {%- endcall %}\n\n  {{run_hooks(post_hooks, inside_transaction=True)}}\n\n  {% call statement() -%}\n    commit;\n  {%- endcall %}\n\n  {{run_hooks(post_hooks, inside_transaction=False)}}\n\n  {%- set status_string = \"INSERT \" ~ loop_vars['sum_rows_inserted'] -%}\n\n  {% call noop_statement('main', status_string) -%}\n    -- no-op\n  {%- endcall %}\n\n  -- Return the relations created in this materialization\n  {{ return({'relations': [target_relation]}) }}  \n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt_utils.get_period_boundaries", "macro.dbt_utils.log_info", "macro.dbt_utils.get_period_sql", "macro.iginsure.include", "macro.dbt.noop_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.1773868, "supported_languages": ["sql"]}, "macro.dbt_utils.get_intervals_between": {"unique_id": "macro.dbt_utils.get_intervals_between", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\sql\\date_spine.sql", "original_file_path": "macros\\sql\\date_spine.sql", "name": "get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.1793826, "supported_languages": null}, "macro.dbt_utils.default__get_intervals_between": {"unique_id": "macro.dbt_utils.default__get_intervals_between", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\sql\\date_spine.sql", "original_file_path": "macros\\sql\\date_spine.sql", "name": "default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{dbt_utils.datediff(start_date, end_date, datepart)}}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.1793826, "supported_languages": null}, "macro.dbt_utils.date_spine": {"unique_id": "macro.dbt_utils.date_spine", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\sql\\date_spine.sql", "original_file_path": "macros\\sql\\date_spine.sql", "name": "date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.1803882, "supported_languages": null}, "macro.dbt_utils.default__date_spine": {"unique_id": "macro.dbt_utils.default__date_spine", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\sql\\date_spine.sql", "original_file_path": "macros\\sql\\date_spine.sql", "name": "default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt_utils.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.1803882, "supported_languages": null}, "macro.dbt_utils.deduplicate": {"unique_id": "macro.dbt_utils.deduplicate", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\sql\\deduplicate.sql", "original_file_path": "macros\\sql\\deduplicate.sql", "name": "deduplicate", "macro_sql": "{%- macro deduplicate(relation, partition_by, order_by=none, relation_alias=none) -%}\n\n    {%- set error_message_group_by -%}\nWarning: the `group_by` parameter of the `deduplicate` macro is no longer supported and will be deprecated in a future release of dbt-utils.\nUse `partition_by` instead.\nThe {{ model.package_name }}.{{ model.name }} model triggered this warning.\n    {%- endset -%}\n\n    {% if kwargs.get('group_by') %}\n    {%- do exceptions.warn(error_message_group_by) -%}\n    {%- endif -%}\n\n    {%- set error_message_order_by -%}\nWarning: `order_by` as an optional parameter of the `deduplicate` macro is no longer supported and will be deprecated in a future release of dbt-utils.\nSupply a non-null value for `order_by` instead.\nThe {{ model.package_name }}.{{ model.name }} model triggered this warning.\n    {%- endset -%}\n\n    {% if not order_by %}\n    {%- do exceptions.warn(error_message_order_by) -%}\n    {%- endif -%}\n\n    {%- set error_message_alias -%}\nWarning: the `relation_alias` parameter of the `deduplicate` macro is no longer supported and will be deprecated in a future release of dbt-utils.\nIf you were using `relation_alias` to point to a CTE previously then you can now pass the alias directly to `relation` instead.\nThe {{ model.package_name }}.{{ model.name }} model triggered this warning.\n    {%- endset -%}\n\n    {% if relation_alias %}\n    {%- do exceptions.warn(error_message_alias) -%}\n    {%- endif -%}\n\n    {% set partition_by = partition_by or kwargs.get('group_by') %}\n    {% set relation = relation_alias or relation %}\n    {% set order_by = order_by or \"'1'\" %}\n\n    {{ return(adapter.dispatch('deduplicate', 'dbt_utils')(relation, partition_by, order_by)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.1853852, "supported_languages": null}, "macro.dbt_utils.default__deduplicate": {"unique_id": "macro.dbt_utils.default__deduplicate", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\sql\\deduplicate.sql", "original_file_path": "macros\\sql\\deduplicate.sql", "name": "default__deduplicate", "macro_sql": "\n\n{%- macro default__deduplicate(relation, partition_by, order_by) -%}\n\n    with row_numbered as (\n        select\n            _inner.*,\n            row_number() over (\n                partition by {{ partition_by }}\n                order by {{ order_by }}\n            ) as rn\n        from {{ relation }} as _inner\n    )\n\n    select\n        distinct data.*\n    from {{ relation }} as data\n    {#\n    -- Not all DBs will support natural joins but the ones that do include:\n    -- Oracle, MySQL, SQLite, Redshift, Teradata, Materialize, Databricks\n    -- Apache Spark, SingleStore, Vertica\n    -- Those that do not appear to support natural joins include:\n    -- SQLServer, Trino, Presto, Rockset, Athena\n    #}\n    natural join row_numbered\n    where row_numbered.rn = 1\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.1863892, "supported_languages": null}, "macro.dbt_utils.redshift__deduplicate": {"unique_id": "macro.dbt_utils.redshift__deduplicate", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\sql\\deduplicate.sql", "original_file_path": "macros\\sql\\deduplicate.sql", "name": "redshift__deduplicate", "macro_sql": "{% macro redshift__deduplicate(relation, partition_by, order_by) -%}\n\n    {{ return(dbt_utils.default__deduplicate(relation, partition_by, order_by=order_by)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.1873896, "supported_languages": null}, "macro.dbt_utils.postgres__deduplicate": {"unique_id": "macro.dbt_utils.postgres__deduplicate", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\sql\\deduplicate.sql", "original_file_path": "macros\\sql\\deduplicate.sql", "name": "postgres__deduplicate", "macro_sql": "\n{%- macro postgres__deduplicate(relation, partition_by, order_by) -%}\n\n    select\n        distinct on ({{ partition_by }}) *\n    from {{ relation }}\n    order by {{ partition_by }}{{ ',' ~ order_by }}\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.1873896, "supported_languages": null}, "macro.dbt_utils.snowflake__deduplicate": {"unique_id": "macro.dbt_utils.snowflake__deduplicate", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\sql\\deduplicate.sql", "original_file_path": "macros\\sql\\deduplicate.sql", "name": "snowflake__deduplicate", "macro_sql": "\n{%- macro snowflake__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.1873896, "supported_languages": null}, "macro.dbt_utils.bigquery__deduplicate": {"unique_id": "macro.dbt_utils.bigquery__deduplicate", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\sql\\deduplicate.sql", "original_file_path": "macros\\sql\\deduplicate.sql", "name": "bigquery__deduplicate", "macro_sql": "\n{%- macro bigquery__deduplicate(relation, partition_by, order_by) -%}\n\n    select unique.*\n    from (\n        select\n            array_agg (\n                original\n                order by {{ order_by }}\n                limit 1\n            )[offset(0)] unique\n        from {{ relation }} original\n        group by {{ partition_by }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.188395, "supported_languages": null}, "macro.dbt_utils.get_powers_of_two": {"unique_id": "macro.dbt_utils.get_powers_of_two", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\sql\\generate_series.sql", "original_file_path": "macros\\sql\\generate_series.sql", "name": "get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.19039, "supported_languages": null}, "macro.dbt_utils.default__get_powers_of_two": {"unique_id": "macro.dbt_utils.default__get_powers_of_two", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\sql\\generate_series.sql", "original_file_path": "macros\\sql\\generate_series.sql", "name": "default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.19039, "supported_languages": null}, "macro.dbt_utils.generate_series": {"unique_id": "macro.dbt_utils.generate_series", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\sql\\generate_series.sql", "original_file_path": "macros\\sql\\generate_series.sql", "name": "generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.1913877, "supported_languages": null}, "macro.dbt_utils.default__generate_series": {"unique_id": "macro.dbt_utils.default__generate_series", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\sql\\generate_series.sql", "original_file_path": "macros\\sql\\generate_series.sql", "name": "default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.1913877, "supported_languages": null}, "macro.dbt_utils.get_column_values": {"unique_id": "macro.dbt_utils.get_column_values", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_column_values.sql", "original_file_path": "macros\\sql\\get_column_values.sql", "name": "get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default, where)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.1933885, "supported_languages": null}, "macro.dbt_utils.default__get_column_values": {"unique_id": "macro.dbt_utils.default__get_column_values", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_column_values.sql", "original_file_path": "macros\\sql\\get_column_values.sql", "name": "default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {% set default = [] if not default %}\n        {{ return(default) }}\n    {% endif %}\n\n    {%- do dbt_utils._is_ephemeral(table, 'get_column_values') -%}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n\n            {% if where is not none %}\n            where {{ where }}\n            {% endif %}\n\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_ephemeral", "macro.dbt.load_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.1953871, "supported_languages": null}, "macro.dbt_utils.get_filtered_columns_in_relation": {"unique_id": "macro.dbt_utils.get_filtered_columns_in_relation", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_filtered_columns_in_relation.sql", "original_file_path": "macros\\sql\\get_filtered_columns_in_relation.sql", "name": "get_filtered_columns_in_relation", "macro_sql": "{% macro get_filtered_columns_in_relation(from, except=[]) -%}\n    {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.1963832, "supported_languages": null}, "macro.dbt_utils.default__get_filtered_columns_in_relation": {"unique_id": "macro.dbt_utils.default__get_filtered_columns_in_relation", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_filtered_columns_in_relation.sql", "original_file_path": "macros\\sql\\get_filtered_columns_in_relation.sql", "name": "default__get_filtered_columns_in_relation", "macro_sql": "{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\n\n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n        {%- endif %}\n    {%- endfor %}\n\n    {{ return(include_cols) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.197392, "supported_languages": null}, "macro.dbt_utils.get_query_results_as_dict": {"unique_id": "macro.dbt_utils.get_query_results_as_dict", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_query_results_as_dict.sql", "original_file_path": "macros\\sql\\get_query_results_as_dict.sql", "name": "get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.198384, "supported_languages": null}, "macro.dbt_utils.default__get_query_results_as_dict": {"unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_query_results_as_dict.sql", "original_file_path": "macros\\sql\\get_query_results_as_dict.sql", "name": "default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.1993778, "supported_languages": null}, "macro.dbt_utils.get_relations_by_pattern": {"unique_id": "macro.dbt_utils.get_relations_by_pattern", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_relations_by_pattern.sql", "original_file_path": "macros\\sql\\get_relations_by_pattern.sql", "name": "get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.2012584, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_pattern": {"unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_relations_by_pattern.sql", "original_file_path": "macros\\sql\\get_relations_by_pattern.sql", "name": "default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.2022605, "supported_languages": null}, "macro.dbt_utils.get_relations_by_prefix": {"unique_id": "macro.dbt_utils.get_relations_by_prefix", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_relations_by_prefix.sql", "original_file_path": "macros\\sql\\get_relations_by_prefix.sql", "name": "get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.2044346, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_prefix": {"unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_relations_by_prefix.sql", "original_file_path": "macros\\sql\\get_relations_by_prefix.sql", "name": "default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.206446, "supported_languages": null}, "macro.dbt_utils.get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_tables_by_pattern_sql.sql", "original_file_path": "macros\\sql\\get_tables_by_pattern_sql.sql", "name": "get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.2084444, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_tables_by_pattern_sql.sql", "original_file_path": "macros\\sql\\get_tables_by_pattern_sql.sql", "name": "default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as \"table_schema\",\n            table_name as \"table_name\",\n            {{ dbt_utils.get_table_types_sql() }}\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.2084444, "supported_languages": null}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_tables_by_pattern_sql.sql", "original_file_path": "macros\\sql\\get_tables_by_pattern_sql.sql", "name": "bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                {{ dbt_utils.get_table_types_sql() }}\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._bigquery__get_matching_schemata", "macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.2095866, "supported_languages": null}, "macro.dbt_utils._bigquery__get_matching_schemata": {"unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_tables_by_pattern_sql.sql", "original_file_path": "macros\\sql\\get_tables_by_pattern_sql.sql", "name": "_bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.2106018, "supported_languages": null}, "macro.dbt_utils.get_tables_by_prefix_sql": {"unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_tables_by_prefix_sql.sql", "original_file_path": "macros\\sql\\get_tables_by_prefix_sql.sql", "name": "get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.2115963, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_tables_by_prefix_sql.sql", "original_file_path": "macros\\sql\\get_tables_by_prefix_sql.sql", "name": "default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.2126026, "supported_languages": null}, "macro.dbt_utils.get_table_types_sql": {"unique_id": "macro.dbt_utils.get_table_types_sql", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_table_types_sql.sql", "original_file_path": "macros\\sql\\get_table_types_sql.sql", "name": "get_table_types_sql", "macro_sql": "{%- macro get_table_types_sql() -%}\n  {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.2126026, "supported_languages": null}, "macro.dbt_utils.default__get_table_types_sql": {"unique_id": "macro.dbt_utils.default__get_table_types_sql", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_table_types_sql.sql", "original_file_path": "macros\\sql\\get_table_types_sql.sql", "name": "default__get_table_types_sql", "macro_sql": "{% macro default__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as \"table_type\"\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.2126026, "supported_languages": null}, "macro.dbt_utils.postgres__get_table_types_sql": {"unique_id": "macro.dbt_utils.postgres__get_table_types_sql", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_table_types_sql.sql", "original_file_path": "macros\\sql\\get_table_types_sql.sql", "name": "postgres__get_table_types_sql", "macro_sql": "{% macro postgres__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'FOREIGN' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as \"table_type\"\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.2136009, "supported_languages": null}, "macro.dbt_utils.bigquery__get_table_types_sql": {"unique_id": "macro.dbt_utils.bigquery__get_table_types_sql", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_table_types_sql.sql", "original_file_path": "macros\\sql\\get_table_types_sql.sql", "name": "bigquery__get_table_types_sql", "macro_sql": "{% macro bigquery__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as `table_type`\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.2136009, "supported_languages": null}, "macro.dbt_utils.group_by": {"unique_id": "macro.dbt_utils.group_by", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\sql\\groupby.sql", "original_file_path": "macros\\sql\\groupby.sql", "name": "group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.2136009, "supported_languages": null}, "macro.dbt_utils.default__group_by": {"unique_id": "macro.dbt_utils.default__group_by", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\sql\\groupby.sql", "original_file_path": "macros\\sql\\groupby.sql", "name": "default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.2145975, "supported_languages": null}, "macro.dbt_utils.degrees_to_radians": {"unique_id": "macro.dbt_utils.degrees_to_radians", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\sql\\haversine_distance.sql", "original_file_path": "macros\\sql\\haversine_distance.sql", "name": "degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.215601, "supported_languages": null}, "macro.dbt_utils.haversine_distance": {"unique_id": "macro.dbt_utils.haversine_distance", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\sql\\haversine_distance.sql", "original_file_path": "macros\\sql\\haversine_distance.sql", "name": "haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__haversine_distance"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.2167807, "supported_languages": null}, "macro.dbt_utils.default__haversine_distance": {"unique_id": "macro.dbt_utils.default__haversine_distance", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\sql\\haversine_distance.sql", "original_file_path": "macros\\sql\\haversine_distance.sql", "name": "default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.217899, "supported_languages": null}, "macro.dbt_utils.bigquery__haversine_distance": {"unique_id": "macro.dbt_utils.bigquery__haversine_distance", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\sql\\haversine_distance.sql", "original_file_path": "macros\\sql\\haversine_distance.sql", "name": "bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.degrees_to_radians"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.2194207, "supported_languages": null}, "macro.dbt_utils.nullcheck": {"unique_id": "macro.dbt_utils.nullcheck", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\sql\\nullcheck.sql", "original_file_path": "macros\\sql\\nullcheck.sql", "name": "nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.2222884, "supported_languages": null}, "macro.dbt_utils.default__nullcheck": {"unique_id": "macro.dbt_utils.default__nullcheck", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\sql\\nullcheck.sql", "original_file_path": "macros\\sql\\nullcheck.sql", "name": "default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.22333, "supported_languages": null}, "macro.dbt_utils.nullcheck_table": {"unique_id": "macro.dbt_utils.nullcheck_table", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\sql\\nullcheck_table.sql", "original_file_path": "macros\\sql\\nullcheck_table.sql", "name": "nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.2243297, "supported_languages": null}, "macro.dbt_utils.default__nullcheck_table": {"unique_id": "macro.dbt_utils.default__nullcheck_table", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\sql\\nullcheck_table.sql", "original_file_path": "macros\\sql\\nullcheck_table.sql", "name": "default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.2243297, "supported_languages": null}, "macro.dbt_utils.pivot": {"unique_id": "macro.dbt_utils.pivot", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\sql\\pivot.sql", "original_file_path": "macros\\sql\\pivot.sql", "name": "pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.2259026, "supported_languages": null}, "macro.dbt_utils.default__pivot": {"unique_id": "macro.dbt_utils.default__pivot", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\sql\\pivot.sql", "original_file_path": "macros\\sql\\pivot.sql", "name": "default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for value in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ dbt_utils.escape_single_quotes(value) }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ value ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.escape_single_quotes", "macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.2283897, "supported_languages": null}, "macro.dbt_utils.safe_add": {"unique_id": "macro.dbt_utils.safe_add", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\sql\\safe_add.sql", "original_file_path": "macros\\sql\\safe_add.sql", "name": "safe_add", "macro_sql": "{%- macro safe_add() -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(*varargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__safe_add"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.2293966, "supported_languages": null}, "macro.dbt_utils.default__safe_add": {"unique_id": "macro.dbt_utils.default__safe_add", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\sql\\safe_add.sql", "original_file_path": "macros\\sql\\safe_add.sql", "name": "default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add() -%}\n\n{% set fields = [] %}\n\n{%- for field in varargs -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.2293966, "supported_languages": null}, "macro.dbt_utils.star": {"unique_id": "macro.dbt_utils.star", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\sql\\star.sql", "original_file_path": "macros\\sql\\star.sql", "name": "star", "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='') -%}\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__star"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.2313952, "supported_languages": null}, "macro.dbt_utils.default__star": {"unique_id": "macro.dbt_utils.default__star", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\sql\\star.sql", "original_file_path": "macros\\sql\\star.sql", "name": "default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='') -%}\n    {%- do dbt_utils._is_relation(from, 'star') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('*') }}\n    {% endif %}\n\n    {% set cols = dbt_utils.get_filtered_columns_in_relation(from, except) %}\n\n    {%- if cols|length <= 0 -%}\n      {{- return('*') -}}\n    {%- else -%}\n        {%- for col in cols %}\n            {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}{{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' %} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\n            {%- if not loop.last %},{{ '\\n  ' }}{% endif %}\n        {%- endfor -%}\n    {% endif %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.2323892, "supported_languages": null}, "macro.dbt_utils.surrogate_key": {"unique_id": "macro.dbt_utils.surrogate_key", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\sql\\surrogate_key.sql", "original_file_path": "macros\\sql\\surrogate_key.sql", "name": "surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.2347293, "supported_languages": null}, "macro.dbt_utils.default__surrogate_key": {"unique_id": "macro.dbt_utils.default__surrogate_key", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\sql\\surrogate_key.sql", "original_file_path": "macros\\sql\\surrogate_key.sql", "name": "default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- if varargs|length >= 1 or field_list is string %}\n\n{%- set error_message = '\nWarning: the `surrogate_key` macro now takes a single list argument instead of \\\nmultiple string arguments. Support for multiple string arguments will be \\\ndeprecated in a future release of dbt-utils. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{# first argument is not included in varargs, so add first element to field_list_xf #}\n{%- set field_list_xf = [field_list] -%}\n\n{%- for field in varargs %}\n{%- set _ = field_list_xf.append(field) -%}\n{%- endfor -%}\n\n{%- else -%}\n\n{# if using list, just set field_list_xf as field_list #}\n{%- set field_list_xf = field_list -%}\n\n{%- endif -%}\n\n\n{%- set fields = [] -%}\n\n{%- for field in field_list_xf -%}\n\n    {%- set _ = fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt_utils.type_string() ~ \"), '')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- set _ = fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{dbt_utils.hash(dbt_utils.concat(fields))}}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string", "macro.dbt_utils.hash", "macro.dbt_utils.concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.2361226, "supported_languages": null}, "macro.dbt_utils.union_relations": {"unique_id": "macro.dbt_utils.union_relations", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\sql\\union.sql", "original_file_path": "macros\\sql\\union.sql", "name": "union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name, where)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__union_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.2401214, "supported_languages": null}, "macro.dbt_utils.default__union_relations": {"unique_id": "macro.dbt_utils.default__union_relations", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\sql\\union.sql", "original_file_path": "macros\\sql\\union.sql", "name": "default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column in exclude -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column not in include -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n    {%- set dbt_command = flags.WHICH -%}\n\n\n    {% if dbt_command in ['run', 'build'] %}\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n        {%- set relations_string -%}\n            {%- for relation in relations -%}\n                {{ relation.name }}\n            {%- if not loop.last %}, {% endif -%}\n            {%- endfor -%}\n        {%- endset -%}\n\n        {%- set error_message -%}\n            There were no columns found to union for relations {{ relations_string }}\n        {%- endset -%}\n\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n    {%- endif -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                cast({{ dbt_utils.string_literal(relation) }} as {{ dbt_utils.type_string() }}) as {{ source_column_name }},\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n\n            {% if where -%}\n            where {{ where }}\n            {%- endif %}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.string_literal", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.2444298, "supported_languages": null}, "macro.dbt_utils.unpivot": {"unique_id": "macro.dbt_utils.unpivot", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\sql\\unpivot.sql", "original_file_path": "macros\\sql\\unpivot.sql", "name": "unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name, table)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__unpivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.2474298, "supported_languages": null}, "macro.dbt_utils.default__unpivot": {"unique_id": "macro.dbt_utils.default__unpivot", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\sql\\unpivot.sql", "original_file_path": "macros\\sql\\unpivot.sql", "name": "default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\n\n    {% if table %}\n        {%- set error_message = '\n            Warning: the `unpivot` macro no longer accepts a `table` parameter. \\\n            This parameter will be deprecated in a future release of dbt-utils. Use the `relation` parameter instead. \\\n            The {}.{} model triggered this warning. \\\n            '.format(model.package_name, model.name) -%}\n        {%- do exceptions.warn(error_message) -%}\n    {% endif %}\n\n    {% if relation and table %}\n        {{ exceptions.raise_compiler_error(\"Error: both the `relation` and `table` parameters were provided to `unpivot` macro. Choose one only (we recommend `relation`).\") }}\n    {% elif not relation and table %}\n        {% set relation=table %}\n    {% elif not relation and not table %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt_utils.type_string() }}) as {{ field_name }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt_utils.cast_bool_to_text(col.column) }}\n             {% else %}\n           {{ col.column }}\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.type_string", "macro.dbt_utils.cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.2509778, "supported_languages": null}, "macro.dbt_utils.get_url_host": {"unique_id": "macro.dbt_utils.get_url_host", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\web\\get_url_host.sql", "original_file_path": "macros\\web\\get_url_host.sql", "name": "get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_host"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.2546113, "supported_languages": null}, "macro.dbt_utils.default__get_url_host": {"unique_id": "macro.dbt_utils.default__get_url_host", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\web\\get_url_host.sql", "original_file_path": "macros\\web\\get_url_host.sql", "name": "default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    dbt_utils.split_part(\n        dbt_utils.split_part(\n            dbt_utils.replace(\n                dbt_utils.replace(\n                    dbt_utils.replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt_utils.safe_cast(\n        parsed,\n        dbt_utils.type_string()\n        )}}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.split_part", "macro.dbt_utils.replace", "macro.dbt_utils.safe_cast", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.257106, "supported_languages": null}, "macro.dbt_utils.get_url_parameter": {"unique_id": "macro.dbt_utils.get_url_parameter", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\web\\get_url_parameter.sql", "original_file_path": "macros\\web\\get_url_parameter.sql", "name": "get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.2576854, "supported_languages": null}, "macro.dbt_utils.default__get_url_parameter": {"unique_id": "macro.dbt_utils.default__get_url_parameter", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\web\\get_url_parameter.sql", "original_file_path": "macros\\web\\get_url_parameter.sql", "name": "default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt_utils.split_part(dbt_utils.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.2588782, "supported_languages": null}, "macro.dbt_utils.get_url_path": {"unique_id": "macro.dbt_utils.get_url_path", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\web\\get_url_path.sql", "original_file_path": "macros\\web\\get_url_path.sql", "name": "get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_path"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.2598703, "supported_languages": null}, "macro.dbt_utils.default__get_url_path": {"unique_id": "macro.dbt_utils.default__get_url_path", "package_name": "dbt_utils", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt\\dbt_packages\\dbt_utils", "path": "macros\\web\\get_url_path.sql", "original_file_path": "macros\\web\\get_url_path.sql", "name": "default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url = \n        dbt_utils.replace(\n            dbt_utils.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{dbt_utils.position(\"'/'\", stripped_url)}}, 0),\n            {{dbt_utils.position(\"'?'\", stripped_url)}} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt_utils.split_part(\n            dbt_utils.right(\n                stripped_url, \n                dbt_utils.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ), \n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt_utils.safe_cast(\n        parsed_path,\n        dbt_utils.type_string()\n    )}}\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.replace", "macro.dbt_utils.position", "macro.dbt_utils.split_part", "macro.dbt_utils.right", "macro.dbt_utils.length", "macro.dbt_utils.safe_cast", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701786800.260867, "supported_languages": null}}, "docs": {"iginsure.model_premium_data": {"unique_id": "iginsure.model_premium_data", "package_name": "iginsure", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyproj\\clay\\dbt", "path": "presentation\\premium\\premium_data.md", "original_file_path": "models\\presentation\\premium\\premium_data.md", "name": "model_premium_data", "block_contents": "A model that encompess all related inward premium data from XFI as of this date.\r\n\r\nIt consideres the gross premium figures (GWP) including RIP and excluding writeoff with the ability to view the state of non-financial info. per day and per accounting period to the level of transaction(APR).\r\n\r\nAny column ends by '_day' reflects the non-financial info. as at that date while if the column ends by '_month' this will be reflecting non-financial info. as at that month (account period)."}, "dbt.__overview__": {"unique_id": "dbt.__overview__", "package_name": "dbt", "root_path": "C:\\Users\\samuel.zammit\\Python\\pyenv\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "overview.md", "original_file_path": "docs\\overview.md", "name": "__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {}, "metrics": {}, "selectors": {}, "disabled": {}, "parent_map": {"model.iginsure.dmn_activity_date_ranges": ["model.iginsure.dmn_policy_part"], "model.iginsure.dmn_claim": ["model.iginsure.scd_account_period", "model.iginsure.scd_claim", "model.iginsure.scd_claim_movement", "model.iginsure.scd_claim_section", "model.iginsure.scd_currency", "model.iginsure.scd_type_of_event", "model.iginsure.scd_type_of_event_type", "model.iginsure.scd_type_of_loss", "model.iginsure.scd_type_of_rag", "model.iginsure.scd_zone_country", "model.iginsure.stg_claim_dates", "model.iginsure.stg_claimgroup_linkedclaims", "model.iginsure.stg_contact", "model.iginsure.stg_entity_instance_states"], "model.iginsure.dmn_claim_amounts": ["model.iginsure.dmn_policy", "model.iginsure.stg_inward_claims_amounts", "model.iginsure.stg_outward_claims_amounts"], "model.iginsure.dmn_claim_section": ["model.iginsure.scd_claim_section"], "model.iginsure.dmn_iris_mvmts": ["source.iginsure.dbo.segmentation", "source.iginsure.iris.IRIS_INW_GWP_Movemnets"], "model.iginsure.dmn_journal_pairs": ["model.iginsure.stg_journal_activities", "model.iginsure.stg_journal_line_items", "model.iginsure.stg_journal_pairs"], "model.iginsure.dmn_master_declaration_attributes": ["model.iginsure.scd_policy", "model.iginsure.scd_policy_activity", "model.iginsure.scd_policy_line", "model.iginsure.scd_type_of_placement"], "model.iginsure.dmn_policy": ["model.iginsure.dmn_master_declaration_attributes", "model.iginsure.scd_policy"], "model.iginsure.dmn_policy_account_periods": ["model.iginsure.dmn_policy_part", "model.iginsure.stg_account_period"], "model.iginsure.dmn_policy_liability": ["model.iginsure.scd_policy_liability"], "model.iginsure.dmn_policy_part": ["model.iginsure.dmn_policy", "model.iginsure.scd_classification", "model.iginsure.scd_policy_activity", "model.iginsure.scd_policy_line", "model.iginsure.scd_policy_section", "model.iginsure.scd_sub_class", "model.iginsure.scd_type_of_activity_source", "model.iginsure.scd_type_of_class", "model.iginsure.scd_type_of_insurance", "model.iginsure.scd_type_of_placement", "model.iginsure.scd_type_of_policy_activity", "model.iginsure.scd_type_of_policy_line", "model.iginsure.scd_type_of_pricing", "model.iginsure.scd_type_of_pricing_time", "model.iginsure.scd_version_audit_trail", "model.iginsure.stg_account_period", "model.iginsure.stg_account_periods_closing", "model.iginsure.stg_activity_audit_state_transitions", "model.iginsure.stg_broker_group", "model.iginsure.stg_cancellation_reason_history", "model.iginsure.stg_contact", "model.iginsure.stg_contra_expiry_history", "model.iginsure.stg_country_territory", "model.iginsure.stg_coverage", "model.iginsure.stg_division", "model.iginsure.stg_entity_instance_states", "model.iginsure.stg_inception", "model.iginsure.stg_product", "model.iginsure.stg_subdivision", "model.iginsure.stg_type_of_profit_centre", "source.iginsure.dbo.security_users", "source.iginsure.dbo.segmentation"], "model.iginsure.dmn_product": ["model.iginsure.stg_product"], "model.iginsure.dmn_ri_policy_part": ["model.iginsure.scd_ri_activity", "model.iginsure.scd_ri_policy", "model.iginsure.scd_ri_section", "model.iginsure.scd_ri_section_broker", "model.iginsure.scd_ri_section_broker_security", "model.iginsure.scd_type_of_fronting", "model.iginsure.scd_type_of_ri_class", "model.iginsure.scd_type_of_ri_policy", "model.iginsure.stg_broker_group", "model.iginsure.stg_contact", "model.iginsure.stg_entity_instance_states"], "model.iginsure.dmn_uwy_audit": ["model.iginsure.scd_auditcolumns", "model.iginsure.scd_auditheader", "model.iginsure.scd_auditrows", "model.iginsure.scd_policy_activity", "model.iginsure.scd_policy_line"], "model.iginsure.provisioned_cmr": ["model.iginsure.dmn_claim", "model.iginsure.dmn_claim_amounts", "model.iginsure.dmn_policy_part", "model.iginsure.stg_current_account_period", "source.iginsure.dbo.ClaimsASAT"], "model.iginsure.dim_iw_ow_flag": ["model.iginsure.premium_data"], "model.iginsure.dim_producing_office": ["model.iginsure.dmn_policy_part"], "model.iginsure.dim_product": ["model.iginsure.stg_product"], "model.iginsure.dim_Product_Subclass_Segmentation": ["model.iginsure.dmn_policy_part"], "model.iginsure.dim_region": ["model.iginsure.stg_country_territory"], "model.iginsure.dim_subdivision": ["model.iginsure.stg_subdivision"], "model.iginsure.dim_sub_class_segmentaion": ["model.iginsure.dmn_policy_part"], "model.iginsure.premium_data": ["model.iginsure.dmn_activity_date_ranges", "model.iginsure.dmn_iris_mvmts", "model.iginsure.dmn_policy_part", "model.iginsure.dmn_ri_policy_part", "model.iginsure.stg_apr", "model.iginsure.stg_claim_movement"], "model.iginsure.pricing": ["model.iginsure.dmn_claim", "model.iginsure.dmn_policy_part", "model.iginsure.stg_apr", "model.iginsure.stg_latest_activity_per_policy", "model.iginsure.stg_latest_activity_per_renewal_policy"], "model.iginsure.actuarial_all_core_filtered": ["source.iginsure.dbo.actuarial_all_core", "source.iginsure.dbo.actuarial_all_core_historical"], "model.iginsure.actuarial_claim_movement_clean_nb100": ["model.iginsure.actuarial_claim_movement_load"], "model.iginsure.actuarial_claim_movement_clean_nb110": ["model.iginsure.actuarial_claim_movement_clean_nb100", "model.iginsure.actuarial_policy_clean_nb100"], "model.iginsure.actuarial_claim_movement_gre_agg_movement_date": ["model.iginsure.actuarial_claim_movement_gre_filtered"], "model.iginsure.actuarial_claim_movement_gre_agg_movement_duration": ["model.iginsure.actuarial_claim_movement_gre_agg_movement_date"], "model.iginsure.actuarial_claim_movement_gre_agg_policy": ["model.iginsure.actuarial_claim_movement_gre_filtered"], "model.iginsure.actuarial_claim_movement_gre_filtered": ["model.iginsure.actuarial_claim_movement_clean_nb110"], "model.iginsure.actuarial_claim_movement_load": ["model.iginsure.actuarial_all_core_filtered", "source.iginsure.dbo.actuarial_claims_data"], "model.iginsure.actuarial_claim_movement_nre_agg_movement_date": ["model.iginsure.actuarial_claim_movement_nre_filtered"], "model.iginsure.actuarial_claim_movement_nre_agg_movement_duration": ["model.iginsure.actuarial_claim_movement_nre_agg_movement_date"], "model.iginsure.actuarial_claim_movement_nre_agg_policy": ["model.iginsure.actuarial_claim_movement_nre_filtered"], "model.iginsure.actuarial_claim_movement_nre_filtered": ["model.iginsure.actuarial_claim_movement_clean_nb110"], "model.iginsure.actuarial_earned_premium_clean_nb100": ["model.iginsure.actuarial_earned_premium_load"], "model.iginsure.actuarial_earned_premium_clean_nb110": ["model.iginsure.actuarial_earned_premium_clean_nb100"], "model.iginsure.actuarial_earned_premium_load": ["model.iginsure.actuarial_all_core_filtered", "source.iginsure.dbo.actuarial_earned_premium"], "model.iginsure.actuarial_policy_clean_nb100": ["model.iginsure.actuarial_policy_load"], "model.iginsure.actuarial_policy_clean_nb110": ["model.iginsure.actuarial_policy_clean_nb100"], "model.iginsure.actuarial_policy_load": ["model.iginsure.actuarial_all_core_filtered"], "model.iginsure.scd_account": ["source.iginsure.dbo.account"], "model.iginsure.scd_account_period": ["source.iginsure.dbo.account_period"], "model.iginsure.scd_apr": ["source.iginsure.dbo.apr"], "model.iginsure.scd_apr_message_instalment": ["source.iginsure.dbo.apr_message_instalment"], "model.iginsure.scd_auditcolumns": ["source.iginsure.dbo.auditcolumns"], "model.iginsure.scd_auditheader": ["source.iginsure.dbo.auditheader"], "model.iginsure.scd_auditrows": ["source.iginsure.dbo.auditrows"], "model.iginsure.scd_audit_state_transitions": ["source.iginsure.dbo.audit_state_transitions"], "model.iginsure.scd_claim": ["source.iginsure.dbo.claim"], "model.iginsure.scd_claimgrouplinkedclaims": ["source.iginsure.dbo.claimgrouplinkedclaims"], "model.iginsure.scd_claim_movement": ["source.iginsure.dbo.claim_movement"], "model.iginsure.scd_claim_section": ["source.iginsure.dbo.claim_section"], "model.iginsure.scd_classification": ["source.iginsure.dbo.classification"], "model.iginsure.scd_contact": ["source.iginsure.dbo.contact"], "model.iginsure.scd_contact_link": ["source.iginsure.dbo.contact_link"], "model.iginsure.scd_currency": ["source.iginsure.dbo.currency"], "model.iginsure.scd_currency_roe_history": ["source.iginsure.dbo.Currency_Roe_History"], "model.iginsure.scd_division": ["source.iginsure.dbo.division"], "model.iginsure.scd_entity_instance_states": ["source.iginsure.dbo.entity_instance_states"], "model.iginsure.scd_entity_matching_journal": ["source.iginsure.dbo.entity_matching_journal"], "model.iginsure.scd_entity_state_members": ["source.iginsure.dbo.entity_state_members"], "model.iginsure.scd_entity_type": ["source.iginsure.dbo.entity_type"], "model.iginsure.scd_journal_activity": ["source.iginsure.dbo.journal_activity"], "model.iginsure.scd_journal_line_item": ["source.iginsure.dbo.journal_line_item"], "model.iginsure.scd_journal_pair": ["source.iginsure.dbo.journal_pair"], "model.iginsure.scd_journal_template": ["source.iginsure.dbo.journal_template"], "model.iginsure.scd_market_source": ["source.iginsure.dbo.market_source"], "model.iginsure.scd_policy": ["source.iginsure.dbo.policy"], "model.iginsure.scd_policy_activity": ["source.iginsure.dbo.policy_activity"], "model.iginsure.scd_policy_liability": ["source.iginsure.dbo.policy_liability"], "model.iginsure.scd_policy_line": ["source.iginsure.dbo.policy_line"], "model.iginsure.scd_policy_reinsurance_profile": ["source.iginsure.dbo.Policy_Reinsurance_Profile"], "model.iginsure.scd_policy_section": ["source.iginsure.dbo.policy_section"], "model.iginsure.scd_product": ["source.iginsure.dbo.product"], "model.iginsure.scd_ri_activity": ["source.iginsure.dbo.ri_activity"], "model.iginsure.scd_ri_policy": ["source.iginsure.dbo.ri_policy"], "model.iginsure.scd_ri_policy_period": ["source.iginsure.dbo.ri_policy_period"], "model.iginsure.scd_ri_policy_period_prop": ["source.iginsure.dbo.ri_policy_period_prop"], "model.iginsure.scd_ri_section": ["source.iginsure.dbo.ri_section"], "model.iginsure.scd_ri_section_broker": ["source.iginsure.dbo.ri_section_broker"], "model.iginsure.scd_ri_section_broker_security": ["source.iginsure.dbo.ri_section_broker_security"], "model.iginsure.scd_sub_class": ["source.iginsure.dbo.sub_class"], "model.iginsure.scd_sub_division": ["source.iginsure.dbo.sub_division"], "model.iginsure.scd_type_of_accounting_element": ["source.iginsure.dbo.type_of_accounting_element"], "model.iginsure.scd_type_of_activity_source": ["source.iginsure.dbo.type_of_activity_source"], "model.iginsure.scd_type_of_bureau_message": ["source.iginsure.dbo.type_of_bureau_message"], "model.iginsure.scd_type_of_class": ["source.iginsure.dbo.type_of_class"], "model.iginsure.scd_type_of_debit_credit": ["source.iginsure.dbo.type_of_debit_credit"], "model.iginsure.scd_type_of_event": ["source.iginsure.dbo.type_of_event"], "model.iginsure.scd_type_of_event_type": ["source.iginsure.dbo.type_of_event_type"], "model.iginsure.scd_type_of_fronting": ["source.iginsure.dbo.type_of_fronting"], "model.iginsure.scd_type_of_insurance": ["source.iginsure.dbo.type_of_insurance"], "model.iginsure.scd_type_of_loss": ["source.iginsure.dbo.type_of_loss"], "model.iginsure.scd_type_of_monetary_amount": ["source.iginsure.dbo.type_of_monetary_amount"], "model.iginsure.scd_type_of_movement": ["source.iginsure.dbo.type_of_movement"], "model.iginsure.scd_type_of_placement": ["source.iginsure.dbo.type_of_placement"], "model.iginsure.scd_type_of_policy_activity": ["source.iginsure.dbo.type_of_policy_activity"], "model.iginsure.scd_type_of_policy_line": ["source.iginsure.dbo.type_of_policy_line"], "model.iginsure.scd_type_of_premium_payment_warranty": ["source.iginsure.dbo.type_of_premium_payment_warranty"], "model.iginsure.scd_type_of_pricing": ["source.iginsure.dbo.type_of_pricing"], "model.iginsure.scd_type_of_pricing_time": ["source.iginsure.dbo.type_of_pricing_time"], "model.iginsure.scd_type_of_product_group": ["source.iginsure.dbo.Type_Of_Product_Group"], "model.iginsure.scd_type_of_profit_centre": ["source.iginsure.dbo.type_of_profit_centre"], "model.iginsure.scd_type_of_rag": ["source.iginsure.dbo.type_of_rag"], "model.iginsure.scd_type_of_ri_class": ["source.iginsure.dbo.type_of_ri_class"], "model.iginsure.scd_type_of_ri_policy": ["source.iginsure.dbo.type_of_ri_policy"], "model.iginsure.scd_type_of_sub_class": ["source.iginsure.dbo.type_of_sub_class"], "model.iginsure.scd_type_of_us_classification": ["source.iginsure.dbo.type_of_us_classification"], "model.iginsure.scd_version_audit_trail": ["source.iginsure.dbo.version_audit_trail"], "model.iginsure.scd_zone_country": ["source.iginsure.dbo.zone_country"], "model.iginsure.scd_zone_major_territory": ["source.iginsure.dbo.ZONE_MAJOR_TERRITORY"], "model.iginsure.scd_zone_territory": ["source.iginsure.dbo.zone_territory"], "model.iginsure.stg_account_period": ["model.iginsure.scd_account_period"], "model.iginsure.stg_account_periods_closing": ["model.iginsure.scd_audit_state_transitions", "model.iginsure.stg_account_period"], "model.iginsure.stg_activity_audit_state_transitions": ["model.iginsure.scd_audit_state_transitions"], "model.iginsure.stg_apr": ["model.iginsure.scd_apr", "model.iginsure.scd_audit_state_transitions", "model.iginsure.scd_currency", "model.iginsure.scd_entity_matching_journal", "model.iginsure.stg_account_period", "model.iginsure.stg_entity_instance_states", "model.iginsure.stg_type_of_monetary_amount"], "model.iginsure.stg_auth_mvmt_pending_financial": ["model.iginsure.scd_account_period", "model.iginsure.scd_claim_movement", "model.iginsure.stg_apr", "model.iginsure.stg_current_account_period", "model.iginsure.stg_entity_instance_states", "model.iginsure.stg_journal_pairs"], "model.iginsure.stg_broker_group": ["model.iginsure.scd_contact_link", "model.iginsure.stg_contact"], "model.iginsure.stg_business_plan": ["seed.iginsure.business_plan"], "model.iginsure.stg_cancellation_reason_history": ["model.iginsure.scd_auditcolumns", "model.iginsure.scd_auditheader", "model.iginsure.scd_auditrows", "model.iginsure.scd_policy_activity", "model.iginsure.stg_account_periods_closing"], "model.iginsure.stg_claimgroup_linkedclaims": ["model.iginsure.scd_claim", "model.iginsure.scd_claimgrouplinkedclaims"], "model.iginsure.stg_claim_dates": ["model.iginsure.scd_account_period", "model.iginsure.scd_claim_movement", "model.iginsure.scd_claim_section", "model.iginsure.scd_currency", "model.iginsure.stg_current_account_period", "model.iginsure.stg_entity_instance_states"], "model.iginsure.stg_claim_movement": ["model.iginsure.scd_claim", "model.iginsure.scd_claim_movement", "model.iginsure.scd_policy_activity"], "model.iginsure.stg_claim_mvmt_audit_state_transitions": ["model.iginsure.scd_audit_state_transitions"], "model.iginsure.stg_contact": ["model.iginsure.scd_contact"], "model.iginsure.stg_contra_expiry_history": ["model.iginsure.scd_auditcolumns", "model.iginsure.scd_auditheader", "model.iginsure.scd_auditrows", "model.iginsure.scd_policy_activity"], "model.iginsure.stg_country_territory": ["model.iginsure.scd_zone_country", "model.iginsure.scd_zone_territory"], "model.iginsure.stg_coverage": ["model.iginsure.scd_policy_liability", "model.iginsure.scd_type_of_sub_class"], "model.iginsure.stg_current_account_period": ["model.iginsure.scd_account_period"], "model.iginsure.stg_current_exchange_rate": ["model.iginsure.scd_currency_roe_history"], "model.iginsure.stg_division": ["model.iginsure.scd_division"], "model.iginsure.stg_entity_instance_states": ["model.iginsure.scd_entity_instance_states", "model.iginsure.scd_entity_state_members", "model.iginsure.scd_entity_type"], "model.iginsure.stg_inception": ["model.iginsure.scd_account_period", "model.iginsure.scd_apr", "model.iginsure.scd_audit_state_transitions", "model.iginsure.scd_auditcolumns", "model.iginsure.scd_auditheader", "model.iginsure.scd_auditrows", "model.iginsure.scd_policy", "model.iginsure.scd_policy_activity", "model.iginsure.scd_policy_line", "model.iginsure.stg_written_account_period"], "model.iginsure.stg_inward_claims_amounts": ["model.iginsure.scd_account_period", "model.iginsure.scd_claim", "model.iginsure.scd_claim_movement", "model.iginsure.scd_claim_section", "model.iginsure.scd_currency", "model.iginsure.stg_auth_mvmt_pending_financial", "model.iginsure.stg_claim_mvmt_audit_state_transitions", "model.iginsure.stg_current_account_period", "model.iginsure.stg_current_exchange_rate", "model.iginsure.stg_entity_instance_states"], "model.iginsure.stg_journal_activities": ["model.iginsure.scd_entity_type", "model.iginsure.scd_journal_activity", "model.iginsure.scd_journal_template"], "model.iginsure.stg_journal_line_items": ["model.iginsure.scd_account", "model.iginsure.scd_currency", "model.iginsure.scd_journal_line_item", "model.iginsure.scd_type_of_accounting_element", "model.iginsure.scd_type_of_debit_credit"], "model.iginsure.stg_journal_pairs": ["model.iginsure.scd_entity_type", "model.iginsure.scd_journal_pair", "model.iginsure.stg_account_period", "model.iginsure.stg_division", "model.iginsure.stg_subdivision"], "model.iginsure.stg_latest_activity_per_policy": ["model.iginsure.scd_policy_activity"], "model.iginsure.stg_latest_activity_per_renewal_policy": ["model.iginsure.scd_policy_activity", "model.iginsure.scd_policy_line"], "model.iginsure.stg_outward_claims_amounts": ["model.iginsure.scd_account_period", "model.iginsure.scd_claim", "model.iginsure.scd_claim_movement", "model.iginsure.scd_claim_section", "model.iginsure.scd_currency", "model.iginsure.scd_ri_policy", "model.iginsure.scd_ri_policy_period", "model.iginsure.scd_ri_policy_period_prop", "model.iginsure.stg_claim_mvmt_audit_state_transitions", "model.iginsure.stg_current_account_period", "model.iginsure.stg_current_exchange_rate", "model.iginsure.stg_entity_instance_states"], "model.iginsure.stg_product": ["model.iginsure.scd_product"], "model.iginsure.stg_subdivision": ["model.iginsure.scd_sub_division"], "model.iginsure.stg_time_series": [], "model.iginsure.stg_type_of_monetary_amount": ["model.iginsure.scd_type_of_monetary_amount"], "model.iginsure.stg_type_of_profit_centre": ["model.iginsure.scd_type_of_profit_centre"], "model.iginsure.stg_written_account_period": ["model.iginsure.scd_version_audit_trail", "model.iginsure.stg_account_periods_closing", "model.iginsure.stg_activity_audit_state_transitions"], "test.iginsure.actuarial_policy_single_account_period": ["model.iginsure.actuarial_policy_clean_nb110", "model.iginsure.actuarial_policy_clean_nb110"], "seed.iginsure.business_plan": [], "test.iginsure.not_null_actuarial_claim_movement_load_policy_id.0b224c8051": ["model.iginsure.actuarial_claim_movement_load"], "test.iginsure.not_null_actuarial_claim_movement_load_claim_id.37b5598fc4": ["model.iginsure.actuarial_claim_movement_load"], "test.iginsure.not_null_actuarial_claim_movement_load_movement_date.5e6015b680": ["model.iginsure.actuarial_claim_movement_load"], "test.iginsure.not_null_actuarial_claim_movement_load_reinsurance_type.c8597e907a": ["model.iginsure.actuarial_claim_movement_load"], "test.iginsure.not_null_actuarial_claim_movement_load_org_ccy_code.d9f72091a8": ["model.iginsure.actuarial_claim_movement_load"], "test.iginsure.not_null_actuarial_claim_movement_load_amount_type.cc83f3c7bc": ["model.iginsure.actuarial_claim_movement_load"], "test.iginsure.unique_actuarial_claim_movement_load__policy_id_claim_id_convert_varchar_movement_date_reinsurance_type_amount_type_org_ccy_code_.dbdec7795a": ["model.iginsure.actuarial_claim_movement_load"], "test.iginsure.unique_actuarial_policy_load_policy_id.8ac885026e": ["model.iginsure.actuarial_policy_load"], "test.iginsure.not_null_actuarial_policy_load_policy_id.31fa24fa01": ["model.iginsure.actuarial_policy_load"], "test.iginsure.not_null_actuarial_earned_premium_load_policy_id.8594d4add9": ["model.iginsure.actuarial_earned_premium_load"], "test.iginsure.is_data_type_actuarial_policy_clean_nb100_uw_year__int.371e835324": ["model.iginsure.actuarial_policy_clean_nb100"], "test.iginsure.is_data_type_actuarial_policy_clean_nb100_mis_uw_year__date.2a9c5b6f86": ["model.iginsure.actuarial_policy_clean_nb100"], "test.iginsure.is_data_type_actuarial_policy_clean_nb100_class__varchar.51ad3fdfdb": ["model.iginsure.actuarial_policy_clean_nb100"], "test.iginsure.is_data_type_actuarial_policy_clean_nb100_sub_class__varchar.fe38050f11": ["model.iginsure.actuarial_policy_clean_nb100"], "test.iginsure.is_data_type_actuarial_policy_clean_nb100_coverage__varchar.52e6939173": ["model.iginsure.actuarial_policy_clean_nb100"], "test.iginsure.is_data_type_actuarial_policy_clean_nb100_coverage_code__varchar.7d84cd5a4d": ["model.iginsure.actuarial_policy_clean_nb100"], "test.iginsure.is_data_type_actuarial_policy_clean_nb100_lloyds_risk_code__varchar.4cd2bf521f": ["model.iginsure.actuarial_policy_clean_nb100"], "test.iginsure.is_data_type_actuarial_policy_clean_nb100_insured__varchar.0ebaa36faa": ["model.iginsure.actuarial_policy_clean_nb100"], "test.iginsure.is_data_type_actuarial_policy_clean_nb100_reassured__varchar.57e6506f01": ["model.iginsure.actuarial_policy_clean_nb100"], "test.iginsure.is_data_type_actuarial_policy_clean_nb100_is_direct__bit.bdab8c45a7": ["model.iginsure.actuarial_policy_clean_nb100"], "test.iginsure.is_data_type_actuarial_policy_clean_nb100_region__varchar.ec8ded7797": ["model.iginsure.actuarial_policy_clean_nb100"], "test.iginsure.is_data_type_actuarial_policy_clean_nb100_territory__varchar.f2926b4a91": ["model.iginsure.actuarial_policy_clean_nb100"], "test.iginsure.is_data_type_actuarial_policy_clean_nb100_domicile_country__varchar.10ce92ccde": ["model.iginsure.actuarial_policy_clean_nb100"], "test.iginsure.is_data_type_actuarial_policy_clean_nb100_written_date__datetime.c68b533b8a": ["model.iginsure.actuarial_policy_clean_nb100"], "test.iginsure.is_data_type_actuarial_policy_clean_nb100_inception_date__datetime.d158314561": ["model.iginsure.actuarial_policy_clean_nb100"], "test.iginsure.is_data_type_actuarial_policy_clean_nb100_expiry_date__datetime.1285633c13": ["model.iginsure.actuarial_policy_clean_nb100"], "test.iginsure.is_data_type_actuarial_policy_clean_nb100_cancellation_date__datetime.e06090eb62": ["model.iginsure.actuarial_policy_clean_nb100"], "test.iginsure.is_data_type_actuarial_policy_clean_nb100_cancellation_type__varchar.e422c6595b": ["model.iginsure.actuarial_policy_clean_nb100"], "test.iginsure.is_data_type_actuarial_policy_clean_nb100_policy_status__varchar.e9e2e4cffe": ["model.iginsure.actuarial_policy_clean_nb100"], "test.iginsure.is_data_type_actuarial_policy_clean_nb100_activity__varchar.419951a03a": ["model.iginsure.actuarial_policy_clean_nb100"], "test.iginsure.is_data_type_actuarial_policy_clean_nb100_is_renewal__bit.0e68b03635": ["model.iginsure.actuarial_policy_clean_nb100"], "test.iginsure.is_data_type_actuarial_policy_clean_nb100_activity_status__varchar.699d86cb70": ["model.iginsure.actuarial_policy_clean_nb100"], "test.iginsure.is_data_type_actuarial_policy_clean_nb100_placing_code__varchar.7f645c5a8f": ["model.iginsure.actuarial_policy_clean_nb100"], "test.iginsure.is_data_type_actuarial_policy_clean_nb100_placing_method__varchar.f9910daf4b": ["model.iginsure.actuarial_policy_clean_nb100"], "test.iginsure.is_data_type_actuarial_policy_clean_nb100_is_claims_made__bit.eddad831b6": ["model.iginsure.actuarial_policy_clean_nb100"], "test.iginsure.is_data_type_actuarial_policy_clean_nb100_working_line_pct__float.8f80c8e1c2": ["model.iginsure.actuarial_policy_clean_nb100"], "test.iginsure.is_data_type_actuarial_policy_clean_nb100_gross_written_share__float.918d905f5c": ["model.iginsure.actuarial_policy_clean_nb100"], "test.iginsure.is_data_type_actuarial_policy_clean_nb100_reserving_class_1__varchar.20fd1c1dfc": ["model.iginsure.actuarial_policy_clean_nb100"], "test.iginsure.is_data_type_actuarial_policy_clean_nb100_reserving_class_2__varchar.9e1db6eeb4": ["model.iginsure.actuarial_policy_clean_nb100"], "test.iginsure.is_data_type_actuarial_policy_clean_nb100_reserving_class_3__varchar.40da7dd223": ["model.iginsure.actuarial_policy_clean_nb100"], "test.iginsure.is_data_type_actuarial_policy_clean_nb100_reserving_class_xol_allocation__varchar.702455018c": ["model.iginsure.actuarial_policy_clean_nb100"], "test.iginsure.is_data_type_actuarial_policy_clean_nb100_account_period__int.f1d12dfce9": ["model.iginsure.actuarial_policy_clean_nb100"], "test.iginsure.is_data_type_actuarial_policy_clean_nb100_tiv_usd__float.2da3ade511": ["model.iginsure.actuarial_policy_clean_nb100"], "test.iginsure.is_data_type_actuarial_policy_clean_nb100_tiv_share_usd__float.d228730228": ["model.iginsure.actuarial_policy_clean_nb100"], "test.iginsure.is_data_type_actuarial_policy_clean_nb100_tiv_100_usd__float.fea59393ff": ["model.iginsure.actuarial_policy_clean_nb100"], "test.iginsure.is_data_type_actuarial_policy_clean_nb100_event_limit_100_usd__float.68dd4de27f": ["model.iginsure.actuarial_policy_clean_nb100"], "test.iginsure.is_data_type_actuarial_policy_clean_nb100_pml_100_usd__float.baa87045a3": ["model.iginsure.actuarial_policy_clean_nb100"], "test.iginsure.is_data_type_actuarial_policy_clean_nb100_pml_share_usd__float.891da5a110": ["model.iginsure.actuarial_policy_clean_nb100"], "test.iginsure.is_data_type_actuarial_earned_premium_clean_nb100_gross_earned_premium__float.fcee4ffb07": ["model.iginsure.actuarial_earned_premium_clean_nb100"], "test.iginsure.is_data_type_actuarial_earned_premium_clean_nb100_inward_acquisition_cost__float.0f8c3bb208": ["model.iginsure.actuarial_earned_premium_clean_nb100"], "test.iginsure.is_data_type_actuarial_earned_premium_clean_nb100_quota_share_premium__float.8c72bb6def": ["model.iginsure.actuarial_earned_premium_clean_nb100"], "test.iginsure.is_data_type_actuarial_earned_premium_clean_nb100_quota_share_acquisition__float.a301bcec81": ["model.iginsure.actuarial_earned_premium_clean_nb100"], "test.iginsure.is_data_type_actuarial_earned_premium_clean_nb100_fac_premium__float.e2eb35db77": ["model.iginsure.actuarial_earned_premium_clean_nb100"], "test.iginsure.is_data_type_actuarial_earned_premium_clean_nb100_fac_acquisition__float.1fc4956bcc": ["model.iginsure.actuarial_earned_premium_clean_nb100"], "test.iginsure.is_data_type_actuarial_earned_premium_clean_nb100_allocated_xol_cost__float.eabb116cd5": ["model.iginsure.actuarial_earned_premium_clean_nb100"], "test.iginsure.is_data_type_actuarial_claim_movement_clean_nb100_movement_date__date.87b155711f": ["model.iginsure.actuarial_claim_movement_clean_nb100"], "test.iginsure.is_data_type_actuarial_claim_movement_clean_nb100_reinsurance_type__varchar.7c6fb1cd4f": ["model.iginsure.actuarial_claim_movement_clean_nb100"], "test.iginsure.is_data_type_actuarial_claim_movement_clean_nb100_loss_date__date.ac43865eec": ["model.iginsure.actuarial_claim_movement_clean_nb100"], "test.iginsure.is_data_type_actuarial_claim_movement_clean_nb100_loss_date_claims_made__date.30a8d2be8c": ["model.iginsure.actuarial_claim_movement_clean_nb100"], "test.iginsure.is_data_type_actuarial_claim_movement_clean_nb100_reported_date__date.c9712e6ed2": ["model.iginsure.actuarial_claim_movement_clean_nb100"], "test.iginsure.is_data_type_actuarial_claim_movement_clean_nb100_event_code__varchar.acc2e80da9": ["model.iginsure.actuarial_claim_movement_clean_nb100"], "test.iginsure.is_data_type_actuarial_claim_movement_clean_nb100_event_type__varchar.e1c488b54f": ["model.iginsure.actuarial_claim_movement_clean_nb100"], "test.iginsure.is_data_type_actuarial_claim_movement_clean_nb100_event_desc__varchar.d33cdc7dcb": ["model.iginsure.actuarial_claim_movement_clean_nb100"], "test.iginsure.is_data_type_actuarial_claim_movement_clean_nb100_claim_desc__varchar.b2c86601cc": ["model.iginsure.actuarial_claim_movement_clean_nb100"], "test.iginsure.is_data_type_actuarial_claim_movement_clean_nb100_is_cat__bit.a7a0d278b6": ["model.iginsure.actuarial_claim_movement_clean_nb100"], "test.iginsure.is_data_type_actuarial_claim_movement_clean_nb100_is_nat_cat__bit.b0a7197dda": ["model.iginsure.actuarial_claim_movement_clean_nb100"], "test.iginsure.is_data_type_actuarial_claim_movement_clean_nb100_org_ccy_code__varchar.62f3c16590": ["model.iginsure.actuarial_claim_movement_clean_nb100"], "test.iginsure.is_data_type_actuarial_claim_movement_clean_nb100_fx_rate_ccy_per_usd__float.68f1ba60fa": ["model.iginsure.actuarial_claim_movement_clean_nb100"], "test.iginsure.is_data_type_actuarial_claim_movement_clean_nb100_amount_type__varchar.a6d2443b06": ["model.iginsure.actuarial_claim_movement_clean_nb100"], "test.iginsure.is_data_type_actuarial_claim_movement_clean_nb100_historical_amount_usd__float.d5a0faca9b": ["model.iginsure.actuarial_claim_movement_clean_nb100"], "test.iginsure.is_data_type_actuarial_claim_movement_clean_nb100_current_amount_usd__float.d85d4f1830": ["model.iginsure.actuarial_claim_movement_clean_nb100"], "test.iginsure.is_data_type_actuarial_claim_movement_clean_nb100_original_amount_ccy__float.ae59b8b839": ["model.iginsure.actuarial_claim_movement_clean_nb100"], "test.iginsure.is_data_type_actuarial_claim_movement_clean_nb100_policy_inception_date_yq__int.9b3a651b30": ["model.iginsure.actuarial_claim_movement_clean_nb100"], "test.iginsure.is_data_type_actuarial_claim_movement_clean_nb100_claim_reporting_date_yq__int.521c6a3b1e": ["model.iginsure.actuarial_claim_movement_clean_nb100"], "test.iginsure.is_data_type_actuarial_claim_movement_clean_nb100_claim_loss_date_yq__int.35b9e37060": ["model.iginsure.actuarial_claim_movement_clean_nb100"], "test.iginsure.is_data_type_actuarial_claim_movement_clean_nb100_claim_loss_date_claims_made_yq__int.0023848cc3": ["model.iginsure.actuarial_claim_movement_clean_nb100"], "test.iginsure.is_data_type_actuarial_claim_movement_clean_nb100_policy_inception_date_dev_dur_q__int.c810075eba": ["model.iginsure.actuarial_claim_movement_clean_nb100"], "test.iginsure.is_data_type_actuarial_claim_movement_clean_nb100_claim_reporting_date_dev_dur_q__int.1e213b5b64": ["model.iginsure.actuarial_claim_movement_clean_nb100"], "test.iginsure.is_data_type_actuarial_claim_movement_clean_nb100_claim_loss_date_dev_dur_q__int.d190bb512f": ["model.iginsure.actuarial_claim_movement_clean_nb100"], "test.iginsure.is_data_type_actuarial_claim_movement_clean_nb100_claim_loss_date_claims_made_dev_dur_q__int.14e20f88e0": ["model.iginsure.actuarial_claim_movement_clean_nb100"], "test.iginsure.is_greater_than_or_equal_to_actuarial_claim_movement_clean_nb100_written_date___20000101_.861a109f45": ["model.iginsure.actuarial_claim_movement_clean_nb100"], "test.iginsure.is_greater_than_or_equal_to_actuarial_claim_movement_clean_nb100_inception_date___20000101_.a474a80f0a": ["model.iginsure.actuarial_claim_movement_clean_nb100"], "test.iginsure.is_greater_than_or_equal_to_actuarial_claim_movement_clean_nb100_expiry_date___20000101_.3932473cd1": ["model.iginsure.actuarial_claim_movement_clean_nb100"], "test.iginsure.is_greater_than_or_equal_to_actuarial_claim_movement_clean_nb100_working_line_pct__0_0.aed761018f": ["model.iginsure.actuarial_claim_movement_clean_nb100"], "test.iginsure.is_less_than_or_equal_to_actuarial_claim_movement_clean_nb100_working_line_pct__100_0.f3de330a93": ["model.iginsure.actuarial_claim_movement_clean_nb100"], "test.iginsure.is_greater_than_or_equal_to_actuarial_claim_movement_clean_nb100_tiv_usd__0_0.7eae16bd17": ["model.iginsure.actuarial_claim_movement_clean_nb100"], "test.iginsure.is_greater_than_or_equal_to_actuarial_claim_movement_clean_nb100_tiv_share_usd__0_0.fb07ef50d4": ["model.iginsure.actuarial_claim_movement_clean_nb100"], "test.iginsure.is_greater_than_or_equal_to_actuarial_claim_movement_clean_nb100_tiv_100_usd__0_0.b01b3c1163": ["model.iginsure.actuarial_claim_movement_clean_nb100"], "test.iginsure.is_greater_than_or_equal_to_actuarial_claim_movement_clean_nb100_event_limit_100_usd__0_0.79744f839e": ["model.iginsure.actuarial_claim_movement_clean_nb100"], "test.iginsure.is_greater_than_or_equal_to_actuarial_claim_movement_clean_nb100_pml_100_usd__0_0.e340e27014": ["model.iginsure.actuarial_claim_movement_clean_nb100"], "test.iginsure.is_greater_than_or_equal_to_actuarial_claim_movement_clean_nb100_pml_share_usd__0_0.8ab689eae7": ["model.iginsure.actuarial_claim_movement_clean_nb100"], "test.iginsure.accepted_values_actuarial_claim_movement_clean_nb110_reinsurance_type__XOL__QS__FAC__Gross.4c04d1a50f": ["model.iginsure.actuarial_claim_movement_clean_nb110"], "test.iginsure.accepted_values_actuarial_claim_movement_clean_nb110_amount_type__OS__Paid.41264baef0": ["model.iginsure.actuarial_claim_movement_clean_nb110"], "test.iginsure.not_null_actuarial_claim_movement_gre_agg_movement_duration_dur_inception_to_movement.a6cc232fda": ["model.iginsure.actuarial_claim_movement_gre_agg_movement_duration"], "test.iginsure.is_greater_than_or_equal_to_actuarial_claim_movement_gre_agg_movement_duration_dur_inception_to_movement__0.9b267d3001": ["model.iginsure.actuarial_claim_movement_gre_agg_movement_duration"], "test.iginsure.not_null_actuarial_claim_movement_gre_agg_movement_duration_dur_inception_to_loss.dee7878a77": ["model.iginsure.actuarial_claim_movement_gre_agg_movement_duration"], "test.iginsure.not_null_actuarial_claim_movement_gre_agg_movement_duration_dur_inception_to_loss_claims_made.c532fac9f8": ["model.iginsure.actuarial_claim_movement_gre_agg_movement_duration"], "test.iginsure.not_null_actuarial_claim_movement_gre_agg_movement_duration_dur_loss_to_reported.b98d184fa2": ["model.iginsure.actuarial_claim_movement_gre_agg_movement_duration"], "test.iginsure.not_null_actuarial_claim_movement_gre_agg_movement_duration_dur_loss_claims_made_to_reported.13ae7be5ab": ["model.iginsure.actuarial_claim_movement_gre_agg_movement_duration"], "test.iginsure.not_null_actuarial_claim_movement_gre_agg_movement_duration_current_amount_usd_sum.a5bb4e4c0d": ["model.iginsure.actuarial_claim_movement_gre_agg_movement_duration"], "test.iginsure.not_null_actuarial_claim_movement_gre_agg_movement_duration_historical_amount_usd_sum.ff7953a709": ["model.iginsure.actuarial_claim_movement_gre_agg_movement_duration"], "test.iginsure.table_contains_resevol_required_columns_actuarial_claim_movement_gre_agg_movement_duration_.0c4f872cbe": ["model.iginsure.actuarial_claim_movement_gre_agg_movement_duration"], "test.iginsure.not_null_actuarial_claim_movement_nre_agg_movement_duration_dur_inception_to_movement.9a7d9b4515": ["model.iginsure.actuarial_claim_movement_nre_agg_movement_duration"], "test.iginsure.is_greater_than_or_equal_to_actuarial_claim_movement_nre_agg_movement_duration_dur_inception_to_movement__0.15594da3a2": ["model.iginsure.actuarial_claim_movement_nre_agg_movement_duration"], "test.iginsure.not_null_actuarial_claim_movement_nre_agg_movement_duration_dur_inception_to_loss.04e0e879e0": ["model.iginsure.actuarial_claim_movement_nre_agg_movement_duration"], "test.iginsure.not_null_actuarial_claim_movement_nre_agg_movement_duration_dur_inception_to_loss_claims_made.5d59d313a3": ["model.iginsure.actuarial_claim_movement_nre_agg_movement_duration"], "test.iginsure.not_null_actuarial_claim_movement_nre_agg_movement_duration_dur_loss_to_reported.511320386a": ["model.iginsure.actuarial_claim_movement_nre_agg_movement_duration"], "test.iginsure.not_null_actuarial_claim_movement_nre_agg_movement_duration_dur_loss_claims_made_to_reported.31905ba313": ["model.iginsure.actuarial_claim_movement_nre_agg_movement_duration"], "test.iginsure.not_null_actuarial_claim_movement_nre_agg_movement_duration_current_amount_usd_sum.6e8dc4a8c0": ["model.iginsure.actuarial_claim_movement_nre_agg_movement_duration"], "test.iginsure.not_null_actuarial_claim_movement_nre_agg_movement_duration_historical_amount_usd_sum.98c780fe7b": ["model.iginsure.actuarial_claim_movement_nre_agg_movement_duration"], "test.iginsure.table_contains_resevol_required_columns_actuarial_claim_movement_nre_agg_movement_duration_.47cf34c92b": ["model.iginsure.actuarial_claim_movement_nre_agg_movement_duration"], "source.iginsure.dbo.budget_testing": [], "source.iginsure.dbo.configurations": [], "source.iginsure.dbo.budget": [], "source.iginsure.dbo.claimgrouplinkedclaims": [], "source.iginsure.dbo.ClaimsASAT": [], "source.iginsure.dbo.product": [], "source.iginsure.dbo.entity_instance_states": [], "source.iginsure.dbo.auditrows": [], "source.iginsure.dbo.auditheader": [], "source.iginsure.dbo.auditcolumns": [], "source.iginsure.dbo.entity_state_members": [], "source.iginsure.dbo.entity_type": [], "source.iginsure.dbo.policy": [], "source.iginsure.dbo.policy_activity": [], "source.iginsure.dbo.policy_line": [], "source.iginsure.dbo.policy_section": [], "source.iginsure.dbo.apr": [], "source.iginsure.dbo.currency": [], "source.iginsure.dbo.account_period": [], "source.iginsure.dbo.type_of_monetary_amount": [], "source.iginsure.dbo.type_of_class": [], "source.iginsure.dbo.type_of_placement": [], "source.iginsure.dbo.zone_country": [], "source.iginsure.dbo.zone_territory": [], "source.iginsure.dbo.claim_movement": [], "source.iginsure.dbo.type_of_movement": [], "source.iginsure.dbo.policy_liability": [], "source.iginsure.dbo.type_of_policy_activity": [], "source.iginsure.dbo.type_of_activity_source": [], "source.iginsure.dbo.type_of_insurance": [], "source.iginsure.dbo.type_of_sub_class": [], "source.iginsure.dbo.subdivision": [], "source.iginsure.dbo.contact": [], "source.iginsure.dbo.type_of_profit_centre": [], "source.iginsure.dbo.division": [], "source.iginsure.dbo.claim_section": [], "source.iginsure.dbo.inward_claim": [], "source.iginsure.dbo.account": [], "source.iginsure.dbo.type_of_accounting_element": [], "source.iginsure.dbo.type_of_debit_credit": [], "source.iginsure.dbo.journal_activity": [], "source.iginsure.dbo.journal_pair": [], "source.iginsure.dbo.journal_line_item": [], "source.iginsure.dbo.journal_template": [], "source.iginsure.dbo.type_of_premium_payment_warranty": [], "source.iginsure.dbo.sub_division": [], "source.iginsure.dbo.classification": [], "source.iginsure.dbo.entity_matching_journal": [], "source.iginsure.dbo.audit_state_transitions": [], "source.iginsure.dbo.apr_message_instalment": [], "source.iginsure.dbo.type_of_bureau_message": [], "source.iginsure.dbo.market_source": [], "source.iginsure.dbo.type_of_us_classification": [], "source.iginsure.dbo.contact_link": [], "source.iginsure.dbo.sub_class": [], "source.iginsure.dbo.segmentation": [], "source.iginsure.dbo.claim": [], "source.iginsure.dbo.ri_policy": [], "source.iginsure.dbo.ri_activity": [], "source.iginsure.dbo.ri_section": [], "source.iginsure.dbo.ri_section_broker": [], "source.iginsure.dbo.ri_section_broker_security": [], "source.iginsure.dbo.type_of_ri_policy": [], "source.iginsure.dbo.ri_policy_period_prop": [], "source.iginsure.dbo.ri_policy_period": [], "source.iginsure.dbo.type_of_fronting": [], "source.iginsure.dbo.type_of_event": [], "source.iginsure.dbo.type_of_event_type": [], "source.iginsure.dbo.type_of_rag": [], "source.iginsure.dbo.type_of_loss": [], "source.iginsure.dbo.type_of_pricing": [], "source.iginsure.dbo.type_of_pricing_time": [], "source.iginsure.dbo.version_audit_trail": [], "source.iginsure.dbo.security_users": [], "source.iginsure.dbo.actuarial_all_core": [], "source.iginsure.dbo.actuarial_all_core_historical": [], "source.iginsure.dbo.actuarial_claims_data": [], "source.iginsure.dbo.actuarial_earned_premium": [], "source.iginsure.dbo.Type_Of_Product_Group": [], "source.iginsure.dbo.ZONE_MAJOR_TERRITORY": [], "source.iginsure.dbo.Policy_Reinsurance_Profile": [], "source.iginsure.dbo.Currency_Roe_History": [], "source.iginsure.dbo.type_of_policy_line": [], "source.iginsure.dbo.type_of_ri_class": [], "source.iginsure.iris.IRIS_INW_GWP_Movemnets": []}, "child_map": {"model.iginsure.dmn_activity_date_ranges": ["model.iginsure.premium_data"], "model.iginsure.dmn_claim": ["model.iginsure.pricing", "model.iginsure.provisioned_cmr"], "model.iginsure.dmn_claim_amounts": ["model.iginsure.provisioned_cmr"], "model.iginsure.dmn_claim_section": [], "model.iginsure.dmn_iris_mvmts": ["model.iginsure.premium_data"], "model.iginsure.dmn_journal_pairs": [], "model.iginsure.dmn_master_declaration_attributes": ["model.iginsure.dmn_policy"], "model.iginsure.dmn_policy": ["model.iginsure.dmn_claim_amounts", "model.iginsure.dmn_policy_part"], "model.iginsure.dmn_policy_account_periods": [], "model.iginsure.dmn_policy_liability": [], "model.iginsure.dmn_policy_part": ["model.iginsure.dim_Product_Subclass_Segmentation", "model.iginsure.dim_producing_office", "model.iginsure.dim_sub_class_segmentaion", "model.iginsure.dmn_activity_date_ranges", "model.iginsure.dmn_policy_account_periods", "model.iginsure.premium_data", "model.iginsure.pricing", "model.iginsure.provisioned_cmr"], "model.iginsure.dmn_product": [], "model.iginsure.dmn_ri_policy_part": ["model.iginsure.premium_data"], "model.iginsure.dmn_uwy_audit": [], "model.iginsure.provisioned_cmr": [], "model.iginsure.dim_iw_ow_flag": [], "model.iginsure.dim_producing_office": [], "model.iginsure.dim_product": [], "model.iginsure.dim_Product_Subclass_Segmentation": [], "model.iginsure.dim_region": [], "model.iginsure.dim_subdivision": [], "model.iginsure.dim_sub_class_segmentaion": [], "model.iginsure.premium_data": ["model.iginsure.dim_iw_ow_flag"], "model.iginsure.pricing": [], "model.iginsure.actuarial_all_core_filtered": ["model.iginsure.actuarial_claim_movement_load", "model.iginsure.actuarial_earned_premium_load", "model.iginsure.actuarial_policy_load"], "model.iginsure.actuarial_claim_movement_clean_nb100": ["model.iginsure.actuarial_claim_movement_clean_nb110", "test.iginsure.is_data_type_actuarial_claim_movement_clean_nb100_amount_type__varchar.a6d2443b06", "test.iginsure.is_data_type_actuarial_claim_movement_clean_nb100_claim_desc__varchar.b2c86601cc", "test.iginsure.is_data_type_actuarial_claim_movement_clean_nb100_claim_loss_date_claims_made_dev_dur_q__int.14e20f88e0", "test.iginsure.is_data_type_actuarial_claim_movement_clean_nb100_claim_loss_date_claims_made_yq__int.0023848cc3", "test.iginsure.is_data_type_actuarial_claim_movement_clean_nb100_claim_loss_date_dev_dur_q__int.d190bb512f", "test.iginsure.is_data_type_actuarial_claim_movement_clean_nb100_claim_loss_date_yq__int.35b9e37060", "test.iginsure.is_data_type_actuarial_claim_movement_clean_nb100_claim_reporting_date_dev_dur_q__int.1e213b5b64", "test.iginsure.is_data_type_actuarial_claim_movement_clean_nb100_claim_reporting_date_yq__int.521c6a3b1e", "test.iginsure.is_data_type_actuarial_claim_movement_clean_nb100_current_amount_usd__float.d85d4f1830", "test.iginsure.is_data_type_actuarial_claim_movement_clean_nb100_event_code__varchar.acc2e80da9", "test.iginsure.is_data_type_actuarial_claim_movement_clean_nb100_event_desc__varchar.d33cdc7dcb", "test.iginsure.is_data_type_actuarial_claim_movement_clean_nb100_event_type__varchar.e1c488b54f", "test.iginsure.is_data_type_actuarial_claim_movement_clean_nb100_fx_rate_ccy_per_usd__float.68f1ba60fa", "test.iginsure.is_data_type_actuarial_claim_movement_clean_nb100_historical_amount_usd__float.d5a0faca9b", "test.iginsure.is_data_type_actuarial_claim_movement_clean_nb100_is_cat__bit.a7a0d278b6", "test.iginsure.is_data_type_actuarial_claim_movement_clean_nb100_is_nat_cat__bit.b0a7197dda", "test.iginsure.is_data_type_actuarial_claim_movement_clean_nb100_loss_date__date.ac43865eec", "test.iginsure.is_data_type_actuarial_claim_movement_clean_nb100_loss_date_claims_made__date.30a8d2be8c", "test.iginsure.is_data_type_actuarial_claim_movement_clean_nb100_movement_date__date.87b155711f", "test.iginsure.is_data_type_actuarial_claim_movement_clean_nb100_org_ccy_code__varchar.62f3c16590", "test.iginsure.is_data_type_actuarial_claim_movement_clean_nb100_original_amount_ccy__float.ae59b8b839", "test.iginsure.is_data_type_actuarial_claim_movement_clean_nb100_policy_inception_date_dev_dur_q__int.c810075eba", "test.iginsure.is_data_type_actuarial_claim_movement_clean_nb100_policy_inception_date_yq__int.9b3a651b30", "test.iginsure.is_data_type_actuarial_claim_movement_clean_nb100_reinsurance_type__varchar.7c6fb1cd4f", "test.iginsure.is_data_type_actuarial_claim_movement_clean_nb100_reported_date__date.c9712e6ed2", "test.iginsure.is_greater_than_or_equal_to_actuarial_claim_movement_clean_nb100_event_limit_100_usd__0_0.79744f839e", "test.iginsure.is_greater_than_or_equal_to_actuarial_claim_movement_clean_nb100_expiry_date___20000101_.3932473cd1", "test.iginsure.is_greater_than_or_equal_to_actuarial_claim_movement_clean_nb100_inception_date___20000101_.a474a80f0a", "test.iginsure.is_greater_than_or_equal_to_actuarial_claim_movement_clean_nb100_pml_100_usd__0_0.e340e27014", "test.iginsure.is_greater_than_or_equal_to_actuarial_claim_movement_clean_nb100_pml_share_usd__0_0.8ab689eae7", "test.iginsure.is_greater_than_or_equal_to_actuarial_claim_movement_clean_nb100_tiv_100_usd__0_0.b01b3c1163", "test.iginsure.is_greater_than_or_equal_to_actuarial_claim_movement_clean_nb100_tiv_share_usd__0_0.fb07ef50d4", "test.iginsure.is_greater_than_or_equal_to_actuarial_claim_movement_clean_nb100_tiv_usd__0_0.7eae16bd17", "test.iginsure.is_greater_than_or_equal_to_actuarial_claim_movement_clean_nb100_working_line_pct__0_0.aed761018f", "test.iginsure.is_greater_than_or_equal_to_actuarial_claim_movement_clean_nb100_written_date___20000101_.861a109f45", "test.iginsure.is_less_than_or_equal_to_actuarial_claim_movement_clean_nb100_working_line_pct__100_0.f3de330a93"], "model.iginsure.actuarial_claim_movement_clean_nb110": ["model.iginsure.actuarial_claim_movement_gre_filtered", "model.iginsure.actuarial_claim_movement_nre_filtered", "test.iginsure.accepted_values_actuarial_claim_movement_clean_nb110_amount_type__OS__Paid.41264baef0", "test.iginsure.accepted_values_actuarial_claim_movement_clean_nb110_reinsurance_type__XOL__QS__FAC__Gross.4c04d1a50f"], "model.iginsure.actuarial_claim_movement_gre_agg_movement_date": ["model.iginsure.actuarial_claim_movement_gre_agg_movement_duration"], "model.iginsure.actuarial_claim_movement_gre_agg_movement_duration": ["test.iginsure.is_greater_than_or_equal_to_actuarial_claim_movement_gre_agg_movement_duration_dur_inception_to_movement__0.9b267d3001", "test.iginsure.not_null_actuarial_claim_movement_gre_agg_movement_duration_current_amount_usd_sum.a5bb4e4c0d", "test.iginsure.not_null_actuarial_claim_movement_gre_agg_movement_duration_dur_inception_to_loss.dee7878a77", "test.iginsure.not_null_actuarial_claim_movement_gre_agg_movement_duration_dur_inception_to_loss_claims_made.c532fac9f8", "test.iginsure.not_null_actuarial_claim_movement_gre_agg_movement_duration_dur_inception_to_movement.a6cc232fda", "test.iginsure.not_null_actuarial_claim_movement_gre_agg_movement_duration_dur_loss_claims_made_to_reported.13ae7be5ab", "test.iginsure.not_null_actuarial_claim_movement_gre_agg_movement_duration_dur_loss_to_reported.b98d184fa2", "test.iginsure.not_null_actuarial_claim_movement_gre_agg_movement_duration_historical_amount_usd_sum.ff7953a709", "test.iginsure.table_contains_resevol_required_columns_actuarial_claim_movement_gre_agg_movement_duration_.0c4f872cbe"], "model.iginsure.actuarial_claim_movement_gre_agg_policy": [], "model.iginsure.actuarial_claim_movement_gre_filtered": ["model.iginsure.actuarial_claim_movement_gre_agg_movement_date", "model.iginsure.actuarial_claim_movement_gre_agg_policy"], "model.iginsure.actuarial_claim_movement_load": ["model.iginsure.actuarial_claim_movement_clean_nb100", "test.iginsure.not_null_actuarial_claim_movement_load_amount_type.cc83f3c7bc", "test.iginsure.not_null_actuarial_claim_movement_load_claim_id.37b5598fc4", "test.iginsure.not_null_actuarial_claim_movement_load_movement_date.5e6015b680", "test.iginsure.not_null_actuarial_claim_movement_load_org_ccy_code.d9f72091a8", "test.iginsure.not_null_actuarial_claim_movement_load_policy_id.0b224c8051", "test.iginsure.not_null_actuarial_claim_movement_load_reinsurance_type.c8597e907a", "test.iginsure.unique_actuarial_claim_movement_load__policy_id_claim_id_convert_varchar_movement_date_reinsurance_type_amount_type_org_ccy_code_.dbdec7795a"], "model.iginsure.actuarial_claim_movement_nre_agg_movement_date": ["model.iginsure.actuarial_claim_movement_nre_agg_movement_duration"], "model.iginsure.actuarial_claim_movement_nre_agg_movement_duration": ["test.iginsure.is_greater_than_or_equal_to_actuarial_claim_movement_nre_agg_movement_duration_dur_inception_to_movement__0.15594da3a2", "test.iginsure.not_null_actuarial_claim_movement_nre_agg_movement_duration_current_amount_usd_sum.6e8dc4a8c0", "test.iginsure.not_null_actuarial_claim_movement_nre_agg_movement_duration_dur_inception_to_loss.04e0e879e0", "test.iginsure.not_null_actuarial_claim_movement_nre_agg_movement_duration_dur_inception_to_loss_claims_made.5d59d313a3", "test.iginsure.not_null_actuarial_claim_movement_nre_agg_movement_duration_dur_inception_to_movement.9a7d9b4515", "test.iginsure.not_null_actuarial_claim_movement_nre_agg_movement_duration_dur_loss_claims_made_to_reported.31905ba313", "test.iginsure.not_null_actuarial_claim_movement_nre_agg_movement_duration_dur_loss_to_reported.511320386a", "test.iginsure.not_null_actuarial_claim_movement_nre_agg_movement_duration_historical_amount_usd_sum.98c780fe7b", "test.iginsure.table_contains_resevol_required_columns_actuarial_claim_movement_nre_agg_movement_duration_.47cf34c92b"], "model.iginsure.actuarial_claim_movement_nre_agg_policy": [], "model.iginsure.actuarial_claim_movement_nre_filtered": ["model.iginsure.actuarial_claim_movement_nre_agg_movement_date", "model.iginsure.actuarial_claim_movement_nre_agg_policy"], "model.iginsure.actuarial_earned_premium_clean_nb100": ["model.iginsure.actuarial_earned_premium_clean_nb110", "test.iginsure.is_data_type_actuarial_earned_premium_clean_nb100_allocated_xol_cost__float.eabb116cd5", "test.iginsure.is_data_type_actuarial_earned_premium_clean_nb100_fac_acquisition__float.1fc4956bcc", "test.iginsure.is_data_type_actuarial_earned_premium_clean_nb100_fac_premium__float.e2eb35db77", "test.iginsure.is_data_type_actuarial_earned_premium_clean_nb100_gross_earned_premium__float.fcee4ffb07", "test.iginsure.is_data_type_actuarial_earned_premium_clean_nb100_inward_acquisition_cost__float.0f8c3bb208", "test.iginsure.is_data_type_actuarial_earned_premium_clean_nb100_quota_share_acquisition__float.a301bcec81", "test.iginsure.is_data_type_actuarial_earned_premium_clean_nb100_quota_share_premium__float.8c72bb6def"], "model.iginsure.actuarial_earned_premium_clean_nb110": [], "model.iginsure.actuarial_earned_premium_load": ["model.iginsure.actuarial_earned_premium_clean_nb100", "test.iginsure.not_null_actuarial_earned_premium_load_policy_id.8594d4add9"], "model.iginsure.actuarial_policy_clean_nb100": ["model.iginsure.actuarial_claim_movement_clean_nb110", "model.iginsure.actuarial_policy_clean_nb110", "test.iginsure.is_data_type_actuarial_policy_clean_nb100_account_period__int.f1d12dfce9", "test.iginsure.is_data_type_actuarial_policy_clean_nb100_activity__varchar.419951a03a", "test.iginsure.is_data_type_actuarial_policy_clean_nb100_activity_status__varchar.699d86cb70", "test.iginsure.is_data_type_actuarial_policy_clean_nb100_cancellation_date__datetime.e06090eb62", "test.iginsure.is_data_type_actuarial_policy_clean_nb100_cancellation_type__varchar.e422c6595b", "test.iginsure.is_data_type_actuarial_policy_clean_nb100_class__varchar.51ad3fdfdb", "test.iginsure.is_data_type_actuarial_policy_clean_nb100_coverage__varchar.52e6939173", "test.iginsure.is_data_type_actuarial_policy_clean_nb100_coverage_code__varchar.7d84cd5a4d", "test.iginsure.is_data_type_actuarial_policy_clean_nb100_domicile_country__varchar.10ce92ccde", "test.iginsure.is_data_type_actuarial_policy_clean_nb100_event_limit_100_usd__float.68dd4de27f", "test.iginsure.is_data_type_actuarial_policy_clean_nb100_expiry_date__datetime.1285633c13", "test.iginsure.is_data_type_actuarial_policy_clean_nb100_gross_written_share__float.918d905f5c", "test.iginsure.is_data_type_actuarial_policy_clean_nb100_inception_date__datetime.d158314561", "test.iginsure.is_data_type_actuarial_policy_clean_nb100_insured__varchar.0ebaa36faa", "test.iginsure.is_data_type_actuarial_policy_clean_nb100_is_claims_made__bit.eddad831b6", "test.iginsure.is_data_type_actuarial_policy_clean_nb100_is_direct__bit.bdab8c45a7", "test.iginsure.is_data_type_actuarial_policy_clean_nb100_is_renewal__bit.0e68b03635", "test.iginsure.is_data_type_actuarial_policy_clean_nb100_lloyds_risk_code__varchar.4cd2bf521f", "test.iginsure.is_data_type_actuarial_policy_clean_nb100_mis_uw_year__date.2a9c5b6f86", "test.iginsure.is_data_type_actuarial_policy_clean_nb100_placing_code__varchar.7f645c5a8f", "test.iginsure.is_data_type_actuarial_policy_clean_nb100_placing_method__varchar.f9910daf4b", "test.iginsure.is_data_type_actuarial_policy_clean_nb100_pml_100_usd__float.baa87045a3", "test.iginsure.is_data_type_actuarial_policy_clean_nb100_pml_share_usd__float.891da5a110", "test.iginsure.is_data_type_actuarial_policy_clean_nb100_policy_status__varchar.e9e2e4cffe", "test.iginsure.is_data_type_actuarial_policy_clean_nb100_reassured__varchar.57e6506f01", "test.iginsure.is_data_type_actuarial_policy_clean_nb100_region__varchar.ec8ded7797", "test.iginsure.is_data_type_actuarial_policy_clean_nb100_reserving_class_1__varchar.20fd1c1dfc", "test.iginsure.is_data_type_actuarial_policy_clean_nb100_reserving_class_2__varchar.9e1db6eeb4", "test.iginsure.is_data_type_actuarial_policy_clean_nb100_reserving_class_3__varchar.40da7dd223", "test.iginsure.is_data_type_actuarial_policy_clean_nb100_reserving_class_xol_allocation__varchar.702455018c", "test.iginsure.is_data_type_actuarial_policy_clean_nb100_sub_class__varchar.fe38050f11", "test.iginsure.is_data_type_actuarial_policy_clean_nb100_territory__varchar.f2926b4a91", "test.iginsure.is_data_type_actuarial_policy_clean_nb100_tiv_100_usd__float.fea59393ff", "test.iginsure.is_data_type_actuarial_policy_clean_nb100_tiv_share_usd__float.d228730228", "test.iginsure.is_data_type_actuarial_policy_clean_nb100_tiv_usd__float.2da3ade511", "test.iginsure.is_data_type_actuarial_policy_clean_nb100_uw_year__int.371e835324", "test.iginsure.is_data_type_actuarial_policy_clean_nb100_working_line_pct__float.8f80c8e1c2", "test.iginsure.is_data_type_actuarial_policy_clean_nb100_written_date__datetime.c68b533b8a"], "model.iginsure.actuarial_policy_clean_nb110": ["test.iginsure.actuarial_policy_single_account_period", "test.iginsure.actuarial_policy_single_account_period"], "model.iginsure.actuarial_policy_load": ["model.iginsure.actuarial_policy_clean_nb100", "test.iginsure.not_null_actuarial_policy_load_policy_id.31fa24fa01", "test.iginsure.unique_actuarial_policy_load_policy_id.8ac885026e"], "model.iginsure.scd_account": ["model.iginsure.stg_journal_line_items"], "model.iginsure.scd_account_period": ["model.iginsure.dmn_claim", "model.iginsure.stg_account_period", "model.iginsure.stg_auth_mvmt_pending_financial", "model.iginsure.stg_claim_dates", "model.iginsure.stg_current_account_period", "model.iginsure.stg_inception", "model.iginsure.stg_inward_claims_amounts", "model.iginsure.stg_outward_claims_amounts"], "model.iginsure.scd_apr": ["model.iginsure.stg_apr", "model.iginsure.stg_inception"], "model.iginsure.scd_apr_message_instalment": [], "model.iginsure.scd_auditcolumns": ["model.iginsure.dmn_uwy_audit", "model.iginsure.stg_cancellation_reason_history", "model.iginsure.stg_contra_expiry_history", "model.iginsure.stg_inception"], "model.iginsure.scd_auditheader": ["model.iginsure.dmn_uwy_audit", "model.iginsure.stg_cancellation_reason_history", "model.iginsure.stg_contra_expiry_history", "model.iginsure.stg_inception"], "model.iginsure.scd_auditrows": ["model.iginsure.dmn_uwy_audit", "model.iginsure.stg_cancellation_reason_history", "model.iginsure.stg_contra_expiry_history", "model.iginsure.stg_inception"], "model.iginsure.scd_audit_state_transitions": ["model.iginsure.stg_account_periods_closing", "model.iginsure.stg_activity_audit_state_transitions", "model.iginsure.stg_apr", "model.iginsure.stg_claim_mvmt_audit_state_transitions", "model.iginsure.stg_inception"], "model.iginsure.scd_claim": ["model.iginsure.dmn_claim", "model.iginsure.stg_claim_movement", "model.iginsure.stg_claimgroup_linkedclaims", "model.iginsure.stg_inward_claims_amounts", "model.iginsure.stg_outward_claims_amounts"], "model.iginsure.scd_claimgrouplinkedclaims": ["model.iginsure.stg_claimgroup_linkedclaims"], "model.iginsure.scd_claim_movement": ["model.iginsure.dmn_claim", "model.iginsure.stg_auth_mvmt_pending_financial", "model.iginsure.stg_claim_dates", "model.iginsure.stg_claim_movement", "model.iginsure.stg_inward_claims_amounts", "model.iginsure.stg_outward_claims_amounts"], "model.iginsure.scd_claim_section": ["model.iginsure.dmn_claim", "model.iginsure.dmn_claim_section", "model.iginsure.stg_claim_dates", "model.iginsure.stg_inward_claims_amounts", "model.iginsure.stg_outward_claims_amounts"], "model.iginsure.scd_classification": ["model.iginsure.dmn_policy_part"], "model.iginsure.scd_contact": ["model.iginsure.stg_contact"], "model.iginsure.scd_contact_link": ["model.iginsure.stg_broker_group"], "model.iginsure.scd_currency": ["model.iginsure.dmn_claim", "model.iginsure.stg_apr", "model.iginsure.stg_claim_dates", "model.iginsure.stg_inward_claims_amounts", "model.iginsure.stg_journal_line_items", "model.iginsure.stg_outward_claims_amounts"], "model.iginsure.scd_currency_roe_history": ["model.iginsure.stg_current_exchange_rate"], "model.iginsure.scd_division": ["model.iginsure.stg_division"], "model.iginsure.scd_entity_instance_states": ["model.iginsure.stg_entity_instance_states"], "model.iginsure.scd_entity_matching_journal": ["model.iginsure.stg_apr"], "model.iginsure.scd_entity_state_members": ["model.iginsure.stg_entity_instance_states"], "model.iginsure.scd_entity_type": ["model.iginsure.stg_entity_instance_states", "model.iginsure.stg_journal_activities", "model.iginsure.stg_journal_pairs"], "model.iginsure.scd_journal_activity": ["model.iginsure.stg_journal_activities"], "model.iginsure.scd_journal_line_item": ["model.iginsure.stg_journal_line_items"], "model.iginsure.scd_journal_pair": ["model.iginsure.stg_journal_pairs"], "model.iginsure.scd_journal_template": ["model.iginsure.stg_journal_activities"], "model.iginsure.scd_market_source": [], "model.iginsure.scd_policy": ["model.iginsure.dmn_master_declaration_attributes", "model.iginsure.dmn_policy", "model.iginsure.stg_inception"], "model.iginsure.scd_policy_activity": ["model.iginsure.dmn_master_declaration_attributes", "model.iginsure.dmn_policy_part", "model.iginsure.dmn_uwy_audit", "model.iginsure.stg_cancellation_reason_history", "model.iginsure.stg_claim_movement", "model.iginsure.stg_contra_expiry_history", "model.iginsure.stg_inception", "model.iginsure.stg_latest_activity_per_policy", "model.iginsure.stg_latest_activity_per_renewal_policy"], "model.iginsure.scd_policy_liability": ["model.iginsure.dmn_policy_liability", "model.iginsure.stg_coverage"], "model.iginsure.scd_policy_line": ["model.iginsure.dmn_master_declaration_attributes", "model.iginsure.dmn_policy_part", "model.iginsure.dmn_uwy_audit", "model.iginsure.stg_inception", "model.iginsure.stg_latest_activity_per_renewal_policy"], "model.iginsure.scd_policy_reinsurance_profile": [], "model.iginsure.scd_policy_section": ["model.iginsure.dmn_policy_part"], "model.iginsure.scd_product": ["model.iginsure.stg_product"], "model.iginsure.scd_ri_activity": ["model.iginsure.dmn_ri_policy_part"], "model.iginsure.scd_ri_policy": ["model.iginsure.dmn_ri_policy_part", "model.iginsure.stg_outward_claims_amounts"], "model.iginsure.scd_ri_policy_period": ["model.iginsure.stg_outward_claims_amounts"], "model.iginsure.scd_ri_policy_period_prop": ["model.iginsure.stg_outward_claims_amounts"], "model.iginsure.scd_ri_section": ["model.iginsure.dmn_ri_policy_part"], "model.iginsure.scd_ri_section_broker": ["model.iginsure.dmn_ri_policy_part"], "model.iginsure.scd_ri_section_broker_security": ["model.iginsure.dmn_ri_policy_part"], "model.iginsure.scd_sub_class": ["model.iginsure.dmn_policy_part"], "model.iginsure.scd_sub_division": ["model.iginsure.stg_subdivision"], "model.iginsure.scd_type_of_accounting_element": ["model.iginsure.stg_journal_line_items"], "model.iginsure.scd_type_of_activity_source": ["model.iginsure.dmn_policy_part"], "model.iginsure.scd_type_of_bureau_message": [], "model.iginsure.scd_type_of_class": ["model.iginsure.dmn_policy_part"], "model.iginsure.scd_type_of_debit_credit": ["model.iginsure.stg_journal_line_items"], "model.iginsure.scd_type_of_event": ["model.iginsure.dmn_claim"], "model.iginsure.scd_type_of_event_type": ["model.iginsure.dmn_claim"], "model.iginsure.scd_type_of_fronting": ["model.iginsure.dmn_ri_policy_part"], "model.iginsure.scd_type_of_insurance": ["model.iginsure.dmn_policy_part"], "model.iginsure.scd_type_of_loss": ["model.iginsure.dmn_claim"], "model.iginsure.scd_type_of_monetary_amount": ["model.iginsure.stg_type_of_monetary_amount"], "model.iginsure.scd_type_of_movement": [], "model.iginsure.scd_type_of_placement": ["model.iginsure.dmn_master_declaration_attributes", "model.iginsure.dmn_policy_part"], "model.iginsure.scd_type_of_policy_activity": ["model.iginsure.dmn_policy_part"], "model.iginsure.scd_type_of_policy_line": ["model.iginsure.dmn_policy_part"], "model.iginsure.scd_type_of_premium_payment_warranty": [], "model.iginsure.scd_type_of_pricing": ["model.iginsure.dmn_policy_part"], "model.iginsure.scd_type_of_pricing_time": ["model.iginsure.dmn_policy_part"], "model.iginsure.scd_type_of_product_group": [], "model.iginsure.scd_type_of_profit_centre": ["model.iginsure.stg_type_of_profit_centre"], "model.iginsure.scd_type_of_rag": ["model.iginsure.dmn_claim"], "model.iginsure.scd_type_of_ri_class": ["model.iginsure.dmn_ri_policy_part"], "model.iginsure.scd_type_of_ri_policy": ["model.iginsure.dmn_ri_policy_part"], "model.iginsure.scd_type_of_sub_class": ["model.iginsure.stg_coverage"], "model.iginsure.scd_type_of_us_classification": [], "model.iginsure.scd_version_audit_trail": ["model.iginsure.dmn_policy_part", "model.iginsure.stg_written_account_period"], "model.iginsure.scd_zone_country": ["model.iginsure.dmn_claim", "model.iginsure.stg_country_territory"], "model.iginsure.scd_zone_major_territory": [], "model.iginsure.scd_zone_territory": ["model.iginsure.stg_country_territory"], "model.iginsure.stg_account_period": ["model.iginsure.dmn_policy_account_periods", "model.iginsure.dmn_policy_part", "model.iginsure.stg_account_periods_closing", "model.iginsure.stg_apr", "model.iginsure.stg_journal_pairs"], "model.iginsure.stg_account_periods_closing": ["model.iginsure.dmn_policy_part", "model.iginsure.stg_cancellation_reason_history", "model.iginsure.stg_written_account_period"], "model.iginsure.stg_activity_audit_state_transitions": ["model.iginsure.dmn_policy_part", "model.iginsure.stg_written_account_period"], "model.iginsure.stg_apr": ["model.iginsure.premium_data", "model.iginsure.pricing", "model.iginsure.stg_auth_mvmt_pending_financial"], "model.iginsure.stg_auth_mvmt_pending_financial": ["model.iginsure.stg_inward_claims_amounts"], "model.iginsure.stg_broker_group": ["model.iginsure.dmn_policy_part", "model.iginsure.dmn_ri_policy_part"], "model.iginsure.stg_business_plan": [], "model.iginsure.stg_cancellation_reason_history": ["model.iginsure.dmn_policy_part"], "model.iginsure.stg_claimgroup_linkedclaims": ["model.iginsure.dmn_claim"], "model.iginsure.stg_claim_dates": ["model.iginsure.dmn_claim"], "model.iginsure.stg_claim_movement": ["model.iginsure.premium_data"], "model.iginsure.stg_claim_mvmt_audit_state_transitions": ["model.iginsure.stg_inward_claims_amounts", "model.iginsure.stg_outward_claims_amounts"], "model.iginsure.stg_contact": ["model.iginsure.dmn_claim", "model.iginsure.dmn_policy_part", "model.iginsure.dmn_ri_policy_part", "model.iginsure.stg_broker_group"], "model.iginsure.stg_contra_expiry_history": ["model.iginsure.dmn_policy_part"], "model.iginsure.stg_country_territory": ["model.iginsure.dim_region", "model.iginsure.dmn_policy_part"], "model.iginsure.stg_coverage": ["model.iginsure.dmn_policy_part"], "model.iginsure.stg_current_account_period": ["model.iginsure.provisioned_cmr", "model.iginsure.stg_auth_mvmt_pending_financial", "model.iginsure.stg_claim_dates", "model.iginsure.stg_inward_claims_amounts", "model.iginsure.stg_outward_claims_amounts"], "model.iginsure.stg_current_exchange_rate": ["model.iginsure.stg_inward_claims_amounts", "model.iginsure.stg_outward_claims_amounts"], "model.iginsure.stg_division": ["model.iginsure.dmn_policy_part", "model.iginsure.stg_journal_pairs"], "model.iginsure.stg_entity_instance_states": ["model.iginsure.dmn_claim", "model.iginsure.dmn_policy_part", "model.iginsure.dmn_ri_policy_part", "model.iginsure.stg_apr", "model.iginsure.stg_auth_mvmt_pending_financial", "model.iginsure.stg_claim_dates", "model.iginsure.stg_inward_claims_amounts", "model.iginsure.stg_outward_claims_amounts"], "model.iginsure.stg_inception": ["model.iginsure.dmn_policy_part"], "model.iginsure.stg_inward_claims_amounts": ["model.iginsure.dmn_claim_amounts"], "model.iginsure.stg_journal_activities": ["model.iginsure.dmn_journal_pairs"], "model.iginsure.stg_journal_line_items": ["model.iginsure.dmn_journal_pairs"], "model.iginsure.stg_journal_pairs": ["model.iginsure.dmn_journal_pairs", "model.iginsure.stg_auth_mvmt_pending_financial"], "model.iginsure.stg_latest_activity_per_policy": ["model.iginsure.pricing"], "model.iginsure.stg_latest_activity_per_renewal_policy": ["model.iginsure.pricing"], "model.iginsure.stg_outward_claims_amounts": ["model.iginsure.dmn_claim_amounts"], "model.iginsure.stg_product": ["model.iginsure.dim_product", "model.iginsure.dmn_policy_part", "model.iginsure.dmn_product"], "model.iginsure.stg_subdivision": ["model.iginsure.dim_subdivision", "model.iginsure.dmn_policy_part", "model.iginsure.stg_journal_pairs"], "model.iginsure.stg_time_series": [], "model.iginsure.stg_type_of_monetary_amount": ["model.iginsure.stg_apr"], "model.iginsure.stg_type_of_profit_centre": ["model.iginsure.dmn_policy_part"], "model.iginsure.stg_written_account_period": ["model.iginsure.stg_inception"], "test.iginsure.actuarial_policy_single_account_period": [], "seed.iginsure.business_plan": ["model.iginsure.stg_business_plan"], "test.iginsure.not_null_actuarial_claim_movement_load_policy_id.0b224c8051": [], "test.iginsure.not_null_actuarial_claim_movement_load_claim_id.37b5598fc4": [], "test.iginsure.not_null_actuarial_claim_movement_load_movement_date.5e6015b680": [], "test.iginsure.not_null_actuarial_claim_movement_load_reinsurance_type.c8597e907a": [], "test.iginsure.not_null_actuarial_claim_movement_load_org_ccy_code.d9f72091a8": [], "test.iginsure.not_null_actuarial_claim_movement_load_amount_type.cc83f3c7bc": [], "test.iginsure.unique_actuarial_claim_movement_load__policy_id_claim_id_convert_varchar_movement_date_reinsurance_type_amount_type_org_ccy_code_.dbdec7795a": [], "test.iginsure.unique_actuarial_policy_load_policy_id.8ac885026e": [], "test.iginsure.not_null_actuarial_policy_load_policy_id.31fa24fa01": [], "test.iginsure.not_null_actuarial_earned_premium_load_policy_id.8594d4add9": [], "test.iginsure.is_data_type_actuarial_policy_clean_nb100_uw_year__int.371e835324": [], "test.iginsure.is_data_type_actuarial_policy_clean_nb100_mis_uw_year__date.2a9c5b6f86": [], "test.iginsure.is_data_type_actuarial_policy_clean_nb100_class__varchar.51ad3fdfdb": [], "test.iginsure.is_data_type_actuarial_policy_clean_nb100_sub_class__varchar.fe38050f11": [], "test.iginsure.is_data_type_actuarial_policy_clean_nb100_coverage__varchar.52e6939173": [], "test.iginsure.is_data_type_actuarial_policy_clean_nb100_coverage_code__varchar.7d84cd5a4d": [], "test.iginsure.is_data_type_actuarial_policy_clean_nb100_lloyds_risk_code__varchar.4cd2bf521f": [], "test.iginsure.is_data_type_actuarial_policy_clean_nb100_insured__varchar.0ebaa36faa": [], "test.iginsure.is_data_type_actuarial_policy_clean_nb100_reassured__varchar.57e6506f01": [], "test.iginsure.is_data_type_actuarial_policy_clean_nb100_is_direct__bit.bdab8c45a7": [], "test.iginsure.is_data_type_actuarial_policy_clean_nb100_region__varchar.ec8ded7797": [], "test.iginsure.is_data_type_actuarial_policy_clean_nb100_territory__varchar.f2926b4a91": [], "test.iginsure.is_data_type_actuarial_policy_clean_nb100_domicile_country__varchar.10ce92ccde": [], "test.iginsure.is_data_type_actuarial_policy_clean_nb100_written_date__datetime.c68b533b8a": [], "test.iginsure.is_data_type_actuarial_policy_clean_nb100_inception_date__datetime.d158314561": [], "test.iginsure.is_data_type_actuarial_policy_clean_nb100_expiry_date__datetime.1285633c13": [], "test.iginsure.is_data_type_actuarial_policy_clean_nb100_cancellation_date__datetime.e06090eb62": [], "test.iginsure.is_data_type_actuarial_policy_clean_nb100_cancellation_type__varchar.e422c6595b": [], "test.iginsure.is_data_type_actuarial_policy_clean_nb100_policy_status__varchar.e9e2e4cffe": [], "test.iginsure.is_data_type_actuarial_policy_clean_nb100_activity__varchar.419951a03a": [], "test.iginsure.is_data_type_actuarial_policy_clean_nb100_is_renewal__bit.0e68b03635": [], "test.iginsure.is_data_type_actuarial_policy_clean_nb100_activity_status__varchar.699d86cb70": [], "test.iginsure.is_data_type_actuarial_policy_clean_nb100_placing_code__varchar.7f645c5a8f": [], "test.iginsure.is_data_type_actuarial_policy_clean_nb100_placing_method__varchar.f9910daf4b": [], "test.iginsure.is_data_type_actuarial_policy_clean_nb100_is_claims_made__bit.eddad831b6": [], "test.iginsure.is_data_type_actuarial_policy_clean_nb100_working_line_pct__float.8f80c8e1c2": [], "test.iginsure.is_data_type_actuarial_policy_clean_nb100_gross_written_share__float.918d905f5c": [], "test.iginsure.is_data_type_actuarial_policy_clean_nb100_reserving_class_1__varchar.20fd1c1dfc": [], "test.iginsure.is_data_type_actuarial_policy_clean_nb100_reserving_class_2__varchar.9e1db6eeb4": [], "test.iginsure.is_data_type_actuarial_policy_clean_nb100_reserving_class_3__varchar.40da7dd223": [], "test.iginsure.is_data_type_actuarial_policy_clean_nb100_reserving_class_xol_allocation__varchar.702455018c": [], "test.iginsure.is_data_type_actuarial_policy_clean_nb100_account_period__int.f1d12dfce9": [], "test.iginsure.is_data_type_actuarial_policy_clean_nb100_tiv_usd__float.2da3ade511": [], "test.iginsure.is_data_type_actuarial_policy_clean_nb100_tiv_share_usd__float.d228730228": [], "test.iginsure.is_data_type_actuarial_policy_clean_nb100_tiv_100_usd__float.fea59393ff": [], "test.iginsure.is_data_type_actuarial_policy_clean_nb100_event_limit_100_usd__float.68dd4de27f": [], "test.iginsure.is_data_type_actuarial_policy_clean_nb100_pml_100_usd__float.baa87045a3": [], "test.iginsure.is_data_type_actuarial_policy_clean_nb100_pml_share_usd__float.891da5a110": [], "test.iginsure.is_data_type_actuarial_earned_premium_clean_nb100_gross_earned_premium__float.fcee4ffb07": [], "test.iginsure.is_data_type_actuarial_earned_premium_clean_nb100_inward_acquisition_cost__float.0f8c3bb208": [], "test.iginsure.is_data_type_actuarial_earned_premium_clean_nb100_quota_share_premium__float.8c72bb6def": [], "test.iginsure.is_data_type_actuarial_earned_premium_clean_nb100_quota_share_acquisition__float.a301bcec81": [], "test.iginsure.is_data_type_actuarial_earned_premium_clean_nb100_fac_premium__float.e2eb35db77": [], "test.iginsure.is_data_type_actuarial_earned_premium_clean_nb100_fac_acquisition__float.1fc4956bcc": [], "test.iginsure.is_data_type_actuarial_earned_premium_clean_nb100_allocated_xol_cost__float.eabb116cd5": [], "test.iginsure.is_data_type_actuarial_claim_movement_clean_nb100_movement_date__date.87b155711f": [], "test.iginsure.is_data_type_actuarial_claim_movement_clean_nb100_reinsurance_type__varchar.7c6fb1cd4f": [], "test.iginsure.is_data_type_actuarial_claim_movement_clean_nb100_loss_date__date.ac43865eec": [], "test.iginsure.is_data_type_actuarial_claim_movement_clean_nb100_loss_date_claims_made__date.30a8d2be8c": [], "test.iginsure.is_data_type_actuarial_claim_movement_clean_nb100_reported_date__date.c9712e6ed2": [], "test.iginsure.is_data_type_actuarial_claim_movement_clean_nb100_event_code__varchar.acc2e80da9": [], "test.iginsure.is_data_type_actuarial_claim_movement_clean_nb100_event_type__varchar.e1c488b54f": [], "test.iginsure.is_data_type_actuarial_claim_movement_clean_nb100_event_desc__varchar.d33cdc7dcb": [], "test.iginsure.is_data_type_actuarial_claim_movement_clean_nb100_claim_desc__varchar.b2c86601cc": [], "test.iginsure.is_data_type_actuarial_claim_movement_clean_nb100_is_cat__bit.a7a0d278b6": [], "test.iginsure.is_data_type_actuarial_claim_movement_clean_nb100_is_nat_cat__bit.b0a7197dda": [], "test.iginsure.is_data_type_actuarial_claim_movement_clean_nb100_org_ccy_code__varchar.62f3c16590": [], "test.iginsure.is_data_type_actuarial_claim_movement_clean_nb100_fx_rate_ccy_per_usd__float.68f1ba60fa": [], "test.iginsure.is_data_type_actuarial_claim_movement_clean_nb100_amount_type__varchar.a6d2443b06": [], "test.iginsure.is_data_type_actuarial_claim_movement_clean_nb100_historical_amount_usd__float.d5a0faca9b": [], "test.iginsure.is_data_type_actuarial_claim_movement_clean_nb100_current_amount_usd__float.d85d4f1830": [], "test.iginsure.is_data_type_actuarial_claim_movement_clean_nb100_original_amount_ccy__float.ae59b8b839": [], "test.iginsure.is_data_type_actuarial_claim_movement_clean_nb100_policy_inception_date_yq__int.9b3a651b30": [], "test.iginsure.is_data_type_actuarial_claim_movement_clean_nb100_claim_reporting_date_yq__int.521c6a3b1e": [], "test.iginsure.is_data_type_actuarial_claim_movement_clean_nb100_claim_loss_date_yq__int.35b9e37060": [], "test.iginsure.is_data_type_actuarial_claim_movement_clean_nb100_claim_loss_date_claims_made_yq__int.0023848cc3": [], "test.iginsure.is_data_type_actuarial_claim_movement_clean_nb100_policy_inception_date_dev_dur_q__int.c810075eba": [], "test.iginsure.is_data_type_actuarial_claim_movement_clean_nb100_claim_reporting_date_dev_dur_q__int.1e213b5b64": [], "test.iginsure.is_data_type_actuarial_claim_movement_clean_nb100_claim_loss_date_dev_dur_q__int.d190bb512f": [], "test.iginsure.is_data_type_actuarial_claim_movement_clean_nb100_claim_loss_date_claims_made_dev_dur_q__int.14e20f88e0": [], "test.iginsure.is_greater_than_or_equal_to_actuarial_claim_movement_clean_nb100_written_date___20000101_.861a109f45": [], "test.iginsure.is_greater_than_or_equal_to_actuarial_claim_movement_clean_nb100_inception_date___20000101_.a474a80f0a": [], "test.iginsure.is_greater_than_or_equal_to_actuarial_claim_movement_clean_nb100_expiry_date___20000101_.3932473cd1": [], "test.iginsure.is_greater_than_or_equal_to_actuarial_claim_movement_clean_nb100_working_line_pct__0_0.aed761018f": [], "test.iginsure.is_less_than_or_equal_to_actuarial_claim_movement_clean_nb100_working_line_pct__100_0.f3de330a93": [], "test.iginsure.is_greater_than_or_equal_to_actuarial_claim_movement_clean_nb100_tiv_usd__0_0.7eae16bd17": [], "test.iginsure.is_greater_than_or_equal_to_actuarial_claim_movement_clean_nb100_tiv_share_usd__0_0.fb07ef50d4": [], "test.iginsure.is_greater_than_or_equal_to_actuarial_claim_movement_clean_nb100_tiv_100_usd__0_0.b01b3c1163": [], "test.iginsure.is_greater_than_or_equal_to_actuarial_claim_movement_clean_nb100_event_limit_100_usd__0_0.79744f839e": [], "test.iginsure.is_greater_than_or_equal_to_actuarial_claim_movement_clean_nb100_pml_100_usd__0_0.e340e27014": [], "test.iginsure.is_greater_than_or_equal_to_actuarial_claim_movement_clean_nb100_pml_share_usd__0_0.8ab689eae7": [], "test.iginsure.accepted_values_actuarial_claim_movement_clean_nb110_reinsurance_type__XOL__QS__FAC__Gross.4c04d1a50f": [], "test.iginsure.accepted_values_actuarial_claim_movement_clean_nb110_amount_type__OS__Paid.41264baef0": [], "test.iginsure.not_null_actuarial_claim_movement_gre_agg_movement_duration_dur_inception_to_movement.a6cc232fda": [], "test.iginsure.is_greater_than_or_equal_to_actuarial_claim_movement_gre_agg_movement_duration_dur_inception_to_movement__0.9b267d3001": [], "test.iginsure.not_null_actuarial_claim_movement_gre_agg_movement_duration_dur_inception_to_loss.dee7878a77": [], "test.iginsure.not_null_actuarial_claim_movement_gre_agg_movement_duration_dur_inception_to_loss_claims_made.c532fac9f8": [], "test.iginsure.not_null_actuarial_claim_movement_gre_agg_movement_duration_dur_loss_to_reported.b98d184fa2": [], "test.iginsure.not_null_actuarial_claim_movement_gre_agg_movement_duration_dur_loss_claims_made_to_reported.13ae7be5ab": [], "test.iginsure.not_null_actuarial_claim_movement_gre_agg_movement_duration_current_amount_usd_sum.a5bb4e4c0d": [], "test.iginsure.not_null_actuarial_claim_movement_gre_agg_movement_duration_historical_amount_usd_sum.ff7953a709": [], "test.iginsure.table_contains_resevol_required_columns_actuarial_claim_movement_gre_agg_movement_duration_.0c4f872cbe": [], "test.iginsure.not_null_actuarial_claim_movement_nre_agg_movement_duration_dur_inception_to_movement.9a7d9b4515": [], "test.iginsure.is_greater_than_or_equal_to_actuarial_claim_movement_nre_agg_movement_duration_dur_inception_to_movement__0.15594da3a2": [], "test.iginsure.not_null_actuarial_claim_movement_nre_agg_movement_duration_dur_inception_to_loss.04e0e879e0": [], "test.iginsure.not_null_actuarial_claim_movement_nre_agg_movement_duration_dur_inception_to_loss_claims_made.5d59d313a3": [], "test.iginsure.not_null_actuarial_claim_movement_nre_agg_movement_duration_dur_loss_to_reported.511320386a": [], "test.iginsure.not_null_actuarial_claim_movement_nre_agg_movement_duration_dur_loss_claims_made_to_reported.31905ba313": [], "test.iginsure.not_null_actuarial_claim_movement_nre_agg_movement_duration_current_amount_usd_sum.6e8dc4a8c0": [], "test.iginsure.not_null_actuarial_claim_movement_nre_agg_movement_duration_historical_amount_usd_sum.98c780fe7b": [], "test.iginsure.table_contains_resevol_required_columns_actuarial_claim_movement_nre_agg_movement_duration_.47cf34c92b": [], "source.iginsure.dbo.budget_testing": [], "source.iginsure.dbo.configurations": [], "source.iginsure.dbo.budget": [], "source.iginsure.dbo.claimgrouplinkedclaims": ["model.iginsure.scd_claimgrouplinkedclaims"], "source.iginsure.dbo.ClaimsASAT": ["model.iginsure.provisioned_cmr"], "source.iginsure.dbo.product": ["model.iginsure.scd_product"], "source.iginsure.dbo.entity_instance_states": ["model.iginsure.scd_entity_instance_states"], "source.iginsure.dbo.auditrows": ["model.iginsure.scd_auditrows"], "source.iginsure.dbo.auditheader": ["model.iginsure.scd_auditheader"], "source.iginsure.dbo.auditcolumns": ["model.iginsure.scd_auditcolumns"], "source.iginsure.dbo.entity_state_members": ["model.iginsure.scd_entity_state_members"], "source.iginsure.dbo.entity_type": ["model.iginsure.scd_entity_type"], "source.iginsure.dbo.policy": ["model.iginsure.scd_policy"], "source.iginsure.dbo.policy_activity": ["model.iginsure.scd_policy_activity"], "source.iginsure.dbo.policy_line": ["model.iginsure.scd_policy_line"], "source.iginsure.dbo.policy_section": ["model.iginsure.scd_policy_section"], "source.iginsure.dbo.apr": ["model.iginsure.scd_apr"], "source.iginsure.dbo.currency": ["model.iginsure.scd_currency"], "source.iginsure.dbo.account_period": ["model.iginsure.scd_account_period"], "source.iginsure.dbo.type_of_monetary_amount": ["model.iginsure.scd_type_of_monetary_amount"], "source.iginsure.dbo.type_of_class": ["model.iginsure.scd_type_of_class"], "source.iginsure.dbo.type_of_placement": ["model.iginsure.scd_type_of_placement"], "source.iginsure.dbo.zone_country": ["model.iginsure.scd_zone_country"], "source.iginsure.dbo.zone_territory": ["model.iginsure.scd_zone_territory"], "source.iginsure.dbo.claim_movement": ["model.iginsure.scd_claim_movement"], "source.iginsure.dbo.type_of_movement": ["model.iginsure.scd_type_of_movement"], "source.iginsure.dbo.policy_liability": ["model.iginsure.scd_policy_liability"], "source.iginsure.dbo.type_of_policy_activity": ["model.iginsure.scd_type_of_policy_activity"], "source.iginsure.dbo.type_of_activity_source": ["model.iginsure.scd_type_of_activity_source"], "source.iginsure.dbo.type_of_insurance": ["model.iginsure.scd_type_of_insurance"], "source.iginsure.dbo.type_of_sub_class": ["model.iginsure.scd_type_of_sub_class"], "source.iginsure.dbo.subdivision": [], "source.iginsure.dbo.contact": ["model.iginsure.scd_contact"], "source.iginsure.dbo.type_of_profit_centre": ["model.iginsure.scd_type_of_profit_centre"], "source.iginsure.dbo.division": ["model.iginsure.scd_division"], "source.iginsure.dbo.claim_section": ["model.iginsure.scd_claim_section"], "source.iginsure.dbo.inward_claim": [], "source.iginsure.dbo.account": ["model.iginsure.scd_account"], "source.iginsure.dbo.type_of_accounting_element": ["model.iginsure.scd_type_of_accounting_element"], "source.iginsure.dbo.type_of_debit_credit": ["model.iginsure.scd_type_of_debit_credit"], "source.iginsure.dbo.journal_activity": ["model.iginsure.scd_journal_activity"], "source.iginsure.dbo.journal_pair": ["model.iginsure.scd_journal_pair"], "source.iginsure.dbo.journal_line_item": ["model.iginsure.scd_journal_line_item"], "source.iginsure.dbo.journal_template": ["model.iginsure.scd_journal_template"], "source.iginsure.dbo.type_of_premium_payment_warranty": ["model.iginsure.scd_type_of_premium_payment_warranty"], "source.iginsure.dbo.sub_division": ["model.iginsure.scd_sub_division"], "source.iginsure.dbo.classification": ["model.iginsure.scd_classification"], "source.iginsure.dbo.entity_matching_journal": ["model.iginsure.scd_entity_matching_journal"], "source.iginsure.dbo.audit_state_transitions": ["model.iginsure.scd_audit_state_transitions"], "source.iginsure.dbo.apr_message_instalment": ["model.iginsure.scd_apr_message_instalment"], "source.iginsure.dbo.type_of_bureau_message": ["model.iginsure.scd_type_of_bureau_message"], "source.iginsure.dbo.market_source": ["model.iginsure.scd_market_source"], "source.iginsure.dbo.type_of_us_classification": ["model.iginsure.scd_type_of_us_classification"], "source.iginsure.dbo.contact_link": ["model.iginsure.scd_contact_link"], "source.iginsure.dbo.sub_class": ["model.iginsure.scd_sub_class"], "source.iginsure.dbo.segmentation": ["model.iginsure.dmn_iris_mvmts", "model.iginsure.dmn_policy_part"], "source.iginsure.dbo.claim": ["model.iginsure.scd_claim"], "source.iginsure.dbo.ri_policy": ["model.iginsure.scd_ri_policy"], "source.iginsure.dbo.ri_activity": ["model.iginsure.scd_ri_activity"], "source.iginsure.dbo.ri_section": ["model.iginsure.scd_ri_section"], "source.iginsure.dbo.ri_section_broker": ["model.iginsure.scd_ri_section_broker"], "source.iginsure.dbo.ri_section_broker_security": ["model.iginsure.scd_ri_section_broker_security"], "source.iginsure.dbo.type_of_ri_policy": ["model.iginsure.scd_type_of_ri_policy"], "source.iginsure.dbo.ri_policy_period_prop": ["model.iginsure.scd_ri_policy_period_prop"], "source.iginsure.dbo.ri_policy_period": ["model.iginsure.scd_ri_policy_period"], "source.iginsure.dbo.type_of_fronting": ["model.iginsure.scd_type_of_fronting"], "source.iginsure.dbo.type_of_event": ["model.iginsure.scd_type_of_event"], "source.iginsure.dbo.type_of_event_type": ["model.iginsure.scd_type_of_event_type"], "source.iginsure.dbo.type_of_rag": ["model.iginsure.scd_type_of_rag"], "source.iginsure.dbo.type_of_loss": ["model.iginsure.scd_type_of_loss"], "source.iginsure.dbo.type_of_pricing": ["model.iginsure.scd_type_of_pricing"], "source.iginsure.dbo.type_of_pricing_time": ["model.iginsure.scd_type_of_pricing_time"], "source.iginsure.dbo.version_audit_trail": ["model.iginsure.scd_version_audit_trail"], "source.iginsure.dbo.security_users": ["model.iginsure.dmn_policy_part"], "source.iginsure.dbo.actuarial_all_core": ["model.iginsure.actuarial_all_core_filtered"], "source.iginsure.dbo.actuarial_all_core_historical": ["model.iginsure.actuarial_all_core_filtered"], "source.iginsure.dbo.actuarial_claims_data": ["model.iginsure.actuarial_claim_movement_load"], "source.iginsure.dbo.actuarial_earned_premium": ["model.iginsure.actuarial_earned_premium_load"], "source.iginsure.dbo.Type_Of_Product_Group": ["model.iginsure.scd_type_of_product_group"], "source.iginsure.dbo.ZONE_MAJOR_TERRITORY": ["model.iginsure.scd_zone_major_territory"], "source.iginsure.dbo.Policy_Reinsurance_Profile": ["model.iginsure.scd_policy_reinsurance_profile"], "source.iginsure.dbo.Currency_Roe_History": ["model.iginsure.scd_currency_roe_history"], "source.iginsure.dbo.type_of_policy_line": ["model.iginsure.scd_type_of_policy_line"], "source.iginsure.dbo.type_of_ri_class": ["model.iginsure.scd_type_of_ri_class"], "source.iginsure.iris.IRIS_INW_GWP_Movemnets": ["model.iginsure.dmn_iris_mvmts"]}}